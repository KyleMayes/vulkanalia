// SPDX-License-Identifier: Apache-2.0

// DO NOT EDIT.
//
// This file has been generated by the Kotlin project in the `generator`
// directory from a Vulkan API registry.

#![allow(
    non_camel_case_types,
    non_snake_case,
    clippy::bad_bit_mask,
    clippy::let_unit_value,
    clippy::missing_safety_doc,
    clippy::missing_transmute_annotations,
    clippy::too_many_arguments,
    clippy::type_complexity,
    clippy::unnecessary_cast,
    clippy::upper_case_acronyms,
    clippy::useless_transmute
)]

use core::ffi::{c_char, c_int, c_void};
use core::fmt;
use core::marker::PhantomData;
use core::ops;
use core::ptr::NonNull;

use super::*;

/// A type that can be used interchangeably with another in FFI.
pub unsafe trait Cast {
    /// The other type this type can be used interchangeably with in FFI.
    type Target;

    /// Converts this value into a value of the other type.
    fn into(self) -> Self::Target;

    /// Converts this reference into a reference to the other type.
    #[inline]
    fn as_ref(&self) -> &Self::Target {
        unsafe { &*(self as *const Self as *const Self::Target) }
    }

    /// Converts this mutable reference into a mutable reference to the other type.
    #[inline]
    fn as_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut *(self as *mut Self as *mut Self::Target) }
    }
}

/// A Vulkan type that has an associated builder.
pub trait HasBuilder<'b> {
    /// The associated builder for this type.
    type Builder: Copy
        + Clone
        + fmt::Debug
        + Default
        + ops::Deref<Target = Self>
        + ops::DerefMut<Target = Self>
        + 'b;

    /// Constructs an instance of the associated builder for this type.
    #[inline]
    fn builder() -> Self::Builder {
        Default::default()
    }
}

/// Adds a base pointer chain with a new non-empty pointer chain.
#[doc(hidden)]
pub fn merge(base: *mut c_void, next: NonNull<BaseOutStructure>) -> *mut c_void {
    if base.is_null() {
        return next.as_ptr().cast();
    }

    // We're expecting the new pointer chain to usually be a single element (or
    // at least shorter in most cases than the base pointer chain). Therefore,
    // we will prefer iterating over the new pointer chain to append the base
    // pointer chain to the new pointer chain rather than the other way around.

    let mut tail = next;
    while let Some(node) = NonNull::new(unsafe { tail.as_ref() }.next) {
        tail = node;
    }

    unsafe { tail.as_mut() }.next = base.cast();

    next.as_ptr().cast()
}

unsafe impl Cast for AabbPositionsKHR {
    type Target = AabbPositionsKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AabbPositionsKHR {
    type Builder = AabbPositionsKHRBuilder;
}

/// A builder for a [`AabbPositionsKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AabbPositionsKHRBuilder {
    value: AabbPositionsKHR,
}

impl AabbPositionsKHRBuilder {
    #[inline]
    pub fn min_x(mut self, min_x: f32) -> Self {
        self.value.min_x = min_x;
        self
    }

    #[inline]
    pub fn min_y(mut self, min_y: f32) -> Self {
        self.value.min_y = min_y;
        self
    }

    #[inline]
    pub fn min_z(mut self, min_z: f32) -> Self {
        self.value.min_z = min_z;
        self
    }

    #[inline]
    pub fn max_x(mut self, max_x: f32) -> Self {
        self.value.max_x = max_x;
        self
    }

    #[inline]
    pub fn max_y(mut self, max_y: f32) -> Self {
        self.value.max_y = max_y;
        self
    }

    #[inline]
    pub fn max_z(mut self, max_z: f32) -> Self {
        self.value.max_z = max_z;
        self
    }

    #[inline]
    pub fn build(self) -> AabbPositionsKHR {
        self.value
    }
}

impl ops::Deref for AabbPositionsKHRBuilder {
    type Target = AabbPositionsKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AabbPositionsKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AabbPositionsKHRBuilder {
    type Target = AabbPositionsKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureBuildGeometryInfoKHR {
    type Target = AccelerationStructureBuildGeometryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AccelerationStructureBuildGeometryInfoKHR {
    type Builder = AccelerationStructureBuildGeometryInfoKHRBuilder<'b>;
}

/// A builder for a [`AccelerationStructureBuildGeometryInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureBuildGeometryInfoKHRBuilder<'b> {
    value: AccelerationStructureBuildGeometryInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AccelerationStructureBuildGeometryInfoKHRBuilder<'b> {
    #[inline]
    pub fn type_(mut self, type_: AccelerationStructureTypeKHR) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: BuildAccelerationStructureFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn mode(mut self, mode: BuildAccelerationStructureModeKHR) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn src_acceleration_structure(
        mut self,
        src_acceleration_structure: AccelerationStructureKHR,
    ) -> Self {
        self.value.src_acceleration_structure = src_acceleration_structure;
        self
    }

    #[inline]
    pub fn dst_acceleration_structure(
        mut self,
        dst_acceleration_structure: AccelerationStructureKHR,
    ) -> Self {
        self.value.dst_acceleration_structure = dst_acceleration_structure;
        self
    }

    #[inline]
    pub fn geometries(
        mut self,
        geometries: &'b [impl Cast<Target = AccelerationStructureGeometryKHR>],
    ) -> Self {
        self.value.geometry_count = geometries.len() as u32;
        self.value.geometries = geometries.as_ptr().cast();
        self
    }

    #[inline]
    pub fn pointer_geometries(
        mut self,
        pointer_geometries: &'b [*const AccelerationStructureGeometryKHR],
    ) -> Self {
        self.value.geometry_count = pointer_geometries.len() as u32;
        self.value.pointer_geometries = pointer_geometries.as_ptr();
        self
    }

    #[inline]
    pub fn scratch_data(mut self, scratch_data: DeviceOrHostAddressKHR) -> Self {
        self.value.scratch_data = scratch_data;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureBuildGeometryInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for AccelerationStructureBuildGeometryInfoKHRBuilder<'b> {
    type Target = AccelerationStructureBuildGeometryInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AccelerationStructureBuildGeometryInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AccelerationStructureBuildGeometryInfoKHRBuilder<'b> {
    type Target = AccelerationStructureBuildGeometryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureBuildRangeInfoKHR {
    type Target = AccelerationStructureBuildRangeInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureBuildRangeInfoKHR {
    type Builder = AccelerationStructureBuildRangeInfoKHRBuilder;
}

/// A builder for a [`AccelerationStructureBuildRangeInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureBuildRangeInfoKHRBuilder {
    value: AccelerationStructureBuildRangeInfoKHR,
}

impl AccelerationStructureBuildRangeInfoKHRBuilder {
    #[inline]
    pub fn primitive_count(mut self, primitive_count: u32) -> Self {
        self.value.primitive_count = primitive_count;
        self
    }

    #[inline]
    pub fn primitive_offset(mut self, primitive_offset: u32) -> Self {
        self.value.primitive_offset = primitive_offset;
        self
    }

    #[inline]
    pub fn first_vertex(mut self, first_vertex: u32) -> Self {
        self.value.first_vertex = first_vertex;
        self
    }

    #[inline]
    pub fn transform_offset(mut self, transform_offset: u32) -> Self {
        self.value.transform_offset = transform_offset;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureBuildRangeInfoKHR {
        self.value
    }
}

impl ops::Deref for AccelerationStructureBuildRangeInfoKHRBuilder {
    type Target = AccelerationStructureBuildRangeInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureBuildRangeInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureBuildRangeInfoKHRBuilder {
    type Target = AccelerationStructureBuildRangeInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureBuildSizesInfoKHR {
    type Target = AccelerationStructureBuildSizesInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureBuildSizesInfoKHR {
    type Builder = AccelerationStructureBuildSizesInfoKHRBuilder;
}

/// A builder for a [`AccelerationStructureBuildSizesInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureBuildSizesInfoKHRBuilder {
    value: AccelerationStructureBuildSizesInfoKHR,
}

impl AccelerationStructureBuildSizesInfoKHRBuilder {
    #[inline]
    pub fn acceleration_structure_size(mut self, acceleration_structure_size: DeviceSize) -> Self {
        self.value.acceleration_structure_size = acceleration_structure_size;
        self
    }

    #[inline]
    pub fn update_scratch_size(mut self, update_scratch_size: DeviceSize) -> Self {
        self.value.update_scratch_size = update_scratch_size;
        self
    }

    #[inline]
    pub fn build_scratch_size(mut self, build_scratch_size: DeviceSize) -> Self {
        self.value.build_scratch_size = build_scratch_size;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureBuildSizesInfoKHR {
        self.value
    }
}

impl ops::Deref for AccelerationStructureBuildSizesInfoKHRBuilder {
    type Target = AccelerationStructureBuildSizesInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureBuildSizesInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureBuildSizesInfoKHRBuilder {
    type Target = AccelerationStructureBuildSizesInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureCaptureDescriptorDataInfoEXT {
    type Target = AccelerationStructureCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureCaptureDescriptorDataInfoEXT {
    type Builder = AccelerationStructureCaptureDescriptorDataInfoEXTBuilder;
}

/// A builder for a [`AccelerationStructureCaptureDescriptorDataInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureCaptureDescriptorDataInfoEXTBuilder {
    value: AccelerationStructureCaptureDescriptorDataInfoEXT,
}

impl AccelerationStructureCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    pub fn acceleration_structure(
        mut self,
        acceleration_structure: AccelerationStructureKHR,
    ) -> Self {
        self.value.acceleration_structure = acceleration_structure;
        self
    }

    #[inline]
    pub fn acceleration_structure_nv(
        mut self,
        acceleration_structure_nv: AccelerationStructureNV,
    ) -> Self {
        self.value.acceleration_structure_nv = acceleration_structure_nv;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureCaptureDescriptorDataInfoEXT {
        self.value
    }
}

impl ops::Deref for AccelerationStructureCaptureDescriptorDataInfoEXTBuilder {
    type Target = AccelerationStructureCaptureDescriptorDataInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureCaptureDescriptorDataInfoEXTBuilder {
    type Target = AccelerationStructureCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`AccelerationStructureCreateInfoKHR`].
pub unsafe trait ExtendsAccelerationStructureCreateInfoKHR: fmt::Debug {}
unsafe impl ExtendsAccelerationStructureCreateInfoKHR for AccelerationStructureMotionInfoNV {}
unsafe impl ExtendsAccelerationStructureCreateInfoKHR for OpaqueCaptureDescriptorDataCreateInfoEXT {}

unsafe impl Cast for AccelerationStructureCreateInfoKHR {
    type Target = AccelerationStructureCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AccelerationStructureCreateInfoKHR {
    type Builder = AccelerationStructureCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`AccelerationStructureCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureCreateInfoKHRBuilder<'b> {
    value: AccelerationStructureCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AccelerationStructureCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsAccelerationStructureCreateInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn create_flags(mut self, create_flags: AccelerationStructureCreateFlagsKHR) -> Self {
        self.value.create_flags = create_flags;
        self
    }

    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn type_(mut self, type_: AccelerationStructureTypeKHR) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn device_address(mut self, device_address: DeviceAddress) -> Self {
        self.value.device_address = device_address;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for AccelerationStructureCreateInfoKHRBuilder<'b> {
    type Target = AccelerationStructureCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AccelerationStructureCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AccelerationStructureCreateInfoKHRBuilder<'b> {
    type Target = AccelerationStructureCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`AccelerationStructureCreateInfoNV`].
pub unsafe trait ExtendsAccelerationStructureCreateInfoNV: fmt::Debug {}
unsafe impl ExtendsAccelerationStructureCreateInfoNV for OpaqueCaptureDescriptorDataCreateInfoEXT {}

unsafe impl Cast for AccelerationStructureCreateInfoNV {
    type Target = AccelerationStructureCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AccelerationStructureCreateInfoNV {
    type Builder = AccelerationStructureCreateInfoNVBuilder<'b>;
}

/// A builder for a [`AccelerationStructureCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureCreateInfoNVBuilder<'b> {
    value: AccelerationStructureCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AccelerationStructureCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsAccelerationStructureCreateInfoNV,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn compacted_size(mut self, compacted_size: DeviceSize) -> Self {
        self.value.compacted_size = compacted_size;
        self
    }

    #[inline]
    pub fn info(mut self, info: impl Cast<Target = AccelerationStructureInfoNV>) -> Self {
        self.value.info = info.into();
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for AccelerationStructureCreateInfoNVBuilder<'b> {
    type Target = AccelerationStructureCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AccelerationStructureCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AccelerationStructureCreateInfoNVBuilder<'b> {
    type Target = AccelerationStructureCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureDeviceAddressInfoKHR {
    type Target = AccelerationStructureDeviceAddressInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureDeviceAddressInfoKHR {
    type Builder = AccelerationStructureDeviceAddressInfoKHRBuilder;
}

/// A builder for a [`AccelerationStructureDeviceAddressInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureDeviceAddressInfoKHRBuilder {
    value: AccelerationStructureDeviceAddressInfoKHR,
}

impl AccelerationStructureDeviceAddressInfoKHRBuilder {
    #[inline]
    pub fn acceleration_structure(
        mut self,
        acceleration_structure: AccelerationStructureKHR,
    ) -> Self {
        self.value.acceleration_structure = acceleration_structure;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureDeviceAddressInfoKHR {
        self.value
    }
}

impl ops::Deref for AccelerationStructureDeviceAddressInfoKHRBuilder {
    type Target = AccelerationStructureDeviceAddressInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureDeviceAddressInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureDeviceAddressInfoKHRBuilder {
    type Target = AccelerationStructureDeviceAddressInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureGeometryAabbsDataKHR {
    type Target = AccelerationStructureGeometryAabbsDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureGeometryAabbsDataKHR {
    type Builder = AccelerationStructureGeometryAabbsDataKHRBuilder;
}

/// A builder for a [`AccelerationStructureGeometryAabbsDataKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureGeometryAabbsDataKHRBuilder {
    value: AccelerationStructureGeometryAabbsDataKHR,
}

impl AccelerationStructureGeometryAabbsDataKHRBuilder {
    #[inline]
    pub fn data(mut self, data: DeviceOrHostAddressConstKHR) -> Self {
        self.value.data = data;
        self
    }

    #[inline]
    pub fn stride(mut self, stride: DeviceSize) -> Self {
        self.value.stride = stride;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureGeometryAabbsDataKHR {
        self.value
    }
}

impl ops::Deref for AccelerationStructureGeometryAabbsDataKHRBuilder {
    type Target = AccelerationStructureGeometryAabbsDataKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureGeometryAabbsDataKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureGeometryAabbsDataKHRBuilder {
    type Target = AccelerationStructureGeometryAabbsDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureGeometryInstancesDataKHR {
    type Target = AccelerationStructureGeometryInstancesDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureGeometryInstancesDataKHR {
    type Builder = AccelerationStructureGeometryInstancesDataKHRBuilder;
}

/// A builder for a [`AccelerationStructureGeometryInstancesDataKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureGeometryInstancesDataKHRBuilder {
    value: AccelerationStructureGeometryInstancesDataKHR,
}

impl AccelerationStructureGeometryInstancesDataKHRBuilder {
    #[inline]
    pub fn array_of_pointers(mut self, array_of_pointers: bool) -> Self {
        self.value.array_of_pointers = array_of_pointers as Bool32;
        self
    }

    #[inline]
    pub fn data(mut self, data: DeviceOrHostAddressConstKHR) -> Self {
        self.value.data = data;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureGeometryInstancesDataKHR {
        self.value
    }
}

impl ops::Deref for AccelerationStructureGeometryInstancesDataKHRBuilder {
    type Target = AccelerationStructureGeometryInstancesDataKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureGeometryInstancesDataKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureGeometryInstancesDataKHRBuilder {
    type Target = AccelerationStructureGeometryInstancesDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureGeometryKHR {
    type Target = AccelerationStructureGeometryKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureGeometryKHR {
    type Builder = AccelerationStructureGeometryKHRBuilder;
}

/// A builder for a [`AccelerationStructureGeometryKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureGeometryKHRBuilder {
    value: AccelerationStructureGeometryKHR,
}

impl AccelerationStructureGeometryKHRBuilder {
    #[inline]
    pub fn geometry_type(mut self, geometry_type: GeometryTypeKHR) -> Self {
        self.value.geometry_type = geometry_type;
        self
    }

    #[inline]
    pub fn geometry(mut self, geometry: AccelerationStructureGeometryDataKHR) -> Self {
        self.value.geometry = geometry;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: GeometryFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureGeometryKHR {
        self.value
    }
}

impl ops::Deref for AccelerationStructureGeometryKHRBuilder {
    type Target = AccelerationStructureGeometryKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureGeometryKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureGeometryKHRBuilder {
    type Target = AccelerationStructureGeometryKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureGeometryMotionTrianglesDataNV {
    type Target = AccelerationStructureGeometryMotionTrianglesDataNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureGeometryMotionTrianglesDataNV {
    type Builder = AccelerationStructureGeometryMotionTrianglesDataNVBuilder;
}

/// A builder for a [`AccelerationStructureGeometryMotionTrianglesDataNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureGeometryMotionTrianglesDataNVBuilder {
    value: AccelerationStructureGeometryMotionTrianglesDataNV,
}

impl AccelerationStructureGeometryMotionTrianglesDataNVBuilder {
    #[inline]
    pub fn vertex_data(mut self, vertex_data: DeviceOrHostAddressConstKHR) -> Self {
        self.value.vertex_data = vertex_data;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureGeometryMotionTrianglesDataNV {
        self.value
    }
}

impl ops::Deref for AccelerationStructureGeometryMotionTrianglesDataNVBuilder {
    type Target = AccelerationStructureGeometryMotionTrianglesDataNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureGeometryMotionTrianglesDataNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureGeometryMotionTrianglesDataNVBuilder {
    type Target = AccelerationStructureGeometryMotionTrianglesDataNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`AccelerationStructureGeometryTrianglesDataKHR`].
pub unsafe trait ExtendsAccelerationStructureGeometryTrianglesDataKHR: fmt::Debug {}
unsafe impl ExtendsAccelerationStructureGeometryTrianglesDataKHR
    for AccelerationStructureGeometryMotionTrianglesDataNV
{
}
unsafe impl ExtendsAccelerationStructureGeometryTrianglesDataKHR
    for AccelerationStructureTrianglesDisplacementMicromapNV
{
}
unsafe impl ExtendsAccelerationStructureGeometryTrianglesDataKHR
    for AccelerationStructureTrianglesOpacityMicromapEXT
{
}

unsafe impl Cast for AccelerationStructureGeometryTrianglesDataKHR {
    type Target = AccelerationStructureGeometryTrianglesDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AccelerationStructureGeometryTrianglesDataKHR {
    type Builder = AccelerationStructureGeometryTrianglesDataKHRBuilder<'b>;
}

/// A builder for a [`AccelerationStructureGeometryTrianglesDataKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureGeometryTrianglesDataKHRBuilder<'b> {
    value: AccelerationStructureGeometryTrianglesDataKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AccelerationStructureGeometryTrianglesDataKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsAccelerationStructureGeometryTrianglesDataKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn vertex_format(mut self, vertex_format: Format) -> Self {
        self.value.vertex_format = vertex_format;
        self
    }

    #[inline]
    pub fn vertex_data(mut self, vertex_data: DeviceOrHostAddressConstKHR) -> Self {
        self.value.vertex_data = vertex_data;
        self
    }

    #[inline]
    pub fn vertex_stride(mut self, vertex_stride: DeviceSize) -> Self {
        self.value.vertex_stride = vertex_stride;
        self
    }

    #[inline]
    pub fn max_vertex(mut self, max_vertex: u32) -> Self {
        self.value.max_vertex = max_vertex;
        self
    }

    #[inline]
    pub fn index_type(mut self, index_type: IndexType) -> Self {
        self.value.index_type = index_type;
        self
    }

    #[inline]
    pub fn index_data(mut self, index_data: DeviceOrHostAddressConstKHR) -> Self {
        self.value.index_data = index_data;
        self
    }

    #[inline]
    pub fn transform_data(mut self, transform_data: DeviceOrHostAddressConstKHR) -> Self {
        self.value.transform_data = transform_data;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureGeometryTrianglesDataKHR {
        self.value
    }
}

impl<'b> ops::Deref for AccelerationStructureGeometryTrianglesDataKHRBuilder<'b> {
    type Target = AccelerationStructureGeometryTrianglesDataKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AccelerationStructureGeometryTrianglesDataKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AccelerationStructureGeometryTrianglesDataKHRBuilder<'b> {
    type Target = AccelerationStructureGeometryTrianglesDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureInfoNV {
    type Target = AccelerationStructureInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AccelerationStructureInfoNV {
    type Builder = AccelerationStructureInfoNVBuilder<'b>;
}

/// A builder for a [`AccelerationStructureInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureInfoNVBuilder<'b> {
    value: AccelerationStructureInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AccelerationStructureInfoNVBuilder<'b> {
    #[inline]
    pub fn type_(mut self, type_: AccelerationStructureTypeNV) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: BuildAccelerationStructureFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn instance_count(mut self, instance_count: u32) -> Self {
        self.value.instance_count = instance_count;
        self
    }

    #[inline]
    pub fn geometries(mut self, geometries: &'b [impl Cast<Target = GeometryNV>]) -> Self {
        self.value.geometry_count = geometries.len() as u32;
        self.value.geometries = geometries.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for AccelerationStructureInfoNVBuilder<'b> {
    type Target = AccelerationStructureInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AccelerationStructureInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AccelerationStructureInfoNVBuilder<'b> {
    type Target = AccelerationStructureInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureInstanceKHR {
    type Target = AccelerationStructureInstanceKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureInstanceKHR {
    type Builder = AccelerationStructureInstanceKHRBuilder;
}

/// A builder for a [`AccelerationStructureInstanceKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureInstanceKHRBuilder {
    value: AccelerationStructureInstanceKHR,
}

impl AccelerationStructureInstanceKHRBuilder {
    #[inline]
    pub fn transform(mut self, transform: impl Cast<Target = TransformMatrixKHR>) -> Self {
        self.value.transform = transform.into();
        self
    }

    #[inline]
    pub fn instance_custom_index<T>(mut self, instance_custom_index: u32) -> Self {
        self.instance_custom_index_and_mask = Bitfield24_8::new(
            instance_custom_index,
            self.instance_custom_index_and_mask.high(),
        );
        self
    }

    #[inline]
    pub fn mask<T>(mut self, mask: u8) -> Self {
        self.instance_custom_index_and_mask =
            Bitfield24_8::new(self.instance_custom_index_and_mask.low(), mask);
        self
    }

    #[inline]
    pub fn instance_shader_binding_table_record_offset<T>(
        mut self,
        instance_shader_binding_table_record_offset: u32,
    ) -> Self {
        self.instance_shader_binding_table_record_offset_and_flags = Bitfield24_8::new(
            instance_shader_binding_table_record_offset,
            self.instance_shader_binding_table_record_offset_and_flags
                .high(),
        );
        self
    }

    #[inline]
    pub fn flags<T>(mut self, flags: u8) -> Self {
        self.instance_shader_binding_table_record_offset_and_flags = Bitfield24_8::new(
            self.instance_shader_binding_table_record_offset_and_flags
                .low(),
            flags,
        );
        self
    }

    #[inline]
    pub fn acceleration_structure_reference(
        mut self,
        acceleration_structure_reference: u64,
    ) -> Self {
        self.value.acceleration_structure_reference = acceleration_structure_reference;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureInstanceKHR {
        self.value
    }
}

impl ops::Deref for AccelerationStructureInstanceKHRBuilder {
    type Target = AccelerationStructureInstanceKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureInstanceKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureInstanceKHRBuilder {
    type Target = AccelerationStructureInstanceKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureMatrixMotionInstanceNV {
    type Target = AccelerationStructureMatrixMotionInstanceNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureMatrixMotionInstanceNV {
    type Builder = AccelerationStructureMatrixMotionInstanceNVBuilder;
}

/// A builder for a [`AccelerationStructureMatrixMotionInstanceNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureMatrixMotionInstanceNVBuilder {
    value: AccelerationStructureMatrixMotionInstanceNV,
}

impl AccelerationStructureMatrixMotionInstanceNVBuilder {
    #[inline]
    pub fn transform_t0(mut self, transform_t0: impl Cast<Target = TransformMatrixKHR>) -> Self {
        self.value.transform_t0 = transform_t0.into();
        self
    }

    #[inline]
    pub fn transform_t1(mut self, transform_t1: impl Cast<Target = TransformMatrixKHR>) -> Self {
        self.value.transform_t1 = transform_t1.into();
        self
    }

    #[inline]
    pub fn instance_custom_index<T>(mut self, instance_custom_index: u32) -> Self {
        self.instance_custom_index_and_mask = Bitfield24_8::new(
            instance_custom_index,
            self.instance_custom_index_and_mask.high(),
        );
        self
    }

    #[inline]
    pub fn mask<T>(mut self, mask: u8) -> Self {
        self.instance_custom_index_and_mask =
            Bitfield24_8::new(self.instance_custom_index_and_mask.low(), mask);
        self
    }

    #[inline]
    pub fn instance_shader_binding_table_record_offset<T>(
        mut self,
        instance_shader_binding_table_record_offset: u32,
    ) -> Self {
        self.instance_shader_binding_table_record_offset_and_flags = Bitfield24_8::new(
            instance_shader_binding_table_record_offset,
            self.instance_shader_binding_table_record_offset_and_flags
                .high(),
        );
        self
    }

    #[inline]
    pub fn flags<T>(mut self, flags: u8) -> Self {
        self.instance_shader_binding_table_record_offset_and_flags = Bitfield24_8::new(
            self.instance_shader_binding_table_record_offset_and_flags
                .low(),
            flags,
        );
        self
    }

    #[inline]
    pub fn acceleration_structure_reference(
        mut self,
        acceleration_structure_reference: u64,
    ) -> Self {
        self.value.acceleration_structure_reference = acceleration_structure_reference;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureMatrixMotionInstanceNV {
        self.value
    }
}

impl ops::Deref for AccelerationStructureMatrixMotionInstanceNVBuilder {
    type Target = AccelerationStructureMatrixMotionInstanceNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureMatrixMotionInstanceNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureMatrixMotionInstanceNVBuilder {
    type Target = AccelerationStructureMatrixMotionInstanceNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureMemoryRequirementsInfoNV {
    type Target = AccelerationStructureMemoryRequirementsInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureMemoryRequirementsInfoNV {
    type Builder = AccelerationStructureMemoryRequirementsInfoNVBuilder;
}

/// A builder for a [`AccelerationStructureMemoryRequirementsInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureMemoryRequirementsInfoNVBuilder {
    value: AccelerationStructureMemoryRequirementsInfoNV,
}

impl AccelerationStructureMemoryRequirementsInfoNVBuilder {
    #[inline]
    pub fn type_(mut self, type_: AccelerationStructureMemoryRequirementsTypeNV) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn acceleration_structure(
        mut self,
        acceleration_structure: AccelerationStructureNV,
    ) -> Self {
        self.value.acceleration_structure = acceleration_structure;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureMemoryRequirementsInfoNV {
        self.value
    }
}

impl ops::Deref for AccelerationStructureMemoryRequirementsInfoNVBuilder {
    type Target = AccelerationStructureMemoryRequirementsInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureMemoryRequirementsInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureMemoryRequirementsInfoNVBuilder {
    type Target = AccelerationStructureMemoryRequirementsInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureMotionInfoNV {
    type Target = AccelerationStructureMotionInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureMotionInfoNV {
    type Builder = AccelerationStructureMotionInfoNVBuilder;
}

/// A builder for a [`AccelerationStructureMotionInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureMotionInfoNVBuilder {
    value: AccelerationStructureMotionInfoNV,
}

impl AccelerationStructureMotionInfoNVBuilder {
    #[inline]
    pub fn max_instances(mut self, max_instances: u32) -> Self {
        self.value.max_instances = max_instances;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: AccelerationStructureMotionInfoFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureMotionInfoNV {
        self.value
    }
}

impl ops::Deref for AccelerationStructureMotionInfoNVBuilder {
    type Target = AccelerationStructureMotionInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureMotionInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureMotionInfoNVBuilder {
    type Target = AccelerationStructureMotionInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureMotionInstanceNV {
    type Target = AccelerationStructureMotionInstanceNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureMotionInstanceNV {
    type Builder = AccelerationStructureMotionInstanceNVBuilder;
}

/// A builder for a [`AccelerationStructureMotionInstanceNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureMotionInstanceNVBuilder {
    value: AccelerationStructureMotionInstanceNV,
}

impl AccelerationStructureMotionInstanceNVBuilder {
    #[inline]
    pub fn type_(mut self, type_: AccelerationStructureMotionInstanceTypeNV) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: AccelerationStructureMotionInstanceFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn data(mut self, data: AccelerationStructureMotionInstanceDataNV) -> Self {
        self.value.data = data;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureMotionInstanceNV {
        self.value
    }
}

impl ops::Deref for AccelerationStructureMotionInstanceNVBuilder {
    type Target = AccelerationStructureMotionInstanceNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureMotionInstanceNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureMotionInstanceNVBuilder {
    type Target = AccelerationStructureMotionInstanceNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureSRTMotionInstanceNV {
    type Target = AccelerationStructureSRTMotionInstanceNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AccelerationStructureSRTMotionInstanceNV {
    type Builder = AccelerationStructureSRTMotionInstanceNVBuilder;
}

/// A builder for a [`AccelerationStructureSRTMotionInstanceNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureSRTMotionInstanceNVBuilder {
    value: AccelerationStructureSRTMotionInstanceNV,
}

impl AccelerationStructureSRTMotionInstanceNVBuilder {
    #[inline]
    pub fn transform_t0(mut self, transform_t0: impl Cast<Target = SRTDataNV>) -> Self {
        self.value.transform_t0 = transform_t0.into();
        self
    }

    #[inline]
    pub fn transform_t1(mut self, transform_t1: impl Cast<Target = SRTDataNV>) -> Self {
        self.value.transform_t1 = transform_t1.into();
        self
    }

    #[inline]
    pub fn instance_custom_index<T>(mut self, instance_custom_index: u32) -> Self {
        self.instance_custom_index_and_mask = Bitfield24_8::new(
            instance_custom_index,
            self.instance_custom_index_and_mask.high(),
        );
        self
    }

    #[inline]
    pub fn mask<T>(mut self, mask: u8) -> Self {
        self.instance_custom_index_and_mask =
            Bitfield24_8::new(self.instance_custom_index_and_mask.low(), mask);
        self
    }

    #[inline]
    pub fn instance_shader_binding_table_record_offset<T>(
        mut self,
        instance_shader_binding_table_record_offset: u32,
    ) -> Self {
        self.instance_shader_binding_table_record_offset_and_flags = Bitfield24_8::new(
            instance_shader_binding_table_record_offset,
            self.instance_shader_binding_table_record_offset_and_flags
                .high(),
        );
        self
    }

    #[inline]
    pub fn flags<T>(mut self, flags: u8) -> Self {
        self.instance_shader_binding_table_record_offset_and_flags = Bitfield24_8::new(
            self.instance_shader_binding_table_record_offset_and_flags
                .low(),
            flags,
        );
        self
    }

    #[inline]
    pub fn acceleration_structure_reference(
        mut self,
        acceleration_structure_reference: u64,
    ) -> Self {
        self.value.acceleration_structure_reference = acceleration_structure_reference;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureSRTMotionInstanceNV {
        self.value
    }
}

impl ops::Deref for AccelerationStructureSRTMotionInstanceNVBuilder {
    type Target = AccelerationStructureSRTMotionInstanceNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AccelerationStructureSRTMotionInstanceNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AccelerationStructureSRTMotionInstanceNVBuilder {
    type Target = AccelerationStructureSRTMotionInstanceNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureTrianglesDisplacementMicromapNV {
    type Target = AccelerationStructureTrianglesDisplacementMicromapNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AccelerationStructureTrianglesDisplacementMicromapNV {
    type Builder = AccelerationStructureTrianglesDisplacementMicromapNVBuilder<'b>;
}

/// A builder for a [`AccelerationStructureTrianglesDisplacementMicromapNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureTrianglesDisplacementMicromapNVBuilder<'b> {
    value: AccelerationStructureTrianglesDisplacementMicromapNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AccelerationStructureTrianglesDisplacementMicromapNVBuilder<'b> {
    #[inline]
    pub fn displacement_bias_and_scale_format(
        mut self,
        displacement_bias_and_scale_format: Format,
    ) -> Self {
        self.value.displacement_bias_and_scale_format = displacement_bias_and_scale_format;
        self
    }

    #[inline]
    pub fn displacement_vector_format(mut self, displacement_vector_format: Format) -> Self {
        self.value.displacement_vector_format = displacement_vector_format;
        self
    }

    #[inline]
    pub fn displacement_bias_and_scale_buffer(
        mut self,
        displacement_bias_and_scale_buffer: DeviceOrHostAddressConstKHR,
    ) -> Self {
        self.value.displacement_bias_and_scale_buffer = displacement_bias_and_scale_buffer;
        self
    }

    #[inline]
    pub fn displacement_bias_and_scale_stride(
        mut self,
        displacement_bias_and_scale_stride: DeviceSize,
    ) -> Self {
        self.value.displacement_bias_and_scale_stride = displacement_bias_and_scale_stride;
        self
    }

    #[inline]
    pub fn displacement_vector_buffer(
        mut self,
        displacement_vector_buffer: DeviceOrHostAddressConstKHR,
    ) -> Self {
        self.value.displacement_vector_buffer = displacement_vector_buffer;
        self
    }

    #[inline]
    pub fn displacement_vector_stride(mut self, displacement_vector_stride: DeviceSize) -> Self {
        self.value.displacement_vector_stride = displacement_vector_stride;
        self
    }

    #[inline]
    pub fn displaced_micromap_primitive_flags(
        mut self,
        displaced_micromap_primitive_flags: DeviceOrHostAddressConstKHR,
    ) -> Self {
        self.value.displaced_micromap_primitive_flags = displaced_micromap_primitive_flags;
        self
    }

    #[inline]
    pub fn displaced_micromap_primitive_flags_stride(
        mut self,
        displaced_micromap_primitive_flags_stride: DeviceSize,
    ) -> Self {
        self.value.displaced_micromap_primitive_flags_stride =
            displaced_micromap_primitive_flags_stride;
        self
    }

    #[inline]
    pub fn index_type(mut self, index_type: IndexType) -> Self {
        self.value.index_type = index_type;
        self
    }

    #[inline]
    pub fn index_buffer(mut self, index_buffer: DeviceOrHostAddressConstKHR) -> Self {
        self.value.index_buffer = index_buffer;
        self
    }

    #[inline]
    pub fn index_stride(mut self, index_stride: DeviceSize) -> Self {
        self.value.index_stride = index_stride;
        self
    }

    #[inline]
    pub fn base_triangle(mut self, base_triangle: u32) -> Self {
        self.value.base_triangle = base_triangle;
        self
    }

    #[inline]
    pub fn usage_counts(
        mut self,
        usage_counts: &'b [impl Cast<Target = MicromapUsageEXT>],
    ) -> Self {
        self.value.usage_counts_count = usage_counts.len() as u32;
        self.value.usage_counts = usage_counts.as_ptr().cast();
        self
    }

    #[inline]
    pub fn pointer_usage_counts(
        mut self,
        pointer_usage_counts: &'b [*const MicromapUsageEXT],
    ) -> Self {
        self.value.usage_counts_count = pointer_usage_counts.len() as u32;
        self.value.pointer_usage_counts = pointer_usage_counts.as_ptr();
        self
    }

    #[inline]
    pub fn micromap(mut self, micromap: MicromapEXT) -> Self {
        self.value.micromap = micromap;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureTrianglesDisplacementMicromapNV {
        self.value
    }
}

impl<'b> ops::Deref for AccelerationStructureTrianglesDisplacementMicromapNVBuilder<'b> {
    type Target = AccelerationStructureTrianglesDisplacementMicromapNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AccelerationStructureTrianglesDisplacementMicromapNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AccelerationStructureTrianglesDisplacementMicromapNVBuilder<'b> {
    type Target = AccelerationStructureTrianglesDisplacementMicromapNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureTrianglesOpacityMicromapEXT {
    type Target = AccelerationStructureTrianglesOpacityMicromapEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AccelerationStructureTrianglesOpacityMicromapEXT {
    type Builder = AccelerationStructureTrianglesOpacityMicromapEXTBuilder<'b>;
}

/// A builder for a [`AccelerationStructureTrianglesOpacityMicromapEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureTrianglesOpacityMicromapEXTBuilder<'b> {
    value: AccelerationStructureTrianglesOpacityMicromapEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AccelerationStructureTrianglesOpacityMicromapEXTBuilder<'b> {
    #[inline]
    pub fn index_type(mut self, index_type: IndexType) -> Self {
        self.value.index_type = index_type;
        self
    }

    #[inline]
    pub fn index_buffer(mut self, index_buffer: DeviceOrHostAddressConstKHR) -> Self {
        self.value.index_buffer = index_buffer;
        self
    }

    #[inline]
    pub fn index_stride(mut self, index_stride: DeviceSize) -> Self {
        self.value.index_stride = index_stride;
        self
    }

    #[inline]
    pub fn base_triangle(mut self, base_triangle: u32) -> Self {
        self.value.base_triangle = base_triangle;
        self
    }

    #[inline]
    pub fn usage_counts(
        mut self,
        usage_counts: &'b [impl Cast<Target = MicromapUsageEXT>],
    ) -> Self {
        self.value.usage_counts_count = usage_counts.len() as u32;
        self.value.usage_counts = usage_counts.as_ptr().cast();
        self
    }

    #[inline]
    pub fn pointer_usage_counts(
        mut self,
        pointer_usage_counts: &'b [*const MicromapUsageEXT],
    ) -> Self {
        self.value.usage_counts_count = pointer_usage_counts.len() as u32;
        self.value.pointer_usage_counts = pointer_usage_counts.as_ptr();
        self
    }

    #[inline]
    pub fn micromap(mut self, micromap: MicromapEXT) -> Self {
        self.value.micromap = micromap;
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureTrianglesOpacityMicromapEXT {
        self.value
    }
}

impl<'b> ops::Deref for AccelerationStructureTrianglesOpacityMicromapEXTBuilder<'b> {
    type Target = AccelerationStructureTrianglesOpacityMicromapEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AccelerationStructureTrianglesOpacityMicromapEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AccelerationStructureTrianglesOpacityMicromapEXTBuilder<'b> {
    type Target = AccelerationStructureTrianglesOpacityMicromapEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AccelerationStructureVersionInfoKHR {
    type Target = AccelerationStructureVersionInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AccelerationStructureVersionInfoKHR {
    type Builder = AccelerationStructureVersionInfoKHRBuilder<'b>;
}

/// A builder for a [`AccelerationStructureVersionInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AccelerationStructureVersionInfoKHRBuilder<'b> {
    value: AccelerationStructureVersionInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AccelerationStructureVersionInfoKHRBuilder<'b> {
    #[inline]
    pub fn version_data(mut self, version_data: &'b [u8]) -> Self {
        self.value.version_data = version_data.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> AccelerationStructureVersionInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for AccelerationStructureVersionInfoKHRBuilder<'b> {
    type Target = AccelerationStructureVersionInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AccelerationStructureVersionInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AccelerationStructureVersionInfoKHRBuilder<'b> {
    type Target = AccelerationStructureVersionInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AcquireNextImageInfoKHR {
    type Target = AcquireNextImageInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AcquireNextImageInfoKHR {
    type Builder = AcquireNextImageInfoKHRBuilder;
}

/// A builder for a [`AcquireNextImageInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AcquireNextImageInfoKHRBuilder {
    value: AcquireNextImageInfoKHR,
}

impl AcquireNextImageInfoKHRBuilder {
    #[inline]
    pub fn swapchain(mut self, swapchain: SwapchainKHR) -> Self {
        self.value.swapchain = swapchain;
        self
    }

    #[inline]
    pub fn timeout(mut self, timeout: u64) -> Self {
        self.value.timeout = timeout;
        self
    }

    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn fence(mut self, fence: Fence) -> Self {
        self.value.fence = fence;
        self
    }

    #[inline]
    pub fn device_mask(mut self, device_mask: u32) -> Self {
        self.value.device_mask = device_mask;
        self
    }

    #[inline]
    pub fn build(self) -> AcquireNextImageInfoKHR {
        self.value
    }
}

impl ops::Deref for AcquireNextImageInfoKHRBuilder {
    type Target = AcquireNextImageInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AcquireNextImageInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AcquireNextImageInfoKHRBuilder {
    type Target = AcquireNextImageInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AcquireProfilingLockInfoKHR {
    type Target = AcquireProfilingLockInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AcquireProfilingLockInfoKHR {
    type Builder = AcquireProfilingLockInfoKHRBuilder;
}

/// A builder for a [`AcquireProfilingLockInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AcquireProfilingLockInfoKHRBuilder {
    value: AcquireProfilingLockInfoKHR,
}

impl AcquireProfilingLockInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: AcquireProfilingLockFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn timeout(mut self, timeout: u64) -> Self {
        self.value.timeout = timeout;
        self
    }

    #[inline]
    pub fn build(self) -> AcquireProfilingLockInfoKHR {
        self.value
    }
}

impl ops::Deref for AcquireProfilingLockInfoKHRBuilder {
    type Target = AcquireProfilingLockInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AcquireProfilingLockInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AcquireProfilingLockInfoKHRBuilder {
    type Target = AcquireProfilingLockInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AllocationCallbacks {
    type Target = AllocationCallbacks;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AllocationCallbacks {
    type Builder = AllocationCallbacksBuilder<'b>;
}

/// A builder for a [`AllocationCallbacks`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AllocationCallbacksBuilder<'b> {
    value: AllocationCallbacks,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AllocationCallbacksBuilder<'b> {
    #[inline]
    pub fn user_data<T>(mut self, user_data: &'b mut T) -> Self {
        self.value.user_data = (user_data as *mut T).cast();
        self
    }

    #[inline]
    pub fn allocation(mut self, allocation: PFN_vkAllocationFunction) -> Self {
        self.value.allocation = allocation;
        self
    }

    #[inline]
    pub fn reallocation(mut self, reallocation: PFN_vkReallocationFunction) -> Self {
        self.value.reallocation = reallocation;
        self
    }

    #[inline]
    pub fn free(mut self, free: PFN_vkFreeFunction) -> Self {
        self.value.free = free;
        self
    }

    #[inline]
    pub fn internal_allocation(
        mut self,
        internal_allocation: PFN_vkInternalAllocationNotification,
    ) -> Self {
        self.value.internal_allocation = internal_allocation;
        self
    }

    #[inline]
    pub fn internal_free(mut self, internal_free: PFN_vkInternalFreeNotification) -> Self {
        self.value.internal_free = internal_free;
        self
    }

    #[inline]
    pub fn build(self) -> AllocationCallbacks {
        self.value
    }
}

impl<'b> ops::Deref for AllocationCallbacksBuilder<'b> {
    type Target = AllocationCallbacks;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AllocationCallbacksBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AllocationCallbacksBuilder<'b> {
    type Target = AllocationCallbacks;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AmigoProfilingSubmitInfoSEC {
    type Target = AmigoProfilingSubmitInfoSEC;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AmigoProfilingSubmitInfoSEC {
    type Builder = AmigoProfilingSubmitInfoSECBuilder;
}

/// A builder for a [`AmigoProfilingSubmitInfoSEC`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AmigoProfilingSubmitInfoSECBuilder {
    value: AmigoProfilingSubmitInfoSEC,
}

impl AmigoProfilingSubmitInfoSECBuilder {
    #[inline]
    pub fn first_draw_timestamp(mut self, first_draw_timestamp: u64) -> Self {
        self.value.first_draw_timestamp = first_draw_timestamp;
        self
    }

    #[inline]
    pub fn swap_buffer_timestamp(mut self, swap_buffer_timestamp: u64) -> Self {
        self.value.swap_buffer_timestamp = swap_buffer_timestamp;
        self
    }

    #[inline]
    pub fn build(self) -> AmigoProfilingSubmitInfoSEC {
        self.value
    }
}

impl ops::Deref for AmigoProfilingSubmitInfoSECBuilder {
    type Target = AmigoProfilingSubmitInfoSEC;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AmigoProfilingSubmitInfoSECBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AmigoProfilingSubmitInfoSECBuilder {
    type Target = AmigoProfilingSubmitInfoSEC;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AndroidHardwareBufferFormatProperties2ANDROID {
    type Target = AndroidHardwareBufferFormatProperties2ANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AndroidHardwareBufferFormatProperties2ANDROID {
    type Builder = AndroidHardwareBufferFormatProperties2ANDROIDBuilder;
}

/// A builder for a [`AndroidHardwareBufferFormatProperties2ANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AndroidHardwareBufferFormatProperties2ANDROIDBuilder {
    value: AndroidHardwareBufferFormatProperties2ANDROID,
}

impl AndroidHardwareBufferFormatProperties2ANDROIDBuilder {
    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn external_format(mut self, external_format: u64) -> Self {
        self.value.external_format = external_format;
        self
    }

    #[inline]
    pub fn format_features(mut self, format_features: FormatFeatureFlags2) -> Self {
        self.value.format_features = format_features;
        self
    }

    #[inline]
    pub fn sampler_ycbcr_conversion_components(
        mut self,
        sampler_ycbcr_conversion_components: impl Cast<Target = ComponentMapping>,
    ) -> Self {
        self.value.sampler_ycbcr_conversion_components = sampler_ycbcr_conversion_components.into();
        self
    }

    #[inline]
    pub fn suggested_ycbcr_model(
        mut self,
        suggested_ycbcr_model: SamplerYcbcrModelConversion,
    ) -> Self {
        self.value.suggested_ycbcr_model = suggested_ycbcr_model;
        self
    }

    #[inline]
    pub fn suggested_ycbcr_range(mut self, suggested_ycbcr_range: SamplerYcbcrRange) -> Self {
        self.value.suggested_ycbcr_range = suggested_ycbcr_range;
        self
    }

    #[inline]
    pub fn suggested_x_chroma_offset(mut self, suggested_x_chroma_offset: ChromaLocation) -> Self {
        self.value.suggested_x_chroma_offset = suggested_x_chroma_offset;
        self
    }

    #[inline]
    pub fn suggested_y_chroma_offset(mut self, suggested_y_chroma_offset: ChromaLocation) -> Self {
        self.value.suggested_y_chroma_offset = suggested_y_chroma_offset;
        self
    }

    #[inline]
    pub fn build(self) -> AndroidHardwareBufferFormatProperties2ANDROID {
        self.value
    }
}

impl ops::Deref for AndroidHardwareBufferFormatProperties2ANDROIDBuilder {
    type Target = AndroidHardwareBufferFormatProperties2ANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AndroidHardwareBufferFormatProperties2ANDROIDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AndroidHardwareBufferFormatProperties2ANDROIDBuilder {
    type Target = AndroidHardwareBufferFormatProperties2ANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AndroidHardwareBufferFormatPropertiesANDROID {
    type Target = AndroidHardwareBufferFormatPropertiesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AndroidHardwareBufferFormatPropertiesANDROID {
    type Builder = AndroidHardwareBufferFormatPropertiesANDROIDBuilder;
}

/// A builder for a [`AndroidHardwareBufferFormatPropertiesANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AndroidHardwareBufferFormatPropertiesANDROIDBuilder {
    value: AndroidHardwareBufferFormatPropertiesANDROID,
}

impl AndroidHardwareBufferFormatPropertiesANDROIDBuilder {
    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn external_format(mut self, external_format: u64) -> Self {
        self.value.external_format = external_format;
        self
    }

    #[inline]
    pub fn format_features(mut self, format_features: FormatFeatureFlags) -> Self {
        self.value.format_features = format_features;
        self
    }

    #[inline]
    pub fn sampler_ycbcr_conversion_components(
        mut self,
        sampler_ycbcr_conversion_components: impl Cast<Target = ComponentMapping>,
    ) -> Self {
        self.value.sampler_ycbcr_conversion_components = sampler_ycbcr_conversion_components.into();
        self
    }

    #[inline]
    pub fn suggested_ycbcr_model(
        mut self,
        suggested_ycbcr_model: SamplerYcbcrModelConversion,
    ) -> Self {
        self.value.suggested_ycbcr_model = suggested_ycbcr_model;
        self
    }

    #[inline]
    pub fn suggested_ycbcr_range(mut self, suggested_ycbcr_range: SamplerYcbcrRange) -> Self {
        self.value.suggested_ycbcr_range = suggested_ycbcr_range;
        self
    }

    #[inline]
    pub fn suggested_x_chroma_offset(mut self, suggested_x_chroma_offset: ChromaLocation) -> Self {
        self.value.suggested_x_chroma_offset = suggested_x_chroma_offset;
        self
    }

    #[inline]
    pub fn suggested_y_chroma_offset(mut self, suggested_y_chroma_offset: ChromaLocation) -> Self {
        self.value.suggested_y_chroma_offset = suggested_y_chroma_offset;
        self
    }

    #[inline]
    pub fn build(self) -> AndroidHardwareBufferFormatPropertiesANDROID {
        self.value
    }
}

impl ops::Deref for AndroidHardwareBufferFormatPropertiesANDROIDBuilder {
    type Target = AndroidHardwareBufferFormatPropertiesANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AndroidHardwareBufferFormatPropertiesANDROIDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AndroidHardwareBufferFormatPropertiesANDROIDBuilder {
    type Target = AndroidHardwareBufferFormatPropertiesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AndroidHardwareBufferFormatResolvePropertiesANDROID {
    type Target = AndroidHardwareBufferFormatResolvePropertiesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AndroidHardwareBufferFormatResolvePropertiesANDROID {
    type Builder = AndroidHardwareBufferFormatResolvePropertiesANDROIDBuilder;
}

/// A builder for a [`AndroidHardwareBufferFormatResolvePropertiesANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AndroidHardwareBufferFormatResolvePropertiesANDROIDBuilder {
    value: AndroidHardwareBufferFormatResolvePropertiesANDROID,
}

impl AndroidHardwareBufferFormatResolvePropertiesANDROIDBuilder {
    #[inline]
    pub fn color_attachment_format(mut self, color_attachment_format: Format) -> Self {
        self.value.color_attachment_format = color_attachment_format;
        self
    }

    #[inline]
    pub fn build(self) -> AndroidHardwareBufferFormatResolvePropertiesANDROID {
        self.value
    }
}

impl ops::Deref for AndroidHardwareBufferFormatResolvePropertiesANDROIDBuilder {
    type Target = AndroidHardwareBufferFormatResolvePropertiesANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AndroidHardwareBufferFormatResolvePropertiesANDROIDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AndroidHardwareBufferFormatResolvePropertiesANDROIDBuilder {
    type Target = AndroidHardwareBufferFormatResolvePropertiesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`AndroidHardwareBufferPropertiesANDROID`].
pub unsafe trait ExtendsAndroidHardwareBufferPropertiesANDROID: fmt::Debug {}
unsafe impl ExtendsAndroidHardwareBufferPropertiesANDROID
    for AndroidHardwareBufferFormatProperties2ANDROID
{
}
unsafe impl ExtendsAndroidHardwareBufferPropertiesANDROID
    for AndroidHardwareBufferFormatPropertiesANDROID
{
}
unsafe impl ExtendsAndroidHardwareBufferPropertiesANDROID
    for AndroidHardwareBufferFormatResolvePropertiesANDROID
{
}

unsafe impl Cast for AndroidHardwareBufferPropertiesANDROID {
    type Target = AndroidHardwareBufferPropertiesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AndroidHardwareBufferPropertiesANDROID {
    type Builder = AndroidHardwareBufferPropertiesANDROIDBuilder<'b>;
}

/// A builder for a [`AndroidHardwareBufferPropertiesANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AndroidHardwareBufferPropertiesANDROIDBuilder<'b> {
    value: AndroidHardwareBufferPropertiesANDROID,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AndroidHardwareBufferPropertiesANDROIDBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsAndroidHardwareBufferPropertiesANDROID,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn allocation_size(mut self, allocation_size: DeviceSize) -> Self {
        self.value.allocation_size = allocation_size;
        self
    }

    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn build(self) -> AndroidHardwareBufferPropertiesANDROID {
        self.value
    }
}

impl<'b> ops::Deref for AndroidHardwareBufferPropertiesANDROIDBuilder<'b> {
    type Target = AndroidHardwareBufferPropertiesANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AndroidHardwareBufferPropertiesANDROIDBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AndroidHardwareBufferPropertiesANDROIDBuilder<'b> {
    type Target = AndroidHardwareBufferPropertiesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AndroidHardwareBufferUsageANDROID {
    type Target = AndroidHardwareBufferUsageANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AndroidHardwareBufferUsageANDROID {
    type Builder = AndroidHardwareBufferUsageANDROIDBuilder;
}

/// A builder for a [`AndroidHardwareBufferUsageANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AndroidHardwareBufferUsageANDROIDBuilder {
    value: AndroidHardwareBufferUsageANDROID,
}

impl AndroidHardwareBufferUsageANDROIDBuilder {
    #[inline]
    pub fn android_hardware_buffer_usage(mut self, android_hardware_buffer_usage: u64) -> Self {
        self.value.android_hardware_buffer_usage = android_hardware_buffer_usage;
        self
    }

    #[inline]
    pub fn build(self) -> AndroidHardwareBufferUsageANDROID {
        self.value
    }
}

impl ops::Deref for AndroidHardwareBufferUsageANDROIDBuilder {
    type Target = AndroidHardwareBufferUsageANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AndroidHardwareBufferUsageANDROIDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AndroidHardwareBufferUsageANDROIDBuilder {
    type Target = AndroidHardwareBufferUsageANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AndroidSurfaceCreateInfoKHR {
    type Target = AndroidSurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AndroidSurfaceCreateInfoKHR {
    type Builder = AndroidSurfaceCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`AndroidSurfaceCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AndroidSurfaceCreateInfoKHRBuilder<'b> {
    value: AndroidSurfaceCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AndroidSurfaceCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: AndroidSurfaceCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn window(mut self, window: *mut ANativeWindow) -> Self {
        self.value.window = window;
        self
    }

    #[inline]
    pub fn build(self) -> AndroidSurfaceCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for AndroidSurfaceCreateInfoKHRBuilder<'b> {
    type Target = AndroidSurfaceCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AndroidSurfaceCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AndroidSurfaceCreateInfoKHRBuilder<'b> {
    type Target = AndroidSurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AntiLagDataAMD {
    type Target = AntiLagDataAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AntiLagDataAMD {
    type Builder = AntiLagDataAMDBuilder<'b>;
}

/// A builder for a [`AntiLagDataAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AntiLagDataAMDBuilder<'b> {
    value: AntiLagDataAMD,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AntiLagDataAMDBuilder<'b> {
    #[inline]
    pub fn mode(mut self, mode: AntiLagModeAMD) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn max_fps(mut self, max_fps: u32) -> Self {
        self.value.max_fps = max_fps;
        self
    }

    #[inline]
    pub fn presentation_info(
        mut self,
        presentation_info: &'b impl Cast<Target = AntiLagPresentationInfoAMD>,
    ) -> Self {
        self.value.presentation_info = presentation_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> AntiLagDataAMD {
        self.value
    }
}

impl<'b> ops::Deref for AntiLagDataAMDBuilder<'b> {
    type Target = AntiLagDataAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AntiLagDataAMDBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AntiLagDataAMDBuilder<'b> {
    type Target = AntiLagDataAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AntiLagPresentationInfoAMD {
    type Target = AntiLagPresentationInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AntiLagPresentationInfoAMD {
    type Builder = AntiLagPresentationInfoAMDBuilder;
}

/// A builder for a [`AntiLagPresentationInfoAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AntiLagPresentationInfoAMDBuilder {
    value: AntiLagPresentationInfoAMD,
}

impl AntiLagPresentationInfoAMDBuilder {
    #[inline]
    pub fn stage(mut self, stage: AntiLagStageAMD) -> Self {
        self.value.stage = stage;
        self
    }

    #[inline]
    pub fn frame_index(mut self, frame_index: u64) -> Self {
        self.value.frame_index = frame_index;
        self
    }

    #[inline]
    pub fn build(self) -> AntiLagPresentationInfoAMD {
        self.value
    }
}

impl ops::Deref for AntiLagPresentationInfoAMDBuilder {
    type Target = AntiLagPresentationInfoAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AntiLagPresentationInfoAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AntiLagPresentationInfoAMDBuilder {
    type Target = AntiLagPresentationInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ApplicationInfo`].
pub unsafe trait ExtendsApplicationInfo: fmt::Debug {}
unsafe impl ExtendsApplicationInfo for ApplicationParametersEXT {}

unsafe impl Cast for ApplicationInfo {
    type Target = ApplicationInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ApplicationInfo {
    type Builder = ApplicationInfoBuilder<'b>;
}

/// A builder for a [`ApplicationInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ApplicationInfoBuilder<'b> {
    value: ApplicationInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ApplicationInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsApplicationInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn application_name(mut self, application_name: &'b [u8]) -> Self {
        self.value.application_name = application_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn application_version(mut self, application_version: u32) -> Self {
        self.value.application_version = application_version;
        self
    }

    #[inline]
    pub fn engine_name(mut self, engine_name: &'b [u8]) -> Self {
        self.value.engine_name = engine_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn engine_version(mut self, engine_version: u32) -> Self {
        self.value.engine_version = engine_version;
        self
    }

    #[inline]
    pub fn api_version(mut self, api_version: u32) -> Self {
        self.value.api_version = api_version;
        self
    }

    #[inline]
    pub fn build(self) -> ApplicationInfo {
        self.value
    }
}

impl<'b> ops::Deref for ApplicationInfoBuilder<'b> {
    type Target = ApplicationInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ApplicationInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ApplicationInfoBuilder<'b> {
    type Target = ApplicationInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ApplicationParametersEXT {
    type Target = ApplicationParametersEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ApplicationParametersEXT {
    type Builder = ApplicationParametersEXTBuilder;
}

/// A builder for a [`ApplicationParametersEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ApplicationParametersEXTBuilder {
    value: ApplicationParametersEXT,
}

impl ApplicationParametersEXTBuilder {
    #[inline]
    pub fn vendor_id(mut self, vendor_id: u32) -> Self {
        self.value.vendor_id = vendor_id;
        self
    }

    #[inline]
    pub fn device_id(mut self, device_id: u32) -> Self {
        self.value.device_id = device_id;
        self
    }

    #[inline]
    pub fn key(mut self, key: u32) -> Self {
        self.value.key = key;
        self
    }

    #[inline]
    pub fn value(mut self, value: u64) -> Self {
        self.value.value = value;
        self
    }

    #[inline]
    pub fn build(self) -> ApplicationParametersEXT {
        self.value
    }
}

impl ops::Deref for ApplicationParametersEXTBuilder {
    type Target = ApplicationParametersEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ApplicationParametersEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ApplicationParametersEXTBuilder {
    type Target = ApplicationParametersEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AttachmentDescription {
    type Target = AttachmentDescription;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AttachmentDescription {
    type Builder = AttachmentDescriptionBuilder;
}

/// A builder for a [`AttachmentDescription`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AttachmentDescriptionBuilder {
    value: AttachmentDescription,
}

impl AttachmentDescriptionBuilder {
    #[inline]
    pub fn flags(mut self, flags: AttachmentDescriptionFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn samples(mut self, samples: SampleCountFlags) -> Self {
        self.value.samples = samples;
        self
    }

    #[inline]
    pub fn load_op(mut self, load_op: AttachmentLoadOp) -> Self {
        self.value.load_op = load_op;
        self
    }

    #[inline]
    pub fn store_op(mut self, store_op: AttachmentStoreOp) -> Self {
        self.value.store_op = store_op;
        self
    }

    #[inline]
    pub fn stencil_load_op(mut self, stencil_load_op: AttachmentLoadOp) -> Self {
        self.value.stencil_load_op = stencil_load_op;
        self
    }

    #[inline]
    pub fn stencil_store_op(mut self, stencil_store_op: AttachmentStoreOp) -> Self {
        self.value.stencil_store_op = stencil_store_op;
        self
    }

    #[inline]
    pub fn initial_layout(mut self, initial_layout: ImageLayout) -> Self {
        self.value.initial_layout = initial_layout;
        self
    }

    #[inline]
    pub fn final_layout(mut self, final_layout: ImageLayout) -> Self {
        self.value.final_layout = final_layout;
        self
    }

    #[inline]
    pub fn build(self) -> AttachmentDescription {
        self.value
    }
}

impl ops::Deref for AttachmentDescriptionBuilder {
    type Target = AttachmentDescription;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AttachmentDescriptionBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AttachmentDescriptionBuilder {
    type Target = AttachmentDescription;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`AttachmentDescription2`].
pub unsafe trait ExtendsAttachmentDescription2: fmt::Debug {}
unsafe impl ExtendsAttachmentDescription2 for AttachmentDescriptionStencilLayout {}
unsafe impl ExtendsAttachmentDescription2 for ExternalFormatANDROID {}

unsafe impl Cast for AttachmentDescription2 {
    type Target = AttachmentDescription2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AttachmentDescription2 {
    type Builder = AttachmentDescription2Builder<'b>;
}

/// A builder for a [`AttachmentDescription2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AttachmentDescription2Builder<'b> {
    value: AttachmentDescription2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AttachmentDescription2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsAttachmentDescription2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: AttachmentDescriptionFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn samples(mut self, samples: SampleCountFlags) -> Self {
        self.value.samples = samples;
        self
    }

    #[inline]
    pub fn load_op(mut self, load_op: AttachmentLoadOp) -> Self {
        self.value.load_op = load_op;
        self
    }

    #[inline]
    pub fn store_op(mut self, store_op: AttachmentStoreOp) -> Self {
        self.value.store_op = store_op;
        self
    }

    #[inline]
    pub fn stencil_load_op(mut self, stencil_load_op: AttachmentLoadOp) -> Self {
        self.value.stencil_load_op = stencil_load_op;
        self
    }

    #[inline]
    pub fn stencil_store_op(mut self, stencil_store_op: AttachmentStoreOp) -> Self {
        self.value.stencil_store_op = stencil_store_op;
        self
    }

    #[inline]
    pub fn initial_layout(mut self, initial_layout: ImageLayout) -> Self {
        self.value.initial_layout = initial_layout;
        self
    }

    #[inline]
    pub fn final_layout(mut self, final_layout: ImageLayout) -> Self {
        self.value.final_layout = final_layout;
        self
    }

    #[inline]
    pub fn build(self) -> AttachmentDescription2 {
        self.value
    }
}

impl<'b> ops::Deref for AttachmentDescription2Builder<'b> {
    type Target = AttachmentDescription2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AttachmentDescription2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AttachmentDescription2Builder<'b> {
    type Target = AttachmentDescription2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AttachmentDescriptionStencilLayout {
    type Target = AttachmentDescriptionStencilLayout;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AttachmentDescriptionStencilLayout {
    type Builder = AttachmentDescriptionStencilLayoutBuilder;
}

/// A builder for a [`AttachmentDescriptionStencilLayout`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AttachmentDescriptionStencilLayoutBuilder {
    value: AttachmentDescriptionStencilLayout,
}

impl AttachmentDescriptionStencilLayoutBuilder {
    #[inline]
    pub fn stencil_initial_layout(mut self, stencil_initial_layout: ImageLayout) -> Self {
        self.value.stencil_initial_layout = stencil_initial_layout;
        self
    }

    #[inline]
    pub fn stencil_final_layout(mut self, stencil_final_layout: ImageLayout) -> Self {
        self.value.stencil_final_layout = stencil_final_layout;
        self
    }

    #[inline]
    pub fn build(self) -> AttachmentDescriptionStencilLayout {
        self.value
    }
}

impl ops::Deref for AttachmentDescriptionStencilLayoutBuilder {
    type Target = AttachmentDescriptionStencilLayout;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AttachmentDescriptionStencilLayoutBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AttachmentDescriptionStencilLayoutBuilder {
    type Target = AttachmentDescriptionStencilLayout;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AttachmentReference {
    type Target = AttachmentReference;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AttachmentReference {
    type Builder = AttachmentReferenceBuilder;
}

/// A builder for a [`AttachmentReference`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AttachmentReferenceBuilder {
    value: AttachmentReference,
}

impl AttachmentReferenceBuilder {
    #[inline]
    pub fn attachment(mut self, attachment: u32) -> Self {
        self.value.attachment = attachment;
        self
    }

    #[inline]
    pub fn layout(mut self, layout: ImageLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn build(self) -> AttachmentReference {
        self.value
    }
}

impl ops::Deref for AttachmentReferenceBuilder {
    type Target = AttachmentReference;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AttachmentReferenceBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AttachmentReferenceBuilder {
    type Target = AttachmentReference;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`AttachmentReference2`].
pub unsafe trait ExtendsAttachmentReference2: fmt::Debug {}
unsafe impl ExtendsAttachmentReference2 for AttachmentReferenceStencilLayout {}

unsafe impl Cast for AttachmentReference2 {
    type Target = AttachmentReference2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AttachmentReference2 {
    type Builder = AttachmentReference2Builder<'b>;
}

/// A builder for a [`AttachmentReference2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AttachmentReference2Builder<'b> {
    value: AttachmentReference2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AttachmentReference2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsAttachmentReference2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn attachment(mut self, attachment: u32) -> Self {
        self.value.attachment = attachment;
        self
    }

    #[inline]
    pub fn layout(mut self, layout: ImageLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn aspect_mask(mut self, aspect_mask: ImageAspectFlags) -> Self {
        self.value.aspect_mask = aspect_mask;
        self
    }

    #[inline]
    pub fn build(self) -> AttachmentReference2 {
        self.value
    }
}

impl<'b> ops::Deref for AttachmentReference2Builder<'b> {
    type Target = AttachmentReference2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AttachmentReference2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AttachmentReference2Builder<'b> {
    type Target = AttachmentReference2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AttachmentReferenceStencilLayout {
    type Target = AttachmentReferenceStencilLayout;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for AttachmentReferenceStencilLayout {
    type Builder = AttachmentReferenceStencilLayoutBuilder;
}

/// A builder for a [`AttachmentReferenceStencilLayout`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AttachmentReferenceStencilLayoutBuilder {
    value: AttachmentReferenceStencilLayout,
}

impl AttachmentReferenceStencilLayoutBuilder {
    #[inline]
    pub fn stencil_layout(mut self, stencil_layout: ImageLayout) -> Self {
        self.value.stencil_layout = stencil_layout;
        self
    }

    #[inline]
    pub fn build(self) -> AttachmentReferenceStencilLayout {
        self.value
    }
}

impl ops::Deref for AttachmentReferenceStencilLayoutBuilder {
    type Target = AttachmentReferenceStencilLayout;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for AttachmentReferenceStencilLayoutBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for AttachmentReferenceStencilLayoutBuilder {
    type Target = AttachmentReferenceStencilLayout;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AttachmentSampleCountInfoAMD {
    type Target = AttachmentSampleCountInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AttachmentSampleCountInfoAMD {
    type Builder = AttachmentSampleCountInfoAMDBuilder<'b>;
}

/// A builder for a [`AttachmentSampleCountInfoAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AttachmentSampleCountInfoAMDBuilder<'b> {
    value: AttachmentSampleCountInfoAMD,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AttachmentSampleCountInfoAMDBuilder<'b> {
    #[inline]
    pub fn color_attachment_samples(
        mut self,
        color_attachment_samples: &'b [SampleCountFlags],
    ) -> Self {
        self.value.color_attachment_count = color_attachment_samples.len() as u32;
        self.value.color_attachment_samples = color_attachment_samples.as_ptr();
        self
    }

    #[inline]
    pub fn depth_stencil_attachment_samples(
        mut self,
        depth_stencil_attachment_samples: SampleCountFlags,
    ) -> Self {
        self.value.depth_stencil_attachment_samples = depth_stencil_attachment_samples;
        self
    }

    #[inline]
    pub fn build(self) -> AttachmentSampleCountInfoAMD {
        self.value
    }
}

impl<'b> ops::Deref for AttachmentSampleCountInfoAMDBuilder<'b> {
    type Target = AttachmentSampleCountInfoAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AttachmentSampleCountInfoAMDBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AttachmentSampleCountInfoAMDBuilder<'b> {
    type Target = AttachmentSampleCountInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for AttachmentSampleLocationsEXT {
    type Target = AttachmentSampleLocationsEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for AttachmentSampleLocationsEXT {
    type Builder = AttachmentSampleLocationsEXTBuilder<'b>;
}

/// A builder for a [`AttachmentSampleLocationsEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct AttachmentSampleLocationsEXTBuilder<'b> {
    value: AttachmentSampleLocationsEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> AttachmentSampleLocationsEXTBuilder<'b> {
    #[inline]
    pub fn attachment_index(mut self, attachment_index: u32) -> Self {
        self.value.attachment_index = attachment_index;
        self
    }

    #[inline]
    pub fn sample_locations_info(
        mut self,
        sample_locations_info: impl Cast<Target = SampleLocationsInfoEXT>,
    ) -> Self {
        self.value.sample_locations_info = sample_locations_info.into();
        self
    }

    #[inline]
    pub fn build(self) -> AttachmentSampleLocationsEXT {
        self.value
    }
}

impl<'b> ops::Deref for AttachmentSampleLocationsEXTBuilder<'b> {
    type Target = AttachmentSampleLocationsEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for AttachmentSampleLocationsEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for AttachmentSampleLocationsEXTBuilder<'b> {
    type Target = AttachmentSampleLocationsEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BaseInStructure {
    type Target = BaseInStructure;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BaseInStructure {
    type Builder = BaseInStructureBuilder;
}

/// A builder for a [`BaseInStructure`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BaseInStructureBuilder {
    value: BaseInStructure,
}

impl BaseInStructureBuilder {
    #[inline]
    pub fn s_type(mut self, s_type: StructureType) -> Self {
        self.value.s_type = s_type;
        self
    }

    #[inline]
    pub fn build(self) -> BaseInStructure {
        self.value
    }
}

impl ops::Deref for BaseInStructureBuilder {
    type Target = BaseInStructure;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BaseInStructureBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BaseInStructureBuilder {
    type Target = BaseInStructure;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BaseOutStructure {
    type Target = BaseOutStructure;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BaseOutStructure {
    type Builder = BaseOutStructureBuilder;
}

/// A builder for a [`BaseOutStructure`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BaseOutStructureBuilder {
    value: BaseOutStructure,
}

impl BaseOutStructureBuilder {
    #[inline]
    pub fn s_type(mut self, s_type: StructureType) -> Self {
        self.value.s_type = s_type;
        self
    }

    #[inline]
    pub fn build(self) -> BaseOutStructure {
        self.value
    }
}

impl ops::Deref for BaseOutStructureBuilder {
    type Target = BaseOutStructure;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BaseOutStructureBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BaseOutStructureBuilder {
    type Target = BaseOutStructure;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindAccelerationStructureMemoryInfoNV {
    type Target = BindAccelerationStructureMemoryInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindAccelerationStructureMemoryInfoNV {
    type Builder = BindAccelerationStructureMemoryInfoNVBuilder<'b>;
}

/// A builder for a [`BindAccelerationStructureMemoryInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindAccelerationStructureMemoryInfoNVBuilder<'b> {
    value: BindAccelerationStructureMemoryInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindAccelerationStructureMemoryInfoNVBuilder<'b> {
    #[inline]
    pub fn acceleration_structure(
        mut self,
        acceleration_structure: AccelerationStructureNV,
    ) -> Self {
        self.value.acceleration_structure = acceleration_structure;
        self
    }

    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn memory_offset(mut self, memory_offset: DeviceSize) -> Self {
        self.value.memory_offset = memory_offset;
        self
    }

    #[inline]
    pub fn device_indices(mut self, device_indices: &'b [u32]) -> Self {
        self.value.device_index_count = device_indices.len() as u32;
        self.value.device_indices = device_indices.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> BindAccelerationStructureMemoryInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for BindAccelerationStructureMemoryInfoNVBuilder<'b> {
    type Target = BindAccelerationStructureMemoryInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindAccelerationStructureMemoryInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindAccelerationStructureMemoryInfoNVBuilder<'b> {
    type Target = BindAccelerationStructureMemoryInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindBufferMemoryDeviceGroupInfo {
    type Target = BindBufferMemoryDeviceGroupInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindBufferMemoryDeviceGroupInfo {
    type Builder = BindBufferMemoryDeviceGroupInfoBuilder<'b>;
}

/// A builder for a [`BindBufferMemoryDeviceGroupInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindBufferMemoryDeviceGroupInfoBuilder<'b> {
    value: BindBufferMemoryDeviceGroupInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindBufferMemoryDeviceGroupInfoBuilder<'b> {
    #[inline]
    pub fn device_indices(mut self, device_indices: &'b [u32]) -> Self {
        self.value.device_index_count = device_indices.len() as u32;
        self.value.device_indices = device_indices.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> BindBufferMemoryDeviceGroupInfo {
        self.value
    }
}

impl<'b> ops::Deref for BindBufferMemoryDeviceGroupInfoBuilder<'b> {
    type Target = BindBufferMemoryDeviceGroupInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindBufferMemoryDeviceGroupInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindBufferMemoryDeviceGroupInfoBuilder<'b> {
    type Target = BindBufferMemoryDeviceGroupInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BindBufferMemoryInfo`].
pub unsafe trait ExtendsBindBufferMemoryInfo: fmt::Debug {}
unsafe impl ExtendsBindBufferMemoryInfo for BindBufferMemoryDeviceGroupInfo {}
unsafe impl ExtendsBindBufferMemoryInfo for BindMemoryStatusKHR {}

unsafe impl Cast for BindBufferMemoryInfo {
    type Target = BindBufferMemoryInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindBufferMemoryInfo {
    type Builder = BindBufferMemoryInfoBuilder<'b>;
}

/// A builder for a [`BindBufferMemoryInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindBufferMemoryInfoBuilder<'b> {
    value: BindBufferMemoryInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindBufferMemoryInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBindBufferMemoryInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn memory_offset(mut self, memory_offset: DeviceSize) -> Self {
        self.value.memory_offset = memory_offset;
        self
    }

    #[inline]
    pub fn build(self) -> BindBufferMemoryInfo {
        self.value
    }
}

impl<'b> ops::Deref for BindBufferMemoryInfoBuilder<'b> {
    type Target = BindBufferMemoryInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindBufferMemoryInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindBufferMemoryInfoBuilder<'b> {
    type Target = BindBufferMemoryInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BindDescriptorBufferEmbeddedSamplersInfoEXT`].
pub unsafe trait ExtendsBindDescriptorBufferEmbeddedSamplersInfoEXT: fmt::Debug {}
unsafe impl ExtendsBindDescriptorBufferEmbeddedSamplersInfoEXT for PipelineLayoutCreateInfo {}

unsafe impl Cast for BindDescriptorBufferEmbeddedSamplersInfoEXT {
    type Target = BindDescriptorBufferEmbeddedSamplersInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindDescriptorBufferEmbeddedSamplersInfoEXT {
    type Builder = BindDescriptorBufferEmbeddedSamplersInfoEXTBuilder<'b>;
}

/// A builder for a [`BindDescriptorBufferEmbeddedSamplersInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindDescriptorBufferEmbeddedSamplersInfoEXTBuilder<'b> {
    value: BindDescriptorBufferEmbeddedSamplersInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindDescriptorBufferEmbeddedSamplersInfoEXTBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBindDescriptorBufferEmbeddedSamplersInfoEXT,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn stage_flags(mut self, stage_flags: ShaderStageFlags) -> Self {
        self.value.stage_flags = stage_flags;
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn set(mut self, set: u32) -> Self {
        self.value.set = set;
        self
    }

    #[inline]
    pub fn build(self) -> BindDescriptorBufferEmbeddedSamplersInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for BindDescriptorBufferEmbeddedSamplersInfoEXTBuilder<'b> {
    type Target = BindDescriptorBufferEmbeddedSamplersInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindDescriptorBufferEmbeddedSamplersInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindDescriptorBufferEmbeddedSamplersInfoEXTBuilder<'b> {
    type Target = BindDescriptorBufferEmbeddedSamplersInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BindDescriptorSetsInfoKHR`].
pub unsafe trait ExtendsBindDescriptorSetsInfoKHR: fmt::Debug {}
unsafe impl ExtendsBindDescriptorSetsInfoKHR for PipelineLayoutCreateInfo {}

unsafe impl Cast for BindDescriptorSetsInfoKHR {
    type Target = BindDescriptorSetsInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindDescriptorSetsInfoKHR {
    type Builder = BindDescriptorSetsInfoKHRBuilder<'b>;
}

/// A builder for a [`BindDescriptorSetsInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindDescriptorSetsInfoKHRBuilder<'b> {
    value: BindDescriptorSetsInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindDescriptorSetsInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBindDescriptorSetsInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn stage_flags(mut self, stage_flags: ShaderStageFlags) -> Self {
        self.value.stage_flags = stage_flags;
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn first_set(mut self, first_set: u32) -> Self {
        self.value.first_set = first_set;
        self
    }

    #[inline]
    pub fn descriptor_sets(mut self, descriptor_sets: &'b [DescriptorSet]) -> Self {
        self.value.descriptor_set_count = descriptor_sets.len() as u32;
        self.value.descriptor_sets = descriptor_sets.as_ptr();
        self
    }

    #[inline]
    pub fn dynamic_offsets(mut self, dynamic_offsets: &'b [u32]) -> Self {
        self.value.dynamic_offset_count = dynamic_offsets.len() as u32;
        self.value.dynamic_offsets = dynamic_offsets.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> BindDescriptorSetsInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for BindDescriptorSetsInfoKHRBuilder<'b> {
    type Target = BindDescriptorSetsInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindDescriptorSetsInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindDescriptorSetsInfoKHRBuilder<'b> {
    type Target = BindDescriptorSetsInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindImageMemoryDeviceGroupInfo {
    type Target = BindImageMemoryDeviceGroupInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindImageMemoryDeviceGroupInfo {
    type Builder = BindImageMemoryDeviceGroupInfoBuilder<'b>;
}

/// A builder for a [`BindImageMemoryDeviceGroupInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindImageMemoryDeviceGroupInfoBuilder<'b> {
    value: BindImageMemoryDeviceGroupInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindImageMemoryDeviceGroupInfoBuilder<'b> {
    #[inline]
    pub fn device_indices(mut self, device_indices: &'b [u32]) -> Self {
        self.value.device_index_count = device_indices.len() as u32;
        self.value.device_indices = device_indices.as_ptr();
        self
    }

    #[inline]
    pub fn split_instance_bind_regions(
        mut self,
        split_instance_bind_regions: &'b [impl Cast<Target = Rect2D>],
    ) -> Self {
        self.value.split_instance_bind_region_count = split_instance_bind_regions.len() as u32;
        self.value.split_instance_bind_regions = split_instance_bind_regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> BindImageMemoryDeviceGroupInfo {
        self.value
    }
}

impl<'b> ops::Deref for BindImageMemoryDeviceGroupInfoBuilder<'b> {
    type Target = BindImageMemoryDeviceGroupInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindImageMemoryDeviceGroupInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindImageMemoryDeviceGroupInfoBuilder<'b> {
    type Target = BindImageMemoryDeviceGroupInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BindImageMemoryInfo`].
pub unsafe trait ExtendsBindImageMemoryInfo: fmt::Debug {}
unsafe impl ExtendsBindImageMemoryInfo for BindImageMemoryDeviceGroupInfo {}
unsafe impl ExtendsBindImageMemoryInfo for BindImageMemorySwapchainInfoKHR {}
unsafe impl ExtendsBindImageMemoryInfo for BindImagePlaneMemoryInfo {}
unsafe impl ExtendsBindImageMemoryInfo for BindMemoryStatusKHR {}

unsafe impl Cast for BindImageMemoryInfo {
    type Target = BindImageMemoryInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindImageMemoryInfo {
    type Builder = BindImageMemoryInfoBuilder<'b>;
}

/// A builder for a [`BindImageMemoryInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindImageMemoryInfoBuilder<'b> {
    value: BindImageMemoryInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindImageMemoryInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBindImageMemoryInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn memory_offset(mut self, memory_offset: DeviceSize) -> Self {
        self.value.memory_offset = memory_offset;
        self
    }

    #[inline]
    pub fn build(self) -> BindImageMemoryInfo {
        self.value
    }
}

impl<'b> ops::Deref for BindImageMemoryInfoBuilder<'b> {
    type Target = BindImageMemoryInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindImageMemoryInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindImageMemoryInfoBuilder<'b> {
    type Target = BindImageMemoryInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindImageMemorySwapchainInfoKHR {
    type Target = BindImageMemorySwapchainInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BindImageMemorySwapchainInfoKHR {
    type Builder = BindImageMemorySwapchainInfoKHRBuilder;
}

/// A builder for a [`BindImageMemorySwapchainInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindImageMemorySwapchainInfoKHRBuilder {
    value: BindImageMemorySwapchainInfoKHR,
}

impl BindImageMemorySwapchainInfoKHRBuilder {
    #[inline]
    pub fn swapchain(mut self, swapchain: SwapchainKHR) -> Self {
        self.value.swapchain = swapchain;
        self
    }

    #[inline]
    pub fn image_index(mut self, image_index: u32) -> Self {
        self.value.image_index = image_index;
        self
    }

    #[inline]
    pub fn build(self) -> BindImageMemorySwapchainInfoKHR {
        self.value
    }
}

impl ops::Deref for BindImageMemorySwapchainInfoKHRBuilder {
    type Target = BindImageMemorySwapchainInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BindImageMemorySwapchainInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BindImageMemorySwapchainInfoKHRBuilder {
    type Target = BindImageMemorySwapchainInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindImagePlaneMemoryInfo {
    type Target = BindImagePlaneMemoryInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BindImagePlaneMemoryInfo {
    type Builder = BindImagePlaneMemoryInfoBuilder;
}

/// A builder for a [`BindImagePlaneMemoryInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindImagePlaneMemoryInfoBuilder {
    value: BindImagePlaneMemoryInfo,
}

impl BindImagePlaneMemoryInfoBuilder {
    #[inline]
    pub fn plane_aspect(mut self, plane_aspect: ImageAspectFlags) -> Self {
        self.value.plane_aspect = plane_aspect;
        self
    }

    #[inline]
    pub fn build(self) -> BindImagePlaneMemoryInfo {
        self.value
    }
}

impl ops::Deref for BindImagePlaneMemoryInfoBuilder {
    type Target = BindImagePlaneMemoryInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BindImagePlaneMemoryInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BindImagePlaneMemoryInfoBuilder {
    type Target = BindImagePlaneMemoryInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindIndexBufferIndirectCommandNV {
    type Target = BindIndexBufferIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BindIndexBufferIndirectCommandNV {
    type Builder = BindIndexBufferIndirectCommandNVBuilder;
}

/// A builder for a [`BindIndexBufferIndirectCommandNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindIndexBufferIndirectCommandNVBuilder {
    value: BindIndexBufferIndirectCommandNV,
}

impl BindIndexBufferIndirectCommandNVBuilder {
    #[inline]
    pub fn buffer_address(mut self, buffer_address: DeviceAddress) -> Self {
        self.value.buffer_address = buffer_address;
        self
    }

    #[inline]
    pub fn size(mut self, size: u32) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn index_type(mut self, index_type: IndexType) -> Self {
        self.value.index_type = index_type;
        self
    }

    #[inline]
    pub fn build(self) -> BindIndexBufferIndirectCommandNV {
        self.value
    }
}

impl ops::Deref for BindIndexBufferIndirectCommandNVBuilder {
    type Target = BindIndexBufferIndirectCommandNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BindIndexBufferIndirectCommandNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BindIndexBufferIndirectCommandNVBuilder {
    type Target = BindIndexBufferIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindMemoryStatusKHR {
    type Target = BindMemoryStatusKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindMemoryStatusKHR {
    type Builder = BindMemoryStatusKHRBuilder<'b>;
}

/// A builder for a [`BindMemoryStatusKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindMemoryStatusKHRBuilder<'b> {
    value: BindMemoryStatusKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindMemoryStatusKHRBuilder<'b> {
    #[inline]
    pub fn result(mut self, result: &'b mut Result) -> Self {
        self.value.result = result as *mut Result;
        self
    }

    #[inline]
    pub fn build(self) -> BindMemoryStatusKHR {
        self.value
    }
}

impl<'b> ops::Deref for BindMemoryStatusKHRBuilder<'b> {
    type Target = BindMemoryStatusKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindMemoryStatusKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindMemoryStatusKHRBuilder<'b> {
    type Target = BindMemoryStatusKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindPipelineIndirectCommandNV {
    type Target = BindPipelineIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BindPipelineIndirectCommandNV {
    type Builder = BindPipelineIndirectCommandNVBuilder;
}

/// A builder for a [`BindPipelineIndirectCommandNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindPipelineIndirectCommandNVBuilder {
    value: BindPipelineIndirectCommandNV,
}

impl BindPipelineIndirectCommandNVBuilder {
    #[inline]
    pub fn pipeline_address(mut self, pipeline_address: DeviceAddress) -> Self {
        self.value.pipeline_address = pipeline_address;
        self
    }

    #[inline]
    pub fn build(self) -> BindPipelineIndirectCommandNV {
        self.value
    }
}

impl ops::Deref for BindPipelineIndirectCommandNVBuilder {
    type Target = BindPipelineIndirectCommandNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BindPipelineIndirectCommandNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BindPipelineIndirectCommandNVBuilder {
    type Target = BindPipelineIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindShaderGroupIndirectCommandNV {
    type Target = BindShaderGroupIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BindShaderGroupIndirectCommandNV {
    type Builder = BindShaderGroupIndirectCommandNVBuilder;
}

/// A builder for a [`BindShaderGroupIndirectCommandNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindShaderGroupIndirectCommandNVBuilder {
    value: BindShaderGroupIndirectCommandNV,
}

impl BindShaderGroupIndirectCommandNVBuilder {
    #[inline]
    pub fn group_index(mut self, group_index: u32) -> Self {
        self.value.group_index = group_index;
        self
    }

    #[inline]
    pub fn build(self) -> BindShaderGroupIndirectCommandNV {
        self.value
    }
}

impl ops::Deref for BindShaderGroupIndirectCommandNVBuilder {
    type Target = BindShaderGroupIndirectCommandNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BindShaderGroupIndirectCommandNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BindShaderGroupIndirectCommandNVBuilder {
    type Target = BindShaderGroupIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BindSparseInfo`].
pub unsafe trait ExtendsBindSparseInfo: fmt::Debug {}
unsafe impl ExtendsBindSparseInfo for DeviceGroupBindSparseInfo {}
unsafe impl ExtendsBindSparseInfo for FrameBoundaryEXT {}
unsafe impl ExtendsBindSparseInfo for TimelineSemaphoreSubmitInfo {}

unsafe impl Cast for BindSparseInfo {
    type Target = BindSparseInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BindSparseInfo {
    type Builder = BindSparseInfoBuilder<'b>;
}

/// A builder for a [`BindSparseInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindSparseInfoBuilder<'b> {
    value: BindSparseInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BindSparseInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBindSparseInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn wait_semaphores(mut self, wait_semaphores: &'b [Semaphore]) -> Self {
        self.value.wait_semaphore_count = wait_semaphores.len() as u32;
        self.value.wait_semaphores = wait_semaphores.as_ptr();
        self
    }

    #[inline]
    pub fn buffer_binds(
        mut self,
        buffer_binds: &'b [impl Cast<Target = SparseBufferMemoryBindInfo>],
    ) -> Self {
        self.value.buffer_bind_count = buffer_binds.len() as u32;
        self.value.buffer_binds = buffer_binds.as_ptr().cast();
        self
    }

    #[inline]
    pub fn image_opaque_binds(
        mut self,
        image_opaque_binds: &'b [impl Cast<Target = SparseImageOpaqueMemoryBindInfo>],
    ) -> Self {
        self.value.image_opaque_bind_count = image_opaque_binds.len() as u32;
        self.value.image_opaque_binds = image_opaque_binds.as_ptr().cast();
        self
    }

    #[inline]
    pub fn image_binds(
        mut self,
        image_binds: &'b [impl Cast<Target = SparseImageMemoryBindInfo>],
    ) -> Self {
        self.value.image_bind_count = image_binds.len() as u32;
        self.value.image_binds = image_binds.as_ptr().cast();
        self
    }

    #[inline]
    pub fn signal_semaphores(mut self, signal_semaphores: &'b [Semaphore]) -> Self {
        self.value.signal_semaphore_count = signal_semaphores.len() as u32;
        self.value.signal_semaphores = signal_semaphores.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> BindSparseInfo {
        self.value
    }
}

impl<'b> ops::Deref for BindSparseInfoBuilder<'b> {
    type Target = BindSparseInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BindSparseInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BindSparseInfoBuilder<'b> {
    type Target = BindSparseInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindVertexBufferIndirectCommandNV {
    type Target = BindVertexBufferIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BindVertexBufferIndirectCommandNV {
    type Builder = BindVertexBufferIndirectCommandNVBuilder;
}

/// A builder for a [`BindVertexBufferIndirectCommandNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindVertexBufferIndirectCommandNVBuilder {
    value: BindVertexBufferIndirectCommandNV,
}

impl BindVertexBufferIndirectCommandNVBuilder {
    #[inline]
    pub fn buffer_address(mut self, buffer_address: DeviceAddress) -> Self {
        self.value.buffer_address = buffer_address;
        self
    }

    #[inline]
    pub fn size(mut self, size: u32) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn stride(mut self, stride: u32) -> Self {
        self.value.stride = stride;
        self
    }

    #[inline]
    pub fn build(self) -> BindVertexBufferIndirectCommandNV {
        self.value
    }
}

impl ops::Deref for BindVertexBufferIndirectCommandNVBuilder {
    type Target = BindVertexBufferIndirectCommandNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BindVertexBufferIndirectCommandNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BindVertexBufferIndirectCommandNVBuilder {
    type Target = BindVertexBufferIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BindVideoSessionMemoryInfoKHR {
    type Target = BindVideoSessionMemoryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BindVideoSessionMemoryInfoKHR {
    type Builder = BindVideoSessionMemoryInfoKHRBuilder;
}

/// A builder for a [`BindVideoSessionMemoryInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BindVideoSessionMemoryInfoKHRBuilder {
    value: BindVideoSessionMemoryInfoKHR,
}

impl BindVideoSessionMemoryInfoKHRBuilder {
    #[inline]
    pub fn memory_bind_index(mut self, memory_bind_index: u32) -> Self {
        self.value.memory_bind_index = memory_bind_index;
        self
    }

    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn memory_offset(mut self, memory_offset: DeviceSize) -> Self {
        self.value.memory_offset = memory_offset;
        self
    }

    #[inline]
    pub fn memory_size(mut self, memory_size: DeviceSize) -> Self {
        self.value.memory_size = memory_size;
        self
    }

    #[inline]
    pub fn build(self) -> BindVideoSessionMemoryInfoKHR {
        self.value
    }
}

impl ops::Deref for BindVideoSessionMemoryInfoKHRBuilder {
    type Target = BindVideoSessionMemoryInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BindVideoSessionMemoryInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BindVideoSessionMemoryInfoKHRBuilder {
    type Target = BindVideoSessionMemoryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BlitImageCubicWeightsInfoQCOM {
    type Target = BlitImageCubicWeightsInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BlitImageCubicWeightsInfoQCOM {
    type Builder = BlitImageCubicWeightsInfoQCOMBuilder;
}

/// A builder for a [`BlitImageCubicWeightsInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BlitImageCubicWeightsInfoQCOMBuilder {
    value: BlitImageCubicWeightsInfoQCOM,
}

impl BlitImageCubicWeightsInfoQCOMBuilder {
    #[inline]
    pub fn cubic_weights(mut self, cubic_weights: CubicFilterWeightsQCOM) -> Self {
        self.value.cubic_weights = cubic_weights;
        self
    }

    #[inline]
    pub fn build(self) -> BlitImageCubicWeightsInfoQCOM {
        self.value
    }
}

impl ops::Deref for BlitImageCubicWeightsInfoQCOMBuilder {
    type Target = BlitImageCubicWeightsInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BlitImageCubicWeightsInfoQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BlitImageCubicWeightsInfoQCOMBuilder {
    type Target = BlitImageCubicWeightsInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BlitImageInfo2`].
pub unsafe trait ExtendsBlitImageInfo2: fmt::Debug {}
unsafe impl ExtendsBlitImageInfo2 for BlitImageCubicWeightsInfoQCOM {}

unsafe impl Cast for BlitImageInfo2 {
    type Target = BlitImageInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BlitImageInfo2 {
    type Builder = BlitImageInfo2Builder<'b>;
}

/// A builder for a [`BlitImageInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BlitImageInfo2Builder<'b> {
    value: BlitImageInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BlitImageInfo2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBlitImageInfo2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn src_image(mut self, src_image: Image) -> Self {
        self.value.src_image = src_image;
        self
    }

    #[inline]
    pub fn src_image_layout(mut self, src_image_layout: ImageLayout) -> Self {
        self.value.src_image_layout = src_image_layout;
        self
    }

    #[inline]
    pub fn dst_image(mut self, dst_image: Image) -> Self {
        self.value.dst_image = dst_image;
        self
    }

    #[inline]
    pub fn dst_image_layout(mut self, dst_image_layout: ImageLayout) -> Self {
        self.value.dst_image_layout = dst_image_layout;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = ImageBlit2>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn filter(mut self, filter: Filter) -> Self {
        self.value.filter = filter;
        self
    }

    #[inline]
    pub fn build(self) -> BlitImageInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for BlitImageInfo2Builder<'b> {
    type Target = BlitImageInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BlitImageInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BlitImageInfo2Builder<'b> {
    type Target = BlitImageInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferCaptureDescriptorDataInfoEXT {
    type Target = BufferCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferCaptureDescriptorDataInfoEXT {
    type Builder = BufferCaptureDescriptorDataInfoEXTBuilder;
}

/// A builder for a [`BufferCaptureDescriptorDataInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCaptureDescriptorDataInfoEXTBuilder {
    value: BufferCaptureDescriptorDataInfoEXT,
}

impl BufferCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn build(self) -> BufferCaptureDescriptorDataInfoEXT {
        self.value
    }
}

impl ops::Deref for BufferCaptureDescriptorDataInfoEXTBuilder {
    type Target = BufferCaptureDescriptorDataInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferCaptureDescriptorDataInfoEXTBuilder {
    type Target = BufferCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferCollectionBufferCreateInfoFUCHSIA {
    type Target = BufferCollectionBufferCreateInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferCollectionBufferCreateInfoFUCHSIA {
    type Builder = BufferCollectionBufferCreateInfoFUCHSIABuilder;
}

/// A builder for a [`BufferCollectionBufferCreateInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCollectionBufferCreateInfoFUCHSIABuilder {
    value: BufferCollectionBufferCreateInfoFUCHSIA,
}

impl BufferCollectionBufferCreateInfoFUCHSIABuilder {
    #[inline]
    pub fn collection(mut self, collection: BufferCollectionFUCHSIA) -> Self {
        self.value.collection = collection;
        self
    }

    #[inline]
    pub fn index(mut self, index: u32) -> Self {
        self.value.index = index;
        self
    }

    #[inline]
    pub fn build(self) -> BufferCollectionBufferCreateInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for BufferCollectionBufferCreateInfoFUCHSIABuilder {
    type Target = BufferCollectionBufferCreateInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferCollectionBufferCreateInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferCollectionBufferCreateInfoFUCHSIABuilder {
    type Target = BufferCollectionBufferCreateInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferCollectionConstraintsInfoFUCHSIA {
    type Target = BufferCollectionConstraintsInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferCollectionConstraintsInfoFUCHSIA {
    type Builder = BufferCollectionConstraintsInfoFUCHSIABuilder;
}

/// A builder for a [`BufferCollectionConstraintsInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCollectionConstraintsInfoFUCHSIABuilder {
    value: BufferCollectionConstraintsInfoFUCHSIA,
}

impl BufferCollectionConstraintsInfoFUCHSIABuilder {
    #[inline]
    pub fn min_buffer_count(mut self, min_buffer_count: u32) -> Self {
        self.value.min_buffer_count = min_buffer_count;
        self
    }

    #[inline]
    pub fn max_buffer_count(mut self, max_buffer_count: u32) -> Self {
        self.value.max_buffer_count = max_buffer_count;
        self
    }

    #[inline]
    pub fn min_buffer_count_for_camping(mut self, min_buffer_count_for_camping: u32) -> Self {
        self.value.min_buffer_count_for_camping = min_buffer_count_for_camping;
        self
    }

    #[inline]
    pub fn min_buffer_count_for_dedicated_slack(
        mut self,
        min_buffer_count_for_dedicated_slack: u32,
    ) -> Self {
        self.value.min_buffer_count_for_dedicated_slack = min_buffer_count_for_dedicated_slack;
        self
    }

    #[inline]
    pub fn min_buffer_count_for_shared_slack(
        mut self,
        min_buffer_count_for_shared_slack: u32,
    ) -> Self {
        self.value.min_buffer_count_for_shared_slack = min_buffer_count_for_shared_slack;
        self
    }

    #[inline]
    pub fn build(self) -> BufferCollectionConstraintsInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for BufferCollectionConstraintsInfoFUCHSIABuilder {
    type Target = BufferCollectionConstraintsInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferCollectionConstraintsInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferCollectionConstraintsInfoFUCHSIABuilder {
    type Target = BufferCollectionConstraintsInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferCollectionCreateInfoFUCHSIA {
    type Target = BufferCollectionCreateInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferCollectionCreateInfoFUCHSIA {
    type Builder = BufferCollectionCreateInfoFUCHSIABuilder;
}

/// A builder for a [`BufferCollectionCreateInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCollectionCreateInfoFUCHSIABuilder {
    value: BufferCollectionCreateInfoFUCHSIA,
}

impl BufferCollectionCreateInfoFUCHSIABuilder {
    #[inline]
    pub fn collection_token(mut self, collection_token: zx_handle_t) -> Self {
        self.value.collection_token = collection_token;
        self
    }

    #[inline]
    pub fn build(self) -> BufferCollectionCreateInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for BufferCollectionCreateInfoFUCHSIABuilder {
    type Target = BufferCollectionCreateInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferCollectionCreateInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferCollectionCreateInfoFUCHSIABuilder {
    type Target = BufferCollectionCreateInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferCollectionImageCreateInfoFUCHSIA {
    type Target = BufferCollectionImageCreateInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferCollectionImageCreateInfoFUCHSIA {
    type Builder = BufferCollectionImageCreateInfoFUCHSIABuilder;
}

/// A builder for a [`BufferCollectionImageCreateInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCollectionImageCreateInfoFUCHSIABuilder {
    value: BufferCollectionImageCreateInfoFUCHSIA,
}

impl BufferCollectionImageCreateInfoFUCHSIABuilder {
    #[inline]
    pub fn collection(mut self, collection: BufferCollectionFUCHSIA) -> Self {
        self.value.collection = collection;
        self
    }

    #[inline]
    pub fn index(mut self, index: u32) -> Self {
        self.value.index = index;
        self
    }

    #[inline]
    pub fn build(self) -> BufferCollectionImageCreateInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for BufferCollectionImageCreateInfoFUCHSIABuilder {
    type Target = BufferCollectionImageCreateInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferCollectionImageCreateInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferCollectionImageCreateInfoFUCHSIABuilder {
    type Target = BufferCollectionImageCreateInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferCollectionPropertiesFUCHSIA {
    type Target = BufferCollectionPropertiesFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferCollectionPropertiesFUCHSIA {
    type Builder = BufferCollectionPropertiesFUCHSIABuilder;
}

/// A builder for a [`BufferCollectionPropertiesFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCollectionPropertiesFUCHSIABuilder {
    value: BufferCollectionPropertiesFUCHSIA,
}

impl BufferCollectionPropertiesFUCHSIABuilder {
    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn buffer_count(mut self, buffer_count: u32) -> Self {
        self.value.buffer_count = buffer_count;
        self
    }

    #[inline]
    pub fn create_info_index(mut self, create_info_index: u32) -> Self {
        self.value.create_info_index = create_info_index;
        self
    }

    #[inline]
    pub fn sysmem_pixel_format(mut self, sysmem_pixel_format: u64) -> Self {
        self.value.sysmem_pixel_format = sysmem_pixel_format;
        self
    }

    #[inline]
    pub fn format_features(mut self, format_features: FormatFeatureFlags) -> Self {
        self.value.format_features = format_features;
        self
    }

    #[inline]
    pub fn sysmem_color_space_index(
        mut self,
        sysmem_color_space_index: impl Cast<Target = SysmemColorSpaceFUCHSIA>,
    ) -> Self {
        self.value.sysmem_color_space_index = sysmem_color_space_index.into();
        self
    }

    #[inline]
    pub fn sampler_ycbcr_conversion_components(
        mut self,
        sampler_ycbcr_conversion_components: impl Cast<Target = ComponentMapping>,
    ) -> Self {
        self.value.sampler_ycbcr_conversion_components = sampler_ycbcr_conversion_components.into();
        self
    }

    #[inline]
    pub fn suggested_ycbcr_model(
        mut self,
        suggested_ycbcr_model: SamplerYcbcrModelConversion,
    ) -> Self {
        self.value.suggested_ycbcr_model = suggested_ycbcr_model;
        self
    }

    #[inline]
    pub fn suggested_ycbcr_range(mut self, suggested_ycbcr_range: SamplerYcbcrRange) -> Self {
        self.value.suggested_ycbcr_range = suggested_ycbcr_range;
        self
    }

    #[inline]
    pub fn suggested_x_chroma_offset(mut self, suggested_x_chroma_offset: ChromaLocation) -> Self {
        self.value.suggested_x_chroma_offset = suggested_x_chroma_offset;
        self
    }

    #[inline]
    pub fn suggested_y_chroma_offset(mut self, suggested_y_chroma_offset: ChromaLocation) -> Self {
        self.value.suggested_y_chroma_offset = suggested_y_chroma_offset;
        self
    }

    #[inline]
    pub fn build(self) -> BufferCollectionPropertiesFUCHSIA {
        self.value
    }
}

impl ops::Deref for BufferCollectionPropertiesFUCHSIABuilder {
    type Target = BufferCollectionPropertiesFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferCollectionPropertiesFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferCollectionPropertiesFUCHSIABuilder {
    type Target = BufferCollectionPropertiesFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferConstraintsInfoFUCHSIA {
    type Target = BufferConstraintsInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BufferConstraintsInfoFUCHSIA {
    type Builder = BufferConstraintsInfoFUCHSIABuilder<'b>;
}

/// A builder for a [`BufferConstraintsInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferConstraintsInfoFUCHSIABuilder<'b> {
    value: BufferConstraintsInfoFUCHSIA,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BufferConstraintsInfoFUCHSIABuilder<'b> {
    #[inline]
    pub fn create_info(mut self, create_info: impl Cast<Target = BufferCreateInfo>) -> Self {
        self.value.create_info = create_info.into();
        self
    }

    #[inline]
    pub fn required_format_features(
        mut self,
        required_format_features: FormatFeatureFlags,
    ) -> Self {
        self.value.required_format_features = required_format_features;
        self
    }

    #[inline]
    pub fn buffer_collection_constraints(
        mut self,
        buffer_collection_constraints: impl Cast<Target = BufferCollectionConstraintsInfoFUCHSIA>,
    ) -> Self {
        self.value.buffer_collection_constraints = buffer_collection_constraints.into();
        self
    }

    #[inline]
    pub fn build(self) -> BufferConstraintsInfoFUCHSIA {
        self.value
    }
}

impl<'b> ops::Deref for BufferConstraintsInfoFUCHSIABuilder<'b> {
    type Target = BufferConstraintsInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BufferConstraintsInfoFUCHSIABuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BufferConstraintsInfoFUCHSIABuilder<'b> {
    type Target = BufferConstraintsInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferCopy {
    type Target = BufferCopy;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferCopy {
    type Builder = BufferCopyBuilder;
}

/// A builder for a [`BufferCopy`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCopyBuilder {
    value: BufferCopy,
}

impl BufferCopyBuilder {
    #[inline]
    pub fn src_offset(mut self, src_offset: DeviceSize) -> Self {
        self.value.src_offset = src_offset;
        self
    }

    #[inline]
    pub fn dst_offset(mut self, dst_offset: DeviceSize) -> Self {
        self.value.dst_offset = dst_offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> BufferCopy {
        self.value
    }
}

impl ops::Deref for BufferCopyBuilder {
    type Target = BufferCopy;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferCopyBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferCopyBuilder {
    type Target = BufferCopy;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferCopy2 {
    type Target = BufferCopy2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferCopy2 {
    type Builder = BufferCopy2Builder;
}

/// A builder for a [`BufferCopy2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCopy2Builder {
    value: BufferCopy2,
}

impl BufferCopy2Builder {
    #[inline]
    pub fn src_offset(mut self, src_offset: DeviceSize) -> Self {
        self.value.src_offset = src_offset;
        self
    }

    #[inline]
    pub fn dst_offset(mut self, dst_offset: DeviceSize) -> Self {
        self.value.dst_offset = dst_offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> BufferCopy2 {
        self.value
    }
}

impl ops::Deref for BufferCopy2Builder {
    type Target = BufferCopy2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferCopy2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferCopy2Builder {
    type Target = BufferCopy2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BufferCreateInfo`].
pub unsafe trait ExtendsBufferCreateInfo: fmt::Debug {}
unsafe impl ExtendsBufferCreateInfo for BufferCollectionBufferCreateInfoFUCHSIA {}
unsafe impl ExtendsBufferCreateInfo for BufferDeviceAddressCreateInfoEXT {}
unsafe impl ExtendsBufferCreateInfo for BufferOpaqueCaptureAddressCreateInfo {}
unsafe impl ExtendsBufferCreateInfo for BufferUsageFlags2CreateInfoKHR {}
unsafe impl ExtendsBufferCreateInfo for DedicatedAllocationBufferCreateInfoNV {}
unsafe impl ExtendsBufferCreateInfo for ExternalMemoryBufferCreateInfo {}
unsafe impl ExtendsBufferCreateInfo for OpaqueCaptureDescriptorDataCreateInfoEXT {}
unsafe impl ExtendsBufferCreateInfo for VideoProfileListInfoKHR {}

unsafe impl Cast for BufferCreateInfo {
    type Target = BufferCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BufferCreateInfo {
    type Builder = BufferCreateInfoBuilder<'b>;
}

/// A builder for a [`BufferCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferCreateInfoBuilder<'b> {
    value: BufferCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BufferCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBufferCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: BufferCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn usage(mut self, usage: BufferUsageFlags) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn sharing_mode(mut self, sharing_mode: SharingMode) -> Self {
        self.value.sharing_mode = sharing_mode;
        self
    }

    #[inline]
    pub fn queue_family_indices(mut self, queue_family_indices: &'b [u32]) -> Self {
        self.value.queue_family_index_count = queue_family_indices.len() as u32;
        self.value.queue_family_indices = queue_family_indices.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> BufferCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for BufferCreateInfoBuilder<'b> {
    type Target = BufferCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BufferCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BufferCreateInfoBuilder<'b> {
    type Target = BufferCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferDeviceAddressCreateInfoEXT {
    type Target = BufferDeviceAddressCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferDeviceAddressCreateInfoEXT {
    type Builder = BufferDeviceAddressCreateInfoEXTBuilder;
}

/// A builder for a [`BufferDeviceAddressCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferDeviceAddressCreateInfoEXTBuilder {
    value: BufferDeviceAddressCreateInfoEXT,
}

impl BufferDeviceAddressCreateInfoEXTBuilder {
    #[inline]
    pub fn device_address(mut self, device_address: DeviceAddress) -> Self {
        self.value.device_address = device_address;
        self
    }

    #[inline]
    pub fn build(self) -> BufferDeviceAddressCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for BufferDeviceAddressCreateInfoEXTBuilder {
    type Target = BufferDeviceAddressCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferDeviceAddressCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferDeviceAddressCreateInfoEXTBuilder {
    type Target = BufferDeviceAddressCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferDeviceAddressInfo {
    type Target = BufferDeviceAddressInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferDeviceAddressInfo {
    type Builder = BufferDeviceAddressInfoBuilder;
}

/// A builder for a [`BufferDeviceAddressInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferDeviceAddressInfoBuilder {
    value: BufferDeviceAddressInfo,
}

impl BufferDeviceAddressInfoBuilder {
    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn build(self) -> BufferDeviceAddressInfo {
        self.value
    }
}

impl ops::Deref for BufferDeviceAddressInfoBuilder {
    type Target = BufferDeviceAddressInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferDeviceAddressInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferDeviceAddressInfoBuilder {
    type Target = BufferDeviceAddressInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferImageCopy {
    type Target = BufferImageCopy;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferImageCopy {
    type Builder = BufferImageCopyBuilder;
}

/// A builder for a [`BufferImageCopy`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferImageCopyBuilder {
    value: BufferImageCopy,
}

impl BufferImageCopyBuilder {
    #[inline]
    pub fn buffer_offset(mut self, buffer_offset: DeviceSize) -> Self {
        self.value.buffer_offset = buffer_offset;
        self
    }

    #[inline]
    pub fn buffer_row_length(mut self, buffer_row_length: u32) -> Self {
        self.value.buffer_row_length = buffer_row_length;
        self
    }

    #[inline]
    pub fn buffer_image_height(mut self, buffer_image_height: u32) -> Self {
        self.value.buffer_image_height = buffer_image_height;
        self
    }

    #[inline]
    pub fn image_subresource(
        mut self,
        image_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.image_subresource = image_subresource.into();
        self
    }

    #[inline]
    pub fn image_offset(mut self, image_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.image_offset = image_offset.into();
        self
    }

    #[inline]
    pub fn image_extent(mut self, image_extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.image_extent = image_extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> BufferImageCopy {
        self.value
    }
}

impl ops::Deref for BufferImageCopyBuilder {
    type Target = BufferImageCopy;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferImageCopyBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferImageCopyBuilder {
    type Target = BufferImageCopy;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BufferImageCopy2`].
pub unsafe trait ExtendsBufferImageCopy2: fmt::Debug {}
unsafe impl ExtendsBufferImageCopy2 for CopyCommandTransformInfoQCOM {}

unsafe impl Cast for BufferImageCopy2 {
    type Target = BufferImageCopy2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BufferImageCopy2 {
    type Builder = BufferImageCopy2Builder<'b>;
}

/// A builder for a [`BufferImageCopy2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferImageCopy2Builder<'b> {
    value: BufferImageCopy2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BufferImageCopy2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBufferImageCopy2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn buffer_offset(mut self, buffer_offset: DeviceSize) -> Self {
        self.value.buffer_offset = buffer_offset;
        self
    }

    #[inline]
    pub fn buffer_row_length(mut self, buffer_row_length: u32) -> Self {
        self.value.buffer_row_length = buffer_row_length;
        self
    }

    #[inline]
    pub fn buffer_image_height(mut self, buffer_image_height: u32) -> Self {
        self.value.buffer_image_height = buffer_image_height;
        self
    }

    #[inline]
    pub fn image_subresource(
        mut self,
        image_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.image_subresource = image_subresource.into();
        self
    }

    #[inline]
    pub fn image_offset(mut self, image_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.image_offset = image_offset.into();
        self
    }

    #[inline]
    pub fn image_extent(mut self, image_extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.image_extent = image_extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> BufferImageCopy2 {
        self.value
    }
}

impl<'b> ops::Deref for BufferImageCopy2Builder<'b> {
    type Target = BufferImageCopy2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BufferImageCopy2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BufferImageCopy2Builder<'b> {
    type Target = BufferImageCopy2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BufferMemoryBarrier`].
pub unsafe trait ExtendsBufferMemoryBarrier: fmt::Debug {}
unsafe impl ExtendsBufferMemoryBarrier for ExternalMemoryAcquireUnmodifiedEXT {}

unsafe impl Cast for BufferMemoryBarrier {
    type Target = BufferMemoryBarrier;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BufferMemoryBarrier {
    type Builder = BufferMemoryBarrierBuilder<'b>;
}

/// A builder for a [`BufferMemoryBarrier`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferMemoryBarrierBuilder<'b> {
    value: BufferMemoryBarrier,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BufferMemoryBarrierBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBufferMemoryBarrier,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn src_access_mask(mut self, src_access_mask: AccessFlags) -> Self {
        self.value.src_access_mask = src_access_mask;
        self
    }

    #[inline]
    pub fn dst_access_mask(mut self, dst_access_mask: AccessFlags) -> Self {
        self.value.dst_access_mask = dst_access_mask;
        self
    }

    #[inline]
    pub fn src_queue_family_index(mut self, src_queue_family_index: u32) -> Self {
        self.value.src_queue_family_index = src_queue_family_index;
        self
    }

    #[inline]
    pub fn dst_queue_family_index(mut self, dst_queue_family_index: u32) -> Self {
        self.value.dst_queue_family_index = dst_queue_family_index;
        self
    }

    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> BufferMemoryBarrier {
        self.value
    }
}

impl<'b> ops::Deref for BufferMemoryBarrierBuilder<'b> {
    type Target = BufferMemoryBarrier;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BufferMemoryBarrierBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BufferMemoryBarrierBuilder<'b> {
    type Target = BufferMemoryBarrier;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BufferMemoryBarrier2`].
pub unsafe trait ExtendsBufferMemoryBarrier2: fmt::Debug {}
unsafe impl ExtendsBufferMemoryBarrier2 for ExternalMemoryAcquireUnmodifiedEXT {}

unsafe impl Cast for BufferMemoryBarrier2 {
    type Target = BufferMemoryBarrier2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BufferMemoryBarrier2 {
    type Builder = BufferMemoryBarrier2Builder<'b>;
}

/// A builder for a [`BufferMemoryBarrier2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferMemoryBarrier2Builder<'b> {
    value: BufferMemoryBarrier2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BufferMemoryBarrier2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBufferMemoryBarrier2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn src_stage_mask(mut self, src_stage_mask: PipelineStageFlags2) -> Self {
        self.value.src_stage_mask = src_stage_mask;
        self
    }

    #[inline]
    pub fn src_access_mask(mut self, src_access_mask: AccessFlags2) -> Self {
        self.value.src_access_mask = src_access_mask;
        self
    }

    #[inline]
    pub fn dst_stage_mask(mut self, dst_stage_mask: PipelineStageFlags2) -> Self {
        self.value.dst_stage_mask = dst_stage_mask;
        self
    }

    #[inline]
    pub fn dst_access_mask(mut self, dst_access_mask: AccessFlags2) -> Self {
        self.value.dst_access_mask = dst_access_mask;
        self
    }

    #[inline]
    pub fn src_queue_family_index(mut self, src_queue_family_index: u32) -> Self {
        self.value.src_queue_family_index = src_queue_family_index;
        self
    }

    #[inline]
    pub fn dst_queue_family_index(mut self, dst_queue_family_index: u32) -> Self {
        self.value.dst_queue_family_index = dst_queue_family_index;
        self
    }

    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> BufferMemoryBarrier2 {
        self.value
    }
}

impl<'b> ops::Deref for BufferMemoryBarrier2Builder<'b> {
    type Target = BufferMemoryBarrier2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BufferMemoryBarrier2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BufferMemoryBarrier2Builder<'b> {
    type Target = BufferMemoryBarrier2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferMemoryRequirementsInfo2 {
    type Target = BufferMemoryRequirementsInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferMemoryRequirementsInfo2 {
    type Builder = BufferMemoryRequirementsInfo2Builder;
}

/// A builder for a [`BufferMemoryRequirementsInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferMemoryRequirementsInfo2Builder {
    value: BufferMemoryRequirementsInfo2,
}

impl BufferMemoryRequirementsInfo2Builder {
    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn build(self) -> BufferMemoryRequirementsInfo2 {
        self.value
    }
}

impl ops::Deref for BufferMemoryRequirementsInfo2Builder {
    type Target = BufferMemoryRequirementsInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferMemoryRequirementsInfo2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferMemoryRequirementsInfo2Builder {
    type Target = BufferMemoryRequirementsInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferOpaqueCaptureAddressCreateInfo {
    type Target = BufferOpaqueCaptureAddressCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferOpaqueCaptureAddressCreateInfo {
    type Builder = BufferOpaqueCaptureAddressCreateInfoBuilder;
}

/// A builder for a [`BufferOpaqueCaptureAddressCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferOpaqueCaptureAddressCreateInfoBuilder {
    value: BufferOpaqueCaptureAddressCreateInfo,
}

impl BufferOpaqueCaptureAddressCreateInfoBuilder {
    #[inline]
    pub fn opaque_capture_address(mut self, opaque_capture_address: u64) -> Self {
        self.value.opaque_capture_address = opaque_capture_address;
        self
    }

    #[inline]
    pub fn build(self) -> BufferOpaqueCaptureAddressCreateInfo {
        self.value
    }
}

impl ops::Deref for BufferOpaqueCaptureAddressCreateInfoBuilder {
    type Target = BufferOpaqueCaptureAddressCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferOpaqueCaptureAddressCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferOpaqueCaptureAddressCreateInfoBuilder {
    type Target = BufferOpaqueCaptureAddressCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for BufferUsageFlags2CreateInfoKHR {
    type Target = BufferUsageFlags2CreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for BufferUsageFlags2CreateInfoKHR {
    type Builder = BufferUsageFlags2CreateInfoKHRBuilder;
}

/// A builder for a [`BufferUsageFlags2CreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferUsageFlags2CreateInfoKHRBuilder {
    value: BufferUsageFlags2CreateInfoKHR,
}

impl BufferUsageFlags2CreateInfoKHRBuilder {
    #[inline]
    pub fn usage(mut self, usage: BufferUsageFlags2KHR) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn build(self) -> BufferUsageFlags2CreateInfoKHR {
        self.value
    }
}

impl ops::Deref for BufferUsageFlags2CreateInfoKHRBuilder {
    type Target = BufferUsageFlags2CreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for BufferUsageFlags2CreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for BufferUsageFlags2CreateInfoKHRBuilder {
    type Target = BufferUsageFlags2CreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`BufferViewCreateInfo`].
pub unsafe trait ExtendsBufferViewCreateInfo: fmt::Debug {}
unsafe impl ExtendsBufferViewCreateInfo for BufferUsageFlags2CreateInfoKHR {}
unsafe impl ExtendsBufferViewCreateInfo for ExportMetalObjectCreateInfoEXT {}

unsafe impl Cast for BufferViewCreateInfo {
    type Target = BufferViewCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for BufferViewCreateInfo {
    type Builder = BufferViewCreateInfoBuilder<'b>;
}

/// A builder for a [`BufferViewCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct BufferViewCreateInfoBuilder<'b> {
    value: BufferViewCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> BufferViewCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsBufferViewCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: BufferViewCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn range(mut self, range: DeviceSize) -> Self {
        self.value.range = range;
        self
    }

    #[inline]
    pub fn build(self) -> BufferViewCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for BufferViewCreateInfoBuilder<'b> {
    type Target = BufferViewCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for BufferViewCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for BufferViewCreateInfoBuilder<'b> {
    type Target = BufferViewCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CalibratedTimestampInfoKHR {
    type Target = CalibratedTimestampInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CalibratedTimestampInfoKHR {
    type Builder = CalibratedTimestampInfoKHRBuilder;
}

/// A builder for a [`CalibratedTimestampInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CalibratedTimestampInfoKHRBuilder {
    value: CalibratedTimestampInfoKHR,
}

impl CalibratedTimestampInfoKHRBuilder {
    #[inline]
    pub fn time_domain(mut self, time_domain: TimeDomainKHR) -> Self {
        self.value.time_domain = time_domain;
        self
    }

    #[inline]
    pub fn build(self) -> CalibratedTimestampInfoKHR {
        self.value
    }
}

impl ops::Deref for CalibratedTimestampInfoKHRBuilder {
    type Target = CalibratedTimestampInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CalibratedTimestampInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CalibratedTimestampInfoKHRBuilder {
    type Target = CalibratedTimestampInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CheckpointData2NV {
    type Target = CheckpointData2NV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CheckpointData2NV {
    type Builder = CheckpointData2NVBuilder<'b>;
}

/// A builder for a [`CheckpointData2NV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CheckpointData2NVBuilder<'b> {
    value: CheckpointData2NV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CheckpointData2NVBuilder<'b> {
    #[inline]
    pub fn stage(mut self, stage: PipelineStageFlags2) -> Self {
        self.value.stage = stage;
        self
    }

    #[inline]
    pub fn checkpoint_marker<T>(mut self, checkpoint_marker: &'b mut T) -> Self {
        self.value.checkpoint_marker = (checkpoint_marker as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> CheckpointData2NV {
        self.value
    }
}

impl<'b> ops::Deref for CheckpointData2NVBuilder<'b> {
    type Target = CheckpointData2NV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CheckpointData2NVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CheckpointData2NVBuilder<'b> {
    type Target = CheckpointData2NV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CheckpointDataNV {
    type Target = CheckpointDataNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CheckpointDataNV {
    type Builder = CheckpointDataNVBuilder<'b>;
}

/// A builder for a [`CheckpointDataNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CheckpointDataNVBuilder<'b> {
    value: CheckpointDataNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CheckpointDataNVBuilder<'b> {
    #[inline]
    pub fn stage(mut self, stage: PipelineStageFlags) -> Self {
        self.value.stage = stage;
        self
    }

    #[inline]
    pub fn checkpoint_marker<T>(mut self, checkpoint_marker: &'b mut T) -> Self {
        self.value.checkpoint_marker = (checkpoint_marker as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> CheckpointDataNV {
        self.value
    }
}

impl<'b> ops::Deref for CheckpointDataNVBuilder<'b> {
    type Target = CheckpointDataNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CheckpointDataNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CheckpointDataNVBuilder<'b> {
    type Target = CheckpointDataNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ClearAttachment {
    type Target = ClearAttachment;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ClearAttachment {
    type Builder = ClearAttachmentBuilder;
}

/// A builder for a [`ClearAttachment`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ClearAttachmentBuilder {
    value: ClearAttachment,
}

impl ClearAttachmentBuilder {
    #[inline]
    pub fn aspect_mask(mut self, aspect_mask: ImageAspectFlags) -> Self {
        self.value.aspect_mask = aspect_mask;
        self
    }

    #[inline]
    pub fn color_attachment(mut self, color_attachment: u32) -> Self {
        self.value.color_attachment = color_attachment;
        self
    }

    #[inline]
    pub fn clear_value(mut self, clear_value: ClearValue) -> Self {
        self.value.clear_value = clear_value;
        self
    }

    #[inline]
    pub fn build(self) -> ClearAttachment {
        self.value
    }
}

impl ops::Deref for ClearAttachmentBuilder {
    type Target = ClearAttachment;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ClearAttachmentBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ClearAttachmentBuilder {
    type Target = ClearAttachment;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ClearDepthStencilValue {
    type Target = ClearDepthStencilValue;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ClearDepthStencilValue {
    type Builder = ClearDepthStencilValueBuilder;
}

/// A builder for a [`ClearDepthStencilValue`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ClearDepthStencilValueBuilder {
    value: ClearDepthStencilValue,
}

impl ClearDepthStencilValueBuilder {
    #[inline]
    pub fn depth(mut self, depth: f32) -> Self {
        self.value.depth = depth;
        self
    }

    #[inline]
    pub fn stencil(mut self, stencil: u32) -> Self {
        self.value.stencil = stencil;
        self
    }

    #[inline]
    pub fn build(self) -> ClearDepthStencilValue {
        self.value
    }
}

impl ops::Deref for ClearDepthStencilValueBuilder {
    type Target = ClearDepthStencilValue;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ClearDepthStencilValueBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ClearDepthStencilValueBuilder {
    type Target = ClearDepthStencilValue;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ClearRect {
    type Target = ClearRect;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ClearRect {
    type Builder = ClearRectBuilder;
}

/// A builder for a [`ClearRect`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ClearRectBuilder {
    value: ClearRect,
}

impl ClearRectBuilder {
    #[inline]
    pub fn rect(mut self, rect: impl Cast<Target = Rect2D>) -> Self {
        self.value.rect = rect.into();
        self
    }

    #[inline]
    pub fn base_array_layer(mut self, base_array_layer: u32) -> Self {
        self.value.base_array_layer = base_array_layer;
        self
    }

    #[inline]
    pub fn layer_count(mut self, layer_count: u32) -> Self {
        self.value.layer_count = layer_count;
        self
    }

    #[inline]
    pub fn build(self) -> ClearRect {
        self.value
    }
}

impl ops::Deref for ClearRectBuilder {
    type Target = ClearRect;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ClearRectBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ClearRectBuilder {
    type Target = ClearRect;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CoarseSampleLocationNV {
    type Target = CoarseSampleLocationNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CoarseSampleLocationNV {
    type Builder = CoarseSampleLocationNVBuilder;
}

/// A builder for a [`CoarseSampleLocationNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CoarseSampleLocationNVBuilder {
    value: CoarseSampleLocationNV,
}

impl CoarseSampleLocationNVBuilder {
    #[inline]
    pub fn pixel_x(mut self, pixel_x: u32) -> Self {
        self.value.pixel_x = pixel_x;
        self
    }

    #[inline]
    pub fn pixel_y(mut self, pixel_y: u32) -> Self {
        self.value.pixel_y = pixel_y;
        self
    }

    #[inline]
    pub fn sample(mut self, sample: u32) -> Self {
        self.value.sample = sample;
        self
    }

    #[inline]
    pub fn build(self) -> CoarseSampleLocationNV {
        self.value
    }
}

impl ops::Deref for CoarseSampleLocationNVBuilder {
    type Target = CoarseSampleLocationNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CoarseSampleLocationNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CoarseSampleLocationNVBuilder {
    type Target = CoarseSampleLocationNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CoarseSampleOrderCustomNV {
    type Target = CoarseSampleOrderCustomNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CoarseSampleOrderCustomNV {
    type Builder = CoarseSampleOrderCustomNVBuilder<'b>;
}

/// A builder for a [`CoarseSampleOrderCustomNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CoarseSampleOrderCustomNVBuilder<'b> {
    value: CoarseSampleOrderCustomNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CoarseSampleOrderCustomNVBuilder<'b> {
    #[inline]
    pub fn shading_rate(mut self, shading_rate: ShadingRatePaletteEntryNV) -> Self {
        self.value.shading_rate = shading_rate;
        self
    }

    #[inline]
    pub fn sample_count(mut self, sample_count: u32) -> Self {
        self.value.sample_count = sample_count;
        self
    }

    #[inline]
    pub fn sample_locations(
        mut self,
        sample_locations: &'b [impl Cast<Target = CoarseSampleLocationNV>],
    ) -> Self {
        self.value.sample_location_count = sample_locations.len() as u32;
        self.value.sample_locations = sample_locations.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CoarseSampleOrderCustomNV {
        self.value
    }
}

impl<'b> ops::Deref for CoarseSampleOrderCustomNVBuilder<'b> {
    type Target = CoarseSampleOrderCustomNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CoarseSampleOrderCustomNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CoarseSampleOrderCustomNVBuilder<'b> {
    type Target = CoarseSampleOrderCustomNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ColorBlendAdvancedEXT {
    type Target = ColorBlendAdvancedEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ColorBlendAdvancedEXT {
    type Builder = ColorBlendAdvancedEXTBuilder;
}

/// A builder for a [`ColorBlendAdvancedEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ColorBlendAdvancedEXTBuilder {
    value: ColorBlendAdvancedEXT,
}

impl ColorBlendAdvancedEXTBuilder {
    #[inline]
    pub fn advanced_blend_op(mut self, advanced_blend_op: BlendOp) -> Self {
        self.value.advanced_blend_op = advanced_blend_op;
        self
    }

    #[inline]
    pub fn src_premultiplied(mut self, src_premultiplied: bool) -> Self {
        self.value.src_premultiplied = src_premultiplied as Bool32;
        self
    }

    #[inline]
    pub fn dst_premultiplied(mut self, dst_premultiplied: bool) -> Self {
        self.value.dst_premultiplied = dst_premultiplied as Bool32;
        self
    }

    #[inline]
    pub fn blend_overlap(mut self, blend_overlap: BlendOverlapEXT) -> Self {
        self.value.blend_overlap = blend_overlap;
        self
    }

    #[inline]
    pub fn clamp_results(mut self, clamp_results: bool) -> Self {
        self.value.clamp_results = clamp_results as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> ColorBlendAdvancedEXT {
        self.value
    }
}

impl ops::Deref for ColorBlendAdvancedEXTBuilder {
    type Target = ColorBlendAdvancedEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ColorBlendAdvancedEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ColorBlendAdvancedEXTBuilder {
    type Target = ColorBlendAdvancedEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ColorBlendEquationEXT {
    type Target = ColorBlendEquationEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ColorBlendEquationEXT {
    type Builder = ColorBlendEquationEXTBuilder;
}

/// A builder for a [`ColorBlendEquationEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ColorBlendEquationEXTBuilder {
    value: ColorBlendEquationEXT,
}

impl ColorBlendEquationEXTBuilder {
    #[inline]
    pub fn src_color_blend_factor(mut self, src_color_blend_factor: BlendFactor) -> Self {
        self.value.src_color_blend_factor = src_color_blend_factor;
        self
    }

    #[inline]
    pub fn dst_color_blend_factor(mut self, dst_color_blend_factor: BlendFactor) -> Self {
        self.value.dst_color_blend_factor = dst_color_blend_factor;
        self
    }

    #[inline]
    pub fn color_blend_op(mut self, color_blend_op: BlendOp) -> Self {
        self.value.color_blend_op = color_blend_op;
        self
    }

    #[inline]
    pub fn src_alpha_blend_factor(mut self, src_alpha_blend_factor: BlendFactor) -> Self {
        self.value.src_alpha_blend_factor = src_alpha_blend_factor;
        self
    }

    #[inline]
    pub fn dst_alpha_blend_factor(mut self, dst_alpha_blend_factor: BlendFactor) -> Self {
        self.value.dst_alpha_blend_factor = dst_alpha_blend_factor;
        self
    }

    #[inline]
    pub fn alpha_blend_op(mut self, alpha_blend_op: BlendOp) -> Self {
        self.value.alpha_blend_op = alpha_blend_op;
        self
    }

    #[inline]
    pub fn build(self) -> ColorBlendEquationEXT {
        self.value
    }
}

impl ops::Deref for ColorBlendEquationEXTBuilder {
    type Target = ColorBlendEquationEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ColorBlendEquationEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ColorBlendEquationEXTBuilder {
    type Target = ColorBlendEquationEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CommandBufferAllocateInfo {
    type Target = CommandBufferAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CommandBufferAllocateInfo {
    type Builder = CommandBufferAllocateInfoBuilder;
}

/// A builder for a [`CommandBufferAllocateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandBufferAllocateInfoBuilder {
    value: CommandBufferAllocateInfo,
}

impl CommandBufferAllocateInfoBuilder {
    #[inline]
    pub fn command_pool(mut self, command_pool: CommandPool) -> Self {
        self.value.command_pool = command_pool;
        self
    }

    #[inline]
    pub fn level(mut self, level: CommandBufferLevel) -> Self {
        self.value.level = level;
        self
    }

    #[inline]
    pub fn command_buffer_count(mut self, command_buffer_count: u32) -> Self {
        self.value.command_buffer_count = command_buffer_count;
        self
    }

    #[inline]
    pub fn build(self) -> CommandBufferAllocateInfo {
        self.value
    }
}

impl ops::Deref for CommandBufferAllocateInfoBuilder {
    type Target = CommandBufferAllocateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CommandBufferAllocateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CommandBufferAllocateInfoBuilder {
    type Target = CommandBufferAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`CommandBufferBeginInfo`].
pub unsafe trait ExtendsCommandBufferBeginInfo: fmt::Debug {}
unsafe impl ExtendsCommandBufferBeginInfo for DeviceGroupCommandBufferBeginInfo {}

unsafe impl Cast for CommandBufferBeginInfo {
    type Target = CommandBufferBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CommandBufferBeginInfo {
    type Builder = CommandBufferBeginInfoBuilder<'b>;
}

/// A builder for a [`CommandBufferBeginInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandBufferBeginInfoBuilder<'b> {
    value: CommandBufferBeginInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CommandBufferBeginInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsCommandBufferBeginInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: CommandBufferUsageFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn inheritance_info(
        mut self,
        inheritance_info: &'b impl Cast<Target = CommandBufferInheritanceInfo>,
    ) -> Self {
        self.value.inheritance_info = inheritance_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> CommandBufferBeginInfo {
        self.value
    }
}

impl<'b> ops::Deref for CommandBufferBeginInfoBuilder<'b> {
    type Target = CommandBufferBeginInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CommandBufferBeginInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CommandBufferBeginInfoBuilder<'b> {
    type Target = CommandBufferBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CommandBufferInheritanceConditionalRenderingInfoEXT {
    type Target = CommandBufferInheritanceConditionalRenderingInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CommandBufferInheritanceConditionalRenderingInfoEXT {
    type Builder = CommandBufferInheritanceConditionalRenderingInfoEXTBuilder;
}

/// A builder for a [`CommandBufferInheritanceConditionalRenderingInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandBufferInheritanceConditionalRenderingInfoEXTBuilder {
    value: CommandBufferInheritanceConditionalRenderingInfoEXT,
}

impl CommandBufferInheritanceConditionalRenderingInfoEXTBuilder {
    #[inline]
    pub fn conditional_rendering_enable(mut self, conditional_rendering_enable: bool) -> Self {
        self.value.conditional_rendering_enable = conditional_rendering_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> CommandBufferInheritanceConditionalRenderingInfoEXT {
        self.value
    }
}

impl ops::Deref for CommandBufferInheritanceConditionalRenderingInfoEXTBuilder {
    type Target = CommandBufferInheritanceConditionalRenderingInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CommandBufferInheritanceConditionalRenderingInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CommandBufferInheritanceConditionalRenderingInfoEXTBuilder {
    type Target = CommandBufferInheritanceConditionalRenderingInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`CommandBufferInheritanceInfo`].
pub unsafe trait ExtendsCommandBufferInheritanceInfo: fmt::Debug {}
unsafe impl ExtendsCommandBufferInheritanceInfo for AttachmentSampleCountInfoAMD {}
unsafe impl ExtendsCommandBufferInheritanceInfo
    for CommandBufferInheritanceConditionalRenderingInfoEXT
{
}
unsafe impl ExtendsCommandBufferInheritanceInfo
    for CommandBufferInheritanceRenderPassTransformInfoQCOM
{
}
unsafe impl ExtendsCommandBufferInheritanceInfo for CommandBufferInheritanceRenderingInfo {}
unsafe impl ExtendsCommandBufferInheritanceInfo for CommandBufferInheritanceViewportScissorInfoNV {}
unsafe impl ExtendsCommandBufferInheritanceInfo for ExternalFormatANDROID {}
unsafe impl ExtendsCommandBufferInheritanceInfo for MultiviewPerViewAttributesInfoNVX {}
unsafe impl ExtendsCommandBufferInheritanceInfo for RenderingAttachmentLocationInfoKHR {}
unsafe impl ExtendsCommandBufferInheritanceInfo for RenderingInputAttachmentIndexInfoKHR {}

unsafe impl Cast for CommandBufferInheritanceInfo {
    type Target = CommandBufferInheritanceInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CommandBufferInheritanceInfo {
    type Builder = CommandBufferInheritanceInfoBuilder<'b>;
}

/// A builder for a [`CommandBufferInheritanceInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandBufferInheritanceInfoBuilder<'b> {
    value: CommandBufferInheritanceInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CommandBufferInheritanceInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsCommandBufferInheritanceInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn render_pass(mut self, render_pass: RenderPass) -> Self {
        self.value.render_pass = render_pass;
        self
    }

    #[inline]
    pub fn subpass(mut self, subpass: u32) -> Self {
        self.value.subpass = subpass;
        self
    }

    #[inline]
    pub fn framebuffer(mut self, framebuffer: Framebuffer) -> Self {
        self.value.framebuffer = framebuffer;
        self
    }

    #[inline]
    pub fn occlusion_query_enable(mut self, occlusion_query_enable: bool) -> Self {
        self.value.occlusion_query_enable = occlusion_query_enable as Bool32;
        self
    }

    #[inline]
    pub fn query_flags(mut self, query_flags: QueryControlFlags) -> Self {
        self.value.query_flags = query_flags;
        self
    }

    #[inline]
    pub fn pipeline_statistics(mut self, pipeline_statistics: QueryPipelineStatisticFlags) -> Self {
        self.value.pipeline_statistics = pipeline_statistics;
        self
    }

    #[inline]
    pub fn build(self) -> CommandBufferInheritanceInfo {
        self.value
    }
}

impl<'b> ops::Deref for CommandBufferInheritanceInfoBuilder<'b> {
    type Target = CommandBufferInheritanceInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CommandBufferInheritanceInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CommandBufferInheritanceInfoBuilder<'b> {
    type Target = CommandBufferInheritanceInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CommandBufferInheritanceRenderPassTransformInfoQCOM {
    type Target = CommandBufferInheritanceRenderPassTransformInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CommandBufferInheritanceRenderPassTransformInfoQCOM {
    type Builder = CommandBufferInheritanceRenderPassTransformInfoQCOMBuilder;
}

/// A builder for a [`CommandBufferInheritanceRenderPassTransformInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandBufferInheritanceRenderPassTransformInfoQCOMBuilder {
    value: CommandBufferInheritanceRenderPassTransformInfoQCOM,
}

impl CommandBufferInheritanceRenderPassTransformInfoQCOMBuilder {
    #[inline]
    pub fn transform(mut self, transform: SurfaceTransformFlagsKHR) -> Self {
        self.value.transform = transform;
        self
    }

    #[inline]
    pub fn render_area(mut self, render_area: impl Cast<Target = Rect2D>) -> Self {
        self.value.render_area = render_area.into();
        self
    }

    #[inline]
    pub fn build(self) -> CommandBufferInheritanceRenderPassTransformInfoQCOM {
        self.value
    }
}

impl ops::Deref for CommandBufferInheritanceRenderPassTransformInfoQCOMBuilder {
    type Target = CommandBufferInheritanceRenderPassTransformInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CommandBufferInheritanceRenderPassTransformInfoQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CommandBufferInheritanceRenderPassTransformInfoQCOMBuilder {
    type Target = CommandBufferInheritanceRenderPassTransformInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CommandBufferInheritanceRenderingInfo {
    type Target = CommandBufferInheritanceRenderingInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CommandBufferInheritanceRenderingInfo {
    type Builder = CommandBufferInheritanceRenderingInfoBuilder<'b>;
}

/// A builder for a [`CommandBufferInheritanceRenderingInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandBufferInheritanceRenderingInfoBuilder<'b> {
    value: CommandBufferInheritanceRenderingInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CommandBufferInheritanceRenderingInfoBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: RenderingFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn view_mask(mut self, view_mask: u32) -> Self {
        self.value.view_mask = view_mask;
        self
    }

    #[inline]
    pub fn color_attachment_formats(mut self, color_attachment_formats: &'b [Format]) -> Self {
        self.value.color_attachment_count = color_attachment_formats.len() as u32;
        self.value.color_attachment_formats = color_attachment_formats.as_ptr();
        self
    }

    #[inline]
    pub fn depth_attachment_format(mut self, depth_attachment_format: Format) -> Self {
        self.value.depth_attachment_format = depth_attachment_format;
        self
    }

    #[inline]
    pub fn stencil_attachment_format(mut self, stencil_attachment_format: Format) -> Self {
        self.value.stencil_attachment_format = stencil_attachment_format;
        self
    }

    #[inline]
    pub fn rasterization_samples(mut self, rasterization_samples: SampleCountFlags) -> Self {
        self.value.rasterization_samples = rasterization_samples;
        self
    }

    #[inline]
    pub fn build(self) -> CommandBufferInheritanceRenderingInfo {
        self.value
    }
}

impl<'b> ops::Deref for CommandBufferInheritanceRenderingInfoBuilder<'b> {
    type Target = CommandBufferInheritanceRenderingInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CommandBufferInheritanceRenderingInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CommandBufferInheritanceRenderingInfoBuilder<'b> {
    type Target = CommandBufferInheritanceRenderingInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CommandBufferInheritanceViewportScissorInfoNV {
    type Target = CommandBufferInheritanceViewportScissorInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CommandBufferInheritanceViewportScissorInfoNV {
    type Builder = CommandBufferInheritanceViewportScissorInfoNVBuilder<'b>;
}

/// A builder for a [`CommandBufferInheritanceViewportScissorInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandBufferInheritanceViewportScissorInfoNVBuilder<'b> {
    value: CommandBufferInheritanceViewportScissorInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CommandBufferInheritanceViewportScissorInfoNVBuilder<'b> {
    #[inline]
    pub fn viewport_scissor_2d(mut self, viewport_scissor_2d: bool) -> Self {
        self.value.viewport_scissor_2d = viewport_scissor_2d as Bool32;
        self
    }

    #[inline]
    pub fn viewport_depth_count(mut self, viewport_depth_count: u32) -> Self {
        self.value.viewport_depth_count = viewport_depth_count;
        self
    }

    #[inline]
    pub fn viewport_depths(mut self, viewport_depths: &'b impl Cast<Target = Viewport>) -> Self {
        self.value.viewport_depths = viewport_depths.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> CommandBufferInheritanceViewportScissorInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for CommandBufferInheritanceViewportScissorInfoNVBuilder<'b> {
    type Target = CommandBufferInheritanceViewportScissorInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CommandBufferInheritanceViewportScissorInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CommandBufferInheritanceViewportScissorInfoNVBuilder<'b> {
    type Target = CommandBufferInheritanceViewportScissorInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`CommandBufferSubmitInfo`].
pub unsafe trait ExtendsCommandBufferSubmitInfo: fmt::Debug {}
unsafe impl ExtendsCommandBufferSubmitInfo for RenderPassStripeSubmitInfoARM {}

unsafe impl Cast for CommandBufferSubmitInfo {
    type Target = CommandBufferSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CommandBufferSubmitInfo {
    type Builder = CommandBufferSubmitInfoBuilder<'b>;
}

/// A builder for a [`CommandBufferSubmitInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandBufferSubmitInfoBuilder<'b> {
    value: CommandBufferSubmitInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CommandBufferSubmitInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsCommandBufferSubmitInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn command_buffer(mut self, command_buffer: CommandBuffer) -> Self {
        self.value.command_buffer = command_buffer;
        self
    }

    #[inline]
    pub fn device_mask(mut self, device_mask: u32) -> Self {
        self.value.device_mask = device_mask;
        self
    }

    #[inline]
    pub fn build(self) -> CommandBufferSubmitInfo {
        self.value
    }
}

impl<'b> ops::Deref for CommandBufferSubmitInfoBuilder<'b> {
    type Target = CommandBufferSubmitInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CommandBufferSubmitInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CommandBufferSubmitInfoBuilder<'b> {
    type Target = CommandBufferSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CommandPoolCreateInfo {
    type Target = CommandPoolCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CommandPoolCreateInfo {
    type Builder = CommandPoolCreateInfoBuilder;
}

/// A builder for a [`CommandPoolCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CommandPoolCreateInfoBuilder {
    value: CommandPoolCreateInfo,
}

impl CommandPoolCreateInfoBuilder {
    #[inline]
    pub fn flags(mut self, flags: CommandPoolCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn queue_family_index(mut self, queue_family_index: u32) -> Self {
        self.value.queue_family_index = queue_family_index;
        self
    }

    #[inline]
    pub fn build(self) -> CommandPoolCreateInfo {
        self.value
    }
}

impl ops::Deref for CommandPoolCreateInfoBuilder {
    type Target = CommandPoolCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CommandPoolCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CommandPoolCreateInfoBuilder {
    type Target = CommandPoolCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ComponentMapping {
    type Target = ComponentMapping;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ComponentMapping {
    type Builder = ComponentMappingBuilder;
}

/// A builder for a [`ComponentMapping`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ComponentMappingBuilder {
    value: ComponentMapping,
}

impl ComponentMappingBuilder {
    #[inline]
    pub fn r(mut self, r: ComponentSwizzle) -> Self {
        self.value.r = r;
        self
    }

    #[inline]
    pub fn g(mut self, g: ComponentSwizzle) -> Self {
        self.value.g = g;
        self
    }

    #[inline]
    pub fn b(mut self, b: ComponentSwizzle) -> Self {
        self.value.b = b;
        self
    }

    #[inline]
    pub fn a(mut self, a: ComponentSwizzle) -> Self {
        self.value.a = a;
        self
    }

    #[inline]
    pub fn build(self) -> ComponentMapping {
        self.value
    }
}

impl ops::Deref for ComponentMappingBuilder {
    type Target = ComponentMapping;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ComponentMappingBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ComponentMappingBuilder {
    type Target = ComponentMapping;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ComputePipelineCreateInfo`].
pub unsafe trait ExtendsComputePipelineCreateInfo: fmt::Debug {}
unsafe impl ExtendsComputePipelineCreateInfo for ComputePipelineIndirectBufferInfoNV {}
unsafe impl ExtendsComputePipelineCreateInfo for PipelineBinaryInfoKHR {}
unsafe impl ExtendsComputePipelineCreateInfo for PipelineCompilerControlCreateInfoAMD {}
unsafe impl ExtendsComputePipelineCreateInfo for PipelineCreateFlags2CreateInfoKHR {}
unsafe impl ExtendsComputePipelineCreateInfo for PipelineCreationFeedbackCreateInfo {}
unsafe impl ExtendsComputePipelineCreateInfo for PipelineRobustnessCreateInfoEXT {}
unsafe impl ExtendsComputePipelineCreateInfo for SubpassShadingPipelineCreateInfoHUAWEI {}

unsafe impl Cast for ComputePipelineCreateInfo {
    type Target = ComputePipelineCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ComputePipelineCreateInfo {
    type Builder = ComputePipelineCreateInfoBuilder<'b>;
}

/// A builder for a [`ComputePipelineCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ComputePipelineCreateInfoBuilder<'b> {
    value: ComputePipelineCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ComputePipelineCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsComputePipelineCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn stage(mut self, stage: impl Cast<Target = PipelineShaderStageCreateInfo>) -> Self {
        self.value.stage = stage.into();
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn base_pipeline_handle(mut self, base_pipeline_handle: Pipeline) -> Self {
        self.value.base_pipeline_handle = base_pipeline_handle;
        self
    }

    #[inline]
    pub fn base_pipeline_index(mut self, base_pipeline_index: i32) -> Self {
        self.value.base_pipeline_index = base_pipeline_index;
        self
    }

    #[inline]
    pub fn build(self) -> ComputePipelineCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for ComputePipelineCreateInfoBuilder<'b> {
    type Target = ComputePipelineCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ComputePipelineCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ComputePipelineCreateInfoBuilder<'b> {
    type Target = ComputePipelineCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ComputePipelineIndirectBufferInfoNV {
    type Target = ComputePipelineIndirectBufferInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ComputePipelineIndirectBufferInfoNV {
    type Builder = ComputePipelineIndirectBufferInfoNVBuilder;
}

/// A builder for a [`ComputePipelineIndirectBufferInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ComputePipelineIndirectBufferInfoNVBuilder {
    value: ComputePipelineIndirectBufferInfoNV,
}

impl ComputePipelineIndirectBufferInfoNVBuilder {
    #[inline]
    pub fn device_address(mut self, device_address: DeviceAddress) -> Self {
        self.value.device_address = device_address;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn pipeline_device_address_capture_replay(
        mut self,
        pipeline_device_address_capture_replay: DeviceAddress,
    ) -> Self {
        self.value.pipeline_device_address_capture_replay = pipeline_device_address_capture_replay;
        self
    }

    #[inline]
    pub fn build(self) -> ComputePipelineIndirectBufferInfoNV {
        self.value
    }
}

impl ops::Deref for ComputePipelineIndirectBufferInfoNVBuilder {
    type Target = ComputePipelineIndirectBufferInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ComputePipelineIndirectBufferInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ComputePipelineIndirectBufferInfoNVBuilder {
    type Target = ComputePipelineIndirectBufferInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ConditionalRenderingBeginInfoEXT {
    type Target = ConditionalRenderingBeginInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ConditionalRenderingBeginInfoEXT {
    type Builder = ConditionalRenderingBeginInfoEXTBuilder;
}

/// A builder for a [`ConditionalRenderingBeginInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ConditionalRenderingBeginInfoEXTBuilder {
    value: ConditionalRenderingBeginInfoEXT,
}

impl ConditionalRenderingBeginInfoEXTBuilder {
    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: ConditionalRenderingFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> ConditionalRenderingBeginInfoEXT {
        self.value
    }
}

impl ops::Deref for ConditionalRenderingBeginInfoEXTBuilder {
    type Target = ConditionalRenderingBeginInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ConditionalRenderingBeginInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ConditionalRenderingBeginInfoEXTBuilder {
    type Target = ConditionalRenderingBeginInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ConformanceVersion {
    type Target = ConformanceVersion;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ConformanceVersion {
    type Builder = ConformanceVersionBuilder;
}

/// A builder for a [`ConformanceVersion`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ConformanceVersionBuilder {
    value: ConformanceVersion,
}

impl ConformanceVersionBuilder {
    #[inline]
    pub fn major(mut self, major: u8) -> Self {
        self.value.major = major;
        self
    }

    #[inline]
    pub fn minor(mut self, minor: u8) -> Self {
        self.value.minor = minor;
        self
    }

    #[inline]
    pub fn subminor(mut self, subminor: u8) -> Self {
        self.value.subminor = subminor;
        self
    }

    #[inline]
    pub fn patch(mut self, patch: u8) -> Self {
        self.value.patch = patch;
        self
    }

    #[inline]
    pub fn build(self) -> ConformanceVersion {
        self.value
    }
}

impl ops::Deref for ConformanceVersionBuilder {
    type Target = ConformanceVersion;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ConformanceVersionBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ConformanceVersionBuilder {
    type Target = ConformanceVersion;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CooperativeMatrixPropertiesKHR {
    type Target = CooperativeMatrixPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CooperativeMatrixPropertiesKHR {
    type Builder = CooperativeMatrixPropertiesKHRBuilder;
}

/// A builder for a [`CooperativeMatrixPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CooperativeMatrixPropertiesKHRBuilder {
    value: CooperativeMatrixPropertiesKHR,
}

impl CooperativeMatrixPropertiesKHRBuilder {
    #[inline]
    pub fn m_size(mut self, m_size: u32) -> Self {
        self.value.m_size = m_size;
        self
    }

    #[inline]
    pub fn n_size(mut self, n_size: u32) -> Self {
        self.value.n_size = n_size;
        self
    }

    #[inline]
    pub fn k_size(mut self, k_size: u32) -> Self {
        self.value.k_size = k_size;
        self
    }

    #[inline]
    pub fn a_type(mut self, a_type: ComponentTypeKHR) -> Self {
        self.value.a_type = a_type;
        self
    }

    #[inline]
    pub fn b_type(mut self, b_type: ComponentTypeKHR) -> Self {
        self.value.b_type = b_type;
        self
    }

    #[inline]
    pub fn c_type(mut self, c_type: ComponentTypeKHR) -> Self {
        self.value.c_type = c_type;
        self
    }

    #[inline]
    pub fn result_type(mut self, result_type: ComponentTypeKHR) -> Self {
        self.value.result_type = result_type;
        self
    }

    #[inline]
    pub fn saturating_accumulation(mut self, saturating_accumulation: bool) -> Self {
        self.value.saturating_accumulation = saturating_accumulation as Bool32;
        self
    }

    #[inline]
    pub fn scope(mut self, scope: ScopeKHR) -> Self {
        self.value.scope = scope;
        self
    }

    #[inline]
    pub fn build(self) -> CooperativeMatrixPropertiesKHR {
        self.value
    }
}

impl ops::Deref for CooperativeMatrixPropertiesKHRBuilder {
    type Target = CooperativeMatrixPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CooperativeMatrixPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CooperativeMatrixPropertiesKHRBuilder {
    type Target = CooperativeMatrixPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CooperativeMatrixPropertiesNV {
    type Target = CooperativeMatrixPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CooperativeMatrixPropertiesNV {
    type Builder = CooperativeMatrixPropertiesNVBuilder;
}

/// A builder for a [`CooperativeMatrixPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CooperativeMatrixPropertiesNVBuilder {
    value: CooperativeMatrixPropertiesNV,
}

impl CooperativeMatrixPropertiesNVBuilder {
    #[inline]
    pub fn m_size(mut self, m_size: u32) -> Self {
        self.value.m_size = m_size;
        self
    }

    #[inline]
    pub fn n_size(mut self, n_size: u32) -> Self {
        self.value.n_size = n_size;
        self
    }

    #[inline]
    pub fn k_size(mut self, k_size: u32) -> Self {
        self.value.k_size = k_size;
        self
    }

    #[inline]
    pub fn a_type(mut self, a_type: ComponentTypeNV) -> Self {
        self.value.a_type = a_type;
        self
    }

    #[inline]
    pub fn b_type(mut self, b_type: ComponentTypeNV) -> Self {
        self.value.b_type = b_type;
        self
    }

    #[inline]
    pub fn c_type(mut self, c_type: ComponentTypeNV) -> Self {
        self.value.c_type = c_type;
        self
    }

    #[inline]
    pub fn d_type(mut self, d_type: ComponentTypeNV) -> Self {
        self.value.d_type = d_type;
        self
    }

    #[inline]
    pub fn scope(mut self, scope: ScopeNV) -> Self {
        self.value.scope = scope;
        self
    }

    #[inline]
    pub fn build(self) -> CooperativeMatrixPropertiesNV {
        self.value
    }
}

impl ops::Deref for CooperativeMatrixPropertiesNVBuilder {
    type Target = CooperativeMatrixPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CooperativeMatrixPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CooperativeMatrixPropertiesNVBuilder {
    type Target = CooperativeMatrixPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyAccelerationStructureInfoKHR {
    type Target = CopyAccelerationStructureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyAccelerationStructureInfoKHR {
    type Builder = CopyAccelerationStructureInfoKHRBuilder;
}

/// A builder for a [`CopyAccelerationStructureInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyAccelerationStructureInfoKHRBuilder {
    value: CopyAccelerationStructureInfoKHR,
}

impl CopyAccelerationStructureInfoKHRBuilder {
    #[inline]
    pub fn src(mut self, src: AccelerationStructureKHR) -> Self {
        self.value.src = src;
        self
    }

    #[inline]
    pub fn dst(mut self, dst: AccelerationStructureKHR) -> Self {
        self.value.dst = dst;
        self
    }

    #[inline]
    pub fn mode(mut self, mode: CopyAccelerationStructureModeKHR) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn build(self) -> CopyAccelerationStructureInfoKHR {
        self.value
    }
}

impl ops::Deref for CopyAccelerationStructureInfoKHRBuilder {
    type Target = CopyAccelerationStructureInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyAccelerationStructureInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyAccelerationStructureInfoKHRBuilder {
    type Target = CopyAccelerationStructureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyAccelerationStructureToMemoryInfoKHR {
    type Target = CopyAccelerationStructureToMemoryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyAccelerationStructureToMemoryInfoKHR {
    type Builder = CopyAccelerationStructureToMemoryInfoKHRBuilder;
}

/// A builder for a [`CopyAccelerationStructureToMemoryInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyAccelerationStructureToMemoryInfoKHRBuilder {
    value: CopyAccelerationStructureToMemoryInfoKHR,
}

impl CopyAccelerationStructureToMemoryInfoKHRBuilder {
    #[inline]
    pub fn src(mut self, src: AccelerationStructureKHR) -> Self {
        self.value.src = src;
        self
    }

    #[inline]
    pub fn dst(mut self, dst: DeviceOrHostAddressKHR) -> Self {
        self.value.dst = dst;
        self
    }

    #[inline]
    pub fn mode(mut self, mode: CopyAccelerationStructureModeKHR) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn build(self) -> CopyAccelerationStructureToMemoryInfoKHR {
        self.value
    }
}

impl ops::Deref for CopyAccelerationStructureToMemoryInfoKHRBuilder {
    type Target = CopyAccelerationStructureToMemoryInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyAccelerationStructureToMemoryInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyAccelerationStructureToMemoryInfoKHRBuilder {
    type Target = CopyAccelerationStructureToMemoryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyBufferInfo2 {
    type Target = CopyBufferInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CopyBufferInfo2 {
    type Builder = CopyBufferInfo2Builder<'b>;
}

/// A builder for a [`CopyBufferInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyBufferInfo2Builder<'b> {
    value: CopyBufferInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CopyBufferInfo2Builder<'b> {
    #[inline]
    pub fn src_buffer(mut self, src_buffer: Buffer) -> Self {
        self.value.src_buffer = src_buffer;
        self
    }

    #[inline]
    pub fn dst_buffer(mut self, dst_buffer: Buffer) -> Self {
        self.value.dst_buffer = dst_buffer;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = BufferCopy2>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CopyBufferInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for CopyBufferInfo2Builder<'b> {
    type Target = CopyBufferInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CopyBufferInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CopyBufferInfo2Builder<'b> {
    type Target = CopyBufferInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyBufferToImageInfo2 {
    type Target = CopyBufferToImageInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CopyBufferToImageInfo2 {
    type Builder = CopyBufferToImageInfo2Builder<'b>;
}

/// A builder for a [`CopyBufferToImageInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyBufferToImageInfo2Builder<'b> {
    value: CopyBufferToImageInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CopyBufferToImageInfo2Builder<'b> {
    #[inline]
    pub fn src_buffer(mut self, src_buffer: Buffer) -> Self {
        self.value.src_buffer = src_buffer;
        self
    }

    #[inline]
    pub fn dst_image(mut self, dst_image: Image) -> Self {
        self.value.dst_image = dst_image;
        self
    }

    #[inline]
    pub fn dst_image_layout(mut self, dst_image_layout: ImageLayout) -> Self {
        self.value.dst_image_layout = dst_image_layout;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = BufferImageCopy2>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CopyBufferToImageInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for CopyBufferToImageInfo2Builder<'b> {
    type Target = CopyBufferToImageInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CopyBufferToImageInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CopyBufferToImageInfo2Builder<'b> {
    type Target = CopyBufferToImageInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyCommandTransformInfoQCOM {
    type Target = CopyCommandTransformInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyCommandTransformInfoQCOM {
    type Builder = CopyCommandTransformInfoQCOMBuilder;
}

/// A builder for a [`CopyCommandTransformInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyCommandTransformInfoQCOMBuilder {
    value: CopyCommandTransformInfoQCOM,
}

impl CopyCommandTransformInfoQCOMBuilder {
    #[inline]
    pub fn transform(mut self, transform: SurfaceTransformFlagsKHR) -> Self {
        self.value.transform = transform;
        self
    }

    #[inline]
    pub fn build(self) -> CopyCommandTransformInfoQCOM {
        self.value
    }
}

impl ops::Deref for CopyCommandTransformInfoQCOMBuilder {
    type Target = CopyCommandTransformInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyCommandTransformInfoQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyCommandTransformInfoQCOMBuilder {
    type Target = CopyCommandTransformInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyDescriptorSet {
    type Target = CopyDescriptorSet;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyDescriptorSet {
    type Builder = CopyDescriptorSetBuilder;
}

/// A builder for a [`CopyDescriptorSet`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyDescriptorSetBuilder {
    value: CopyDescriptorSet,
}

impl CopyDescriptorSetBuilder {
    #[inline]
    pub fn src_set(mut self, src_set: DescriptorSet) -> Self {
        self.value.src_set = src_set;
        self
    }

    #[inline]
    pub fn src_binding(mut self, src_binding: u32) -> Self {
        self.value.src_binding = src_binding;
        self
    }

    #[inline]
    pub fn src_array_element(mut self, src_array_element: u32) -> Self {
        self.value.src_array_element = src_array_element;
        self
    }

    #[inline]
    pub fn dst_set(mut self, dst_set: DescriptorSet) -> Self {
        self.value.dst_set = dst_set;
        self
    }

    #[inline]
    pub fn dst_binding(mut self, dst_binding: u32) -> Self {
        self.value.dst_binding = dst_binding;
        self
    }

    #[inline]
    pub fn dst_array_element(mut self, dst_array_element: u32) -> Self {
        self.value.dst_array_element = dst_array_element;
        self
    }

    #[inline]
    pub fn descriptor_count(mut self, descriptor_count: u32) -> Self {
        self.value.descriptor_count = descriptor_count;
        self
    }

    #[inline]
    pub fn build(self) -> CopyDescriptorSet {
        self.value
    }
}

impl ops::Deref for CopyDescriptorSetBuilder {
    type Target = CopyDescriptorSet;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyDescriptorSetBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyDescriptorSetBuilder {
    type Target = CopyDescriptorSet;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyImageInfo2 {
    type Target = CopyImageInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CopyImageInfo2 {
    type Builder = CopyImageInfo2Builder<'b>;
}

/// A builder for a [`CopyImageInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyImageInfo2Builder<'b> {
    value: CopyImageInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CopyImageInfo2Builder<'b> {
    #[inline]
    pub fn src_image(mut self, src_image: Image) -> Self {
        self.value.src_image = src_image;
        self
    }

    #[inline]
    pub fn src_image_layout(mut self, src_image_layout: ImageLayout) -> Self {
        self.value.src_image_layout = src_image_layout;
        self
    }

    #[inline]
    pub fn dst_image(mut self, dst_image: Image) -> Self {
        self.value.dst_image = dst_image;
        self
    }

    #[inline]
    pub fn dst_image_layout(mut self, dst_image_layout: ImageLayout) -> Self {
        self.value.dst_image_layout = dst_image_layout;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = ImageCopy2>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CopyImageInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for CopyImageInfo2Builder<'b> {
    type Target = CopyImageInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CopyImageInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CopyImageInfo2Builder<'b> {
    type Target = CopyImageInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyImageToBufferInfo2 {
    type Target = CopyImageToBufferInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CopyImageToBufferInfo2 {
    type Builder = CopyImageToBufferInfo2Builder<'b>;
}

/// A builder for a [`CopyImageToBufferInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyImageToBufferInfo2Builder<'b> {
    value: CopyImageToBufferInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CopyImageToBufferInfo2Builder<'b> {
    #[inline]
    pub fn src_image(mut self, src_image: Image) -> Self {
        self.value.src_image = src_image;
        self
    }

    #[inline]
    pub fn src_image_layout(mut self, src_image_layout: ImageLayout) -> Self {
        self.value.src_image_layout = src_image_layout;
        self
    }

    #[inline]
    pub fn dst_buffer(mut self, dst_buffer: Buffer) -> Self {
        self.value.dst_buffer = dst_buffer;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = BufferImageCopy2>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CopyImageToBufferInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for CopyImageToBufferInfo2Builder<'b> {
    type Target = CopyImageToBufferInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CopyImageToBufferInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CopyImageToBufferInfo2Builder<'b> {
    type Target = CopyImageToBufferInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyImageToImageInfoEXT {
    type Target = CopyImageToImageInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CopyImageToImageInfoEXT {
    type Builder = CopyImageToImageInfoEXTBuilder<'b>;
}

/// A builder for a [`CopyImageToImageInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyImageToImageInfoEXTBuilder<'b> {
    value: CopyImageToImageInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CopyImageToImageInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: HostImageCopyFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn src_image(mut self, src_image: Image) -> Self {
        self.value.src_image = src_image;
        self
    }

    #[inline]
    pub fn src_image_layout(mut self, src_image_layout: ImageLayout) -> Self {
        self.value.src_image_layout = src_image_layout;
        self
    }

    #[inline]
    pub fn dst_image(mut self, dst_image: Image) -> Self {
        self.value.dst_image = dst_image;
        self
    }

    #[inline]
    pub fn dst_image_layout(mut self, dst_image_layout: ImageLayout) -> Self {
        self.value.dst_image_layout = dst_image_layout;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = ImageCopy2>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CopyImageToImageInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for CopyImageToImageInfoEXTBuilder<'b> {
    type Target = CopyImageToImageInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CopyImageToImageInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CopyImageToImageInfoEXTBuilder<'b> {
    type Target = CopyImageToImageInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyImageToMemoryInfoEXT {
    type Target = CopyImageToMemoryInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CopyImageToMemoryInfoEXT {
    type Builder = CopyImageToMemoryInfoEXTBuilder<'b>;
}

/// A builder for a [`CopyImageToMemoryInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyImageToMemoryInfoEXTBuilder<'b> {
    value: CopyImageToMemoryInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CopyImageToMemoryInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: HostImageCopyFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn src_image(mut self, src_image: Image) -> Self {
        self.value.src_image = src_image;
        self
    }

    #[inline]
    pub fn src_image_layout(mut self, src_image_layout: ImageLayout) -> Self {
        self.value.src_image_layout = src_image_layout;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = ImageToMemoryCopyEXT>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CopyImageToMemoryInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for CopyImageToMemoryInfoEXTBuilder<'b> {
    type Target = CopyImageToMemoryInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CopyImageToMemoryInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CopyImageToMemoryInfoEXTBuilder<'b> {
    type Target = CopyImageToMemoryInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyMemoryIndirectCommandNV {
    type Target = CopyMemoryIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyMemoryIndirectCommandNV {
    type Builder = CopyMemoryIndirectCommandNVBuilder;
}

/// A builder for a [`CopyMemoryIndirectCommandNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyMemoryIndirectCommandNVBuilder {
    value: CopyMemoryIndirectCommandNV,
}

impl CopyMemoryIndirectCommandNVBuilder {
    #[inline]
    pub fn src_address(mut self, src_address: DeviceAddress) -> Self {
        self.value.src_address = src_address;
        self
    }

    #[inline]
    pub fn dst_address(mut self, dst_address: DeviceAddress) -> Self {
        self.value.dst_address = dst_address;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> CopyMemoryIndirectCommandNV {
        self.value
    }
}

impl ops::Deref for CopyMemoryIndirectCommandNVBuilder {
    type Target = CopyMemoryIndirectCommandNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyMemoryIndirectCommandNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyMemoryIndirectCommandNVBuilder {
    type Target = CopyMemoryIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyMemoryToAccelerationStructureInfoKHR {
    type Target = CopyMemoryToAccelerationStructureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyMemoryToAccelerationStructureInfoKHR {
    type Builder = CopyMemoryToAccelerationStructureInfoKHRBuilder;
}

/// A builder for a [`CopyMemoryToAccelerationStructureInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyMemoryToAccelerationStructureInfoKHRBuilder {
    value: CopyMemoryToAccelerationStructureInfoKHR,
}

impl CopyMemoryToAccelerationStructureInfoKHRBuilder {
    #[inline]
    pub fn src(mut self, src: DeviceOrHostAddressConstKHR) -> Self {
        self.value.src = src;
        self
    }

    #[inline]
    pub fn dst(mut self, dst: AccelerationStructureKHR) -> Self {
        self.value.dst = dst;
        self
    }

    #[inline]
    pub fn mode(mut self, mode: CopyAccelerationStructureModeKHR) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn build(self) -> CopyMemoryToAccelerationStructureInfoKHR {
        self.value
    }
}

impl ops::Deref for CopyMemoryToAccelerationStructureInfoKHRBuilder {
    type Target = CopyMemoryToAccelerationStructureInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyMemoryToAccelerationStructureInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyMemoryToAccelerationStructureInfoKHRBuilder {
    type Target = CopyMemoryToAccelerationStructureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyMemoryToImageIndirectCommandNV {
    type Target = CopyMemoryToImageIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyMemoryToImageIndirectCommandNV {
    type Builder = CopyMemoryToImageIndirectCommandNVBuilder;
}

/// A builder for a [`CopyMemoryToImageIndirectCommandNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyMemoryToImageIndirectCommandNVBuilder {
    value: CopyMemoryToImageIndirectCommandNV,
}

impl CopyMemoryToImageIndirectCommandNVBuilder {
    #[inline]
    pub fn src_address(mut self, src_address: DeviceAddress) -> Self {
        self.value.src_address = src_address;
        self
    }

    #[inline]
    pub fn buffer_row_length(mut self, buffer_row_length: u32) -> Self {
        self.value.buffer_row_length = buffer_row_length;
        self
    }

    #[inline]
    pub fn buffer_image_height(mut self, buffer_image_height: u32) -> Self {
        self.value.buffer_image_height = buffer_image_height;
        self
    }

    #[inline]
    pub fn image_subresource(
        mut self,
        image_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.image_subresource = image_subresource.into();
        self
    }

    #[inline]
    pub fn image_offset(mut self, image_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.image_offset = image_offset.into();
        self
    }

    #[inline]
    pub fn image_extent(mut self, image_extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.image_extent = image_extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> CopyMemoryToImageIndirectCommandNV {
        self.value
    }
}

impl ops::Deref for CopyMemoryToImageIndirectCommandNVBuilder {
    type Target = CopyMemoryToImageIndirectCommandNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyMemoryToImageIndirectCommandNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyMemoryToImageIndirectCommandNVBuilder {
    type Target = CopyMemoryToImageIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyMemoryToImageInfoEXT {
    type Target = CopyMemoryToImageInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CopyMemoryToImageInfoEXT {
    type Builder = CopyMemoryToImageInfoEXTBuilder<'b>;
}

/// A builder for a [`CopyMemoryToImageInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyMemoryToImageInfoEXTBuilder<'b> {
    value: CopyMemoryToImageInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CopyMemoryToImageInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: HostImageCopyFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn dst_image(mut self, dst_image: Image) -> Self {
        self.value.dst_image = dst_image;
        self
    }

    #[inline]
    pub fn dst_image_layout(mut self, dst_image_layout: ImageLayout) -> Self {
        self.value.dst_image_layout = dst_image_layout;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = MemoryToImageCopyEXT>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CopyMemoryToImageInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for CopyMemoryToImageInfoEXTBuilder<'b> {
    type Target = CopyMemoryToImageInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CopyMemoryToImageInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CopyMemoryToImageInfoEXTBuilder<'b> {
    type Target = CopyMemoryToImageInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyMemoryToMicromapInfoEXT {
    type Target = CopyMemoryToMicromapInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyMemoryToMicromapInfoEXT {
    type Builder = CopyMemoryToMicromapInfoEXTBuilder;
}

/// A builder for a [`CopyMemoryToMicromapInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyMemoryToMicromapInfoEXTBuilder {
    value: CopyMemoryToMicromapInfoEXT,
}

impl CopyMemoryToMicromapInfoEXTBuilder {
    #[inline]
    pub fn src(mut self, src: DeviceOrHostAddressConstKHR) -> Self {
        self.value.src = src;
        self
    }

    #[inline]
    pub fn dst(mut self, dst: MicromapEXT) -> Self {
        self.value.dst = dst;
        self
    }

    #[inline]
    pub fn mode(mut self, mode: CopyMicromapModeEXT) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn build(self) -> CopyMemoryToMicromapInfoEXT {
        self.value
    }
}

impl ops::Deref for CopyMemoryToMicromapInfoEXTBuilder {
    type Target = CopyMemoryToMicromapInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyMemoryToMicromapInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyMemoryToMicromapInfoEXTBuilder {
    type Target = CopyMemoryToMicromapInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyMicromapInfoEXT {
    type Target = CopyMicromapInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyMicromapInfoEXT {
    type Builder = CopyMicromapInfoEXTBuilder;
}

/// A builder for a [`CopyMicromapInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyMicromapInfoEXTBuilder {
    value: CopyMicromapInfoEXT,
}

impl CopyMicromapInfoEXTBuilder {
    #[inline]
    pub fn src(mut self, src: MicromapEXT) -> Self {
        self.value.src = src;
        self
    }

    #[inline]
    pub fn dst(mut self, dst: MicromapEXT) -> Self {
        self.value.dst = dst;
        self
    }

    #[inline]
    pub fn mode(mut self, mode: CopyMicromapModeEXT) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn build(self) -> CopyMicromapInfoEXT {
        self.value
    }
}

impl ops::Deref for CopyMicromapInfoEXTBuilder {
    type Target = CopyMicromapInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyMicromapInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyMicromapInfoEXTBuilder {
    type Target = CopyMicromapInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CopyMicromapToMemoryInfoEXT {
    type Target = CopyMicromapToMemoryInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for CopyMicromapToMemoryInfoEXT {
    type Builder = CopyMicromapToMemoryInfoEXTBuilder;
}

/// A builder for a [`CopyMicromapToMemoryInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CopyMicromapToMemoryInfoEXTBuilder {
    value: CopyMicromapToMemoryInfoEXT,
}

impl CopyMicromapToMemoryInfoEXTBuilder {
    #[inline]
    pub fn src(mut self, src: MicromapEXT) -> Self {
        self.value.src = src;
        self
    }

    #[inline]
    pub fn dst(mut self, dst: DeviceOrHostAddressKHR) -> Self {
        self.value.dst = dst;
        self
    }

    #[inline]
    pub fn mode(mut self, mode: CopyMicromapModeEXT) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn build(self) -> CopyMicromapToMemoryInfoEXT {
        self.value
    }
}

impl ops::Deref for CopyMicromapToMemoryInfoEXTBuilder {
    type Target = CopyMicromapToMemoryInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for CopyMicromapToMemoryInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for CopyMicromapToMemoryInfoEXTBuilder {
    type Target = CopyMicromapToMemoryInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CuFunctionCreateInfoNVX {
    type Target = CuFunctionCreateInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CuFunctionCreateInfoNVX {
    type Builder = CuFunctionCreateInfoNVXBuilder<'b>;
}

/// A builder for a [`CuFunctionCreateInfoNVX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CuFunctionCreateInfoNVXBuilder<'b> {
    value: CuFunctionCreateInfoNVX,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CuFunctionCreateInfoNVXBuilder<'b> {
    #[inline]
    pub fn module(mut self, module: CuModuleNVX) -> Self {
        self.value.module = module;
        self
    }

    #[inline]
    pub fn name(mut self, name: &'b [u8]) -> Self {
        self.value.name = name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CuFunctionCreateInfoNVX {
        self.value
    }
}

impl<'b> ops::Deref for CuFunctionCreateInfoNVXBuilder<'b> {
    type Target = CuFunctionCreateInfoNVX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CuFunctionCreateInfoNVXBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CuFunctionCreateInfoNVXBuilder<'b> {
    type Target = CuFunctionCreateInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CuLaunchInfoNVX {
    type Target = CuLaunchInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CuLaunchInfoNVX {
    type Builder = CuLaunchInfoNVXBuilder<'b>;
}

/// A builder for a [`CuLaunchInfoNVX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CuLaunchInfoNVXBuilder<'b> {
    value: CuLaunchInfoNVX,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CuLaunchInfoNVXBuilder<'b> {
    #[inline]
    pub fn function(mut self, function: CuFunctionNVX) -> Self {
        self.value.function = function;
        self
    }

    #[inline]
    pub fn grid_dim_x(mut self, grid_dim_x: u32) -> Self {
        self.value.grid_dim_x = grid_dim_x;
        self
    }

    #[inline]
    pub fn grid_dim_y(mut self, grid_dim_y: u32) -> Self {
        self.value.grid_dim_y = grid_dim_y;
        self
    }

    #[inline]
    pub fn grid_dim_z(mut self, grid_dim_z: u32) -> Self {
        self.value.grid_dim_z = grid_dim_z;
        self
    }

    #[inline]
    pub fn block_dim_x(mut self, block_dim_x: u32) -> Self {
        self.value.block_dim_x = block_dim_x;
        self
    }

    #[inline]
    pub fn block_dim_y(mut self, block_dim_y: u32) -> Self {
        self.value.block_dim_y = block_dim_y;
        self
    }

    #[inline]
    pub fn block_dim_z(mut self, block_dim_z: u32) -> Self {
        self.value.block_dim_z = block_dim_z;
        self
    }

    #[inline]
    pub fn shared_mem_bytes(mut self, shared_mem_bytes: u32) -> Self {
        self.value.shared_mem_bytes = shared_mem_bytes;
        self
    }

    #[inline]
    pub fn params(mut self, params: &'b [u8]) -> Self {
        self.value.param_count = params.len() as usize;
        self.value.params = params.as_ptr().cast();
        self
    }

    #[inline]
    pub fn extras(mut self, extras: &'b [u8]) -> Self {
        self.value.extra_count = extras.len() as usize;
        self.value.extras = extras.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CuLaunchInfoNVX {
        self.value
    }
}

impl<'b> ops::Deref for CuLaunchInfoNVXBuilder<'b> {
    type Target = CuLaunchInfoNVX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CuLaunchInfoNVXBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CuLaunchInfoNVXBuilder<'b> {
    type Target = CuLaunchInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CuModuleCreateInfoNVX {
    type Target = CuModuleCreateInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CuModuleCreateInfoNVX {
    type Builder = CuModuleCreateInfoNVXBuilder<'b>;
}

/// A builder for a [`CuModuleCreateInfoNVX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CuModuleCreateInfoNVXBuilder<'b> {
    value: CuModuleCreateInfoNVX,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CuModuleCreateInfoNVXBuilder<'b> {
    #[inline]
    pub fn data(mut self, data: &'b [u8]) -> Self {
        self.value.data_size = data.len() as usize;
        self.value.data = data.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CuModuleCreateInfoNVX {
        self.value
    }
}

impl<'b> ops::Deref for CuModuleCreateInfoNVXBuilder<'b> {
    type Target = CuModuleCreateInfoNVX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CuModuleCreateInfoNVXBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CuModuleCreateInfoNVXBuilder<'b> {
    type Target = CuModuleCreateInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CudaFunctionCreateInfoNV {
    type Target = CudaFunctionCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CudaFunctionCreateInfoNV {
    type Builder = CudaFunctionCreateInfoNVBuilder<'b>;
}

/// A builder for a [`CudaFunctionCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CudaFunctionCreateInfoNVBuilder<'b> {
    value: CudaFunctionCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CudaFunctionCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn module(mut self, module: CudaModuleNV) -> Self {
        self.value.module = module;
        self
    }

    #[inline]
    pub fn name(mut self, name: &'b [u8]) -> Self {
        self.value.name = name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CudaFunctionCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for CudaFunctionCreateInfoNVBuilder<'b> {
    type Target = CudaFunctionCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CudaFunctionCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CudaFunctionCreateInfoNVBuilder<'b> {
    type Target = CudaFunctionCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CudaLaunchInfoNV {
    type Target = CudaLaunchInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CudaLaunchInfoNV {
    type Builder = CudaLaunchInfoNVBuilder<'b>;
}

/// A builder for a [`CudaLaunchInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CudaLaunchInfoNVBuilder<'b> {
    value: CudaLaunchInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CudaLaunchInfoNVBuilder<'b> {
    #[inline]
    pub fn function(mut self, function: CudaFunctionNV) -> Self {
        self.value.function = function;
        self
    }

    #[inline]
    pub fn grid_dim_x(mut self, grid_dim_x: u32) -> Self {
        self.value.grid_dim_x = grid_dim_x;
        self
    }

    #[inline]
    pub fn grid_dim_y(mut self, grid_dim_y: u32) -> Self {
        self.value.grid_dim_y = grid_dim_y;
        self
    }

    #[inline]
    pub fn grid_dim_z(mut self, grid_dim_z: u32) -> Self {
        self.value.grid_dim_z = grid_dim_z;
        self
    }

    #[inline]
    pub fn block_dim_x(mut self, block_dim_x: u32) -> Self {
        self.value.block_dim_x = block_dim_x;
        self
    }

    #[inline]
    pub fn block_dim_y(mut self, block_dim_y: u32) -> Self {
        self.value.block_dim_y = block_dim_y;
        self
    }

    #[inline]
    pub fn block_dim_z(mut self, block_dim_z: u32) -> Self {
        self.value.block_dim_z = block_dim_z;
        self
    }

    #[inline]
    pub fn shared_mem_bytes(mut self, shared_mem_bytes: u32) -> Self {
        self.value.shared_mem_bytes = shared_mem_bytes;
        self
    }

    #[inline]
    pub fn params(mut self, params: &'b [u8]) -> Self {
        self.value.param_count = params.len() as usize;
        self.value.params = params.as_ptr().cast();
        self
    }

    #[inline]
    pub fn extras(mut self, extras: &'b [u8]) -> Self {
        self.value.extra_count = extras.len() as usize;
        self.value.extras = extras.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CudaLaunchInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for CudaLaunchInfoNVBuilder<'b> {
    type Target = CudaLaunchInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CudaLaunchInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CudaLaunchInfoNVBuilder<'b> {
    type Target = CudaLaunchInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for CudaModuleCreateInfoNV {
    type Target = CudaModuleCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for CudaModuleCreateInfoNV {
    type Builder = CudaModuleCreateInfoNVBuilder<'b>;
}

/// A builder for a [`CudaModuleCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct CudaModuleCreateInfoNVBuilder<'b> {
    value: CudaModuleCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> CudaModuleCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn data(mut self, data: &'b [u8]) -> Self {
        self.value.data_size = data.len() as usize;
        self.value.data = data.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> CudaModuleCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for CudaModuleCreateInfoNVBuilder<'b> {
    type Target = CudaModuleCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for CudaModuleCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for CudaModuleCreateInfoNVBuilder<'b> {
    type Target = CudaModuleCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for D3D12FenceSubmitInfoKHR {
    type Target = D3D12FenceSubmitInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for D3D12FenceSubmitInfoKHR {
    type Builder = D3D12FenceSubmitInfoKHRBuilder<'b>;
}

/// A builder for a [`D3D12FenceSubmitInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct D3D12FenceSubmitInfoKHRBuilder<'b> {
    value: D3D12FenceSubmitInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> D3D12FenceSubmitInfoKHRBuilder<'b> {
    #[inline]
    pub fn wait_semaphore_values_count(mut self, wait_semaphore_values_count: u32) -> Self {
        self.value.wait_semaphore_values_count = wait_semaphore_values_count;
        self
    }

    #[inline]
    pub fn wait_semaphore_values(mut self, wait_semaphore_values: &'b [u64]) -> Self {
        self.value.wait_semaphore_values_count = wait_semaphore_values.len() as u32;
        self.value.wait_semaphore_values = wait_semaphore_values.as_ptr();
        self
    }

    #[inline]
    pub fn signal_semaphore_values_count(mut self, signal_semaphore_values_count: u32) -> Self {
        self.value.signal_semaphore_values_count = signal_semaphore_values_count;
        self
    }

    #[inline]
    pub fn signal_semaphore_values(mut self, signal_semaphore_values: &'b [u64]) -> Self {
        self.value.signal_semaphore_values_count = signal_semaphore_values.len() as u32;
        self.value.signal_semaphore_values = signal_semaphore_values.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> D3D12FenceSubmitInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for D3D12FenceSubmitInfoKHRBuilder<'b> {
    type Target = D3D12FenceSubmitInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for D3D12FenceSubmitInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for D3D12FenceSubmitInfoKHRBuilder<'b> {
    type Target = D3D12FenceSubmitInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DebugMarkerMarkerInfoEXT {
    type Target = DebugMarkerMarkerInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugMarkerMarkerInfoEXT {
    type Builder = DebugMarkerMarkerInfoEXTBuilder<'b>;
}

/// A builder for a [`DebugMarkerMarkerInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugMarkerMarkerInfoEXTBuilder<'b> {
    value: DebugMarkerMarkerInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugMarkerMarkerInfoEXTBuilder<'b> {
    #[inline]
    pub fn marker_name(mut self, marker_name: &'b [u8]) -> Self {
        self.value.marker_name = marker_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn color(mut self, color: [f32; 4]) -> Self {
        self.value.color = color;
        self
    }

    #[inline]
    pub fn build(self) -> DebugMarkerMarkerInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugMarkerMarkerInfoEXTBuilder<'b> {
    type Target = DebugMarkerMarkerInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugMarkerMarkerInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugMarkerMarkerInfoEXTBuilder<'b> {
    type Target = DebugMarkerMarkerInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DebugMarkerObjectNameInfoEXT {
    type Target = DebugMarkerObjectNameInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugMarkerObjectNameInfoEXT {
    type Builder = DebugMarkerObjectNameInfoEXTBuilder<'b>;
}

/// A builder for a [`DebugMarkerObjectNameInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugMarkerObjectNameInfoEXTBuilder<'b> {
    value: DebugMarkerObjectNameInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugMarkerObjectNameInfoEXTBuilder<'b> {
    #[inline]
    pub fn object_type(mut self, object_type: DebugReportObjectTypeEXT) -> Self {
        self.value.object_type = object_type;
        self
    }

    #[inline]
    pub fn object(mut self, object: u64) -> Self {
        self.value.object = object;
        self
    }

    #[inline]
    pub fn object_name(mut self, object_name: &'b [u8]) -> Self {
        self.value.object_name = object_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DebugMarkerObjectNameInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugMarkerObjectNameInfoEXTBuilder<'b> {
    type Target = DebugMarkerObjectNameInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugMarkerObjectNameInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugMarkerObjectNameInfoEXTBuilder<'b> {
    type Target = DebugMarkerObjectNameInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DebugMarkerObjectTagInfoEXT {
    type Target = DebugMarkerObjectTagInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugMarkerObjectTagInfoEXT {
    type Builder = DebugMarkerObjectTagInfoEXTBuilder<'b>;
}

/// A builder for a [`DebugMarkerObjectTagInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugMarkerObjectTagInfoEXTBuilder<'b> {
    value: DebugMarkerObjectTagInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugMarkerObjectTagInfoEXTBuilder<'b> {
    #[inline]
    pub fn object_type(mut self, object_type: DebugReportObjectTypeEXT) -> Self {
        self.value.object_type = object_type;
        self
    }

    #[inline]
    pub fn object(mut self, object: u64) -> Self {
        self.value.object = object;
        self
    }

    #[inline]
    pub fn tag_name(mut self, tag_name: u64) -> Self {
        self.value.tag_name = tag_name;
        self
    }

    #[inline]
    pub fn tag(mut self, tag: &'b [u8]) -> Self {
        self.value.tag_size = tag.len() as usize;
        self.value.tag = tag.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DebugMarkerObjectTagInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugMarkerObjectTagInfoEXTBuilder<'b> {
    type Target = DebugMarkerObjectTagInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugMarkerObjectTagInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugMarkerObjectTagInfoEXTBuilder<'b> {
    type Target = DebugMarkerObjectTagInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DebugReportCallbackCreateInfoEXT {
    type Target = DebugReportCallbackCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugReportCallbackCreateInfoEXT {
    type Builder = DebugReportCallbackCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`DebugReportCallbackCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugReportCallbackCreateInfoEXTBuilder<'b> {
    value: DebugReportCallbackCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugReportCallbackCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: DebugReportFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn callback(mut self, callback: PFN_vkDebugReportCallbackEXT) -> Self {
        self.value.callback = callback;
        self
    }

    #[inline]
    pub fn user_data<T>(mut self, user_data: &'b mut T) -> Self {
        self.value.user_data = (user_data as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> DebugReportCallbackCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugReportCallbackCreateInfoEXTBuilder<'b> {
    type Target = DebugReportCallbackCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugReportCallbackCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugReportCallbackCreateInfoEXTBuilder<'b> {
    type Target = DebugReportCallbackCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DebugUtilsLabelEXT {
    type Target = DebugUtilsLabelEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugUtilsLabelEXT {
    type Builder = DebugUtilsLabelEXTBuilder<'b>;
}

/// A builder for a [`DebugUtilsLabelEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugUtilsLabelEXTBuilder<'b> {
    value: DebugUtilsLabelEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugUtilsLabelEXTBuilder<'b> {
    #[inline]
    pub fn label_name(mut self, label_name: &'b [u8]) -> Self {
        self.value.label_name = label_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn color(mut self, color: [f32; 4]) -> Self {
        self.value.color = color;
        self
    }

    #[inline]
    pub fn build(self) -> DebugUtilsLabelEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugUtilsLabelEXTBuilder<'b> {
    type Target = DebugUtilsLabelEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugUtilsLabelEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugUtilsLabelEXTBuilder<'b> {
    type Target = DebugUtilsLabelEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DebugUtilsMessengerCallbackDataEXT`].
pub unsafe trait ExtendsDebugUtilsMessengerCallbackDataEXT: fmt::Debug {}
unsafe impl ExtendsDebugUtilsMessengerCallbackDataEXT for DeviceAddressBindingCallbackDataEXT {}

unsafe impl Cast for DebugUtilsMessengerCallbackDataEXT {
    type Target = DebugUtilsMessengerCallbackDataEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugUtilsMessengerCallbackDataEXT {
    type Builder = DebugUtilsMessengerCallbackDataEXTBuilder<'b>;
}

/// A builder for a [`DebugUtilsMessengerCallbackDataEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugUtilsMessengerCallbackDataEXTBuilder<'b> {
    value: DebugUtilsMessengerCallbackDataEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugUtilsMessengerCallbackDataEXTBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDebugUtilsMessengerCallbackDataEXT,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: DebugUtilsMessengerCallbackDataFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn message_id_name(mut self, message_id_name: &'b [u8]) -> Self {
        self.value.message_id_name = message_id_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn message_id_number(mut self, message_id_number: i32) -> Self {
        self.value.message_id_number = message_id_number;
        self
    }

    #[inline]
    pub fn message(mut self, message: &'b [u8]) -> Self {
        self.value.message = message.as_ptr().cast();
        self
    }

    #[inline]
    pub fn queue_labels(
        mut self,
        queue_labels: &'b [impl Cast<Target = DebugUtilsLabelEXT>],
    ) -> Self {
        self.value.queue_label_count = queue_labels.len() as u32;
        self.value.queue_labels = queue_labels.as_ptr().cast();
        self
    }

    #[inline]
    pub fn cmd_buf_labels(
        mut self,
        cmd_buf_labels: &'b [impl Cast<Target = DebugUtilsLabelEXT>],
    ) -> Self {
        self.value.cmd_buf_label_count = cmd_buf_labels.len() as u32;
        self.value.cmd_buf_labels = cmd_buf_labels.as_ptr().cast();
        self
    }

    #[inline]
    pub fn objects(
        mut self,
        objects: &'b [impl Cast<Target = DebugUtilsObjectNameInfoEXT>],
    ) -> Self {
        self.value.object_count = objects.len() as u32;
        self.value.objects = objects.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DebugUtilsMessengerCallbackDataEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugUtilsMessengerCallbackDataEXTBuilder<'b> {
    type Target = DebugUtilsMessengerCallbackDataEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugUtilsMessengerCallbackDataEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugUtilsMessengerCallbackDataEXTBuilder<'b> {
    type Target = DebugUtilsMessengerCallbackDataEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DebugUtilsMessengerCreateInfoEXT {
    type Target = DebugUtilsMessengerCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugUtilsMessengerCreateInfoEXT {
    type Builder = DebugUtilsMessengerCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`DebugUtilsMessengerCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugUtilsMessengerCreateInfoEXTBuilder<'b> {
    value: DebugUtilsMessengerCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugUtilsMessengerCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: DebugUtilsMessengerCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn message_severity(mut self, message_severity: DebugUtilsMessageSeverityFlagsEXT) -> Self {
        self.value.message_severity = message_severity;
        self
    }

    #[inline]
    pub fn message_type(mut self, message_type: DebugUtilsMessageTypeFlagsEXT) -> Self {
        self.value.message_type = message_type;
        self
    }

    #[inline]
    pub fn user_callback(mut self, user_callback: PFN_vkDebugUtilsMessengerCallbackEXT) -> Self {
        self.value.user_callback = user_callback;
        self
    }

    #[inline]
    pub fn user_data<T>(mut self, user_data: &'b mut T) -> Self {
        self.value.user_data = (user_data as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> DebugUtilsMessengerCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugUtilsMessengerCreateInfoEXTBuilder<'b> {
    type Target = DebugUtilsMessengerCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugUtilsMessengerCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugUtilsMessengerCreateInfoEXTBuilder<'b> {
    type Target = DebugUtilsMessengerCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DebugUtilsObjectNameInfoEXT {
    type Target = DebugUtilsObjectNameInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugUtilsObjectNameInfoEXT {
    type Builder = DebugUtilsObjectNameInfoEXTBuilder<'b>;
}

/// A builder for a [`DebugUtilsObjectNameInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugUtilsObjectNameInfoEXTBuilder<'b> {
    value: DebugUtilsObjectNameInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugUtilsObjectNameInfoEXTBuilder<'b> {
    #[inline]
    pub fn object_type(mut self, object_type: ObjectType) -> Self {
        self.value.object_type = object_type;
        self
    }

    #[inline]
    pub fn object_handle(mut self, object_handle: u64) -> Self {
        self.value.object_handle = object_handle;
        self
    }

    #[inline]
    pub fn object_name(mut self, object_name: &'b [u8]) -> Self {
        self.value.object_name = object_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DebugUtilsObjectNameInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugUtilsObjectNameInfoEXTBuilder<'b> {
    type Target = DebugUtilsObjectNameInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugUtilsObjectNameInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugUtilsObjectNameInfoEXTBuilder<'b> {
    type Target = DebugUtilsObjectNameInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DebugUtilsObjectTagInfoEXT {
    type Target = DebugUtilsObjectTagInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DebugUtilsObjectTagInfoEXT {
    type Builder = DebugUtilsObjectTagInfoEXTBuilder<'b>;
}

/// A builder for a [`DebugUtilsObjectTagInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DebugUtilsObjectTagInfoEXTBuilder<'b> {
    value: DebugUtilsObjectTagInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DebugUtilsObjectTagInfoEXTBuilder<'b> {
    #[inline]
    pub fn object_type(mut self, object_type: ObjectType) -> Self {
        self.value.object_type = object_type;
        self
    }

    #[inline]
    pub fn object_handle(mut self, object_handle: u64) -> Self {
        self.value.object_handle = object_handle;
        self
    }

    #[inline]
    pub fn tag_name(mut self, tag_name: u64) -> Self {
        self.value.tag_name = tag_name;
        self
    }

    #[inline]
    pub fn tag(mut self, tag: &'b [u8]) -> Self {
        self.value.tag_size = tag.len() as usize;
        self.value.tag = tag.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DebugUtilsObjectTagInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DebugUtilsObjectTagInfoEXTBuilder<'b> {
    type Target = DebugUtilsObjectTagInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DebugUtilsObjectTagInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DebugUtilsObjectTagInfoEXTBuilder<'b> {
    type Target = DebugUtilsObjectTagInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DecompressMemoryRegionNV {
    type Target = DecompressMemoryRegionNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DecompressMemoryRegionNV {
    type Builder = DecompressMemoryRegionNVBuilder;
}

/// A builder for a [`DecompressMemoryRegionNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DecompressMemoryRegionNVBuilder {
    value: DecompressMemoryRegionNV,
}

impl DecompressMemoryRegionNVBuilder {
    #[inline]
    pub fn src_address(mut self, src_address: DeviceAddress) -> Self {
        self.value.src_address = src_address;
        self
    }

    #[inline]
    pub fn dst_address(mut self, dst_address: DeviceAddress) -> Self {
        self.value.dst_address = dst_address;
        self
    }

    #[inline]
    pub fn compressed_size(mut self, compressed_size: DeviceSize) -> Self {
        self.value.compressed_size = compressed_size;
        self
    }

    #[inline]
    pub fn decompressed_size(mut self, decompressed_size: DeviceSize) -> Self {
        self.value.decompressed_size = decompressed_size;
        self
    }

    #[inline]
    pub fn decompression_method(
        mut self,
        decompression_method: MemoryDecompressionMethodFlagsNV,
    ) -> Self {
        self.value.decompression_method = decompression_method;
        self
    }

    #[inline]
    pub fn build(self) -> DecompressMemoryRegionNV {
        self.value
    }
}

impl ops::Deref for DecompressMemoryRegionNVBuilder {
    type Target = DecompressMemoryRegionNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DecompressMemoryRegionNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DecompressMemoryRegionNVBuilder {
    type Target = DecompressMemoryRegionNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DedicatedAllocationBufferCreateInfoNV {
    type Target = DedicatedAllocationBufferCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DedicatedAllocationBufferCreateInfoNV {
    type Builder = DedicatedAllocationBufferCreateInfoNVBuilder;
}

/// A builder for a [`DedicatedAllocationBufferCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DedicatedAllocationBufferCreateInfoNVBuilder {
    value: DedicatedAllocationBufferCreateInfoNV,
}

impl DedicatedAllocationBufferCreateInfoNVBuilder {
    #[inline]
    pub fn dedicated_allocation(mut self, dedicated_allocation: bool) -> Self {
        self.value.dedicated_allocation = dedicated_allocation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> DedicatedAllocationBufferCreateInfoNV {
        self.value
    }
}

impl ops::Deref for DedicatedAllocationBufferCreateInfoNVBuilder {
    type Target = DedicatedAllocationBufferCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DedicatedAllocationBufferCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DedicatedAllocationBufferCreateInfoNVBuilder {
    type Target = DedicatedAllocationBufferCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DedicatedAllocationImageCreateInfoNV {
    type Target = DedicatedAllocationImageCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DedicatedAllocationImageCreateInfoNV {
    type Builder = DedicatedAllocationImageCreateInfoNVBuilder;
}

/// A builder for a [`DedicatedAllocationImageCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DedicatedAllocationImageCreateInfoNVBuilder {
    value: DedicatedAllocationImageCreateInfoNV,
}

impl DedicatedAllocationImageCreateInfoNVBuilder {
    #[inline]
    pub fn dedicated_allocation(mut self, dedicated_allocation: bool) -> Self {
        self.value.dedicated_allocation = dedicated_allocation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> DedicatedAllocationImageCreateInfoNV {
        self.value
    }
}

impl ops::Deref for DedicatedAllocationImageCreateInfoNVBuilder {
    type Target = DedicatedAllocationImageCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DedicatedAllocationImageCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DedicatedAllocationImageCreateInfoNVBuilder {
    type Target = DedicatedAllocationImageCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DedicatedAllocationMemoryAllocateInfoNV {
    type Target = DedicatedAllocationMemoryAllocateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DedicatedAllocationMemoryAllocateInfoNV {
    type Builder = DedicatedAllocationMemoryAllocateInfoNVBuilder;
}

/// A builder for a [`DedicatedAllocationMemoryAllocateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DedicatedAllocationMemoryAllocateInfoNVBuilder {
    value: DedicatedAllocationMemoryAllocateInfoNV,
}

impl DedicatedAllocationMemoryAllocateInfoNVBuilder {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn build(self) -> DedicatedAllocationMemoryAllocateInfoNV {
        self.value
    }
}

impl ops::Deref for DedicatedAllocationMemoryAllocateInfoNVBuilder {
    type Target = DedicatedAllocationMemoryAllocateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DedicatedAllocationMemoryAllocateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DedicatedAllocationMemoryAllocateInfoNVBuilder {
    type Target = DedicatedAllocationMemoryAllocateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DependencyInfo {
    type Target = DependencyInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DependencyInfo {
    type Builder = DependencyInfoBuilder<'b>;
}

/// A builder for a [`DependencyInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DependencyInfoBuilder<'b> {
    value: DependencyInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DependencyInfoBuilder<'b> {
    #[inline]
    pub fn dependency_flags(mut self, dependency_flags: DependencyFlags) -> Self {
        self.value.dependency_flags = dependency_flags;
        self
    }

    #[inline]
    pub fn memory_barriers(
        mut self,
        memory_barriers: &'b [impl Cast<Target = MemoryBarrier2>],
    ) -> Self {
        self.value.memory_barrier_count = memory_barriers.len() as u32;
        self.value.memory_barriers = memory_barriers.as_ptr().cast();
        self
    }

    #[inline]
    pub fn buffer_memory_barriers(
        mut self,
        buffer_memory_barriers: &'b [impl Cast<Target = BufferMemoryBarrier2>],
    ) -> Self {
        self.value.buffer_memory_barrier_count = buffer_memory_barriers.len() as u32;
        self.value.buffer_memory_barriers = buffer_memory_barriers.as_ptr().cast();
        self
    }

    #[inline]
    pub fn image_memory_barriers(
        mut self,
        image_memory_barriers: &'b [impl Cast<Target = ImageMemoryBarrier2>],
    ) -> Self {
        self.value.image_memory_barrier_count = image_memory_barriers.len() as u32;
        self.value.image_memory_barriers = image_memory_barriers.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DependencyInfo {
        self.value
    }
}

impl<'b> ops::Deref for DependencyInfoBuilder<'b> {
    type Target = DependencyInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DependencyInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DependencyInfoBuilder<'b> {
    type Target = DependencyInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DepthBiasInfoEXT`].
pub unsafe trait ExtendsDepthBiasInfoEXT: fmt::Debug {}
unsafe impl ExtendsDepthBiasInfoEXT for DepthBiasRepresentationInfoEXT {}

unsafe impl Cast for DepthBiasInfoEXT {
    type Target = DepthBiasInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DepthBiasInfoEXT {
    type Builder = DepthBiasInfoEXTBuilder<'b>;
}

/// A builder for a [`DepthBiasInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DepthBiasInfoEXTBuilder<'b> {
    value: DepthBiasInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DepthBiasInfoEXTBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDepthBiasInfoEXT,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn depth_bias_constant_factor(mut self, depth_bias_constant_factor: f32) -> Self {
        self.value.depth_bias_constant_factor = depth_bias_constant_factor;
        self
    }

    #[inline]
    pub fn depth_bias_clamp(mut self, depth_bias_clamp: f32) -> Self {
        self.value.depth_bias_clamp = depth_bias_clamp;
        self
    }

    #[inline]
    pub fn depth_bias_slope_factor(mut self, depth_bias_slope_factor: f32) -> Self {
        self.value.depth_bias_slope_factor = depth_bias_slope_factor;
        self
    }

    #[inline]
    pub fn build(self) -> DepthBiasInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DepthBiasInfoEXTBuilder<'b> {
    type Target = DepthBiasInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DepthBiasInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DepthBiasInfoEXTBuilder<'b> {
    type Target = DepthBiasInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DepthBiasRepresentationInfoEXT {
    type Target = DepthBiasRepresentationInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DepthBiasRepresentationInfoEXT {
    type Builder = DepthBiasRepresentationInfoEXTBuilder;
}

/// A builder for a [`DepthBiasRepresentationInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DepthBiasRepresentationInfoEXTBuilder {
    value: DepthBiasRepresentationInfoEXT,
}

impl DepthBiasRepresentationInfoEXTBuilder {
    #[inline]
    pub fn depth_bias_representation(
        mut self,
        depth_bias_representation: DepthBiasRepresentationEXT,
    ) -> Self {
        self.value.depth_bias_representation = depth_bias_representation;
        self
    }

    #[inline]
    pub fn depth_bias_exact(mut self, depth_bias_exact: bool) -> Self {
        self.value.depth_bias_exact = depth_bias_exact as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> DepthBiasRepresentationInfoEXT {
        self.value
    }
}

impl ops::Deref for DepthBiasRepresentationInfoEXTBuilder {
    type Target = DepthBiasRepresentationInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DepthBiasRepresentationInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DepthBiasRepresentationInfoEXTBuilder {
    type Target = DepthBiasRepresentationInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorAddressInfoEXT {
    type Target = DescriptorAddressInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorAddressInfoEXT {
    type Builder = DescriptorAddressInfoEXTBuilder;
}

/// A builder for a [`DescriptorAddressInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorAddressInfoEXTBuilder {
    value: DescriptorAddressInfoEXT,
}

impl DescriptorAddressInfoEXTBuilder {
    #[inline]
    pub fn address(mut self, address: DeviceAddress) -> Self {
        self.value.address = address;
        self
    }

    #[inline]
    pub fn range(mut self, range: DeviceSize) -> Self {
        self.value.range = range;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorAddressInfoEXT {
        self.value
    }
}

impl ops::Deref for DescriptorAddressInfoEXTBuilder {
    type Target = DescriptorAddressInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorAddressInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorAddressInfoEXTBuilder {
    type Target = DescriptorAddressInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DescriptorBufferBindingInfoEXT`].
pub unsafe trait ExtendsDescriptorBufferBindingInfoEXT: fmt::Debug {}
unsafe impl ExtendsDescriptorBufferBindingInfoEXT for BufferUsageFlags2CreateInfoKHR {}
unsafe impl ExtendsDescriptorBufferBindingInfoEXT
    for DescriptorBufferBindingPushDescriptorBufferHandleEXT
{
}

unsafe impl Cast for DescriptorBufferBindingInfoEXT {
    type Target = DescriptorBufferBindingInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorBufferBindingInfoEXT {
    type Builder = DescriptorBufferBindingInfoEXTBuilder<'b>;
}

/// A builder for a [`DescriptorBufferBindingInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorBufferBindingInfoEXTBuilder<'b> {
    value: DescriptorBufferBindingInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorBufferBindingInfoEXTBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDescriptorBufferBindingInfoEXT,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn address(mut self, address: DeviceAddress) -> Self {
        self.value.address = address;
        self
    }

    #[inline]
    pub fn usage(mut self, usage: BufferUsageFlags) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorBufferBindingInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorBufferBindingInfoEXTBuilder<'b> {
    type Target = DescriptorBufferBindingInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorBufferBindingInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorBufferBindingInfoEXTBuilder<'b> {
    type Target = DescriptorBufferBindingInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorBufferBindingPushDescriptorBufferHandleEXT {
    type Target = DescriptorBufferBindingPushDescriptorBufferHandleEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorBufferBindingPushDescriptorBufferHandleEXT {
    type Builder = DescriptorBufferBindingPushDescriptorBufferHandleEXTBuilder;
}

/// A builder for a [`DescriptorBufferBindingPushDescriptorBufferHandleEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorBufferBindingPushDescriptorBufferHandleEXTBuilder {
    value: DescriptorBufferBindingPushDescriptorBufferHandleEXT,
}

impl DescriptorBufferBindingPushDescriptorBufferHandleEXTBuilder {
    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorBufferBindingPushDescriptorBufferHandleEXT {
        self.value
    }
}

impl ops::Deref for DescriptorBufferBindingPushDescriptorBufferHandleEXTBuilder {
    type Target = DescriptorBufferBindingPushDescriptorBufferHandleEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorBufferBindingPushDescriptorBufferHandleEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorBufferBindingPushDescriptorBufferHandleEXTBuilder {
    type Target = DescriptorBufferBindingPushDescriptorBufferHandleEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorBufferInfo {
    type Target = DescriptorBufferInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorBufferInfo {
    type Builder = DescriptorBufferInfoBuilder;
}

/// A builder for a [`DescriptorBufferInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorBufferInfoBuilder {
    value: DescriptorBufferInfo,
}

impl DescriptorBufferInfoBuilder {
    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn range(mut self, range: DeviceSize) -> Self {
        self.value.range = range;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorBufferInfo {
        self.value
    }
}

impl ops::Deref for DescriptorBufferInfoBuilder {
    type Target = DescriptorBufferInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorBufferInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorBufferInfoBuilder {
    type Target = DescriptorBufferInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorGetInfoEXT {
    type Target = DescriptorGetInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorGetInfoEXT {
    type Builder = DescriptorGetInfoEXTBuilder;
}

/// A builder for a [`DescriptorGetInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorGetInfoEXTBuilder {
    value: DescriptorGetInfoEXT,
}

impl DescriptorGetInfoEXTBuilder {
    #[inline]
    pub fn type_(mut self, type_: DescriptorType) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn data(mut self, data: DescriptorDataEXT) -> Self {
        self.value.data = data;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorGetInfoEXT {
        self.value
    }
}

impl ops::Deref for DescriptorGetInfoEXTBuilder {
    type Target = DescriptorGetInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorGetInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorGetInfoEXTBuilder {
    type Target = DescriptorGetInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorImageInfo {
    type Target = DescriptorImageInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorImageInfo {
    type Builder = DescriptorImageInfoBuilder;
}

/// A builder for a [`DescriptorImageInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorImageInfoBuilder {
    value: DescriptorImageInfo,
}

impl DescriptorImageInfoBuilder {
    #[inline]
    pub fn sampler(mut self, sampler: Sampler) -> Self {
        self.value.sampler = sampler;
        self
    }

    #[inline]
    pub fn image_view(mut self, image_view: ImageView) -> Self {
        self.value.image_view = image_view;
        self
    }

    #[inline]
    pub fn image_layout(mut self, image_layout: ImageLayout) -> Self {
        self.value.image_layout = image_layout;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorImageInfo {
        self.value
    }
}

impl ops::Deref for DescriptorImageInfoBuilder {
    type Target = DescriptorImageInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorImageInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorImageInfoBuilder {
    type Target = DescriptorImageInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DescriptorPoolCreateInfo`].
pub unsafe trait ExtendsDescriptorPoolCreateInfo: fmt::Debug {}
unsafe impl ExtendsDescriptorPoolCreateInfo for DescriptorPoolInlineUniformBlockCreateInfo {}
unsafe impl ExtendsDescriptorPoolCreateInfo for MutableDescriptorTypeCreateInfoEXT {}

unsafe impl Cast for DescriptorPoolCreateInfo {
    type Target = DescriptorPoolCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorPoolCreateInfo {
    type Builder = DescriptorPoolCreateInfoBuilder<'b>;
}

/// A builder for a [`DescriptorPoolCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorPoolCreateInfoBuilder<'b> {
    value: DescriptorPoolCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorPoolCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDescriptorPoolCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: DescriptorPoolCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn max_sets(mut self, max_sets: u32) -> Self {
        self.value.max_sets = max_sets;
        self
    }

    #[inline]
    pub fn pool_sizes(mut self, pool_sizes: &'b [impl Cast<Target = DescriptorPoolSize>]) -> Self {
        self.value.pool_size_count = pool_sizes.len() as u32;
        self.value.pool_sizes = pool_sizes.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorPoolCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorPoolCreateInfoBuilder<'b> {
    type Target = DescriptorPoolCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorPoolCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorPoolCreateInfoBuilder<'b> {
    type Target = DescriptorPoolCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorPoolInlineUniformBlockCreateInfo {
    type Target = DescriptorPoolInlineUniformBlockCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorPoolInlineUniformBlockCreateInfo {
    type Builder = DescriptorPoolInlineUniformBlockCreateInfoBuilder;
}

/// A builder for a [`DescriptorPoolInlineUniformBlockCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorPoolInlineUniformBlockCreateInfoBuilder {
    value: DescriptorPoolInlineUniformBlockCreateInfo,
}

impl DescriptorPoolInlineUniformBlockCreateInfoBuilder {
    #[inline]
    pub fn max_inline_uniform_block_bindings(
        mut self,
        max_inline_uniform_block_bindings: u32,
    ) -> Self {
        self.value.max_inline_uniform_block_bindings = max_inline_uniform_block_bindings;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorPoolInlineUniformBlockCreateInfo {
        self.value
    }
}

impl ops::Deref for DescriptorPoolInlineUniformBlockCreateInfoBuilder {
    type Target = DescriptorPoolInlineUniformBlockCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorPoolInlineUniformBlockCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorPoolInlineUniformBlockCreateInfoBuilder {
    type Target = DescriptorPoolInlineUniformBlockCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorPoolSize {
    type Target = DescriptorPoolSize;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorPoolSize {
    type Builder = DescriptorPoolSizeBuilder;
}

/// A builder for a [`DescriptorPoolSize`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorPoolSizeBuilder {
    value: DescriptorPoolSize,
}

impl DescriptorPoolSizeBuilder {
    #[inline]
    pub fn type_(mut self, type_: DescriptorType) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn descriptor_count(mut self, descriptor_count: u32) -> Self {
        self.value.descriptor_count = descriptor_count;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorPoolSize {
        self.value
    }
}

impl ops::Deref for DescriptorPoolSizeBuilder {
    type Target = DescriptorPoolSize;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorPoolSizeBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorPoolSizeBuilder {
    type Target = DescriptorPoolSize;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DescriptorSetAllocateInfo`].
pub unsafe trait ExtendsDescriptorSetAllocateInfo: fmt::Debug {}
unsafe impl ExtendsDescriptorSetAllocateInfo for DescriptorSetVariableDescriptorCountAllocateInfo {}

unsafe impl Cast for DescriptorSetAllocateInfo {
    type Target = DescriptorSetAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorSetAllocateInfo {
    type Builder = DescriptorSetAllocateInfoBuilder<'b>;
}

/// A builder for a [`DescriptorSetAllocateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetAllocateInfoBuilder<'b> {
    value: DescriptorSetAllocateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorSetAllocateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDescriptorSetAllocateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn descriptor_pool(mut self, descriptor_pool: DescriptorPool) -> Self {
        self.value.descriptor_pool = descriptor_pool;
        self
    }

    #[inline]
    pub fn set_layouts(mut self, set_layouts: &'b [DescriptorSetLayout]) -> Self {
        self.value.descriptor_set_count = set_layouts.len() as u32;
        self.value.set_layouts = set_layouts.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetAllocateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorSetAllocateInfoBuilder<'b> {
    type Target = DescriptorSetAllocateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorSetAllocateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorSetAllocateInfoBuilder<'b> {
    type Target = DescriptorSetAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorSetBindingReferenceVALVE {
    type Target = DescriptorSetBindingReferenceVALVE;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorSetBindingReferenceVALVE {
    type Builder = DescriptorSetBindingReferenceVALVEBuilder;
}

/// A builder for a [`DescriptorSetBindingReferenceVALVE`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetBindingReferenceVALVEBuilder {
    value: DescriptorSetBindingReferenceVALVE,
}

impl DescriptorSetBindingReferenceVALVEBuilder {
    #[inline]
    pub fn descriptor_set_layout(mut self, descriptor_set_layout: DescriptorSetLayout) -> Self {
        self.value.descriptor_set_layout = descriptor_set_layout;
        self
    }

    #[inline]
    pub fn binding(mut self, binding: u32) -> Self {
        self.value.binding = binding;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetBindingReferenceVALVE {
        self.value
    }
}

impl ops::Deref for DescriptorSetBindingReferenceVALVEBuilder {
    type Target = DescriptorSetBindingReferenceVALVE;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorSetBindingReferenceVALVEBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorSetBindingReferenceVALVEBuilder {
    type Target = DescriptorSetBindingReferenceVALVE;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorSetLayoutBinding {
    type Target = DescriptorSetLayoutBinding;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorSetLayoutBinding {
    type Builder = DescriptorSetLayoutBindingBuilder<'b>;
}

/// A builder for a [`DescriptorSetLayoutBinding`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetLayoutBindingBuilder<'b> {
    value: DescriptorSetLayoutBinding,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorSetLayoutBindingBuilder<'b> {
    #[inline]
    pub fn binding(mut self, binding: u32) -> Self {
        self.value.binding = binding;
        self
    }

    #[inline]
    pub fn descriptor_type(mut self, descriptor_type: DescriptorType) -> Self {
        self.value.descriptor_type = descriptor_type;
        self
    }

    #[inline]
    pub fn descriptor_count(mut self, descriptor_count: u32) -> Self {
        self.value.descriptor_count = descriptor_count;
        self
    }

    #[inline]
    pub fn stage_flags(mut self, stage_flags: ShaderStageFlags) -> Self {
        self.value.stage_flags = stage_flags;
        self
    }

    #[inline]
    pub fn immutable_samplers(mut self, immutable_samplers: &'b [Sampler]) -> Self {
        self.value.descriptor_count = immutable_samplers.len() as u32;
        self.value.immutable_samplers = immutable_samplers.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetLayoutBinding {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorSetLayoutBindingBuilder<'b> {
    type Target = DescriptorSetLayoutBinding;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorSetLayoutBindingBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorSetLayoutBindingBuilder<'b> {
    type Target = DescriptorSetLayoutBinding;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorSetLayoutBindingFlagsCreateInfo {
    type Target = DescriptorSetLayoutBindingFlagsCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorSetLayoutBindingFlagsCreateInfo {
    type Builder = DescriptorSetLayoutBindingFlagsCreateInfoBuilder<'b>;
}

/// A builder for a [`DescriptorSetLayoutBindingFlagsCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetLayoutBindingFlagsCreateInfoBuilder<'b> {
    value: DescriptorSetLayoutBindingFlagsCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorSetLayoutBindingFlagsCreateInfoBuilder<'b> {
    #[inline]
    pub fn binding_flags(mut self, binding_flags: &'b [DescriptorBindingFlags]) -> Self {
        self.value.binding_count = binding_flags.len() as u32;
        self.value.binding_flags = binding_flags.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetLayoutBindingFlagsCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorSetLayoutBindingFlagsCreateInfoBuilder<'b> {
    type Target = DescriptorSetLayoutBindingFlagsCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorSetLayoutBindingFlagsCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorSetLayoutBindingFlagsCreateInfoBuilder<'b> {
    type Target = DescriptorSetLayoutBindingFlagsCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DescriptorSetLayoutCreateInfo`].
pub unsafe trait ExtendsDescriptorSetLayoutCreateInfo: fmt::Debug {}
unsafe impl ExtendsDescriptorSetLayoutCreateInfo for DescriptorSetLayoutBindingFlagsCreateInfo {}
unsafe impl ExtendsDescriptorSetLayoutCreateInfo for MutableDescriptorTypeCreateInfoEXT {}

unsafe impl Cast for DescriptorSetLayoutCreateInfo {
    type Target = DescriptorSetLayoutCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorSetLayoutCreateInfo {
    type Builder = DescriptorSetLayoutCreateInfoBuilder<'b>;
}

/// A builder for a [`DescriptorSetLayoutCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetLayoutCreateInfoBuilder<'b> {
    value: DescriptorSetLayoutCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorSetLayoutCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDescriptorSetLayoutCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: DescriptorSetLayoutCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn bindings(
        mut self,
        bindings: &'b [impl Cast<Target = DescriptorSetLayoutBinding>],
    ) -> Self {
        self.value.binding_count = bindings.len() as u32;
        self.value.bindings = bindings.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetLayoutCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorSetLayoutCreateInfoBuilder<'b> {
    type Target = DescriptorSetLayoutCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorSetLayoutCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorSetLayoutCreateInfoBuilder<'b> {
    type Target = DescriptorSetLayoutCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorSetLayoutHostMappingInfoVALVE {
    type Target = DescriptorSetLayoutHostMappingInfoVALVE;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorSetLayoutHostMappingInfoVALVE {
    type Builder = DescriptorSetLayoutHostMappingInfoVALVEBuilder;
}

/// A builder for a [`DescriptorSetLayoutHostMappingInfoVALVE`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetLayoutHostMappingInfoVALVEBuilder {
    value: DescriptorSetLayoutHostMappingInfoVALVE,
}

impl DescriptorSetLayoutHostMappingInfoVALVEBuilder {
    #[inline]
    pub fn descriptor_offset(mut self, descriptor_offset: usize) -> Self {
        self.value.descriptor_offset = descriptor_offset;
        self
    }

    #[inline]
    pub fn descriptor_size(mut self, descriptor_size: u32) -> Self {
        self.value.descriptor_size = descriptor_size;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetLayoutHostMappingInfoVALVE {
        self.value
    }
}

impl ops::Deref for DescriptorSetLayoutHostMappingInfoVALVEBuilder {
    type Target = DescriptorSetLayoutHostMappingInfoVALVE;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorSetLayoutHostMappingInfoVALVEBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorSetLayoutHostMappingInfoVALVEBuilder {
    type Target = DescriptorSetLayoutHostMappingInfoVALVE;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DescriptorSetLayoutSupport`].
pub unsafe trait ExtendsDescriptorSetLayoutSupport: fmt::Debug {}
unsafe impl ExtendsDescriptorSetLayoutSupport
    for DescriptorSetVariableDescriptorCountLayoutSupport
{
}

unsafe impl Cast for DescriptorSetLayoutSupport {
    type Target = DescriptorSetLayoutSupport;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorSetLayoutSupport {
    type Builder = DescriptorSetLayoutSupportBuilder<'b>;
}

/// A builder for a [`DescriptorSetLayoutSupport`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetLayoutSupportBuilder<'b> {
    value: DescriptorSetLayoutSupport,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorSetLayoutSupportBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDescriptorSetLayoutSupport,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn supported(mut self, supported: bool) -> Self {
        self.value.supported = supported as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetLayoutSupport {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorSetLayoutSupportBuilder<'b> {
    type Target = DescriptorSetLayoutSupport;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorSetLayoutSupportBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorSetLayoutSupportBuilder<'b> {
    type Target = DescriptorSetLayoutSupport;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorSetVariableDescriptorCountAllocateInfo {
    type Target = DescriptorSetVariableDescriptorCountAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorSetVariableDescriptorCountAllocateInfo {
    type Builder = DescriptorSetVariableDescriptorCountAllocateInfoBuilder<'b>;
}

/// A builder for a [`DescriptorSetVariableDescriptorCountAllocateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetVariableDescriptorCountAllocateInfoBuilder<'b> {
    value: DescriptorSetVariableDescriptorCountAllocateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorSetVariableDescriptorCountAllocateInfoBuilder<'b> {
    #[inline]
    pub fn descriptor_counts(mut self, descriptor_counts: &'b [u32]) -> Self {
        self.value.descriptor_set_count = descriptor_counts.len() as u32;
        self.value.descriptor_counts = descriptor_counts.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetVariableDescriptorCountAllocateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorSetVariableDescriptorCountAllocateInfoBuilder<'b> {
    type Target = DescriptorSetVariableDescriptorCountAllocateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorSetVariableDescriptorCountAllocateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorSetVariableDescriptorCountAllocateInfoBuilder<'b> {
    type Target = DescriptorSetVariableDescriptorCountAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorSetVariableDescriptorCountLayoutSupport {
    type Target = DescriptorSetVariableDescriptorCountLayoutSupport;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorSetVariableDescriptorCountLayoutSupport {
    type Builder = DescriptorSetVariableDescriptorCountLayoutSupportBuilder;
}

/// A builder for a [`DescriptorSetVariableDescriptorCountLayoutSupport`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorSetVariableDescriptorCountLayoutSupportBuilder {
    value: DescriptorSetVariableDescriptorCountLayoutSupport,
}

impl DescriptorSetVariableDescriptorCountLayoutSupportBuilder {
    #[inline]
    pub fn max_variable_descriptor_count(mut self, max_variable_descriptor_count: u32) -> Self {
        self.value.max_variable_descriptor_count = max_variable_descriptor_count;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorSetVariableDescriptorCountLayoutSupport {
        self.value
    }
}

impl ops::Deref for DescriptorSetVariableDescriptorCountLayoutSupportBuilder {
    type Target = DescriptorSetVariableDescriptorCountLayoutSupport;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorSetVariableDescriptorCountLayoutSupportBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorSetVariableDescriptorCountLayoutSupportBuilder {
    type Target = DescriptorSetVariableDescriptorCountLayoutSupport;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorUpdateTemplateCreateInfo {
    type Target = DescriptorUpdateTemplateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DescriptorUpdateTemplateCreateInfo {
    type Builder = DescriptorUpdateTemplateCreateInfoBuilder<'b>;
}

/// A builder for a [`DescriptorUpdateTemplateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorUpdateTemplateCreateInfoBuilder<'b> {
    value: DescriptorUpdateTemplateCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DescriptorUpdateTemplateCreateInfoBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: DescriptorUpdateTemplateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn descriptor_update_entries(
        mut self,
        descriptor_update_entries: &'b [impl Cast<Target = DescriptorUpdateTemplateEntry>],
    ) -> Self {
        self.value.descriptor_update_entry_count = descriptor_update_entries.len() as u32;
        self.value.descriptor_update_entries = descriptor_update_entries.as_ptr().cast();
        self
    }

    #[inline]
    pub fn template_type(mut self, template_type: DescriptorUpdateTemplateType) -> Self {
        self.value.template_type = template_type;
        self
    }

    #[inline]
    pub fn descriptor_set_layout(mut self, descriptor_set_layout: DescriptorSetLayout) -> Self {
        self.value.descriptor_set_layout = descriptor_set_layout;
        self
    }

    #[inline]
    pub fn pipeline_bind_point(mut self, pipeline_bind_point: PipelineBindPoint) -> Self {
        self.value.pipeline_bind_point = pipeline_bind_point;
        self
    }

    #[inline]
    pub fn pipeline_layout(mut self, pipeline_layout: PipelineLayout) -> Self {
        self.value.pipeline_layout = pipeline_layout;
        self
    }

    #[inline]
    pub fn set(mut self, set: u32) -> Self {
        self.value.set = set;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorUpdateTemplateCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DescriptorUpdateTemplateCreateInfoBuilder<'b> {
    type Target = DescriptorUpdateTemplateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DescriptorUpdateTemplateCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DescriptorUpdateTemplateCreateInfoBuilder<'b> {
    type Target = DescriptorUpdateTemplateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DescriptorUpdateTemplateEntry {
    type Target = DescriptorUpdateTemplateEntry;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DescriptorUpdateTemplateEntry {
    type Builder = DescriptorUpdateTemplateEntryBuilder;
}

/// A builder for a [`DescriptorUpdateTemplateEntry`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DescriptorUpdateTemplateEntryBuilder {
    value: DescriptorUpdateTemplateEntry,
}

impl DescriptorUpdateTemplateEntryBuilder {
    #[inline]
    pub fn dst_binding(mut self, dst_binding: u32) -> Self {
        self.value.dst_binding = dst_binding;
        self
    }

    #[inline]
    pub fn dst_array_element(mut self, dst_array_element: u32) -> Self {
        self.value.dst_array_element = dst_array_element;
        self
    }

    #[inline]
    pub fn descriptor_count(mut self, descriptor_count: u32) -> Self {
        self.value.descriptor_count = descriptor_count;
        self
    }

    #[inline]
    pub fn descriptor_type(mut self, descriptor_type: DescriptorType) -> Self {
        self.value.descriptor_type = descriptor_type;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: usize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn stride(mut self, stride: usize) -> Self {
        self.value.stride = stride;
        self
    }

    #[inline]
    pub fn build(self) -> DescriptorUpdateTemplateEntry {
        self.value
    }
}

impl ops::Deref for DescriptorUpdateTemplateEntryBuilder {
    type Target = DescriptorUpdateTemplateEntry;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DescriptorUpdateTemplateEntryBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DescriptorUpdateTemplateEntryBuilder {
    type Target = DescriptorUpdateTemplateEntry;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceAddressBindingCallbackDataEXT {
    type Target = DeviceAddressBindingCallbackDataEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceAddressBindingCallbackDataEXT {
    type Builder = DeviceAddressBindingCallbackDataEXTBuilder;
}

/// A builder for a [`DeviceAddressBindingCallbackDataEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceAddressBindingCallbackDataEXTBuilder {
    value: DeviceAddressBindingCallbackDataEXT,
}

impl DeviceAddressBindingCallbackDataEXTBuilder {
    #[inline]
    pub fn flags(mut self, flags: DeviceAddressBindingFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn base_address(mut self, base_address: DeviceAddress) -> Self {
        self.value.base_address = base_address;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn binding_type(mut self, binding_type: DeviceAddressBindingTypeEXT) -> Self {
        self.value.binding_type = binding_type;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceAddressBindingCallbackDataEXT {
        self.value
    }
}

impl ops::Deref for DeviceAddressBindingCallbackDataEXTBuilder {
    type Target = DeviceAddressBindingCallbackDataEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceAddressBindingCallbackDataEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceAddressBindingCallbackDataEXTBuilder {
    type Target = DeviceAddressBindingCallbackDataEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceBufferMemoryRequirements {
    type Target = DeviceBufferMemoryRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceBufferMemoryRequirements {
    type Builder = DeviceBufferMemoryRequirementsBuilder<'b>;
}

/// A builder for a [`DeviceBufferMemoryRequirements`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceBufferMemoryRequirementsBuilder<'b> {
    value: DeviceBufferMemoryRequirements,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceBufferMemoryRequirementsBuilder<'b> {
    #[inline]
    pub fn create_info(mut self, create_info: &'b impl Cast<Target = BufferCreateInfo>) -> Self {
        self.value.create_info = create_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceBufferMemoryRequirements {
        self.value
    }
}

impl<'b> ops::Deref for DeviceBufferMemoryRequirementsBuilder<'b> {
    type Target = DeviceBufferMemoryRequirements;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceBufferMemoryRequirementsBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceBufferMemoryRequirementsBuilder<'b> {
    type Target = DeviceBufferMemoryRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DeviceCreateInfo`].
pub unsafe trait ExtendsDeviceCreateInfo: fmt::Debug {}
unsafe impl ExtendsDeviceCreateInfo for ApplicationParametersEXT {}
unsafe impl ExtendsDeviceCreateInfo for DeviceDeviceMemoryReportCreateInfoEXT {}
unsafe impl ExtendsDeviceCreateInfo for DeviceDiagnosticsConfigCreateInfoNV {}
unsafe impl ExtendsDeviceCreateInfo for DeviceGroupDeviceCreateInfo {}
unsafe impl ExtendsDeviceCreateInfo for DeviceMemoryOverallocationCreateInfoAMD {}
unsafe impl ExtendsDeviceCreateInfo for DevicePipelineBinaryInternalCacheControlKHR {}
unsafe impl ExtendsDeviceCreateInfo for DevicePrivateDataCreateInfo {}
unsafe impl ExtendsDeviceCreateInfo for DeviceQueueShaderCoreControlCreateInfoARM {}
unsafe impl ExtendsDeviceCreateInfo for DeviceSemaphoreSciSyncPoolReservationCreateInfoNV {}
unsafe impl ExtendsDeviceCreateInfo for PerformanceQueryReservationInfoKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevice16BitStorageFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevice4444FormatsFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevice8BitStorageFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceASTCDecodeFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceAccelerationStructureFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceAddressBindingReportFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceAmigoProfilingFeaturesSEC {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceAntiLagFeaturesAMD {}
unsafe impl ExtendsDeviceCreateInfo
    for PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT
{
}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceBlendOperationAdvancedFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceBorderColorSwizzleFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceBufferDeviceAddressFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceBufferDeviceAddressFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceClusterCullingShaderFeaturesHUAWEI {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCoherentMemoryFeaturesAMD {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceColorWriteEnableFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCommandBufferInheritanceFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceComputeShaderDerivativesFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceConditionalRenderingFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCooperativeMatrixFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCooperativeMatrixFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCopyMemoryIndirectFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCornerSampledImageFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCoverageReductionModeFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCubicClampFeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCubicWeightsFeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCudaKernelLaunchFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceCustomBorderColorFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDepthBiasControlFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDepthClampZeroOneFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDepthClipControlFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDepthClipEnableFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDescriptorBufferFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDescriptorIndexingFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDescriptorPoolOverallocationFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDeviceMemoryReportFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDiagnosticsConfigFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDisplacementMicromapFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDynamicRenderingFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExclusiveScissorFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExtendedDynamicState2FeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExtendedDynamicState3FeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExtendedDynamicStateFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExternalFormatResolveFeaturesANDROID {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExternalMemoryRDMAFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExternalMemorySciBufFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExternalSciSync2FeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceExternalSciSyncFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFaultFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFeatures2 {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFragmentDensityMap2FeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFragmentDensityMapFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFragmentShaderInterlockFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFragmentShadingRateFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceFrameBoundaryFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceGlobalPriorityQueryFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceHostImageCopyFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceHostQueryResetFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImage2DViewOf3DFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImageAlignmentControlFeaturesMESA {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImageCompressionControlFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImageProcessing2FeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImageProcessingFeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImageRobustnessFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImageSlicedViewOf3DFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImageViewMinLodFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceImagelessFramebufferFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceIndexTypeUint8FeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceInheritedViewportScissorFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceInlineUniformBlockFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceInvocationMaskFeaturesHUAWEI {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceLegacyDitheringFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceLegacyVertexAttributesFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceLineRasterizationFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceLinearColorAttachmentFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMaintenance4Features {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMaintenance5FeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMaintenance6FeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMaintenance7FeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMapMemoryPlacedFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMemoryDecompressionFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMemoryPriorityFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMeshShaderFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMeshShaderFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMultiDrawFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMultiviewFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceMutableDescriptorTypeFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceNestedCommandBufferFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceOpacityMicromapFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceOpticalFlowFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePerStageDescriptorSetFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePerformanceQueryFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePipelineBinaryFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePipelineCreationCacheControlFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePipelinePropertiesFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePipelineProtectedAccessFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePipelineRobustnessFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePortabilitySubsetFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePresentBarrierFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePresentIdFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePresentWaitFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDevicePrivateDataFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceProtectedMemoryFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceProvokingVertexFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRGBA10X6FormatsFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo
    for PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
{
}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRawAccessChainsFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRayQueryFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRayTracingInvocationReorderFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRayTracingMaintenance1FeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRayTracingMotionBlurFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRayTracingPipelineFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRayTracingPositionFetchFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRayTracingValidationFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRelaxedLineRasterizationFeaturesIMG {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRenderPassStripedFeaturesARM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRepresentativeFragmentTestFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceRobustness2FeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceSamplerYcbcrConversionFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceScalarBlockLayoutFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceSchedulingControlsFeaturesARM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceSeparateDepthStencilLayoutsFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderAtomicFloat2FeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderAtomicFloatFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderAtomicInt64Features {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderClockFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderCoreBuiltinsFeaturesARM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderDemoteToHelperInvocationFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderDrawParametersFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderEnqueueFeaturesAMDX {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderExpectAssumeFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderFloat16Int8Features {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderFloatControls2FeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderImageFootprintFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderIntegerDotProductFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderModuleIdentifierFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderObjectFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderQuadControlFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderReplicatedCompositesFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderSMBuiltinsFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderSubgroupExtendedTypesFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderSubgroupRotateFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderTerminateInvocationFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShaderTileImageFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceShadingRateImageFeaturesNV {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceSubgroupSizeControlFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceSubpassShadingFeaturesHUAWEI {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceSwapchainMaintenance1FeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceSynchronization2Features {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceTexelBufferAlignmentFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceTextureCompressionASTCHDRFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceTilePropertiesFeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceTimelineSemaphoreFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceTransformFeedbackFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceUniformBufferStandardLayoutFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceVariablePointersFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceVertexAttributeDivisorFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceVertexInputDynamicStateFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceVideoMaintenance1FeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceVulkan11Features {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceVulkan12Features {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceVulkan13Features {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceVulkanMemoryModelFeatures {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceYcbcrDegammaFeaturesQCOM {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceYcbcrImageArraysFeaturesEXT {}
unsafe impl ExtendsDeviceCreateInfo for PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {}

unsafe impl Cast for DeviceCreateInfo {
    type Target = DeviceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceCreateInfo {
    type Builder = DeviceCreateInfoBuilder<'b>;
}

/// A builder for a [`DeviceCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceCreateInfoBuilder<'b> {
    value: DeviceCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDeviceCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: DeviceCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn queue_create_infos(
        mut self,
        queue_create_infos: &'b [impl Cast<Target = DeviceQueueCreateInfo>],
    ) -> Self {
        self.value.queue_create_info_count = queue_create_infos.len() as u32;
        self.value.queue_create_infos = queue_create_infos.as_ptr().cast();
        self
    }

    #[inline]
    pub fn enabled_layer_names(mut self, enabled_layer_names: &'b [*const c_char]) -> Self {
        self.value.enabled_layer_count = enabled_layer_names.len() as u32;
        self.value.enabled_layer_names = enabled_layer_names.as_ptr();
        self
    }

    #[inline]
    pub fn enabled_extension_names(mut self, enabled_extension_names: &'b [*const c_char]) -> Self {
        self.value.enabled_extension_count = enabled_extension_names.len() as u32;
        self.value.enabled_extension_names = enabled_extension_names.as_ptr();
        self
    }

    #[inline]
    pub fn enabled_features(
        mut self,
        enabled_features: &'b impl Cast<Target = PhysicalDeviceFeatures>,
    ) -> Self {
        self.value.enabled_features = enabled_features.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DeviceCreateInfoBuilder<'b> {
    type Target = DeviceCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceCreateInfoBuilder<'b> {
    type Target = DeviceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceDeviceMemoryReportCreateInfoEXT {
    type Target = DeviceDeviceMemoryReportCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceDeviceMemoryReportCreateInfoEXT {
    type Builder = DeviceDeviceMemoryReportCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`DeviceDeviceMemoryReportCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceDeviceMemoryReportCreateInfoEXTBuilder<'b> {
    value: DeviceDeviceMemoryReportCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceDeviceMemoryReportCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: DeviceMemoryReportFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn user_callback(mut self, user_callback: PFN_vkDeviceMemoryReportCallbackEXT) -> Self {
        self.value.user_callback = user_callback;
        self
    }

    #[inline]
    pub fn user_data<T>(mut self, user_data: &'b mut T) -> Self {
        self.value.user_data = (user_data as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceDeviceMemoryReportCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DeviceDeviceMemoryReportCreateInfoEXTBuilder<'b> {
    type Target = DeviceDeviceMemoryReportCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceDeviceMemoryReportCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceDeviceMemoryReportCreateInfoEXTBuilder<'b> {
    type Target = DeviceDeviceMemoryReportCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceDiagnosticsConfigCreateInfoNV {
    type Target = DeviceDiagnosticsConfigCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceDiagnosticsConfigCreateInfoNV {
    type Builder = DeviceDiagnosticsConfigCreateInfoNVBuilder;
}

/// A builder for a [`DeviceDiagnosticsConfigCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceDiagnosticsConfigCreateInfoNVBuilder {
    value: DeviceDiagnosticsConfigCreateInfoNV,
}

impl DeviceDiagnosticsConfigCreateInfoNVBuilder {
    #[inline]
    pub fn flags(mut self, flags: DeviceDiagnosticsConfigFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceDiagnosticsConfigCreateInfoNV {
        self.value
    }
}

impl ops::Deref for DeviceDiagnosticsConfigCreateInfoNVBuilder {
    type Target = DeviceDiagnosticsConfigCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceDiagnosticsConfigCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceDiagnosticsConfigCreateInfoNVBuilder {
    type Target = DeviceDiagnosticsConfigCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceEventInfoEXT {
    type Target = DeviceEventInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceEventInfoEXT {
    type Builder = DeviceEventInfoEXTBuilder;
}

/// A builder for a [`DeviceEventInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceEventInfoEXTBuilder {
    value: DeviceEventInfoEXT,
}

impl DeviceEventInfoEXTBuilder {
    #[inline]
    pub fn device_event(mut self, device_event: DeviceEventTypeEXT) -> Self {
        self.value.device_event = device_event;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceEventInfoEXT {
        self.value
    }
}

impl ops::Deref for DeviceEventInfoEXTBuilder {
    type Target = DeviceEventInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceEventInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceEventInfoEXTBuilder {
    type Target = DeviceEventInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceFaultAddressInfoEXT {
    type Target = DeviceFaultAddressInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceFaultAddressInfoEXT {
    type Builder = DeviceFaultAddressInfoEXTBuilder;
}

/// A builder for a [`DeviceFaultAddressInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceFaultAddressInfoEXTBuilder {
    value: DeviceFaultAddressInfoEXT,
}

impl DeviceFaultAddressInfoEXTBuilder {
    #[inline]
    pub fn address_type(mut self, address_type: DeviceFaultAddressTypeEXT) -> Self {
        self.value.address_type = address_type;
        self
    }

    #[inline]
    pub fn reported_address(mut self, reported_address: DeviceAddress) -> Self {
        self.value.reported_address = reported_address;
        self
    }

    #[inline]
    pub fn address_precision(mut self, address_precision: DeviceSize) -> Self {
        self.value.address_precision = address_precision;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceFaultAddressInfoEXT {
        self.value
    }
}

impl ops::Deref for DeviceFaultAddressInfoEXTBuilder {
    type Target = DeviceFaultAddressInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceFaultAddressInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceFaultAddressInfoEXTBuilder {
    type Target = DeviceFaultAddressInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceFaultCountsEXT {
    type Target = DeviceFaultCountsEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceFaultCountsEXT {
    type Builder = DeviceFaultCountsEXTBuilder;
}

/// A builder for a [`DeviceFaultCountsEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceFaultCountsEXTBuilder {
    value: DeviceFaultCountsEXT,
}

impl DeviceFaultCountsEXTBuilder {
    #[inline]
    pub fn address_info_count(mut self, address_info_count: u32) -> Self {
        self.value.address_info_count = address_info_count;
        self
    }

    #[inline]
    pub fn vendor_info_count(mut self, vendor_info_count: u32) -> Self {
        self.value.vendor_info_count = vendor_info_count;
        self
    }

    #[inline]
    pub fn vendor_binary_size(mut self, vendor_binary_size: DeviceSize) -> Self {
        self.value.vendor_binary_size = vendor_binary_size;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceFaultCountsEXT {
        self.value
    }
}

impl ops::Deref for DeviceFaultCountsEXTBuilder {
    type Target = DeviceFaultCountsEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceFaultCountsEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceFaultCountsEXTBuilder {
    type Target = DeviceFaultCountsEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceFaultInfoEXT {
    type Target = DeviceFaultInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceFaultInfoEXT {
    type Builder = DeviceFaultInfoEXTBuilder<'b>;
}

/// A builder for a [`DeviceFaultInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceFaultInfoEXTBuilder<'b> {
    value: DeviceFaultInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceFaultInfoEXTBuilder<'b> {
    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn address_infos(
        mut self,
        address_infos: &'b mut impl Cast<Target = DeviceFaultAddressInfoEXT>,
    ) -> Self {
        self.value.address_infos = address_infos.as_mut();
        self
    }

    #[inline]
    pub fn vendor_infos(
        mut self,
        vendor_infos: &'b mut impl Cast<Target = DeviceFaultVendorInfoEXT>,
    ) -> Self {
        self.value.vendor_infos = vendor_infos.as_mut();
        self
    }

    #[inline]
    pub fn vendor_binary_data<T>(mut self, vendor_binary_data: &'b mut T) -> Self {
        self.value.vendor_binary_data = (vendor_binary_data as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceFaultInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DeviceFaultInfoEXTBuilder<'b> {
    type Target = DeviceFaultInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceFaultInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceFaultInfoEXTBuilder<'b> {
    type Target = DeviceFaultInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceFaultVendorBinaryHeaderVersionOneEXT {
    type Target = DeviceFaultVendorBinaryHeaderVersionOneEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceFaultVendorBinaryHeaderVersionOneEXT {
    type Builder = DeviceFaultVendorBinaryHeaderVersionOneEXTBuilder;
}

/// A builder for a [`DeviceFaultVendorBinaryHeaderVersionOneEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceFaultVendorBinaryHeaderVersionOneEXTBuilder {
    value: DeviceFaultVendorBinaryHeaderVersionOneEXT,
}

impl DeviceFaultVendorBinaryHeaderVersionOneEXTBuilder {
    #[inline]
    pub fn header_size(mut self, header_size: u32) -> Self {
        self.value.header_size = header_size;
        self
    }

    #[inline]
    pub fn header_version(
        mut self,
        header_version: DeviceFaultVendorBinaryHeaderVersionEXT,
    ) -> Self {
        self.value.header_version = header_version;
        self
    }

    #[inline]
    pub fn vendor_id(mut self, vendor_id: u32) -> Self {
        self.value.vendor_id = vendor_id;
        self
    }

    #[inline]
    pub fn device_id(mut self, device_id: u32) -> Self {
        self.value.device_id = device_id;
        self
    }

    #[inline]
    pub fn driver_version(mut self, driver_version: u32) -> Self {
        self.value.driver_version = driver_version;
        self
    }

    #[inline]
    pub fn pipeline_cache_uuid(
        mut self,
        pipeline_cache_uuid: impl Into<ByteArray<UUID_SIZE>>,
    ) -> Self {
        self.value.pipeline_cache_uuid = pipeline_cache_uuid.into();
        self
    }

    #[inline]
    pub fn application_name_offset(mut self, application_name_offset: u32) -> Self {
        self.value.application_name_offset = application_name_offset;
        self
    }

    #[inline]
    pub fn application_version(mut self, application_version: u32) -> Self {
        self.value.application_version = application_version;
        self
    }

    #[inline]
    pub fn engine_name_offset(mut self, engine_name_offset: u32) -> Self {
        self.value.engine_name_offset = engine_name_offset;
        self
    }

    #[inline]
    pub fn engine_version(mut self, engine_version: u32) -> Self {
        self.value.engine_version = engine_version;
        self
    }

    #[inline]
    pub fn api_version(mut self, api_version: u32) -> Self {
        self.value.api_version = api_version;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceFaultVendorBinaryHeaderVersionOneEXT {
        self.value
    }
}

impl ops::Deref for DeviceFaultVendorBinaryHeaderVersionOneEXTBuilder {
    type Target = DeviceFaultVendorBinaryHeaderVersionOneEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceFaultVendorBinaryHeaderVersionOneEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceFaultVendorBinaryHeaderVersionOneEXTBuilder {
    type Target = DeviceFaultVendorBinaryHeaderVersionOneEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceFaultVendorInfoEXT {
    type Target = DeviceFaultVendorInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceFaultVendorInfoEXT {
    type Builder = DeviceFaultVendorInfoEXTBuilder;
}

/// A builder for a [`DeviceFaultVendorInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceFaultVendorInfoEXTBuilder {
    value: DeviceFaultVendorInfoEXT,
}

impl DeviceFaultVendorInfoEXTBuilder {
    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn vendor_fault_code(mut self, vendor_fault_code: u64) -> Self {
        self.value.vendor_fault_code = vendor_fault_code;
        self
    }

    #[inline]
    pub fn vendor_fault_data(mut self, vendor_fault_data: u64) -> Self {
        self.value.vendor_fault_data = vendor_fault_data;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceFaultVendorInfoEXT {
        self.value
    }
}

impl ops::Deref for DeviceFaultVendorInfoEXTBuilder {
    type Target = DeviceFaultVendorInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceFaultVendorInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceFaultVendorInfoEXTBuilder {
    type Target = DeviceFaultVendorInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceGroupBindSparseInfo {
    type Target = DeviceGroupBindSparseInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceGroupBindSparseInfo {
    type Builder = DeviceGroupBindSparseInfoBuilder;
}

/// A builder for a [`DeviceGroupBindSparseInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceGroupBindSparseInfoBuilder {
    value: DeviceGroupBindSparseInfo,
}

impl DeviceGroupBindSparseInfoBuilder {
    #[inline]
    pub fn resource_device_index(mut self, resource_device_index: u32) -> Self {
        self.value.resource_device_index = resource_device_index;
        self
    }

    #[inline]
    pub fn memory_device_index(mut self, memory_device_index: u32) -> Self {
        self.value.memory_device_index = memory_device_index;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceGroupBindSparseInfo {
        self.value
    }
}

impl ops::Deref for DeviceGroupBindSparseInfoBuilder {
    type Target = DeviceGroupBindSparseInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceGroupBindSparseInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceGroupBindSparseInfoBuilder {
    type Target = DeviceGroupBindSparseInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceGroupCommandBufferBeginInfo {
    type Target = DeviceGroupCommandBufferBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceGroupCommandBufferBeginInfo {
    type Builder = DeviceGroupCommandBufferBeginInfoBuilder;
}

/// A builder for a [`DeviceGroupCommandBufferBeginInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceGroupCommandBufferBeginInfoBuilder {
    value: DeviceGroupCommandBufferBeginInfo,
}

impl DeviceGroupCommandBufferBeginInfoBuilder {
    #[inline]
    pub fn device_mask(mut self, device_mask: u32) -> Self {
        self.value.device_mask = device_mask;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceGroupCommandBufferBeginInfo {
        self.value
    }
}

impl ops::Deref for DeviceGroupCommandBufferBeginInfoBuilder {
    type Target = DeviceGroupCommandBufferBeginInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceGroupCommandBufferBeginInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceGroupCommandBufferBeginInfoBuilder {
    type Target = DeviceGroupCommandBufferBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceGroupDeviceCreateInfo {
    type Target = DeviceGroupDeviceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceGroupDeviceCreateInfo {
    type Builder = DeviceGroupDeviceCreateInfoBuilder<'b>;
}

/// A builder for a [`DeviceGroupDeviceCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceGroupDeviceCreateInfoBuilder<'b> {
    value: DeviceGroupDeviceCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceGroupDeviceCreateInfoBuilder<'b> {
    #[inline]
    pub fn physical_devices(mut self, physical_devices: &'b [PhysicalDevice]) -> Self {
        self.value.physical_device_count = physical_devices.len() as u32;
        self.value.physical_devices = physical_devices.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceGroupDeviceCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DeviceGroupDeviceCreateInfoBuilder<'b> {
    type Target = DeviceGroupDeviceCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceGroupDeviceCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceGroupDeviceCreateInfoBuilder<'b> {
    type Target = DeviceGroupDeviceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceGroupPresentCapabilitiesKHR {
    type Target = DeviceGroupPresentCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceGroupPresentCapabilitiesKHR {
    type Builder = DeviceGroupPresentCapabilitiesKHRBuilder;
}

/// A builder for a [`DeviceGroupPresentCapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceGroupPresentCapabilitiesKHRBuilder {
    value: DeviceGroupPresentCapabilitiesKHR,
}

impl DeviceGroupPresentCapabilitiesKHRBuilder {
    #[inline]
    pub fn present_mask(mut self, present_mask: [u32; MAX_DEVICE_GROUP_SIZE]) -> Self {
        self.value.present_mask = present_mask;
        self
    }

    #[inline]
    pub fn modes(mut self, modes: DeviceGroupPresentModeFlagsKHR) -> Self {
        self.value.modes = modes;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceGroupPresentCapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for DeviceGroupPresentCapabilitiesKHRBuilder {
    type Target = DeviceGroupPresentCapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceGroupPresentCapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceGroupPresentCapabilitiesKHRBuilder {
    type Target = DeviceGroupPresentCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceGroupPresentInfoKHR {
    type Target = DeviceGroupPresentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceGroupPresentInfoKHR {
    type Builder = DeviceGroupPresentInfoKHRBuilder<'b>;
}

/// A builder for a [`DeviceGroupPresentInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceGroupPresentInfoKHRBuilder<'b> {
    value: DeviceGroupPresentInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceGroupPresentInfoKHRBuilder<'b> {
    #[inline]
    pub fn device_masks(mut self, device_masks: &'b [u32]) -> Self {
        self.value.swapchain_count = device_masks.len() as u32;
        self.value.device_masks = device_masks.as_ptr();
        self
    }

    #[inline]
    pub fn mode(mut self, mode: DeviceGroupPresentModeFlagsKHR) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceGroupPresentInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for DeviceGroupPresentInfoKHRBuilder<'b> {
    type Target = DeviceGroupPresentInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceGroupPresentInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceGroupPresentInfoKHRBuilder<'b> {
    type Target = DeviceGroupPresentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceGroupRenderPassBeginInfo {
    type Target = DeviceGroupRenderPassBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceGroupRenderPassBeginInfo {
    type Builder = DeviceGroupRenderPassBeginInfoBuilder<'b>;
}

/// A builder for a [`DeviceGroupRenderPassBeginInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceGroupRenderPassBeginInfoBuilder<'b> {
    value: DeviceGroupRenderPassBeginInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceGroupRenderPassBeginInfoBuilder<'b> {
    #[inline]
    pub fn device_mask(mut self, device_mask: u32) -> Self {
        self.value.device_mask = device_mask;
        self
    }

    #[inline]
    pub fn device_render_areas(
        mut self,
        device_render_areas: &'b [impl Cast<Target = Rect2D>],
    ) -> Self {
        self.value.device_render_area_count = device_render_areas.len() as u32;
        self.value.device_render_areas = device_render_areas.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceGroupRenderPassBeginInfo {
        self.value
    }
}

impl<'b> ops::Deref for DeviceGroupRenderPassBeginInfoBuilder<'b> {
    type Target = DeviceGroupRenderPassBeginInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceGroupRenderPassBeginInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceGroupRenderPassBeginInfoBuilder<'b> {
    type Target = DeviceGroupRenderPassBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceGroupSubmitInfo {
    type Target = DeviceGroupSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceGroupSubmitInfo {
    type Builder = DeviceGroupSubmitInfoBuilder<'b>;
}

/// A builder for a [`DeviceGroupSubmitInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceGroupSubmitInfoBuilder<'b> {
    value: DeviceGroupSubmitInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceGroupSubmitInfoBuilder<'b> {
    #[inline]
    pub fn wait_semaphore_device_indices(
        mut self,
        wait_semaphore_device_indices: &'b [u32],
    ) -> Self {
        self.value.wait_semaphore_count = wait_semaphore_device_indices.len() as u32;
        self.value.wait_semaphore_device_indices = wait_semaphore_device_indices.as_ptr();
        self
    }

    #[inline]
    pub fn command_buffer_device_masks(mut self, command_buffer_device_masks: &'b [u32]) -> Self {
        self.value.command_buffer_count = command_buffer_device_masks.len() as u32;
        self.value.command_buffer_device_masks = command_buffer_device_masks.as_ptr();
        self
    }

    #[inline]
    pub fn signal_semaphore_device_indices(
        mut self,
        signal_semaphore_device_indices: &'b [u32],
    ) -> Self {
        self.value.signal_semaphore_count = signal_semaphore_device_indices.len() as u32;
        self.value.signal_semaphore_device_indices = signal_semaphore_device_indices.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceGroupSubmitInfo {
        self.value
    }
}

impl<'b> ops::Deref for DeviceGroupSubmitInfoBuilder<'b> {
    type Target = DeviceGroupSubmitInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceGroupSubmitInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceGroupSubmitInfoBuilder<'b> {
    type Target = DeviceGroupSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceGroupSwapchainCreateInfoKHR {
    type Target = DeviceGroupSwapchainCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceGroupSwapchainCreateInfoKHR {
    type Builder = DeviceGroupSwapchainCreateInfoKHRBuilder;
}

/// A builder for a [`DeviceGroupSwapchainCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceGroupSwapchainCreateInfoKHRBuilder {
    value: DeviceGroupSwapchainCreateInfoKHR,
}

impl DeviceGroupSwapchainCreateInfoKHRBuilder {
    #[inline]
    pub fn modes(mut self, modes: DeviceGroupPresentModeFlagsKHR) -> Self {
        self.value.modes = modes;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceGroupSwapchainCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for DeviceGroupSwapchainCreateInfoKHRBuilder {
    type Target = DeviceGroupSwapchainCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceGroupSwapchainCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceGroupSwapchainCreateInfoKHRBuilder {
    type Target = DeviceGroupSwapchainCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceImageMemoryRequirements {
    type Target = DeviceImageMemoryRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceImageMemoryRequirements {
    type Builder = DeviceImageMemoryRequirementsBuilder<'b>;
}

/// A builder for a [`DeviceImageMemoryRequirements`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceImageMemoryRequirementsBuilder<'b> {
    value: DeviceImageMemoryRequirements,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceImageMemoryRequirementsBuilder<'b> {
    #[inline]
    pub fn create_info(mut self, create_info: &'b impl Cast<Target = ImageCreateInfo>) -> Self {
        self.value.create_info = create_info.as_ref();
        self
    }

    #[inline]
    pub fn plane_aspect(mut self, plane_aspect: ImageAspectFlags) -> Self {
        self.value.plane_aspect = plane_aspect;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceImageMemoryRequirements {
        self.value
    }
}

impl<'b> ops::Deref for DeviceImageMemoryRequirementsBuilder<'b> {
    type Target = DeviceImageMemoryRequirements;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceImageMemoryRequirementsBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceImageMemoryRequirementsBuilder<'b> {
    type Target = DeviceImageMemoryRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceImageSubresourceInfoKHR {
    type Target = DeviceImageSubresourceInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceImageSubresourceInfoKHR {
    type Builder = DeviceImageSubresourceInfoKHRBuilder<'b>;
}

/// A builder for a [`DeviceImageSubresourceInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceImageSubresourceInfoKHRBuilder<'b> {
    value: DeviceImageSubresourceInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceImageSubresourceInfoKHRBuilder<'b> {
    #[inline]
    pub fn create_info(mut self, create_info: &'b impl Cast<Target = ImageCreateInfo>) -> Self {
        self.value.create_info = create_info.as_ref();
        self
    }

    #[inline]
    pub fn subresource(
        mut self,
        subresource: &'b impl Cast<Target = ImageSubresource2KHR>,
    ) -> Self {
        self.value.subresource = subresource.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceImageSubresourceInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for DeviceImageSubresourceInfoKHRBuilder<'b> {
    type Target = DeviceImageSubresourceInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceImageSubresourceInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceImageSubresourceInfoKHRBuilder<'b> {
    type Target = DeviceImageSubresourceInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceMemoryOpaqueCaptureAddressInfo {
    type Target = DeviceMemoryOpaqueCaptureAddressInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceMemoryOpaqueCaptureAddressInfo {
    type Builder = DeviceMemoryOpaqueCaptureAddressInfoBuilder;
}

/// A builder for a [`DeviceMemoryOpaqueCaptureAddressInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceMemoryOpaqueCaptureAddressInfoBuilder {
    value: DeviceMemoryOpaqueCaptureAddressInfo,
}

impl DeviceMemoryOpaqueCaptureAddressInfoBuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceMemoryOpaqueCaptureAddressInfo {
        self.value
    }
}

impl ops::Deref for DeviceMemoryOpaqueCaptureAddressInfoBuilder {
    type Target = DeviceMemoryOpaqueCaptureAddressInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceMemoryOpaqueCaptureAddressInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceMemoryOpaqueCaptureAddressInfoBuilder {
    type Target = DeviceMemoryOpaqueCaptureAddressInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceMemoryOverallocationCreateInfoAMD {
    type Target = DeviceMemoryOverallocationCreateInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceMemoryOverallocationCreateInfoAMD {
    type Builder = DeviceMemoryOverallocationCreateInfoAMDBuilder;
}

/// A builder for a [`DeviceMemoryOverallocationCreateInfoAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceMemoryOverallocationCreateInfoAMDBuilder {
    value: DeviceMemoryOverallocationCreateInfoAMD,
}

impl DeviceMemoryOverallocationCreateInfoAMDBuilder {
    #[inline]
    pub fn overallocation_behavior(
        mut self,
        overallocation_behavior: MemoryOverallocationBehaviorAMD,
    ) -> Self {
        self.value.overallocation_behavior = overallocation_behavior;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceMemoryOverallocationCreateInfoAMD {
        self.value
    }
}

impl ops::Deref for DeviceMemoryOverallocationCreateInfoAMDBuilder {
    type Target = DeviceMemoryOverallocationCreateInfoAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceMemoryOverallocationCreateInfoAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceMemoryOverallocationCreateInfoAMDBuilder {
    type Target = DeviceMemoryOverallocationCreateInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceMemoryReportCallbackDataEXT {
    type Target = DeviceMemoryReportCallbackDataEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceMemoryReportCallbackDataEXT {
    type Builder = DeviceMemoryReportCallbackDataEXTBuilder;
}

/// A builder for a [`DeviceMemoryReportCallbackDataEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceMemoryReportCallbackDataEXTBuilder {
    value: DeviceMemoryReportCallbackDataEXT,
}

impl DeviceMemoryReportCallbackDataEXTBuilder {
    #[inline]
    pub fn flags(mut self, flags: DeviceMemoryReportFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn type_(mut self, type_: DeviceMemoryReportEventTypeEXT) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn memory_object_id(mut self, memory_object_id: u64) -> Self {
        self.value.memory_object_id = memory_object_id;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn object_type(mut self, object_type: ObjectType) -> Self {
        self.value.object_type = object_type;
        self
    }

    #[inline]
    pub fn object_handle(mut self, object_handle: u64) -> Self {
        self.value.object_handle = object_handle;
        self
    }

    #[inline]
    pub fn heap_index(mut self, heap_index: u32) -> Self {
        self.value.heap_index = heap_index;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceMemoryReportCallbackDataEXT {
        self.value
    }
}

impl ops::Deref for DeviceMemoryReportCallbackDataEXTBuilder {
    type Target = DeviceMemoryReportCallbackDataEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceMemoryReportCallbackDataEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceMemoryReportCallbackDataEXTBuilder {
    type Target = DeviceMemoryReportCallbackDataEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DevicePipelineBinaryInternalCacheControlKHR {
    type Target = DevicePipelineBinaryInternalCacheControlKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DevicePipelineBinaryInternalCacheControlKHR {
    type Builder = DevicePipelineBinaryInternalCacheControlKHRBuilder;
}

/// A builder for a [`DevicePipelineBinaryInternalCacheControlKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DevicePipelineBinaryInternalCacheControlKHRBuilder {
    value: DevicePipelineBinaryInternalCacheControlKHR,
}

impl DevicePipelineBinaryInternalCacheControlKHRBuilder {
    #[inline]
    pub fn disable_internal_cache(mut self, disable_internal_cache: bool) -> Self {
        self.value.disable_internal_cache = disable_internal_cache as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> DevicePipelineBinaryInternalCacheControlKHR {
        self.value
    }
}

impl ops::Deref for DevicePipelineBinaryInternalCacheControlKHRBuilder {
    type Target = DevicePipelineBinaryInternalCacheControlKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DevicePipelineBinaryInternalCacheControlKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DevicePipelineBinaryInternalCacheControlKHRBuilder {
    type Target = DevicePipelineBinaryInternalCacheControlKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DevicePrivateDataCreateInfo {
    type Target = DevicePrivateDataCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DevicePrivateDataCreateInfo {
    type Builder = DevicePrivateDataCreateInfoBuilder;
}

/// A builder for a [`DevicePrivateDataCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DevicePrivateDataCreateInfoBuilder {
    value: DevicePrivateDataCreateInfo,
}

impl DevicePrivateDataCreateInfoBuilder {
    #[inline]
    pub fn private_data_slot_request_count(mut self, private_data_slot_request_count: u32) -> Self {
        self.value.private_data_slot_request_count = private_data_slot_request_count;
        self
    }

    #[inline]
    pub fn build(self) -> DevicePrivateDataCreateInfo {
        self.value
    }
}

impl ops::Deref for DevicePrivateDataCreateInfoBuilder {
    type Target = DevicePrivateDataCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DevicePrivateDataCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DevicePrivateDataCreateInfoBuilder {
    type Target = DevicePrivateDataCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`DeviceQueueCreateInfo`].
pub unsafe trait ExtendsDeviceQueueCreateInfo: fmt::Debug {}
unsafe impl ExtendsDeviceQueueCreateInfo for DeviceQueueGlobalPriorityCreateInfoKHR {}
unsafe impl ExtendsDeviceQueueCreateInfo for DeviceQueueShaderCoreControlCreateInfoARM {}

unsafe impl Cast for DeviceQueueCreateInfo {
    type Target = DeviceQueueCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DeviceQueueCreateInfo {
    type Builder = DeviceQueueCreateInfoBuilder<'b>;
}

/// A builder for a [`DeviceQueueCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceQueueCreateInfoBuilder<'b> {
    value: DeviceQueueCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DeviceQueueCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsDeviceQueueCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: DeviceQueueCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn queue_family_index(mut self, queue_family_index: u32) -> Self {
        self.value.queue_family_index = queue_family_index;
        self
    }

    #[inline]
    pub fn queue_priorities(mut self, queue_priorities: &'b [f32]) -> Self {
        self.value.queue_count = queue_priorities.len() as u32;
        self.value.queue_priorities = queue_priorities.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> DeviceQueueCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for DeviceQueueCreateInfoBuilder<'b> {
    type Target = DeviceQueueCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DeviceQueueCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DeviceQueueCreateInfoBuilder<'b> {
    type Target = DeviceQueueCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceQueueGlobalPriorityCreateInfoKHR {
    type Target = DeviceQueueGlobalPriorityCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceQueueGlobalPriorityCreateInfoKHR {
    type Builder = DeviceQueueGlobalPriorityCreateInfoKHRBuilder;
}

/// A builder for a [`DeviceQueueGlobalPriorityCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceQueueGlobalPriorityCreateInfoKHRBuilder {
    value: DeviceQueueGlobalPriorityCreateInfoKHR,
}

impl DeviceQueueGlobalPriorityCreateInfoKHRBuilder {
    #[inline]
    pub fn global_priority(mut self, global_priority: QueueGlobalPriorityKHR) -> Self {
        self.value.global_priority = global_priority;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceQueueGlobalPriorityCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for DeviceQueueGlobalPriorityCreateInfoKHRBuilder {
    type Target = DeviceQueueGlobalPriorityCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceQueueGlobalPriorityCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceQueueGlobalPriorityCreateInfoKHRBuilder {
    type Target = DeviceQueueGlobalPriorityCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceQueueInfo2 {
    type Target = DeviceQueueInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceQueueInfo2 {
    type Builder = DeviceQueueInfo2Builder;
}

/// A builder for a [`DeviceQueueInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceQueueInfo2Builder {
    value: DeviceQueueInfo2,
}

impl DeviceQueueInfo2Builder {
    #[inline]
    pub fn flags(mut self, flags: DeviceQueueCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn queue_family_index(mut self, queue_family_index: u32) -> Self {
        self.value.queue_family_index = queue_family_index;
        self
    }

    #[inline]
    pub fn queue_index(mut self, queue_index: u32) -> Self {
        self.value.queue_index = queue_index;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceQueueInfo2 {
        self.value
    }
}

impl ops::Deref for DeviceQueueInfo2Builder {
    type Target = DeviceQueueInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceQueueInfo2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceQueueInfo2Builder {
    type Target = DeviceQueueInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceQueueShaderCoreControlCreateInfoARM {
    type Target = DeviceQueueShaderCoreControlCreateInfoARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceQueueShaderCoreControlCreateInfoARM {
    type Builder = DeviceQueueShaderCoreControlCreateInfoARMBuilder;
}

/// A builder for a [`DeviceQueueShaderCoreControlCreateInfoARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceQueueShaderCoreControlCreateInfoARMBuilder {
    value: DeviceQueueShaderCoreControlCreateInfoARM,
}

impl DeviceQueueShaderCoreControlCreateInfoARMBuilder {
    #[inline]
    pub fn shader_core_count(mut self, shader_core_count: u32) -> Self {
        self.value.shader_core_count = shader_core_count;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceQueueShaderCoreControlCreateInfoARM {
        self.value
    }
}

impl ops::Deref for DeviceQueueShaderCoreControlCreateInfoARMBuilder {
    type Target = DeviceQueueShaderCoreControlCreateInfoARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceQueueShaderCoreControlCreateInfoARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceQueueShaderCoreControlCreateInfoARMBuilder {
    type Target = DeviceQueueShaderCoreControlCreateInfoARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DeviceSemaphoreSciSyncPoolReservationCreateInfoNV {
    type Target = DeviceSemaphoreSciSyncPoolReservationCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DeviceSemaphoreSciSyncPoolReservationCreateInfoNV {
    type Builder = DeviceSemaphoreSciSyncPoolReservationCreateInfoNVBuilder;
}

/// A builder for a [`DeviceSemaphoreSciSyncPoolReservationCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DeviceSemaphoreSciSyncPoolReservationCreateInfoNVBuilder {
    value: DeviceSemaphoreSciSyncPoolReservationCreateInfoNV,
}

impl DeviceSemaphoreSciSyncPoolReservationCreateInfoNVBuilder {
    #[inline]
    pub fn semaphore_sci_sync_pool_request_count(
        mut self,
        semaphore_sci_sync_pool_request_count: u32,
    ) -> Self {
        self.value.semaphore_sci_sync_pool_request_count = semaphore_sci_sync_pool_request_count;
        self
    }

    #[inline]
    pub fn build(self) -> DeviceSemaphoreSciSyncPoolReservationCreateInfoNV {
        self.value
    }
}

impl ops::Deref for DeviceSemaphoreSciSyncPoolReservationCreateInfoNVBuilder {
    type Target = DeviceSemaphoreSciSyncPoolReservationCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DeviceSemaphoreSciSyncPoolReservationCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DeviceSemaphoreSciSyncPoolReservationCreateInfoNVBuilder {
    type Target = DeviceSemaphoreSciSyncPoolReservationCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DirectDriverLoadingInfoLUNARG {
    type Target = DirectDriverLoadingInfoLUNARG;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DirectDriverLoadingInfoLUNARG {
    type Builder = DirectDriverLoadingInfoLUNARGBuilder;
}

/// A builder for a [`DirectDriverLoadingInfoLUNARG`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DirectDriverLoadingInfoLUNARGBuilder {
    value: DirectDriverLoadingInfoLUNARG,
}

impl DirectDriverLoadingInfoLUNARGBuilder {
    #[inline]
    pub fn flags(mut self, flags: DirectDriverLoadingFlagsLUNARG) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn get_instance_proc_addr(
        mut self,
        get_instance_proc_addr: PFN_vkGetInstanceProcAddrLUNARG,
    ) -> Self {
        self.value.get_instance_proc_addr = get_instance_proc_addr;
        self
    }

    #[inline]
    pub fn build(self) -> DirectDriverLoadingInfoLUNARG {
        self.value
    }
}

impl ops::Deref for DirectDriverLoadingInfoLUNARGBuilder {
    type Target = DirectDriverLoadingInfoLUNARG;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DirectDriverLoadingInfoLUNARGBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DirectDriverLoadingInfoLUNARGBuilder {
    type Target = DirectDriverLoadingInfoLUNARG;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DirectDriverLoadingListLUNARG {
    type Target = DirectDriverLoadingListLUNARG;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DirectDriverLoadingListLUNARG {
    type Builder = DirectDriverLoadingListLUNARGBuilder<'b>;
}

/// A builder for a [`DirectDriverLoadingListLUNARG`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DirectDriverLoadingListLUNARGBuilder<'b> {
    value: DirectDriverLoadingListLUNARG,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DirectDriverLoadingListLUNARGBuilder<'b> {
    #[inline]
    pub fn mode(mut self, mode: DirectDriverLoadingModeLUNARG) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn drivers(
        mut self,
        drivers: &'b [impl Cast<Target = DirectDriverLoadingInfoLUNARG>],
    ) -> Self {
        self.value.driver_count = drivers.len() as u32;
        self.value.drivers = drivers.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DirectDriverLoadingListLUNARG {
        self.value
    }
}

impl<'b> ops::Deref for DirectDriverLoadingListLUNARGBuilder<'b> {
    type Target = DirectDriverLoadingListLUNARG;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DirectDriverLoadingListLUNARGBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DirectDriverLoadingListLUNARGBuilder<'b> {
    type Target = DirectDriverLoadingListLUNARG;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DirectFBSurfaceCreateInfoEXT {
    type Target = DirectFBSurfaceCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DirectFBSurfaceCreateInfoEXT {
    type Builder = DirectFBSurfaceCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`DirectFBSurfaceCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DirectFBSurfaceCreateInfoEXTBuilder<'b> {
    value: DirectFBSurfaceCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DirectFBSurfaceCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: DirectFBSurfaceCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn dfb(mut self, dfb: *mut IDirectFB) -> Self {
        self.value.dfb = dfb;
        self
    }

    #[inline]
    pub fn surface(mut self, surface: *mut IDirectFBSurface) -> Self {
        self.value.surface = surface;
        self
    }

    #[inline]
    pub fn build(self) -> DirectFBSurfaceCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for DirectFBSurfaceCreateInfoEXTBuilder<'b> {
    type Target = DirectFBSurfaceCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DirectFBSurfaceCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DirectFBSurfaceCreateInfoEXTBuilder<'b> {
    type Target = DirectFBSurfaceCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DispatchGraphCountInfoAMDX {
    type Target = DispatchGraphCountInfoAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DispatchGraphCountInfoAMDX {
    type Builder = DispatchGraphCountInfoAMDXBuilder;
}

/// A builder for a [`DispatchGraphCountInfoAMDX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DispatchGraphCountInfoAMDXBuilder {
    value: DispatchGraphCountInfoAMDX,
}

impl DispatchGraphCountInfoAMDXBuilder {
    #[inline]
    pub fn count(mut self, count: u32) -> Self {
        self.value.count = count;
        self
    }

    #[inline]
    pub fn infos(mut self, infos: DeviceOrHostAddressConstAMDX) -> Self {
        self.value.infos = infos;
        self
    }

    #[inline]
    pub fn stride(mut self, stride: u64) -> Self {
        self.value.stride = stride;
        self
    }

    #[inline]
    pub fn build(self) -> DispatchGraphCountInfoAMDX {
        self.value
    }
}

impl ops::Deref for DispatchGraphCountInfoAMDXBuilder {
    type Target = DispatchGraphCountInfoAMDX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DispatchGraphCountInfoAMDXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DispatchGraphCountInfoAMDXBuilder {
    type Target = DispatchGraphCountInfoAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DispatchGraphInfoAMDX {
    type Target = DispatchGraphInfoAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DispatchGraphInfoAMDX {
    type Builder = DispatchGraphInfoAMDXBuilder;
}

/// A builder for a [`DispatchGraphInfoAMDX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DispatchGraphInfoAMDXBuilder {
    value: DispatchGraphInfoAMDX,
}

impl DispatchGraphInfoAMDXBuilder {
    #[inline]
    pub fn node_index(mut self, node_index: u32) -> Self {
        self.value.node_index = node_index;
        self
    }

    #[inline]
    pub fn payload_count(mut self, payload_count: u32) -> Self {
        self.value.payload_count = payload_count;
        self
    }

    #[inline]
    pub fn payloads(mut self, payloads: DeviceOrHostAddressConstAMDX) -> Self {
        self.value.payloads = payloads;
        self
    }

    #[inline]
    pub fn payload_stride(mut self, payload_stride: u64) -> Self {
        self.value.payload_stride = payload_stride;
        self
    }

    #[inline]
    pub fn build(self) -> DispatchGraphInfoAMDX {
        self.value
    }
}

impl ops::Deref for DispatchGraphInfoAMDXBuilder {
    type Target = DispatchGraphInfoAMDX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DispatchGraphInfoAMDXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DispatchGraphInfoAMDXBuilder {
    type Target = DispatchGraphInfoAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DispatchIndirectCommand {
    type Target = DispatchIndirectCommand;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DispatchIndirectCommand {
    type Builder = DispatchIndirectCommandBuilder;
}

/// A builder for a [`DispatchIndirectCommand`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DispatchIndirectCommandBuilder {
    value: DispatchIndirectCommand,
}

impl DispatchIndirectCommandBuilder {
    #[inline]
    pub fn x(mut self, x: u32) -> Self {
        self.value.x = x;
        self
    }

    #[inline]
    pub fn y(mut self, y: u32) -> Self {
        self.value.y = y;
        self
    }

    #[inline]
    pub fn z(mut self, z: u32) -> Self {
        self.value.z = z;
        self
    }

    #[inline]
    pub fn build(self) -> DispatchIndirectCommand {
        self.value
    }
}

impl ops::Deref for DispatchIndirectCommandBuilder {
    type Target = DispatchIndirectCommand;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DispatchIndirectCommandBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DispatchIndirectCommandBuilder {
    type Target = DispatchIndirectCommand;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayEventInfoEXT {
    type Target = DisplayEventInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayEventInfoEXT {
    type Builder = DisplayEventInfoEXTBuilder;
}

/// A builder for a [`DisplayEventInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayEventInfoEXTBuilder {
    value: DisplayEventInfoEXT,
}

impl DisplayEventInfoEXTBuilder {
    #[inline]
    pub fn display_event(mut self, display_event: DisplayEventTypeEXT) -> Self {
        self.value.display_event = display_event;
        self
    }

    #[inline]
    pub fn build(self) -> DisplayEventInfoEXT {
        self.value
    }
}

impl ops::Deref for DisplayEventInfoEXTBuilder {
    type Target = DisplayEventInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayEventInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayEventInfoEXTBuilder {
    type Target = DisplayEventInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayModeCreateInfoKHR {
    type Target = DisplayModeCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayModeCreateInfoKHR {
    type Builder = DisplayModeCreateInfoKHRBuilder;
}

/// A builder for a [`DisplayModeCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayModeCreateInfoKHRBuilder {
    value: DisplayModeCreateInfoKHR,
}

impl DisplayModeCreateInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: DisplayModeCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn parameters(mut self, parameters: impl Cast<Target = DisplayModeParametersKHR>) -> Self {
        self.value.parameters = parameters.into();
        self
    }

    #[inline]
    pub fn build(self) -> DisplayModeCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for DisplayModeCreateInfoKHRBuilder {
    type Target = DisplayModeCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayModeCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayModeCreateInfoKHRBuilder {
    type Target = DisplayModeCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayModeParametersKHR {
    type Target = DisplayModeParametersKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayModeParametersKHR {
    type Builder = DisplayModeParametersKHRBuilder;
}

/// A builder for a [`DisplayModeParametersKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayModeParametersKHRBuilder {
    value: DisplayModeParametersKHR,
}

impl DisplayModeParametersKHRBuilder {
    #[inline]
    pub fn visible_region(mut self, visible_region: impl Cast<Target = Extent2D>) -> Self {
        self.value.visible_region = visible_region.into();
        self
    }

    #[inline]
    pub fn refresh_rate(mut self, refresh_rate: u32) -> Self {
        self.value.refresh_rate = refresh_rate;
        self
    }

    #[inline]
    pub fn build(self) -> DisplayModeParametersKHR {
        self.value
    }
}

impl ops::Deref for DisplayModeParametersKHRBuilder {
    type Target = DisplayModeParametersKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayModeParametersKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayModeParametersKHRBuilder {
    type Target = DisplayModeParametersKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayModeProperties2KHR {
    type Target = DisplayModeProperties2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayModeProperties2KHR {
    type Builder = DisplayModeProperties2KHRBuilder;
}

/// A builder for a [`DisplayModeProperties2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayModeProperties2KHRBuilder {
    value: DisplayModeProperties2KHR,
}

impl DisplayModeProperties2KHRBuilder {
    #[inline]
    pub fn display_mode_properties(
        mut self,
        display_mode_properties: impl Cast<Target = DisplayModePropertiesKHR>,
    ) -> Self {
        self.value.display_mode_properties = display_mode_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> DisplayModeProperties2KHR {
        self.value
    }
}

impl ops::Deref for DisplayModeProperties2KHRBuilder {
    type Target = DisplayModeProperties2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayModeProperties2KHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayModeProperties2KHRBuilder {
    type Target = DisplayModeProperties2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayModePropertiesKHR {
    type Target = DisplayModePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayModePropertiesKHR {
    type Builder = DisplayModePropertiesKHRBuilder;
}

/// A builder for a [`DisplayModePropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayModePropertiesKHRBuilder {
    value: DisplayModePropertiesKHR,
}

impl DisplayModePropertiesKHRBuilder {
    #[inline]
    pub fn display_mode(mut self, display_mode: DisplayModeKHR) -> Self {
        self.value.display_mode = display_mode;
        self
    }

    #[inline]
    pub fn parameters(mut self, parameters: impl Cast<Target = DisplayModeParametersKHR>) -> Self {
        self.value.parameters = parameters.into();
        self
    }

    #[inline]
    pub fn build(self) -> DisplayModePropertiesKHR {
        self.value
    }
}

impl ops::Deref for DisplayModePropertiesKHRBuilder {
    type Target = DisplayModePropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayModePropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayModePropertiesKHRBuilder {
    type Target = DisplayModePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayNativeHdrSurfaceCapabilitiesAMD {
    type Target = DisplayNativeHdrSurfaceCapabilitiesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayNativeHdrSurfaceCapabilitiesAMD {
    type Builder = DisplayNativeHdrSurfaceCapabilitiesAMDBuilder;
}

/// A builder for a [`DisplayNativeHdrSurfaceCapabilitiesAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayNativeHdrSurfaceCapabilitiesAMDBuilder {
    value: DisplayNativeHdrSurfaceCapabilitiesAMD,
}

impl DisplayNativeHdrSurfaceCapabilitiesAMDBuilder {
    #[inline]
    pub fn local_dimming_support(mut self, local_dimming_support: bool) -> Self {
        self.value.local_dimming_support = local_dimming_support as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> DisplayNativeHdrSurfaceCapabilitiesAMD {
        self.value
    }
}

impl ops::Deref for DisplayNativeHdrSurfaceCapabilitiesAMDBuilder {
    type Target = DisplayNativeHdrSurfaceCapabilitiesAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayNativeHdrSurfaceCapabilitiesAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayNativeHdrSurfaceCapabilitiesAMDBuilder {
    type Target = DisplayNativeHdrSurfaceCapabilitiesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayPlaneCapabilities2KHR {
    type Target = DisplayPlaneCapabilities2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayPlaneCapabilities2KHR {
    type Builder = DisplayPlaneCapabilities2KHRBuilder;
}

/// A builder for a [`DisplayPlaneCapabilities2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayPlaneCapabilities2KHRBuilder {
    value: DisplayPlaneCapabilities2KHR,
}

impl DisplayPlaneCapabilities2KHRBuilder {
    #[inline]
    pub fn capabilities(
        mut self,
        capabilities: impl Cast<Target = DisplayPlaneCapabilitiesKHR>,
    ) -> Self {
        self.value.capabilities = capabilities.into();
        self
    }

    #[inline]
    pub fn build(self) -> DisplayPlaneCapabilities2KHR {
        self.value
    }
}

impl ops::Deref for DisplayPlaneCapabilities2KHRBuilder {
    type Target = DisplayPlaneCapabilities2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayPlaneCapabilities2KHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayPlaneCapabilities2KHRBuilder {
    type Target = DisplayPlaneCapabilities2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayPlaneCapabilitiesKHR {
    type Target = DisplayPlaneCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayPlaneCapabilitiesKHR {
    type Builder = DisplayPlaneCapabilitiesKHRBuilder;
}

/// A builder for a [`DisplayPlaneCapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayPlaneCapabilitiesKHRBuilder {
    value: DisplayPlaneCapabilitiesKHR,
}

impl DisplayPlaneCapabilitiesKHRBuilder {
    #[inline]
    pub fn supported_alpha(mut self, supported_alpha: DisplayPlaneAlphaFlagsKHR) -> Self {
        self.value.supported_alpha = supported_alpha;
        self
    }

    #[inline]
    pub fn min_src_position(mut self, min_src_position: impl Cast<Target = Offset2D>) -> Self {
        self.value.min_src_position = min_src_position.into();
        self
    }

    #[inline]
    pub fn max_src_position(mut self, max_src_position: impl Cast<Target = Offset2D>) -> Self {
        self.value.max_src_position = max_src_position.into();
        self
    }

    #[inline]
    pub fn min_src_extent(mut self, min_src_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.min_src_extent = min_src_extent.into();
        self
    }

    #[inline]
    pub fn max_src_extent(mut self, max_src_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.max_src_extent = max_src_extent.into();
        self
    }

    #[inline]
    pub fn min_dst_position(mut self, min_dst_position: impl Cast<Target = Offset2D>) -> Self {
        self.value.min_dst_position = min_dst_position.into();
        self
    }

    #[inline]
    pub fn max_dst_position(mut self, max_dst_position: impl Cast<Target = Offset2D>) -> Self {
        self.value.max_dst_position = max_dst_position.into();
        self
    }

    #[inline]
    pub fn min_dst_extent(mut self, min_dst_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.min_dst_extent = min_dst_extent.into();
        self
    }

    #[inline]
    pub fn max_dst_extent(mut self, max_dst_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.max_dst_extent = max_dst_extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> DisplayPlaneCapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for DisplayPlaneCapabilitiesKHRBuilder {
    type Target = DisplayPlaneCapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayPlaneCapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayPlaneCapabilitiesKHRBuilder {
    type Target = DisplayPlaneCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayPlaneInfo2KHR {
    type Target = DisplayPlaneInfo2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayPlaneInfo2KHR {
    type Builder = DisplayPlaneInfo2KHRBuilder;
}

/// A builder for a [`DisplayPlaneInfo2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayPlaneInfo2KHRBuilder {
    value: DisplayPlaneInfo2KHR,
}

impl DisplayPlaneInfo2KHRBuilder {
    #[inline]
    pub fn mode(mut self, mode: DisplayModeKHR) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn plane_index(mut self, plane_index: u32) -> Self {
        self.value.plane_index = plane_index;
        self
    }

    #[inline]
    pub fn build(self) -> DisplayPlaneInfo2KHR {
        self.value
    }
}

impl ops::Deref for DisplayPlaneInfo2KHRBuilder {
    type Target = DisplayPlaneInfo2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayPlaneInfo2KHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayPlaneInfo2KHRBuilder {
    type Target = DisplayPlaneInfo2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayPlaneProperties2KHR {
    type Target = DisplayPlaneProperties2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayPlaneProperties2KHR {
    type Builder = DisplayPlaneProperties2KHRBuilder;
}

/// A builder for a [`DisplayPlaneProperties2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayPlaneProperties2KHRBuilder {
    value: DisplayPlaneProperties2KHR,
}

impl DisplayPlaneProperties2KHRBuilder {
    #[inline]
    pub fn display_plane_properties(
        mut self,
        display_plane_properties: impl Cast<Target = DisplayPlanePropertiesKHR>,
    ) -> Self {
        self.value.display_plane_properties = display_plane_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> DisplayPlaneProperties2KHR {
        self.value
    }
}

impl ops::Deref for DisplayPlaneProperties2KHRBuilder {
    type Target = DisplayPlaneProperties2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayPlaneProperties2KHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayPlaneProperties2KHRBuilder {
    type Target = DisplayPlaneProperties2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayPlanePropertiesKHR {
    type Target = DisplayPlanePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayPlanePropertiesKHR {
    type Builder = DisplayPlanePropertiesKHRBuilder;
}

/// A builder for a [`DisplayPlanePropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayPlanePropertiesKHRBuilder {
    value: DisplayPlanePropertiesKHR,
}

impl DisplayPlanePropertiesKHRBuilder {
    #[inline]
    pub fn current_display(mut self, current_display: DisplayKHR) -> Self {
        self.value.current_display = current_display;
        self
    }

    #[inline]
    pub fn current_stack_index(mut self, current_stack_index: u32) -> Self {
        self.value.current_stack_index = current_stack_index;
        self
    }

    #[inline]
    pub fn build(self) -> DisplayPlanePropertiesKHR {
        self.value
    }
}

impl ops::Deref for DisplayPlanePropertiesKHRBuilder {
    type Target = DisplayPlanePropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayPlanePropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayPlanePropertiesKHRBuilder {
    type Target = DisplayPlanePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayPowerInfoEXT {
    type Target = DisplayPowerInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayPowerInfoEXT {
    type Builder = DisplayPowerInfoEXTBuilder;
}

/// A builder for a [`DisplayPowerInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayPowerInfoEXTBuilder {
    value: DisplayPowerInfoEXT,
}

impl DisplayPowerInfoEXTBuilder {
    #[inline]
    pub fn power_state(mut self, power_state: DisplayPowerStateEXT) -> Self {
        self.value.power_state = power_state;
        self
    }

    #[inline]
    pub fn build(self) -> DisplayPowerInfoEXT {
        self.value
    }
}

impl ops::Deref for DisplayPowerInfoEXTBuilder {
    type Target = DisplayPowerInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayPowerInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayPowerInfoEXTBuilder {
    type Target = DisplayPowerInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayPresentInfoKHR {
    type Target = DisplayPresentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplayPresentInfoKHR {
    type Builder = DisplayPresentInfoKHRBuilder;
}

/// A builder for a [`DisplayPresentInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayPresentInfoKHRBuilder {
    value: DisplayPresentInfoKHR,
}

impl DisplayPresentInfoKHRBuilder {
    #[inline]
    pub fn src_rect(mut self, src_rect: impl Cast<Target = Rect2D>) -> Self {
        self.value.src_rect = src_rect.into();
        self
    }

    #[inline]
    pub fn dst_rect(mut self, dst_rect: impl Cast<Target = Rect2D>) -> Self {
        self.value.dst_rect = dst_rect.into();
        self
    }

    #[inline]
    pub fn persistent(mut self, persistent: bool) -> Self {
        self.value.persistent = persistent as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> DisplayPresentInfoKHR {
        self.value
    }
}

impl ops::Deref for DisplayPresentInfoKHRBuilder {
    type Target = DisplayPresentInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplayPresentInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplayPresentInfoKHRBuilder {
    type Target = DisplayPresentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayProperties2KHR {
    type Target = DisplayProperties2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DisplayProperties2KHR {
    type Builder = DisplayProperties2KHRBuilder<'b>;
}

/// A builder for a [`DisplayProperties2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayProperties2KHRBuilder<'b> {
    value: DisplayProperties2KHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DisplayProperties2KHRBuilder<'b> {
    #[inline]
    pub fn display_properties(
        mut self,
        display_properties: impl Cast<Target = DisplayPropertiesKHR>,
    ) -> Self {
        self.value.display_properties = display_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> DisplayProperties2KHR {
        self.value
    }
}

impl<'b> ops::Deref for DisplayProperties2KHRBuilder<'b> {
    type Target = DisplayProperties2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DisplayProperties2KHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DisplayProperties2KHRBuilder<'b> {
    type Target = DisplayProperties2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplayPropertiesKHR {
    type Target = DisplayPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DisplayPropertiesKHR {
    type Builder = DisplayPropertiesKHRBuilder<'b>;
}

/// A builder for a [`DisplayPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplayPropertiesKHRBuilder<'b> {
    value: DisplayPropertiesKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DisplayPropertiesKHRBuilder<'b> {
    #[inline]
    pub fn display(mut self, display: DisplayKHR) -> Self {
        self.value.display = display;
        self
    }

    #[inline]
    pub fn display_name(mut self, display_name: &'b [u8]) -> Self {
        self.value.display_name = display_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn physical_dimensions(
        mut self,
        physical_dimensions: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.physical_dimensions = physical_dimensions.into();
        self
    }

    #[inline]
    pub fn physical_resolution(
        mut self,
        physical_resolution: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.physical_resolution = physical_resolution.into();
        self
    }

    #[inline]
    pub fn supported_transforms(mut self, supported_transforms: SurfaceTransformFlagsKHR) -> Self {
        self.value.supported_transforms = supported_transforms;
        self
    }

    #[inline]
    pub fn plane_reorder_possible(mut self, plane_reorder_possible: bool) -> Self {
        self.value.plane_reorder_possible = plane_reorder_possible as Bool32;
        self
    }

    #[inline]
    pub fn persistent_content(mut self, persistent_content: bool) -> Self {
        self.value.persistent_content = persistent_content as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> DisplayPropertiesKHR {
        self.value
    }
}

impl<'b> ops::Deref for DisplayPropertiesKHRBuilder<'b> {
    type Target = DisplayPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DisplayPropertiesKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DisplayPropertiesKHRBuilder<'b> {
    type Target = DisplayPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DisplaySurfaceCreateInfoKHR {
    type Target = DisplaySurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DisplaySurfaceCreateInfoKHR {
    type Builder = DisplaySurfaceCreateInfoKHRBuilder;
}

/// A builder for a [`DisplaySurfaceCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DisplaySurfaceCreateInfoKHRBuilder {
    value: DisplaySurfaceCreateInfoKHR,
}

impl DisplaySurfaceCreateInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: DisplaySurfaceCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn display_mode(mut self, display_mode: DisplayModeKHR) -> Self {
        self.value.display_mode = display_mode;
        self
    }

    #[inline]
    pub fn plane_index(mut self, plane_index: u32) -> Self {
        self.value.plane_index = plane_index;
        self
    }

    #[inline]
    pub fn plane_stack_index(mut self, plane_stack_index: u32) -> Self {
        self.value.plane_stack_index = plane_stack_index;
        self
    }

    #[inline]
    pub fn transform(mut self, transform: SurfaceTransformFlagsKHR) -> Self {
        self.value.transform = transform;
        self
    }

    #[inline]
    pub fn global_alpha(mut self, global_alpha: f32) -> Self {
        self.value.global_alpha = global_alpha;
        self
    }

    #[inline]
    pub fn alpha_mode(mut self, alpha_mode: DisplayPlaneAlphaFlagsKHR) -> Self {
        self.value.alpha_mode = alpha_mode;
        self
    }

    #[inline]
    pub fn image_extent(mut self, image_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.image_extent = image_extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> DisplaySurfaceCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for DisplaySurfaceCreateInfoKHRBuilder {
    type Target = DisplaySurfaceCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DisplaySurfaceCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DisplaySurfaceCreateInfoKHRBuilder {
    type Target = DisplaySurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DrawIndexedIndirectCommand {
    type Target = DrawIndexedIndirectCommand;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DrawIndexedIndirectCommand {
    type Builder = DrawIndexedIndirectCommandBuilder;
}

/// A builder for a [`DrawIndexedIndirectCommand`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DrawIndexedIndirectCommandBuilder {
    value: DrawIndexedIndirectCommand,
}

impl DrawIndexedIndirectCommandBuilder {
    #[inline]
    pub fn index_count(mut self, index_count: u32) -> Self {
        self.value.index_count = index_count;
        self
    }

    #[inline]
    pub fn instance_count(mut self, instance_count: u32) -> Self {
        self.value.instance_count = instance_count;
        self
    }

    #[inline]
    pub fn first_index(mut self, first_index: u32) -> Self {
        self.value.first_index = first_index;
        self
    }

    #[inline]
    pub fn vertex_offset(mut self, vertex_offset: i32) -> Self {
        self.value.vertex_offset = vertex_offset;
        self
    }

    #[inline]
    pub fn first_instance(mut self, first_instance: u32) -> Self {
        self.value.first_instance = first_instance;
        self
    }

    #[inline]
    pub fn build(self) -> DrawIndexedIndirectCommand {
        self.value
    }
}

impl ops::Deref for DrawIndexedIndirectCommandBuilder {
    type Target = DrawIndexedIndirectCommand;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DrawIndexedIndirectCommandBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DrawIndexedIndirectCommandBuilder {
    type Target = DrawIndexedIndirectCommand;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DrawIndirectCommand {
    type Target = DrawIndirectCommand;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DrawIndirectCommand {
    type Builder = DrawIndirectCommandBuilder;
}

/// A builder for a [`DrawIndirectCommand`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DrawIndirectCommandBuilder {
    value: DrawIndirectCommand,
}

impl DrawIndirectCommandBuilder {
    #[inline]
    pub fn vertex_count(mut self, vertex_count: u32) -> Self {
        self.value.vertex_count = vertex_count;
        self
    }

    #[inline]
    pub fn instance_count(mut self, instance_count: u32) -> Self {
        self.value.instance_count = instance_count;
        self
    }

    #[inline]
    pub fn first_vertex(mut self, first_vertex: u32) -> Self {
        self.value.first_vertex = first_vertex;
        self
    }

    #[inline]
    pub fn first_instance(mut self, first_instance: u32) -> Self {
        self.value.first_instance = first_instance;
        self
    }

    #[inline]
    pub fn build(self) -> DrawIndirectCommand {
        self.value
    }
}

impl ops::Deref for DrawIndirectCommandBuilder {
    type Target = DrawIndirectCommand;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DrawIndirectCommandBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DrawIndirectCommandBuilder {
    type Target = DrawIndirectCommand;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DrawMeshTasksIndirectCommandEXT {
    type Target = DrawMeshTasksIndirectCommandEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DrawMeshTasksIndirectCommandEXT {
    type Builder = DrawMeshTasksIndirectCommandEXTBuilder;
}

/// A builder for a [`DrawMeshTasksIndirectCommandEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DrawMeshTasksIndirectCommandEXTBuilder {
    value: DrawMeshTasksIndirectCommandEXT,
}

impl DrawMeshTasksIndirectCommandEXTBuilder {
    #[inline]
    pub fn group_count_x(mut self, group_count_x: u32) -> Self {
        self.value.group_count_x = group_count_x;
        self
    }

    #[inline]
    pub fn group_count_y(mut self, group_count_y: u32) -> Self {
        self.value.group_count_y = group_count_y;
        self
    }

    #[inline]
    pub fn group_count_z(mut self, group_count_z: u32) -> Self {
        self.value.group_count_z = group_count_z;
        self
    }

    #[inline]
    pub fn build(self) -> DrawMeshTasksIndirectCommandEXT {
        self.value
    }
}

impl ops::Deref for DrawMeshTasksIndirectCommandEXTBuilder {
    type Target = DrawMeshTasksIndirectCommandEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DrawMeshTasksIndirectCommandEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DrawMeshTasksIndirectCommandEXTBuilder {
    type Target = DrawMeshTasksIndirectCommandEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DrawMeshTasksIndirectCommandNV {
    type Target = DrawMeshTasksIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DrawMeshTasksIndirectCommandNV {
    type Builder = DrawMeshTasksIndirectCommandNVBuilder;
}

/// A builder for a [`DrawMeshTasksIndirectCommandNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DrawMeshTasksIndirectCommandNVBuilder {
    value: DrawMeshTasksIndirectCommandNV,
}

impl DrawMeshTasksIndirectCommandNVBuilder {
    #[inline]
    pub fn task_count(mut self, task_count: u32) -> Self {
        self.value.task_count = task_count;
        self
    }

    #[inline]
    pub fn first_task(mut self, first_task: u32) -> Self {
        self.value.first_task = first_task;
        self
    }

    #[inline]
    pub fn build(self) -> DrawMeshTasksIndirectCommandNV {
        self.value
    }
}

impl ops::Deref for DrawMeshTasksIndirectCommandNVBuilder {
    type Target = DrawMeshTasksIndirectCommandNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DrawMeshTasksIndirectCommandNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DrawMeshTasksIndirectCommandNVBuilder {
    type Target = DrawMeshTasksIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DrmFormatModifierProperties2EXT {
    type Target = DrmFormatModifierProperties2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DrmFormatModifierProperties2EXT {
    type Builder = DrmFormatModifierProperties2EXTBuilder;
}

/// A builder for a [`DrmFormatModifierProperties2EXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DrmFormatModifierProperties2EXTBuilder {
    value: DrmFormatModifierProperties2EXT,
}

impl DrmFormatModifierProperties2EXTBuilder {
    #[inline]
    pub fn drm_format_modifier(mut self, drm_format_modifier: u64) -> Self {
        self.value.drm_format_modifier = drm_format_modifier;
        self
    }

    #[inline]
    pub fn drm_format_modifier_plane_count(mut self, drm_format_modifier_plane_count: u32) -> Self {
        self.value.drm_format_modifier_plane_count = drm_format_modifier_plane_count;
        self
    }

    #[inline]
    pub fn drm_format_modifier_tiling_features(
        mut self,
        drm_format_modifier_tiling_features: FormatFeatureFlags2,
    ) -> Self {
        self.value.drm_format_modifier_tiling_features = drm_format_modifier_tiling_features;
        self
    }

    #[inline]
    pub fn build(self) -> DrmFormatModifierProperties2EXT {
        self.value
    }
}

impl ops::Deref for DrmFormatModifierProperties2EXTBuilder {
    type Target = DrmFormatModifierProperties2EXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DrmFormatModifierProperties2EXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DrmFormatModifierProperties2EXTBuilder {
    type Target = DrmFormatModifierProperties2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DrmFormatModifierPropertiesEXT {
    type Target = DrmFormatModifierPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for DrmFormatModifierPropertiesEXT {
    type Builder = DrmFormatModifierPropertiesEXTBuilder;
}

/// A builder for a [`DrmFormatModifierPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DrmFormatModifierPropertiesEXTBuilder {
    value: DrmFormatModifierPropertiesEXT,
}

impl DrmFormatModifierPropertiesEXTBuilder {
    #[inline]
    pub fn drm_format_modifier(mut self, drm_format_modifier: u64) -> Self {
        self.value.drm_format_modifier = drm_format_modifier;
        self
    }

    #[inline]
    pub fn drm_format_modifier_plane_count(mut self, drm_format_modifier_plane_count: u32) -> Self {
        self.value.drm_format_modifier_plane_count = drm_format_modifier_plane_count;
        self
    }

    #[inline]
    pub fn drm_format_modifier_tiling_features(
        mut self,
        drm_format_modifier_tiling_features: FormatFeatureFlags,
    ) -> Self {
        self.value.drm_format_modifier_tiling_features = drm_format_modifier_tiling_features;
        self
    }

    #[inline]
    pub fn build(self) -> DrmFormatModifierPropertiesEXT {
        self.value
    }
}

impl ops::Deref for DrmFormatModifierPropertiesEXTBuilder {
    type Target = DrmFormatModifierPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for DrmFormatModifierPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for DrmFormatModifierPropertiesEXTBuilder {
    type Target = DrmFormatModifierPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DrmFormatModifierPropertiesList2EXT {
    type Target = DrmFormatModifierPropertiesList2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DrmFormatModifierPropertiesList2EXT {
    type Builder = DrmFormatModifierPropertiesList2EXTBuilder<'b>;
}

/// A builder for a [`DrmFormatModifierPropertiesList2EXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DrmFormatModifierPropertiesList2EXTBuilder<'b> {
    value: DrmFormatModifierPropertiesList2EXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DrmFormatModifierPropertiesList2EXTBuilder<'b> {
    #[inline]
    pub fn drm_format_modifier_count(mut self, drm_format_modifier_count: u32) -> Self {
        self.value.drm_format_modifier_count = drm_format_modifier_count;
        self
    }

    #[inline]
    pub fn drm_format_modifier_properties(
        mut self,
        drm_format_modifier_properties: &'b mut [impl Cast<Target = DrmFormatModifierProperties2EXT>],
    ) -> Self {
        self.value.drm_format_modifier_count = drm_format_modifier_properties.len() as u32;
        self.value.drm_format_modifier_properties =
            drm_format_modifier_properties.as_mut_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DrmFormatModifierPropertiesList2EXT {
        self.value
    }
}

impl<'b> ops::Deref for DrmFormatModifierPropertiesList2EXTBuilder<'b> {
    type Target = DrmFormatModifierPropertiesList2EXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DrmFormatModifierPropertiesList2EXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DrmFormatModifierPropertiesList2EXTBuilder<'b> {
    type Target = DrmFormatModifierPropertiesList2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for DrmFormatModifierPropertiesListEXT {
    type Target = DrmFormatModifierPropertiesListEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for DrmFormatModifierPropertiesListEXT {
    type Builder = DrmFormatModifierPropertiesListEXTBuilder<'b>;
}

/// A builder for a [`DrmFormatModifierPropertiesListEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct DrmFormatModifierPropertiesListEXTBuilder<'b> {
    value: DrmFormatModifierPropertiesListEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> DrmFormatModifierPropertiesListEXTBuilder<'b> {
    #[inline]
    pub fn drm_format_modifier_count(mut self, drm_format_modifier_count: u32) -> Self {
        self.value.drm_format_modifier_count = drm_format_modifier_count;
        self
    }

    #[inline]
    pub fn drm_format_modifier_properties(
        mut self,
        drm_format_modifier_properties: &'b mut [impl Cast<Target = DrmFormatModifierPropertiesEXT>],
    ) -> Self {
        self.value.drm_format_modifier_count = drm_format_modifier_properties.len() as u32;
        self.value.drm_format_modifier_properties =
            drm_format_modifier_properties.as_mut_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> DrmFormatModifierPropertiesListEXT {
        self.value
    }
}

impl<'b> ops::Deref for DrmFormatModifierPropertiesListEXTBuilder<'b> {
    type Target = DrmFormatModifierPropertiesListEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for DrmFormatModifierPropertiesListEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for DrmFormatModifierPropertiesListEXTBuilder<'b> {
    type Target = DrmFormatModifierPropertiesListEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`EventCreateInfo`].
pub unsafe trait ExtendsEventCreateInfo: fmt::Debug {}
unsafe impl ExtendsEventCreateInfo for ExportMetalObjectCreateInfoEXT {}
unsafe impl ExtendsEventCreateInfo for ImportMetalSharedEventInfoEXT {}

unsafe impl Cast for EventCreateInfo {
    type Target = EventCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for EventCreateInfo {
    type Builder = EventCreateInfoBuilder<'b>;
}

/// A builder for a [`EventCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct EventCreateInfoBuilder<'b> {
    value: EventCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> EventCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsEventCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: EventCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> EventCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for EventCreateInfoBuilder<'b> {
    type Target = EventCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for EventCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for EventCreateInfoBuilder<'b> {
    type Target = EventCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ExecutionGraphPipelineCreateInfoAMDX`].
pub unsafe trait ExtendsExecutionGraphPipelineCreateInfoAMDX: fmt::Debug {}
unsafe impl ExtendsExecutionGraphPipelineCreateInfoAMDX for PipelineCompilerControlCreateInfoAMD {}
unsafe impl ExtendsExecutionGraphPipelineCreateInfoAMDX for PipelineCreationFeedbackCreateInfo {}

unsafe impl Cast for ExecutionGraphPipelineCreateInfoAMDX {
    type Target = ExecutionGraphPipelineCreateInfoAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ExecutionGraphPipelineCreateInfoAMDX {
    type Builder = ExecutionGraphPipelineCreateInfoAMDXBuilder<'b>;
}

/// A builder for a [`ExecutionGraphPipelineCreateInfoAMDX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExecutionGraphPipelineCreateInfoAMDXBuilder<'b> {
    value: ExecutionGraphPipelineCreateInfoAMDX,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ExecutionGraphPipelineCreateInfoAMDXBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsExecutionGraphPipelineCreateInfoAMDX,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn stage_count(mut self, stage_count: u32) -> Self {
        self.value.stage_count = stage_count;
        self
    }

    #[inline]
    pub fn stages(
        mut self,
        stages: &'b [impl Cast<Target = PipelineShaderStageCreateInfo>],
    ) -> Self {
        self.value.stage_count = stages.len() as u32;
        self.value.stages = stages.as_ptr().cast();
        self
    }

    #[inline]
    pub fn library_info(
        mut self,
        library_info: &'b impl Cast<Target = PipelineLibraryCreateInfoKHR>,
    ) -> Self {
        self.value.library_info = library_info.as_ref();
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn base_pipeline_handle(mut self, base_pipeline_handle: Pipeline) -> Self {
        self.value.base_pipeline_handle = base_pipeline_handle;
        self
    }

    #[inline]
    pub fn base_pipeline_index(mut self, base_pipeline_index: i32) -> Self {
        self.value.base_pipeline_index = base_pipeline_index;
        self
    }

    #[inline]
    pub fn build(self) -> ExecutionGraphPipelineCreateInfoAMDX {
        self.value
    }
}

impl<'b> ops::Deref for ExecutionGraphPipelineCreateInfoAMDXBuilder<'b> {
    type Target = ExecutionGraphPipelineCreateInfoAMDX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ExecutionGraphPipelineCreateInfoAMDXBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ExecutionGraphPipelineCreateInfoAMDXBuilder<'b> {
    type Target = ExecutionGraphPipelineCreateInfoAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExecutionGraphPipelineScratchSizeAMDX {
    type Target = ExecutionGraphPipelineScratchSizeAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExecutionGraphPipelineScratchSizeAMDX {
    type Builder = ExecutionGraphPipelineScratchSizeAMDXBuilder;
}

/// A builder for a [`ExecutionGraphPipelineScratchSizeAMDX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExecutionGraphPipelineScratchSizeAMDXBuilder {
    value: ExecutionGraphPipelineScratchSizeAMDX,
}

impl ExecutionGraphPipelineScratchSizeAMDXBuilder {
    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> ExecutionGraphPipelineScratchSizeAMDX {
        self.value
    }
}

impl ops::Deref for ExecutionGraphPipelineScratchSizeAMDXBuilder {
    type Target = ExecutionGraphPipelineScratchSizeAMDX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExecutionGraphPipelineScratchSizeAMDXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExecutionGraphPipelineScratchSizeAMDXBuilder {
    type Target = ExecutionGraphPipelineScratchSizeAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportFenceCreateInfo {
    type Target = ExportFenceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportFenceCreateInfo {
    type Builder = ExportFenceCreateInfoBuilder;
}

/// A builder for a [`ExportFenceCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportFenceCreateInfoBuilder {
    value: ExportFenceCreateInfo,
}

impl ExportFenceCreateInfoBuilder {
    #[inline]
    pub fn handle_types(mut self, handle_types: ExternalFenceHandleTypeFlags) -> Self {
        self.value.handle_types = handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExportFenceCreateInfo {
        self.value
    }
}

impl ops::Deref for ExportFenceCreateInfoBuilder {
    type Target = ExportFenceCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportFenceCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportFenceCreateInfoBuilder {
    type Target = ExportFenceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportFenceSciSyncInfoNV {
    type Target = ExportFenceSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportFenceSciSyncInfoNV {
    type Builder = ExportFenceSciSyncInfoNVBuilder;
}

/// A builder for a [`ExportFenceSciSyncInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportFenceSciSyncInfoNVBuilder {
    value: ExportFenceSciSyncInfoNV,
}

impl ExportFenceSciSyncInfoNVBuilder {
    #[inline]
    pub fn attributes(mut self, attributes: NvSciSyncAttrList) -> Self {
        self.value.attributes = attributes;
        self
    }

    #[inline]
    pub fn build(self) -> ExportFenceSciSyncInfoNV {
        self.value
    }
}

impl ops::Deref for ExportFenceSciSyncInfoNVBuilder {
    type Target = ExportFenceSciSyncInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportFenceSciSyncInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportFenceSciSyncInfoNVBuilder {
    type Target = ExportFenceSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportFenceWin32HandleInfoKHR {
    type Target = ExportFenceWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ExportFenceWin32HandleInfoKHR {
    type Builder = ExportFenceWin32HandleInfoKHRBuilder<'b>;
}

/// A builder for a [`ExportFenceWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportFenceWin32HandleInfoKHRBuilder<'b> {
    value: ExportFenceWin32HandleInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ExportFenceWin32HandleInfoKHRBuilder<'b> {
    #[inline]
    pub fn attributes(mut self, attributes: *const SECURITY_ATTRIBUTES) -> Self {
        self.value.attributes = attributes;
        self
    }

    #[inline]
    pub fn dw_access(mut self, dw_access: DWORD) -> Self {
        self.value.dw_access = dw_access;
        self
    }

    #[inline]
    pub fn name(mut self, name: LPCWSTR) -> Self {
        self.value.name = name;
        self
    }

    #[inline]
    pub fn build(self) -> ExportFenceWin32HandleInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for ExportFenceWin32HandleInfoKHRBuilder<'b> {
    type Target = ExportFenceWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ExportFenceWin32HandleInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ExportFenceWin32HandleInfoKHRBuilder<'b> {
    type Target = ExportFenceWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMemoryAllocateInfo {
    type Target = ExportMemoryAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMemoryAllocateInfo {
    type Builder = ExportMemoryAllocateInfoBuilder;
}

/// A builder for a [`ExportMemoryAllocateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMemoryAllocateInfoBuilder {
    value: ExportMemoryAllocateInfo,
}

impl ExportMemoryAllocateInfoBuilder {
    #[inline]
    pub fn handle_types(mut self, handle_types: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_types = handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMemoryAllocateInfo {
        self.value
    }
}

impl ops::Deref for ExportMemoryAllocateInfoBuilder {
    type Target = ExportMemoryAllocateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMemoryAllocateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMemoryAllocateInfoBuilder {
    type Target = ExportMemoryAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMemoryAllocateInfoNV {
    type Target = ExportMemoryAllocateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMemoryAllocateInfoNV {
    type Builder = ExportMemoryAllocateInfoNVBuilder;
}

/// A builder for a [`ExportMemoryAllocateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMemoryAllocateInfoNVBuilder {
    value: ExportMemoryAllocateInfoNV,
}

impl ExportMemoryAllocateInfoNVBuilder {
    #[inline]
    pub fn handle_types(mut self, handle_types: ExternalMemoryHandleTypeFlagsNV) -> Self {
        self.value.handle_types = handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMemoryAllocateInfoNV {
        self.value
    }
}

impl ops::Deref for ExportMemoryAllocateInfoNVBuilder {
    type Target = ExportMemoryAllocateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMemoryAllocateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMemoryAllocateInfoNVBuilder {
    type Target = ExportMemoryAllocateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMemorySciBufInfoNV {
    type Target = ExportMemorySciBufInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMemorySciBufInfoNV {
    type Builder = ExportMemorySciBufInfoNVBuilder;
}

/// A builder for a [`ExportMemorySciBufInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMemorySciBufInfoNVBuilder {
    value: ExportMemorySciBufInfoNV,
}

impl ExportMemorySciBufInfoNVBuilder {
    #[inline]
    pub fn attributes(mut self, attributes: NvSciBufAttrList) -> Self {
        self.value.attributes = attributes;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMemorySciBufInfoNV {
        self.value
    }
}

impl ops::Deref for ExportMemorySciBufInfoNVBuilder {
    type Target = ExportMemorySciBufInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMemorySciBufInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMemorySciBufInfoNVBuilder {
    type Target = ExportMemorySciBufInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMemoryWin32HandleInfoKHR {
    type Target = ExportMemoryWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ExportMemoryWin32HandleInfoKHR {
    type Builder = ExportMemoryWin32HandleInfoKHRBuilder<'b>;
}

/// A builder for a [`ExportMemoryWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMemoryWin32HandleInfoKHRBuilder<'b> {
    value: ExportMemoryWin32HandleInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ExportMemoryWin32HandleInfoKHRBuilder<'b> {
    #[inline]
    pub fn attributes(mut self, attributes: *const SECURITY_ATTRIBUTES) -> Self {
        self.value.attributes = attributes;
        self
    }

    #[inline]
    pub fn dw_access(mut self, dw_access: DWORD) -> Self {
        self.value.dw_access = dw_access;
        self
    }

    #[inline]
    pub fn name(mut self, name: LPCWSTR) -> Self {
        self.value.name = name;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMemoryWin32HandleInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for ExportMemoryWin32HandleInfoKHRBuilder<'b> {
    type Target = ExportMemoryWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ExportMemoryWin32HandleInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ExportMemoryWin32HandleInfoKHRBuilder<'b> {
    type Target = ExportMemoryWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMemoryWin32HandleInfoNV {
    type Target = ExportMemoryWin32HandleInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ExportMemoryWin32HandleInfoNV {
    type Builder = ExportMemoryWin32HandleInfoNVBuilder<'b>;
}

/// A builder for a [`ExportMemoryWin32HandleInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMemoryWin32HandleInfoNVBuilder<'b> {
    value: ExportMemoryWin32HandleInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ExportMemoryWin32HandleInfoNVBuilder<'b> {
    #[inline]
    pub fn attributes(mut self, attributes: *const SECURITY_ATTRIBUTES) -> Self {
        self.value.attributes = attributes;
        self
    }

    #[inline]
    pub fn dw_access(mut self, dw_access: DWORD) -> Self {
        self.value.dw_access = dw_access;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMemoryWin32HandleInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for ExportMemoryWin32HandleInfoNVBuilder<'b> {
    type Target = ExportMemoryWin32HandleInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ExportMemoryWin32HandleInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ExportMemoryWin32HandleInfoNVBuilder<'b> {
    type Target = ExportMemoryWin32HandleInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMetalBufferInfoEXT {
    type Target = ExportMetalBufferInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMetalBufferInfoEXT {
    type Builder = ExportMetalBufferInfoEXTBuilder;
}

/// A builder for a [`ExportMetalBufferInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMetalBufferInfoEXTBuilder {
    value: ExportMetalBufferInfoEXT,
}

impl ExportMetalBufferInfoEXTBuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn mtl_buffer(mut self, mtl_buffer: MTLBuffer_id) -> Self {
        self.value.mtl_buffer = mtl_buffer;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMetalBufferInfoEXT {
        self.value
    }
}

impl ops::Deref for ExportMetalBufferInfoEXTBuilder {
    type Target = ExportMetalBufferInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMetalBufferInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMetalBufferInfoEXTBuilder {
    type Target = ExportMetalBufferInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMetalCommandQueueInfoEXT {
    type Target = ExportMetalCommandQueueInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMetalCommandQueueInfoEXT {
    type Builder = ExportMetalCommandQueueInfoEXTBuilder;
}

/// A builder for a [`ExportMetalCommandQueueInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMetalCommandQueueInfoEXTBuilder {
    value: ExportMetalCommandQueueInfoEXT,
}

impl ExportMetalCommandQueueInfoEXTBuilder {
    #[inline]
    pub fn queue(mut self, queue: Queue) -> Self {
        self.value.queue = queue;
        self
    }

    #[inline]
    pub fn mtl_command_queue(mut self, mtl_command_queue: MTLCommandQueue_id) -> Self {
        self.value.mtl_command_queue = mtl_command_queue;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMetalCommandQueueInfoEXT {
        self.value
    }
}

impl ops::Deref for ExportMetalCommandQueueInfoEXTBuilder {
    type Target = ExportMetalCommandQueueInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMetalCommandQueueInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMetalCommandQueueInfoEXTBuilder {
    type Target = ExportMetalCommandQueueInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMetalDeviceInfoEXT {
    type Target = ExportMetalDeviceInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMetalDeviceInfoEXT {
    type Builder = ExportMetalDeviceInfoEXTBuilder;
}

/// A builder for a [`ExportMetalDeviceInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMetalDeviceInfoEXTBuilder {
    value: ExportMetalDeviceInfoEXT,
}

impl ExportMetalDeviceInfoEXTBuilder {
    #[inline]
    pub fn mtl_device(mut self, mtl_device: MTLDevice_id) -> Self {
        self.value.mtl_device = mtl_device;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMetalDeviceInfoEXT {
        self.value
    }
}

impl ops::Deref for ExportMetalDeviceInfoEXTBuilder {
    type Target = ExportMetalDeviceInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMetalDeviceInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMetalDeviceInfoEXTBuilder {
    type Target = ExportMetalDeviceInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMetalIOSurfaceInfoEXT {
    type Target = ExportMetalIOSurfaceInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMetalIOSurfaceInfoEXT {
    type Builder = ExportMetalIOSurfaceInfoEXTBuilder;
}

/// A builder for a [`ExportMetalIOSurfaceInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMetalIOSurfaceInfoEXTBuilder {
    value: ExportMetalIOSurfaceInfoEXT,
}

impl ExportMetalIOSurfaceInfoEXTBuilder {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn io_surface(mut self, io_surface: IOSurfaceRef) -> Self {
        self.value.io_surface = io_surface;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMetalIOSurfaceInfoEXT {
        self.value
    }
}

impl ops::Deref for ExportMetalIOSurfaceInfoEXTBuilder {
    type Target = ExportMetalIOSurfaceInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMetalIOSurfaceInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMetalIOSurfaceInfoEXTBuilder {
    type Target = ExportMetalIOSurfaceInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMetalObjectCreateInfoEXT {
    type Target = ExportMetalObjectCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMetalObjectCreateInfoEXT {
    type Builder = ExportMetalObjectCreateInfoEXTBuilder;
}

/// A builder for a [`ExportMetalObjectCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMetalObjectCreateInfoEXTBuilder {
    value: ExportMetalObjectCreateInfoEXT,
}

impl ExportMetalObjectCreateInfoEXTBuilder {
    #[inline]
    pub fn export_object_type(mut self, export_object_type: ExportMetalObjectTypeFlagsEXT) -> Self {
        self.value.export_object_type = export_object_type;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMetalObjectCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for ExportMetalObjectCreateInfoEXTBuilder {
    type Target = ExportMetalObjectCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMetalObjectCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMetalObjectCreateInfoEXTBuilder {
    type Target = ExportMetalObjectCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ExportMetalObjectsInfoEXT`].
pub unsafe trait ExtendsExportMetalObjectsInfoEXT: fmt::Debug {}
unsafe impl ExtendsExportMetalObjectsInfoEXT for ExportMetalBufferInfoEXT {}
unsafe impl ExtendsExportMetalObjectsInfoEXT for ExportMetalCommandQueueInfoEXT {}
unsafe impl ExtendsExportMetalObjectsInfoEXT for ExportMetalDeviceInfoEXT {}
unsafe impl ExtendsExportMetalObjectsInfoEXT for ExportMetalIOSurfaceInfoEXT {}
unsafe impl ExtendsExportMetalObjectsInfoEXT for ExportMetalSharedEventInfoEXT {}
unsafe impl ExtendsExportMetalObjectsInfoEXT for ExportMetalTextureInfoEXT {}

unsafe impl Cast for ExportMetalObjectsInfoEXT {
    type Target = ExportMetalObjectsInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ExportMetalObjectsInfoEXT {
    type Builder = ExportMetalObjectsInfoEXTBuilder<'b>;
}

/// A builder for a [`ExportMetalObjectsInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMetalObjectsInfoEXTBuilder<'b> {
    value: ExportMetalObjectsInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ExportMetalObjectsInfoEXTBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsExportMetalObjectsInfoEXT,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn build(self) -> ExportMetalObjectsInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for ExportMetalObjectsInfoEXTBuilder<'b> {
    type Target = ExportMetalObjectsInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ExportMetalObjectsInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ExportMetalObjectsInfoEXTBuilder<'b> {
    type Target = ExportMetalObjectsInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMetalSharedEventInfoEXT {
    type Target = ExportMetalSharedEventInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMetalSharedEventInfoEXT {
    type Builder = ExportMetalSharedEventInfoEXTBuilder;
}

/// A builder for a [`ExportMetalSharedEventInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMetalSharedEventInfoEXTBuilder {
    value: ExportMetalSharedEventInfoEXT,
}

impl ExportMetalSharedEventInfoEXTBuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn event(mut self, event: Event) -> Self {
        self.value.event = event;
        self
    }

    #[inline]
    pub fn mtl_shared_event(mut self, mtl_shared_event: MTLSharedEvent_id) -> Self {
        self.value.mtl_shared_event = mtl_shared_event;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMetalSharedEventInfoEXT {
        self.value
    }
}

impl ops::Deref for ExportMetalSharedEventInfoEXTBuilder {
    type Target = ExportMetalSharedEventInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMetalSharedEventInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMetalSharedEventInfoEXTBuilder {
    type Target = ExportMetalSharedEventInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportMetalTextureInfoEXT {
    type Target = ExportMetalTextureInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportMetalTextureInfoEXT {
    type Builder = ExportMetalTextureInfoEXTBuilder;
}

/// A builder for a [`ExportMetalTextureInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportMetalTextureInfoEXTBuilder {
    value: ExportMetalTextureInfoEXT,
}

impl ExportMetalTextureInfoEXTBuilder {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn image_view(mut self, image_view: ImageView) -> Self {
        self.value.image_view = image_view;
        self
    }

    #[inline]
    pub fn buffer_view(mut self, buffer_view: BufferView) -> Self {
        self.value.buffer_view = buffer_view;
        self
    }

    #[inline]
    pub fn plane(mut self, plane: ImageAspectFlags) -> Self {
        self.value.plane = plane;
        self
    }

    #[inline]
    pub fn mtl_texture(mut self, mtl_texture: MTLTexture_id) -> Self {
        self.value.mtl_texture = mtl_texture;
        self
    }

    #[inline]
    pub fn build(self) -> ExportMetalTextureInfoEXT {
        self.value
    }
}

impl ops::Deref for ExportMetalTextureInfoEXTBuilder {
    type Target = ExportMetalTextureInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportMetalTextureInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportMetalTextureInfoEXTBuilder {
    type Target = ExportMetalTextureInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportSemaphoreCreateInfo {
    type Target = ExportSemaphoreCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportSemaphoreCreateInfo {
    type Builder = ExportSemaphoreCreateInfoBuilder;
}

/// A builder for a [`ExportSemaphoreCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportSemaphoreCreateInfoBuilder {
    value: ExportSemaphoreCreateInfo,
}

impl ExportSemaphoreCreateInfoBuilder {
    #[inline]
    pub fn handle_types(mut self, handle_types: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_types = handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExportSemaphoreCreateInfo {
        self.value
    }
}

impl ops::Deref for ExportSemaphoreCreateInfoBuilder {
    type Target = ExportSemaphoreCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportSemaphoreCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportSemaphoreCreateInfoBuilder {
    type Target = ExportSemaphoreCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportSemaphoreSciSyncInfoNV {
    type Target = ExportSemaphoreSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExportSemaphoreSciSyncInfoNV {
    type Builder = ExportSemaphoreSciSyncInfoNVBuilder;
}

/// A builder for a [`ExportSemaphoreSciSyncInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportSemaphoreSciSyncInfoNVBuilder {
    value: ExportSemaphoreSciSyncInfoNV,
}

impl ExportSemaphoreSciSyncInfoNVBuilder {
    #[inline]
    pub fn attributes(mut self, attributes: NvSciSyncAttrList) -> Self {
        self.value.attributes = attributes;
        self
    }

    #[inline]
    pub fn build(self) -> ExportSemaphoreSciSyncInfoNV {
        self.value
    }
}

impl ops::Deref for ExportSemaphoreSciSyncInfoNVBuilder {
    type Target = ExportSemaphoreSciSyncInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExportSemaphoreSciSyncInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExportSemaphoreSciSyncInfoNVBuilder {
    type Target = ExportSemaphoreSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExportSemaphoreWin32HandleInfoKHR {
    type Target = ExportSemaphoreWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ExportSemaphoreWin32HandleInfoKHR {
    type Builder = ExportSemaphoreWin32HandleInfoKHRBuilder<'b>;
}

/// A builder for a [`ExportSemaphoreWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExportSemaphoreWin32HandleInfoKHRBuilder<'b> {
    value: ExportSemaphoreWin32HandleInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ExportSemaphoreWin32HandleInfoKHRBuilder<'b> {
    #[inline]
    pub fn attributes(mut self, attributes: *const SECURITY_ATTRIBUTES) -> Self {
        self.value.attributes = attributes;
        self
    }

    #[inline]
    pub fn dw_access(mut self, dw_access: DWORD) -> Self {
        self.value.dw_access = dw_access;
        self
    }

    #[inline]
    pub fn name(mut self, name: LPCWSTR) -> Self {
        self.value.name = name;
        self
    }

    #[inline]
    pub fn build(self) -> ExportSemaphoreWin32HandleInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for ExportSemaphoreWin32HandleInfoKHRBuilder<'b> {
    type Target = ExportSemaphoreWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ExportSemaphoreWin32HandleInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ExportSemaphoreWin32HandleInfoKHRBuilder<'b> {
    type Target = ExportSemaphoreWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExtensionProperties {
    type Target = ExtensionProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExtensionProperties {
    type Builder = ExtensionPropertiesBuilder;
}

/// A builder for a [`ExtensionProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExtensionPropertiesBuilder {
    value: ExtensionProperties,
}

impl ExtensionPropertiesBuilder {
    #[inline]
    pub fn extension_name(
        mut self,
        extension_name: impl Into<StringArray<MAX_EXTENSION_NAME_SIZE>>,
    ) -> Self {
        self.value.extension_name = extension_name.into();
        self
    }

    #[inline]
    pub fn spec_version(mut self, spec_version: u32) -> Self {
        self.value.spec_version = spec_version;
        self
    }

    #[inline]
    pub fn build(self) -> ExtensionProperties {
        self.value
    }
}

impl ops::Deref for ExtensionPropertiesBuilder {
    type Target = ExtensionProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExtensionPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExtensionPropertiesBuilder {
    type Target = ExtensionProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Extent2D {
    type Target = Extent2D;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for Extent2D {
    type Builder = Extent2DBuilder;
}

/// A builder for a [`Extent2D`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct Extent2DBuilder {
    value: Extent2D,
}

impl Extent2DBuilder {
    #[inline]
    pub fn width(mut self, width: u32) -> Self {
        self.value.width = width;
        self
    }

    #[inline]
    pub fn height(mut self, height: u32) -> Self {
        self.value.height = height;
        self
    }

    #[inline]
    pub fn build(self) -> Extent2D {
        self.value
    }
}

impl ops::Deref for Extent2DBuilder {
    type Target = Extent2D;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for Extent2DBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for Extent2DBuilder {
    type Target = Extent2D;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Extent3D {
    type Target = Extent3D;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for Extent3D {
    type Builder = Extent3DBuilder;
}

/// A builder for a [`Extent3D`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct Extent3DBuilder {
    value: Extent3D,
}

impl Extent3DBuilder {
    #[inline]
    pub fn width(mut self, width: u32) -> Self {
        self.value.width = width;
        self
    }

    #[inline]
    pub fn height(mut self, height: u32) -> Self {
        self.value.height = height;
        self
    }

    #[inline]
    pub fn depth(mut self, depth: u32) -> Self {
        self.value.depth = depth;
        self
    }

    #[inline]
    pub fn build(self) -> Extent3D {
        self.value
    }
}

impl ops::Deref for Extent3DBuilder {
    type Target = Extent3D;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for Extent3DBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for Extent3DBuilder {
    type Target = Extent3D;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalBufferProperties {
    type Target = ExternalBufferProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalBufferProperties {
    type Builder = ExternalBufferPropertiesBuilder;
}

/// A builder for a [`ExternalBufferProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalBufferPropertiesBuilder {
    value: ExternalBufferProperties,
}

impl ExternalBufferPropertiesBuilder {
    #[inline]
    pub fn external_memory_properties(
        mut self,
        external_memory_properties: impl Cast<Target = ExternalMemoryProperties>,
    ) -> Self {
        self.value.external_memory_properties = external_memory_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> ExternalBufferProperties {
        self.value
    }
}

impl ops::Deref for ExternalBufferPropertiesBuilder {
    type Target = ExternalBufferProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalBufferPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalBufferPropertiesBuilder {
    type Target = ExternalBufferProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalFenceProperties {
    type Target = ExternalFenceProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalFenceProperties {
    type Builder = ExternalFencePropertiesBuilder;
}

/// A builder for a [`ExternalFenceProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalFencePropertiesBuilder {
    value: ExternalFenceProperties,
}

impl ExternalFencePropertiesBuilder {
    #[inline]
    pub fn export_from_imported_handle_types(
        mut self,
        export_from_imported_handle_types: ExternalFenceHandleTypeFlags,
    ) -> Self {
        self.value.export_from_imported_handle_types = export_from_imported_handle_types;
        self
    }

    #[inline]
    pub fn compatible_handle_types(
        mut self,
        compatible_handle_types: ExternalFenceHandleTypeFlags,
    ) -> Self {
        self.value.compatible_handle_types = compatible_handle_types;
        self
    }

    #[inline]
    pub fn external_fence_features(
        mut self,
        external_fence_features: ExternalFenceFeatureFlags,
    ) -> Self {
        self.value.external_fence_features = external_fence_features;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalFenceProperties {
        self.value
    }
}

impl ops::Deref for ExternalFencePropertiesBuilder {
    type Target = ExternalFenceProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalFencePropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalFencePropertiesBuilder {
    type Target = ExternalFenceProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalFormatANDROID {
    type Target = ExternalFormatANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalFormatANDROID {
    type Builder = ExternalFormatANDROIDBuilder;
}

/// A builder for a [`ExternalFormatANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalFormatANDROIDBuilder {
    value: ExternalFormatANDROID,
}

impl ExternalFormatANDROIDBuilder {
    #[inline]
    pub fn external_format(mut self, external_format: u64) -> Self {
        self.value.external_format = external_format;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalFormatANDROID {
        self.value
    }
}

impl ops::Deref for ExternalFormatANDROIDBuilder {
    type Target = ExternalFormatANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalFormatANDROIDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalFormatANDROIDBuilder {
    type Target = ExternalFormatANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalFormatQNX {
    type Target = ExternalFormatQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalFormatQNX {
    type Builder = ExternalFormatQNXBuilder;
}

/// A builder for a [`ExternalFormatQNX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalFormatQNXBuilder {
    value: ExternalFormatQNX,
}

impl ExternalFormatQNXBuilder {
    #[inline]
    pub fn external_format(mut self, external_format: u64) -> Self {
        self.value.external_format = external_format;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalFormatQNX {
        self.value
    }
}

impl ops::Deref for ExternalFormatQNXBuilder {
    type Target = ExternalFormatQNX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalFormatQNXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalFormatQNXBuilder {
    type Target = ExternalFormatQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalImageFormatProperties {
    type Target = ExternalImageFormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalImageFormatProperties {
    type Builder = ExternalImageFormatPropertiesBuilder;
}

/// A builder for a [`ExternalImageFormatProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalImageFormatPropertiesBuilder {
    value: ExternalImageFormatProperties,
}

impl ExternalImageFormatPropertiesBuilder {
    #[inline]
    pub fn external_memory_properties(
        mut self,
        external_memory_properties: impl Cast<Target = ExternalMemoryProperties>,
    ) -> Self {
        self.value.external_memory_properties = external_memory_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> ExternalImageFormatProperties {
        self.value
    }
}

impl ops::Deref for ExternalImageFormatPropertiesBuilder {
    type Target = ExternalImageFormatProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalImageFormatPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalImageFormatPropertiesBuilder {
    type Target = ExternalImageFormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalImageFormatPropertiesNV {
    type Target = ExternalImageFormatPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalImageFormatPropertiesNV {
    type Builder = ExternalImageFormatPropertiesNVBuilder;
}

/// A builder for a [`ExternalImageFormatPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalImageFormatPropertiesNVBuilder {
    value: ExternalImageFormatPropertiesNV,
}

impl ExternalImageFormatPropertiesNVBuilder {
    #[inline]
    pub fn image_format_properties(
        mut self,
        image_format_properties: impl Cast<Target = ImageFormatProperties>,
    ) -> Self {
        self.value.image_format_properties = image_format_properties.into();
        self
    }

    #[inline]
    pub fn external_memory_features(
        mut self,
        external_memory_features: ExternalMemoryFeatureFlagsNV,
    ) -> Self {
        self.value.external_memory_features = external_memory_features;
        self
    }

    #[inline]
    pub fn export_from_imported_handle_types(
        mut self,
        export_from_imported_handle_types: ExternalMemoryHandleTypeFlagsNV,
    ) -> Self {
        self.value.export_from_imported_handle_types = export_from_imported_handle_types;
        self
    }

    #[inline]
    pub fn compatible_handle_types(
        mut self,
        compatible_handle_types: ExternalMemoryHandleTypeFlagsNV,
    ) -> Self {
        self.value.compatible_handle_types = compatible_handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalImageFormatPropertiesNV {
        self.value
    }
}

impl ops::Deref for ExternalImageFormatPropertiesNVBuilder {
    type Target = ExternalImageFormatPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalImageFormatPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalImageFormatPropertiesNVBuilder {
    type Target = ExternalImageFormatPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalMemoryAcquireUnmodifiedEXT {
    type Target = ExternalMemoryAcquireUnmodifiedEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalMemoryAcquireUnmodifiedEXT {
    type Builder = ExternalMemoryAcquireUnmodifiedEXTBuilder;
}

/// A builder for a [`ExternalMemoryAcquireUnmodifiedEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalMemoryAcquireUnmodifiedEXTBuilder {
    value: ExternalMemoryAcquireUnmodifiedEXT,
}

impl ExternalMemoryAcquireUnmodifiedEXTBuilder {
    #[inline]
    pub fn acquire_unmodified_memory(mut self, acquire_unmodified_memory: bool) -> Self {
        self.value.acquire_unmodified_memory = acquire_unmodified_memory as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalMemoryAcquireUnmodifiedEXT {
        self.value
    }
}

impl ops::Deref for ExternalMemoryAcquireUnmodifiedEXTBuilder {
    type Target = ExternalMemoryAcquireUnmodifiedEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalMemoryAcquireUnmodifiedEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalMemoryAcquireUnmodifiedEXTBuilder {
    type Target = ExternalMemoryAcquireUnmodifiedEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalMemoryBufferCreateInfo {
    type Target = ExternalMemoryBufferCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalMemoryBufferCreateInfo {
    type Builder = ExternalMemoryBufferCreateInfoBuilder;
}

/// A builder for a [`ExternalMemoryBufferCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalMemoryBufferCreateInfoBuilder {
    value: ExternalMemoryBufferCreateInfo,
}

impl ExternalMemoryBufferCreateInfoBuilder {
    #[inline]
    pub fn handle_types(mut self, handle_types: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_types = handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalMemoryBufferCreateInfo {
        self.value
    }
}

impl ops::Deref for ExternalMemoryBufferCreateInfoBuilder {
    type Target = ExternalMemoryBufferCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalMemoryBufferCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalMemoryBufferCreateInfoBuilder {
    type Target = ExternalMemoryBufferCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalMemoryImageCreateInfo {
    type Target = ExternalMemoryImageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalMemoryImageCreateInfo {
    type Builder = ExternalMemoryImageCreateInfoBuilder;
}

/// A builder for a [`ExternalMemoryImageCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalMemoryImageCreateInfoBuilder {
    value: ExternalMemoryImageCreateInfo,
}

impl ExternalMemoryImageCreateInfoBuilder {
    #[inline]
    pub fn handle_types(mut self, handle_types: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_types = handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalMemoryImageCreateInfo {
        self.value
    }
}

impl ops::Deref for ExternalMemoryImageCreateInfoBuilder {
    type Target = ExternalMemoryImageCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalMemoryImageCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalMemoryImageCreateInfoBuilder {
    type Target = ExternalMemoryImageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalMemoryImageCreateInfoNV {
    type Target = ExternalMemoryImageCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalMemoryImageCreateInfoNV {
    type Builder = ExternalMemoryImageCreateInfoNVBuilder;
}

/// A builder for a [`ExternalMemoryImageCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalMemoryImageCreateInfoNVBuilder {
    value: ExternalMemoryImageCreateInfoNV,
}

impl ExternalMemoryImageCreateInfoNVBuilder {
    #[inline]
    pub fn handle_types(mut self, handle_types: ExternalMemoryHandleTypeFlagsNV) -> Self {
        self.value.handle_types = handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalMemoryImageCreateInfoNV {
        self.value
    }
}

impl ops::Deref for ExternalMemoryImageCreateInfoNVBuilder {
    type Target = ExternalMemoryImageCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalMemoryImageCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalMemoryImageCreateInfoNVBuilder {
    type Target = ExternalMemoryImageCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalMemoryProperties {
    type Target = ExternalMemoryProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalMemoryProperties {
    type Builder = ExternalMemoryPropertiesBuilder;
}

/// A builder for a [`ExternalMemoryProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalMemoryPropertiesBuilder {
    value: ExternalMemoryProperties,
}

impl ExternalMemoryPropertiesBuilder {
    #[inline]
    pub fn external_memory_features(
        mut self,
        external_memory_features: ExternalMemoryFeatureFlags,
    ) -> Self {
        self.value.external_memory_features = external_memory_features;
        self
    }

    #[inline]
    pub fn export_from_imported_handle_types(
        mut self,
        export_from_imported_handle_types: ExternalMemoryHandleTypeFlags,
    ) -> Self {
        self.value.export_from_imported_handle_types = export_from_imported_handle_types;
        self
    }

    #[inline]
    pub fn compatible_handle_types(
        mut self,
        compatible_handle_types: ExternalMemoryHandleTypeFlags,
    ) -> Self {
        self.value.compatible_handle_types = compatible_handle_types;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalMemoryProperties {
        self.value
    }
}

impl ops::Deref for ExternalMemoryPropertiesBuilder {
    type Target = ExternalMemoryProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalMemoryPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalMemoryPropertiesBuilder {
    type Target = ExternalMemoryProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ExternalSemaphoreProperties {
    type Target = ExternalSemaphoreProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ExternalSemaphoreProperties {
    type Builder = ExternalSemaphorePropertiesBuilder;
}

/// A builder for a [`ExternalSemaphoreProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ExternalSemaphorePropertiesBuilder {
    value: ExternalSemaphoreProperties,
}

impl ExternalSemaphorePropertiesBuilder {
    #[inline]
    pub fn export_from_imported_handle_types(
        mut self,
        export_from_imported_handle_types: ExternalSemaphoreHandleTypeFlags,
    ) -> Self {
        self.value.export_from_imported_handle_types = export_from_imported_handle_types;
        self
    }

    #[inline]
    pub fn compatible_handle_types(
        mut self,
        compatible_handle_types: ExternalSemaphoreHandleTypeFlags,
    ) -> Self {
        self.value.compatible_handle_types = compatible_handle_types;
        self
    }

    #[inline]
    pub fn external_semaphore_features(
        mut self,
        external_semaphore_features: ExternalSemaphoreFeatureFlags,
    ) -> Self {
        self.value.external_semaphore_features = external_semaphore_features;
        self
    }

    #[inline]
    pub fn build(self) -> ExternalSemaphoreProperties {
        self.value
    }
}

impl ops::Deref for ExternalSemaphorePropertiesBuilder {
    type Target = ExternalSemaphoreProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ExternalSemaphorePropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ExternalSemaphorePropertiesBuilder {
    type Target = ExternalSemaphoreProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`FenceCreateInfo`].
pub unsafe trait ExtendsFenceCreateInfo: fmt::Debug {}
unsafe impl ExtendsFenceCreateInfo for ExportFenceCreateInfo {}
unsafe impl ExtendsFenceCreateInfo for ExportFenceSciSyncInfoNV {}
unsafe impl ExtendsFenceCreateInfo for ExportFenceWin32HandleInfoKHR {}

unsafe impl Cast for FenceCreateInfo {
    type Target = FenceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for FenceCreateInfo {
    type Builder = FenceCreateInfoBuilder<'b>;
}

/// A builder for a [`FenceCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FenceCreateInfoBuilder<'b> {
    value: FenceCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> FenceCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsFenceCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: FenceCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> FenceCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for FenceCreateInfoBuilder<'b> {
    type Target = FenceCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for FenceCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for FenceCreateInfoBuilder<'b> {
    type Target = FenceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FenceGetFdInfoKHR {
    type Target = FenceGetFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for FenceGetFdInfoKHR {
    type Builder = FenceGetFdInfoKHRBuilder;
}

/// A builder for a [`FenceGetFdInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FenceGetFdInfoKHRBuilder {
    value: FenceGetFdInfoKHR,
}

impl FenceGetFdInfoKHRBuilder {
    #[inline]
    pub fn fence(mut self, fence: Fence) -> Self {
        self.value.fence = fence;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalFenceHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> FenceGetFdInfoKHR {
        self.value
    }
}

impl ops::Deref for FenceGetFdInfoKHRBuilder {
    type Target = FenceGetFdInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for FenceGetFdInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for FenceGetFdInfoKHRBuilder {
    type Target = FenceGetFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FenceGetSciSyncInfoNV {
    type Target = FenceGetSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for FenceGetSciSyncInfoNV {
    type Builder = FenceGetSciSyncInfoNVBuilder;
}

/// A builder for a [`FenceGetSciSyncInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FenceGetSciSyncInfoNVBuilder {
    value: FenceGetSciSyncInfoNV,
}

impl FenceGetSciSyncInfoNVBuilder {
    #[inline]
    pub fn fence(mut self, fence: Fence) -> Self {
        self.value.fence = fence;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalFenceHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> FenceGetSciSyncInfoNV {
        self.value
    }
}

impl ops::Deref for FenceGetSciSyncInfoNVBuilder {
    type Target = FenceGetSciSyncInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for FenceGetSciSyncInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for FenceGetSciSyncInfoNVBuilder {
    type Target = FenceGetSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FenceGetWin32HandleInfoKHR {
    type Target = FenceGetWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for FenceGetWin32HandleInfoKHR {
    type Builder = FenceGetWin32HandleInfoKHRBuilder;
}

/// A builder for a [`FenceGetWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FenceGetWin32HandleInfoKHRBuilder {
    value: FenceGetWin32HandleInfoKHR,
}

impl FenceGetWin32HandleInfoKHRBuilder {
    #[inline]
    pub fn fence(mut self, fence: Fence) -> Self {
        self.value.fence = fence;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalFenceHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> FenceGetWin32HandleInfoKHR {
        self.value
    }
}

impl ops::Deref for FenceGetWin32HandleInfoKHRBuilder {
    type Target = FenceGetWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for FenceGetWin32HandleInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for FenceGetWin32HandleInfoKHRBuilder {
    type Target = FenceGetWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FilterCubicImageViewImageFormatPropertiesEXT {
    type Target = FilterCubicImageViewImageFormatPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for FilterCubicImageViewImageFormatPropertiesEXT {
    type Builder = FilterCubicImageViewImageFormatPropertiesEXTBuilder;
}

/// A builder for a [`FilterCubicImageViewImageFormatPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FilterCubicImageViewImageFormatPropertiesEXTBuilder {
    value: FilterCubicImageViewImageFormatPropertiesEXT,
}

impl FilterCubicImageViewImageFormatPropertiesEXTBuilder {
    #[inline]
    pub fn filter_cubic(mut self, filter_cubic: bool) -> Self {
        self.value.filter_cubic = filter_cubic as Bool32;
        self
    }

    #[inline]
    pub fn filter_cubic_minmax(mut self, filter_cubic_minmax: bool) -> Self {
        self.value.filter_cubic_minmax = filter_cubic_minmax as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> FilterCubicImageViewImageFormatPropertiesEXT {
        self.value
    }
}

impl ops::Deref for FilterCubicImageViewImageFormatPropertiesEXTBuilder {
    type Target = FilterCubicImageViewImageFormatPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for FilterCubicImageViewImageFormatPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for FilterCubicImageViewImageFormatPropertiesEXTBuilder {
    type Target = FilterCubicImageViewImageFormatPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FormatProperties {
    type Target = FormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for FormatProperties {
    type Builder = FormatPropertiesBuilder;
}

/// A builder for a [`FormatProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FormatPropertiesBuilder {
    value: FormatProperties,
}

impl FormatPropertiesBuilder {
    #[inline]
    pub fn linear_tiling_features(mut self, linear_tiling_features: FormatFeatureFlags) -> Self {
        self.value.linear_tiling_features = linear_tiling_features;
        self
    }

    #[inline]
    pub fn optimal_tiling_features(mut self, optimal_tiling_features: FormatFeatureFlags) -> Self {
        self.value.optimal_tiling_features = optimal_tiling_features;
        self
    }

    #[inline]
    pub fn buffer_features(mut self, buffer_features: FormatFeatureFlags) -> Self {
        self.value.buffer_features = buffer_features;
        self
    }

    #[inline]
    pub fn build(self) -> FormatProperties {
        self.value
    }
}

impl ops::Deref for FormatPropertiesBuilder {
    type Target = FormatProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for FormatPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for FormatPropertiesBuilder {
    type Target = FormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`FormatProperties2`].
pub unsafe trait ExtendsFormatProperties2: fmt::Debug {}
unsafe impl ExtendsFormatProperties2 for DrmFormatModifierPropertiesList2EXT {}
unsafe impl ExtendsFormatProperties2 for DrmFormatModifierPropertiesListEXT {}
unsafe impl ExtendsFormatProperties2 for FormatProperties3 {}
unsafe impl ExtendsFormatProperties2 for SubpassResolvePerformanceQueryEXT {}

unsafe impl Cast for FormatProperties2 {
    type Target = FormatProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for FormatProperties2 {
    type Builder = FormatProperties2Builder<'b>;
}

/// A builder for a [`FormatProperties2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FormatProperties2Builder<'b> {
    value: FormatProperties2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> FormatProperties2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsFormatProperties2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn format_properties(
        mut self,
        format_properties: impl Cast<Target = FormatProperties>,
    ) -> Self {
        self.value.format_properties = format_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> FormatProperties2 {
        self.value
    }
}

impl<'b> ops::Deref for FormatProperties2Builder<'b> {
    type Target = FormatProperties2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for FormatProperties2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for FormatProperties2Builder<'b> {
    type Target = FormatProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FormatProperties3 {
    type Target = FormatProperties3;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for FormatProperties3 {
    type Builder = FormatProperties3Builder;
}

/// A builder for a [`FormatProperties3`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FormatProperties3Builder {
    value: FormatProperties3,
}

impl FormatProperties3Builder {
    #[inline]
    pub fn linear_tiling_features(mut self, linear_tiling_features: FormatFeatureFlags2) -> Self {
        self.value.linear_tiling_features = linear_tiling_features;
        self
    }

    #[inline]
    pub fn optimal_tiling_features(mut self, optimal_tiling_features: FormatFeatureFlags2) -> Self {
        self.value.optimal_tiling_features = optimal_tiling_features;
        self
    }

    #[inline]
    pub fn buffer_features(mut self, buffer_features: FormatFeatureFlags2) -> Self {
        self.value.buffer_features = buffer_features;
        self
    }

    #[inline]
    pub fn build(self) -> FormatProperties3 {
        self.value
    }
}

impl ops::Deref for FormatProperties3Builder {
    type Target = FormatProperties3;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for FormatProperties3Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for FormatProperties3Builder {
    type Target = FormatProperties3;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FragmentShadingRateAttachmentInfoKHR {
    type Target = FragmentShadingRateAttachmentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for FragmentShadingRateAttachmentInfoKHR {
    type Builder = FragmentShadingRateAttachmentInfoKHRBuilder<'b>;
}

/// A builder for a [`FragmentShadingRateAttachmentInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FragmentShadingRateAttachmentInfoKHRBuilder<'b> {
    value: FragmentShadingRateAttachmentInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> FragmentShadingRateAttachmentInfoKHRBuilder<'b> {
    #[inline]
    pub fn fragment_shading_rate_attachment(
        mut self,
        fragment_shading_rate_attachment: &'b impl Cast<Target = AttachmentReference2>,
    ) -> Self {
        self.value.fragment_shading_rate_attachment = fragment_shading_rate_attachment.as_ref();
        self
    }

    #[inline]
    pub fn shading_rate_attachment_texel_size(
        mut self,
        shading_rate_attachment_texel_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.shading_rate_attachment_texel_size = shading_rate_attachment_texel_size.into();
        self
    }

    #[inline]
    pub fn build(self) -> FragmentShadingRateAttachmentInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for FragmentShadingRateAttachmentInfoKHRBuilder<'b> {
    type Target = FragmentShadingRateAttachmentInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for FragmentShadingRateAttachmentInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for FragmentShadingRateAttachmentInfoKHRBuilder<'b> {
    type Target = FragmentShadingRateAttachmentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FrameBoundaryEXT {
    type Target = FrameBoundaryEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for FrameBoundaryEXT {
    type Builder = FrameBoundaryEXTBuilder<'b>;
}

/// A builder for a [`FrameBoundaryEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FrameBoundaryEXTBuilder<'b> {
    value: FrameBoundaryEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> FrameBoundaryEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: FrameBoundaryFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn frame_id(mut self, frame_id: u64) -> Self {
        self.value.frame_id = frame_id;
        self
    }

    #[inline]
    pub fn image_count(mut self, image_count: u32) -> Self {
        self.value.image_count = image_count;
        self
    }

    #[inline]
    pub fn images(mut self, images: &'b [Image]) -> Self {
        self.value.image_count = images.len() as u32;
        self.value.images = images.as_ptr();
        self
    }

    #[inline]
    pub fn buffer_count(mut self, buffer_count: u32) -> Self {
        self.value.buffer_count = buffer_count;
        self
    }

    #[inline]
    pub fn buffers(mut self, buffers: &'b [Buffer]) -> Self {
        self.value.buffer_count = buffers.len() as u32;
        self.value.buffers = buffers.as_ptr();
        self
    }

    #[inline]
    pub fn tag_name(mut self, tag_name: u64) -> Self {
        self.value.tag_name = tag_name;
        self
    }

    #[inline]
    pub fn tag_size(mut self, tag_size: usize) -> Self {
        self.value.tag_size = tag_size;
        self
    }

    #[inline]
    pub fn tag(mut self, tag: &'b [u8]) -> Self {
        self.value.tag_size = tag.len() as usize;
        self.value.tag = tag.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> FrameBoundaryEXT {
        self.value
    }
}

impl<'b> ops::Deref for FrameBoundaryEXTBuilder<'b> {
    type Target = FrameBoundaryEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for FrameBoundaryEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for FrameBoundaryEXTBuilder<'b> {
    type Target = FrameBoundaryEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FramebufferAttachmentImageInfo {
    type Target = FramebufferAttachmentImageInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for FramebufferAttachmentImageInfo {
    type Builder = FramebufferAttachmentImageInfoBuilder<'b>;
}

/// A builder for a [`FramebufferAttachmentImageInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FramebufferAttachmentImageInfoBuilder<'b> {
    value: FramebufferAttachmentImageInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> FramebufferAttachmentImageInfoBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: ImageCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn usage(mut self, usage: ImageUsageFlags) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn width(mut self, width: u32) -> Self {
        self.value.width = width;
        self
    }

    #[inline]
    pub fn height(mut self, height: u32) -> Self {
        self.value.height = height;
        self
    }

    #[inline]
    pub fn layer_count(mut self, layer_count: u32) -> Self {
        self.value.layer_count = layer_count;
        self
    }

    #[inline]
    pub fn view_formats(mut self, view_formats: &'b [Format]) -> Self {
        self.value.view_format_count = view_formats.len() as u32;
        self.value.view_formats = view_formats.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> FramebufferAttachmentImageInfo {
        self.value
    }
}

impl<'b> ops::Deref for FramebufferAttachmentImageInfoBuilder<'b> {
    type Target = FramebufferAttachmentImageInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for FramebufferAttachmentImageInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for FramebufferAttachmentImageInfoBuilder<'b> {
    type Target = FramebufferAttachmentImageInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FramebufferAttachmentsCreateInfo {
    type Target = FramebufferAttachmentsCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for FramebufferAttachmentsCreateInfo {
    type Builder = FramebufferAttachmentsCreateInfoBuilder<'b>;
}

/// A builder for a [`FramebufferAttachmentsCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FramebufferAttachmentsCreateInfoBuilder<'b> {
    value: FramebufferAttachmentsCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> FramebufferAttachmentsCreateInfoBuilder<'b> {
    #[inline]
    pub fn attachment_image_infos(
        mut self,
        attachment_image_infos: &'b [impl Cast<Target = FramebufferAttachmentImageInfo>],
    ) -> Self {
        self.value.attachment_image_info_count = attachment_image_infos.len() as u32;
        self.value.attachment_image_infos = attachment_image_infos.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> FramebufferAttachmentsCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for FramebufferAttachmentsCreateInfoBuilder<'b> {
    type Target = FramebufferAttachmentsCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for FramebufferAttachmentsCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for FramebufferAttachmentsCreateInfoBuilder<'b> {
    type Target = FramebufferAttachmentsCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`FramebufferCreateInfo`].
pub unsafe trait ExtendsFramebufferCreateInfo: fmt::Debug {}
unsafe impl ExtendsFramebufferCreateInfo for FramebufferAttachmentsCreateInfo {}

unsafe impl Cast for FramebufferCreateInfo {
    type Target = FramebufferCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for FramebufferCreateInfo {
    type Builder = FramebufferCreateInfoBuilder<'b>;
}

/// A builder for a [`FramebufferCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FramebufferCreateInfoBuilder<'b> {
    value: FramebufferCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> FramebufferCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsFramebufferCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: FramebufferCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn render_pass(mut self, render_pass: RenderPass) -> Self {
        self.value.render_pass = render_pass;
        self
    }

    #[inline]
    pub fn attachments(mut self, attachments: &'b [ImageView]) -> Self {
        self.value.attachment_count = attachments.len() as u32;
        self.value.attachments = attachments.as_ptr();
        self
    }

    #[inline]
    pub fn width(mut self, width: u32) -> Self {
        self.value.width = width;
        self
    }

    #[inline]
    pub fn height(mut self, height: u32) -> Self {
        self.value.height = height;
        self
    }

    #[inline]
    pub fn layers(mut self, layers: u32) -> Self {
        self.value.layers = layers;
        self
    }

    #[inline]
    pub fn build(self) -> FramebufferCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for FramebufferCreateInfoBuilder<'b> {
    type Target = FramebufferCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for FramebufferCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for FramebufferCreateInfoBuilder<'b> {
    type Target = FramebufferCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for FramebufferMixedSamplesCombinationNV {
    type Target = FramebufferMixedSamplesCombinationNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for FramebufferMixedSamplesCombinationNV {
    type Builder = FramebufferMixedSamplesCombinationNVBuilder;
}

/// A builder for a [`FramebufferMixedSamplesCombinationNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct FramebufferMixedSamplesCombinationNVBuilder {
    value: FramebufferMixedSamplesCombinationNV,
}

impl FramebufferMixedSamplesCombinationNVBuilder {
    #[inline]
    pub fn coverage_reduction_mode(
        mut self,
        coverage_reduction_mode: CoverageReductionModeNV,
    ) -> Self {
        self.value.coverage_reduction_mode = coverage_reduction_mode;
        self
    }

    #[inline]
    pub fn rasterization_samples(mut self, rasterization_samples: SampleCountFlags) -> Self {
        self.value.rasterization_samples = rasterization_samples;
        self
    }

    #[inline]
    pub fn depth_stencil_samples(mut self, depth_stencil_samples: SampleCountFlags) -> Self {
        self.value.depth_stencil_samples = depth_stencil_samples;
        self
    }

    #[inline]
    pub fn color_samples(mut self, color_samples: SampleCountFlags) -> Self {
        self.value.color_samples = color_samples;
        self
    }

    #[inline]
    pub fn build(self) -> FramebufferMixedSamplesCombinationNV {
        self.value
    }
}

impl ops::Deref for FramebufferMixedSamplesCombinationNVBuilder {
    type Target = FramebufferMixedSamplesCombinationNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for FramebufferMixedSamplesCombinationNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for FramebufferMixedSamplesCombinationNVBuilder {
    type Target = FramebufferMixedSamplesCombinationNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GeneratedCommandsInfoNV {
    type Target = GeneratedCommandsInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for GeneratedCommandsInfoNV {
    type Builder = GeneratedCommandsInfoNVBuilder<'b>;
}

/// A builder for a [`GeneratedCommandsInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GeneratedCommandsInfoNVBuilder<'b> {
    value: GeneratedCommandsInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> GeneratedCommandsInfoNVBuilder<'b> {
    #[inline]
    pub fn pipeline_bind_point(mut self, pipeline_bind_point: PipelineBindPoint) -> Self {
        self.value.pipeline_bind_point = pipeline_bind_point;
        self
    }

    #[inline]
    pub fn pipeline(mut self, pipeline: Pipeline) -> Self {
        self.value.pipeline = pipeline;
        self
    }

    #[inline]
    pub fn indirect_commands_layout(
        mut self,
        indirect_commands_layout: IndirectCommandsLayoutNV,
    ) -> Self {
        self.value.indirect_commands_layout = indirect_commands_layout;
        self
    }

    #[inline]
    pub fn streams(mut self, streams: &'b [impl Cast<Target = IndirectCommandsStreamNV>]) -> Self {
        self.value.stream_count = streams.len() as u32;
        self.value.streams = streams.as_ptr().cast();
        self
    }

    #[inline]
    pub fn sequences_count(mut self, sequences_count: u32) -> Self {
        self.value.sequences_count = sequences_count;
        self
    }

    #[inline]
    pub fn preprocess_buffer(mut self, preprocess_buffer: Buffer) -> Self {
        self.value.preprocess_buffer = preprocess_buffer;
        self
    }

    #[inline]
    pub fn preprocess_offset(mut self, preprocess_offset: DeviceSize) -> Self {
        self.value.preprocess_offset = preprocess_offset;
        self
    }

    #[inline]
    pub fn preprocess_size(mut self, preprocess_size: DeviceSize) -> Self {
        self.value.preprocess_size = preprocess_size;
        self
    }

    #[inline]
    pub fn sequences_count_buffer(mut self, sequences_count_buffer: Buffer) -> Self {
        self.value.sequences_count_buffer = sequences_count_buffer;
        self
    }

    #[inline]
    pub fn sequences_count_offset(mut self, sequences_count_offset: DeviceSize) -> Self {
        self.value.sequences_count_offset = sequences_count_offset;
        self
    }

    #[inline]
    pub fn sequences_index_buffer(mut self, sequences_index_buffer: Buffer) -> Self {
        self.value.sequences_index_buffer = sequences_index_buffer;
        self
    }

    #[inline]
    pub fn sequences_index_offset(mut self, sequences_index_offset: DeviceSize) -> Self {
        self.value.sequences_index_offset = sequences_index_offset;
        self
    }

    #[inline]
    pub fn build(self) -> GeneratedCommandsInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for GeneratedCommandsInfoNVBuilder<'b> {
    type Target = GeneratedCommandsInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for GeneratedCommandsInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for GeneratedCommandsInfoNVBuilder<'b> {
    type Target = GeneratedCommandsInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GeneratedCommandsMemoryRequirementsInfoNV {
    type Target = GeneratedCommandsMemoryRequirementsInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for GeneratedCommandsMemoryRequirementsInfoNV {
    type Builder = GeneratedCommandsMemoryRequirementsInfoNVBuilder;
}

/// A builder for a [`GeneratedCommandsMemoryRequirementsInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GeneratedCommandsMemoryRequirementsInfoNVBuilder {
    value: GeneratedCommandsMemoryRequirementsInfoNV,
}

impl GeneratedCommandsMemoryRequirementsInfoNVBuilder {
    #[inline]
    pub fn pipeline_bind_point(mut self, pipeline_bind_point: PipelineBindPoint) -> Self {
        self.value.pipeline_bind_point = pipeline_bind_point;
        self
    }

    #[inline]
    pub fn pipeline(mut self, pipeline: Pipeline) -> Self {
        self.value.pipeline = pipeline;
        self
    }

    #[inline]
    pub fn indirect_commands_layout(
        mut self,
        indirect_commands_layout: IndirectCommandsLayoutNV,
    ) -> Self {
        self.value.indirect_commands_layout = indirect_commands_layout;
        self
    }

    #[inline]
    pub fn max_sequences_count(mut self, max_sequences_count: u32) -> Self {
        self.value.max_sequences_count = max_sequences_count;
        self
    }

    #[inline]
    pub fn build(self) -> GeneratedCommandsMemoryRequirementsInfoNV {
        self.value
    }
}

impl ops::Deref for GeneratedCommandsMemoryRequirementsInfoNVBuilder {
    type Target = GeneratedCommandsMemoryRequirementsInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for GeneratedCommandsMemoryRequirementsInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for GeneratedCommandsMemoryRequirementsInfoNVBuilder {
    type Target = GeneratedCommandsMemoryRequirementsInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GeometryAABBNV {
    type Target = GeometryAABBNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for GeometryAABBNV {
    type Builder = GeometryAABBNVBuilder;
}

/// A builder for a [`GeometryAABBNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GeometryAABBNVBuilder {
    value: GeometryAABBNV,
}

impl GeometryAABBNVBuilder {
    #[inline]
    pub fn aabb_data(mut self, aabb_data: Buffer) -> Self {
        self.value.aabb_data = aabb_data;
        self
    }

    #[inline]
    pub fn num_aab_bs(mut self, num_aab_bs: u32) -> Self {
        self.value.num_aab_bs = num_aab_bs;
        self
    }

    #[inline]
    pub fn stride(mut self, stride: u32) -> Self {
        self.value.stride = stride;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn build(self) -> GeometryAABBNV {
        self.value
    }
}

impl ops::Deref for GeometryAABBNVBuilder {
    type Target = GeometryAABBNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for GeometryAABBNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for GeometryAABBNVBuilder {
    type Target = GeometryAABBNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GeometryDataNV {
    type Target = GeometryDataNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for GeometryDataNV {
    type Builder = GeometryDataNVBuilder;
}

/// A builder for a [`GeometryDataNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GeometryDataNVBuilder {
    value: GeometryDataNV,
}

impl GeometryDataNVBuilder {
    #[inline]
    pub fn triangles(mut self, triangles: impl Cast<Target = GeometryTrianglesNV>) -> Self {
        self.value.triangles = triangles.into();
        self
    }

    #[inline]
    pub fn aabbs(mut self, aabbs: impl Cast<Target = GeometryAABBNV>) -> Self {
        self.value.aabbs = aabbs.into();
        self
    }

    #[inline]
    pub fn build(self) -> GeometryDataNV {
        self.value
    }
}

impl ops::Deref for GeometryDataNVBuilder {
    type Target = GeometryDataNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for GeometryDataNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for GeometryDataNVBuilder {
    type Target = GeometryDataNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GeometryNV {
    type Target = GeometryNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for GeometryNV {
    type Builder = GeometryNVBuilder;
}

/// A builder for a [`GeometryNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GeometryNVBuilder {
    value: GeometryNV,
}

impl GeometryNVBuilder {
    #[inline]
    pub fn geometry_type(mut self, geometry_type: GeometryTypeKHR) -> Self {
        self.value.geometry_type = geometry_type;
        self
    }

    #[inline]
    pub fn geometry(mut self, geometry: impl Cast<Target = GeometryDataNV>) -> Self {
        self.value.geometry = geometry.into();
        self
    }

    #[inline]
    pub fn flags(mut self, flags: GeometryFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> GeometryNV {
        self.value
    }
}

impl ops::Deref for GeometryNVBuilder {
    type Target = GeometryNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for GeometryNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for GeometryNVBuilder {
    type Target = GeometryNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GeometryTrianglesNV {
    type Target = GeometryTrianglesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for GeometryTrianglesNV {
    type Builder = GeometryTrianglesNVBuilder;
}

/// A builder for a [`GeometryTrianglesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GeometryTrianglesNVBuilder {
    value: GeometryTrianglesNV,
}

impl GeometryTrianglesNVBuilder {
    #[inline]
    pub fn vertex_data(mut self, vertex_data: Buffer) -> Self {
        self.value.vertex_data = vertex_data;
        self
    }

    #[inline]
    pub fn vertex_offset(mut self, vertex_offset: DeviceSize) -> Self {
        self.value.vertex_offset = vertex_offset;
        self
    }

    #[inline]
    pub fn vertex_count(mut self, vertex_count: u32) -> Self {
        self.value.vertex_count = vertex_count;
        self
    }

    #[inline]
    pub fn vertex_stride(mut self, vertex_stride: DeviceSize) -> Self {
        self.value.vertex_stride = vertex_stride;
        self
    }

    #[inline]
    pub fn vertex_format(mut self, vertex_format: Format) -> Self {
        self.value.vertex_format = vertex_format;
        self
    }

    #[inline]
    pub fn index_data(mut self, index_data: Buffer) -> Self {
        self.value.index_data = index_data;
        self
    }

    #[inline]
    pub fn index_offset(mut self, index_offset: DeviceSize) -> Self {
        self.value.index_offset = index_offset;
        self
    }

    #[inline]
    pub fn index_count(mut self, index_count: u32) -> Self {
        self.value.index_count = index_count;
        self
    }

    #[inline]
    pub fn index_type(mut self, index_type: IndexType) -> Self {
        self.value.index_type = index_type;
        self
    }

    #[inline]
    pub fn transform_data(mut self, transform_data: Buffer) -> Self {
        self.value.transform_data = transform_data;
        self
    }

    #[inline]
    pub fn transform_offset(mut self, transform_offset: DeviceSize) -> Self {
        self.value.transform_offset = transform_offset;
        self
    }

    #[inline]
    pub fn build(self) -> GeometryTrianglesNV {
        self.value
    }
}

impl ops::Deref for GeometryTrianglesNVBuilder {
    type Target = GeometryTrianglesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for GeometryTrianglesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for GeometryTrianglesNVBuilder {
    type Target = GeometryTrianglesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GetLatencyMarkerInfoNV {
    type Target = GetLatencyMarkerInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for GetLatencyMarkerInfoNV {
    type Builder = GetLatencyMarkerInfoNVBuilder<'b>;
}

/// A builder for a [`GetLatencyMarkerInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GetLatencyMarkerInfoNVBuilder<'b> {
    value: GetLatencyMarkerInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> GetLatencyMarkerInfoNVBuilder<'b> {
    #[inline]
    pub fn timing_count(mut self, timing_count: u32) -> Self {
        self.value.timing_count = timing_count;
        self
    }

    #[inline]
    pub fn timings(
        mut self,
        timings: &'b mut [impl Cast<Target = LatencyTimingsFrameReportNV>],
    ) -> Self {
        self.value.timing_count = timings.len() as u32;
        self.value.timings = timings.as_mut_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> GetLatencyMarkerInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for GetLatencyMarkerInfoNVBuilder<'b> {
    type Target = GetLatencyMarkerInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for GetLatencyMarkerInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for GetLatencyMarkerInfoNVBuilder<'b> {
    type Target = GetLatencyMarkerInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`GraphicsPipelineCreateInfo`].
pub unsafe trait ExtendsGraphicsPipelineCreateInfo: fmt::Debug {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for AttachmentSampleCountInfoAMD {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for ExternalFormatANDROID {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for GraphicsPipelineLibraryCreateInfoEXT {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for GraphicsPipelineShaderGroupsCreateInfoNV {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for MultiviewPerViewAttributesInfoNVX {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineBinaryInfoKHR {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineCompilerControlCreateInfoAMD {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineCreateFlags2CreateInfoKHR {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineCreationFeedbackCreateInfo {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineDiscardRectangleStateCreateInfoEXT {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineFragmentShadingRateEnumStateCreateInfoNV {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineFragmentShadingRateStateCreateInfoKHR {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineLibraryCreateInfoKHR {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineRenderingCreateInfo {}
unsafe impl ExtendsGraphicsPipelineCreateInfo
    for PipelineRepresentativeFragmentTestStateCreateInfoNV
{
}
unsafe impl ExtendsGraphicsPipelineCreateInfo for PipelineRobustnessCreateInfoEXT {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for RenderingAttachmentLocationInfoKHR {}
unsafe impl ExtendsGraphicsPipelineCreateInfo for RenderingInputAttachmentIndexInfoKHR {}

unsafe impl Cast for GraphicsPipelineCreateInfo {
    type Target = GraphicsPipelineCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for GraphicsPipelineCreateInfo {
    type Builder = GraphicsPipelineCreateInfoBuilder<'b>;
}

/// A builder for a [`GraphicsPipelineCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GraphicsPipelineCreateInfoBuilder<'b> {
    value: GraphicsPipelineCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> GraphicsPipelineCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsGraphicsPipelineCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn stage_count(mut self, stage_count: u32) -> Self {
        self.value.stage_count = stage_count;
        self
    }

    #[inline]
    pub fn stages(
        mut self,
        stages: &'b [impl Cast<Target = PipelineShaderStageCreateInfo>],
    ) -> Self {
        self.value.stage_count = stages.len() as u32;
        self.value.stages = stages.as_ptr().cast();
        self
    }

    #[inline]
    pub fn vertex_input_state(
        mut self,
        vertex_input_state: &'b impl Cast<Target = PipelineVertexInputStateCreateInfo>,
    ) -> Self {
        self.value.vertex_input_state = vertex_input_state.as_ref();
        self
    }

    #[inline]
    pub fn input_assembly_state(
        mut self,
        input_assembly_state: &'b impl Cast<Target = PipelineInputAssemblyStateCreateInfo>,
    ) -> Self {
        self.value.input_assembly_state = input_assembly_state.as_ref();
        self
    }

    #[inline]
    pub fn tessellation_state(
        mut self,
        tessellation_state: &'b impl Cast<Target = PipelineTessellationStateCreateInfo>,
    ) -> Self {
        self.value.tessellation_state = tessellation_state.as_ref();
        self
    }

    #[inline]
    pub fn viewport_state(
        mut self,
        viewport_state: &'b impl Cast<Target = PipelineViewportStateCreateInfo>,
    ) -> Self {
        self.value.viewport_state = viewport_state.as_ref();
        self
    }

    #[inline]
    pub fn rasterization_state(
        mut self,
        rasterization_state: &'b impl Cast<Target = PipelineRasterizationStateCreateInfo>,
    ) -> Self {
        self.value.rasterization_state = rasterization_state.as_ref();
        self
    }

    #[inline]
    pub fn multisample_state(
        mut self,
        multisample_state: &'b impl Cast<Target = PipelineMultisampleStateCreateInfo>,
    ) -> Self {
        self.value.multisample_state = multisample_state.as_ref();
        self
    }

    #[inline]
    pub fn depth_stencil_state(
        mut self,
        depth_stencil_state: &'b impl Cast<Target = PipelineDepthStencilStateCreateInfo>,
    ) -> Self {
        self.value.depth_stencil_state = depth_stencil_state.as_ref();
        self
    }

    #[inline]
    pub fn color_blend_state(
        mut self,
        color_blend_state: &'b impl Cast<Target = PipelineColorBlendStateCreateInfo>,
    ) -> Self {
        self.value.color_blend_state = color_blend_state.as_ref();
        self
    }

    #[inline]
    pub fn dynamic_state(
        mut self,
        dynamic_state: &'b impl Cast<Target = PipelineDynamicStateCreateInfo>,
    ) -> Self {
        self.value.dynamic_state = dynamic_state.as_ref();
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn render_pass(mut self, render_pass: RenderPass) -> Self {
        self.value.render_pass = render_pass;
        self
    }

    #[inline]
    pub fn subpass(mut self, subpass: u32) -> Self {
        self.value.subpass = subpass;
        self
    }

    #[inline]
    pub fn base_pipeline_handle(mut self, base_pipeline_handle: Pipeline) -> Self {
        self.value.base_pipeline_handle = base_pipeline_handle;
        self
    }

    #[inline]
    pub fn base_pipeline_index(mut self, base_pipeline_index: i32) -> Self {
        self.value.base_pipeline_index = base_pipeline_index;
        self
    }

    #[inline]
    pub fn build(self) -> GraphicsPipelineCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for GraphicsPipelineCreateInfoBuilder<'b> {
    type Target = GraphicsPipelineCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for GraphicsPipelineCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for GraphicsPipelineCreateInfoBuilder<'b> {
    type Target = GraphicsPipelineCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GraphicsPipelineLibraryCreateInfoEXT {
    type Target = GraphicsPipelineLibraryCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for GraphicsPipelineLibraryCreateInfoEXT {
    type Builder = GraphicsPipelineLibraryCreateInfoEXTBuilder;
}

/// A builder for a [`GraphicsPipelineLibraryCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GraphicsPipelineLibraryCreateInfoEXTBuilder {
    value: GraphicsPipelineLibraryCreateInfoEXT,
}

impl GraphicsPipelineLibraryCreateInfoEXTBuilder {
    #[inline]
    pub fn flags(mut self, flags: GraphicsPipelineLibraryFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> GraphicsPipelineLibraryCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for GraphicsPipelineLibraryCreateInfoEXTBuilder {
    type Target = GraphicsPipelineLibraryCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for GraphicsPipelineLibraryCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for GraphicsPipelineLibraryCreateInfoEXTBuilder {
    type Target = GraphicsPipelineLibraryCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GraphicsPipelineShaderGroupsCreateInfoNV {
    type Target = GraphicsPipelineShaderGroupsCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for GraphicsPipelineShaderGroupsCreateInfoNV {
    type Builder = GraphicsPipelineShaderGroupsCreateInfoNVBuilder<'b>;
}

/// A builder for a [`GraphicsPipelineShaderGroupsCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GraphicsPipelineShaderGroupsCreateInfoNVBuilder<'b> {
    value: GraphicsPipelineShaderGroupsCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> GraphicsPipelineShaderGroupsCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn groups(
        mut self,
        groups: &'b [impl Cast<Target = GraphicsShaderGroupCreateInfoNV>],
    ) -> Self {
        self.value.group_count = groups.len() as u32;
        self.value.groups = groups.as_ptr().cast();
        self
    }

    #[inline]
    pub fn pipelines(mut self, pipelines: &'b [Pipeline]) -> Self {
        self.value.pipeline_count = pipelines.len() as u32;
        self.value.pipelines = pipelines.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> GraphicsPipelineShaderGroupsCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for GraphicsPipelineShaderGroupsCreateInfoNVBuilder<'b> {
    type Target = GraphicsPipelineShaderGroupsCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for GraphicsPipelineShaderGroupsCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for GraphicsPipelineShaderGroupsCreateInfoNVBuilder<'b> {
    type Target = GraphicsPipelineShaderGroupsCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for GraphicsShaderGroupCreateInfoNV {
    type Target = GraphicsShaderGroupCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for GraphicsShaderGroupCreateInfoNV {
    type Builder = GraphicsShaderGroupCreateInfoNVBuilder<'b>;
}

/// A builder for a [`GraphicsShaderGroupCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct GraphicsShaderGroupCreateInfoNVBuilder<'b> {
    value: GraphicsShaderGroupCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> GraphicsShaderGroupCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn stages(
        mut self,
        stages: &'b [impl Cast<Target = PipelineShaderStageCreateInfo>],
    ) -> Self {
        self.value.stage_count = stages.len() as u32;
        self.value.stages = stages.as_ptr().cast();
        self
    }

    #[inline]
    pub fn vertex_input_state(
        mut self,
        vertex_input_state: &'b impl Cast<Target = PipelineVertexInputStateCreateInfo>,
    ) -> Self {
        self.value.vertex_input_state = vertex_input_state.as_ref();
        self
    }

    #[inline]
    pub fn tessellation_state(
        mut self,
        tessellation_state: &'b impl Cast<Target = PipelineTessellationStateCreateInfo>,
    ) -> Self {
        self.value.tessellation_state = tessellation_state.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> GraphicsShaderGroupCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for GraphicsShaderGroupCreateInfoNVBuilder<'b> {
    type Target = GraphicsShaderGroupCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for GraphicsShaderGroupCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for GraphicsShaderGroupCreateInfoNVBuilder<'b> {
    type Target = GraphicsShaderGroupCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for HdrMetadataEXT {
    type Target = HdrMetadataEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for HdrMetadataEXT {
    type Builder = HdrMetadataEXTBuilder;
}

/// A builder for a [`HdrMetadataEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct HdrMetadataEXTBuilder {
    value: HdrMetadataEXT,
}

impl HdrMetadataEXTBuilder {
    #[inline]
    pub fn display_primary_red(
        mut self,
        display_primary_red: impl Cast<Target = XYColorEXT>,
    ) -> Self {
        self.value.display_primary_red = display_primary_red.into();
        self
    }

    #[inline]
    pub fn display_primary_green(
        mut self,
        display_primary_green: impl Cast<Target = XYColorEXT>,
    ) -> Self {
        self.value.display_primary_green = display_primary_green.into();
        self
    }

    #[inline]
    pub fn display_primary_blue(
        mut self,
        display_primary_blue: impl Cast<Target = XYColorEXT>,
    ) -> Self {
        self.value.display_primary_blue = display_primary_blue.into();
        self
    }

    #[inline]
    pub fn white_point(mut self, white_point: impl Cast<Target = XYColorEXT>) -> Self {
        self.value.white_point = white_point.into();
        self
    }

    #[inline]
    pub fn max_luminance(mut self, max_luminance: f32) -> Self {
        self.value.max_luminance = max_luminance;
        self
    }

    #[inline]
    pub fn min_luminance(mut self, min_luminance: f32) -> Self {
        self.value.min_luminance = min_luminance;
        self
    }

    #[inline]
    pub fn max_content_light_level(mut self, max_content_light_level: f32) -> Self {
        self.value.max_content_light_level = max_content_light_level;
        self
    }

    #[inline]
    pub fn max_frame_average_light_level(mut self, max_frame_average_light_level: f32) -> Self {
        self.value.max_frame_average_light_level = max_frame_average_light_level;
        self
    }

    #[inline]
    pub fn build(self) -> HdrMetadataEXT {
        self.value
    }
}

impl ops::Deref for HdrMetadataEXTBuilder {
    type Target = HdrMetadataEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for HdrMetadataEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for HdrMetadataEXTBuilder {
    type Target = HdrMetadataEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for HeadlessSurfaceCreateInfoEXT {
    type Target = HeadlessSurfaceCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for HeadlessSurfaceCreateInfoEXT {
    type Builder = HeadlessSurfaceCreateInfoEXTBuilder;
}

/// A builder for a [`HeadlessSurfaceCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct HeadlessSurfaceCreateInfoEXTBuilder {
    value: HeadlessSurfaceCreateInfoEXT,
}

impl HeadlessSurfaceCreateInfoEXTBuilder {
    #[inline]
    pub fn flags(mut self, flags: HeadlessSurfaceCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> HeadlessSurfaceCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for HeadlessSurfaceCreateInfoEXTBuilder {
    type Target = HeadlessSurfaceCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for HeadlessSurfaceCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for HeadlessSurfaceCreateInfoEXTBuilder {
    type Target = HeadlessSurfaceCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for HostImageCopyDevicePerformanceQueryEXT {
    type Target = HostImageCopyDevicePerformanceQueryEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for HostImageCopyDevicePerformanceQueryEXT {
    type Builder = HostImageCopyDevicePerformanceQueryEXTBuilder;
}

/// A builder for a [`HostImageCopyDevicePerformanceQueryEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct HostImageCopyDevicePerformanceQueryEXTBuilder {
    value: HostImageCopyDevicePerformanceQueryEXT,
}

impl HostImageCopyDevicePerformanceQueryEXTBuilder {
    #[inline]
    pub fn optimal_device_access(mut self, optimal_device_access: bool) -> Self {
        self.value.optimal_device_access = optimal_device_access as Bool32;
        self
    }

    #[inline]
    pub fn identical_memory_layout(mut self, identical_memory_layout: bool) -> Self {
        self.value.identical_memory_layout = identical_memory_layout as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> HostImageCopyDevicePerformanceQueryEXT {
        self.value
    }
}

impl ops::Deref for HostImageCopyDevicePerformanceQueryEXTBuilder {
    type Target = HostImageCopyDevicePerformanceQueryEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for HostImageCopyDevicePerformanceQueryEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for HostImageCopyDevicePerformanceQueryEXTBuilder {
    type Target = HostImageCopyDevicePerformanceQueryEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for HostImageLayoutTransitionInfoEXT {
    type Target = HostImageLayoutTransitionInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for HostImageLayoutTransitionInfoEXT {
    type Builder = HostImageLayoutTransitionInfoEXTBuilder;
}

/// A builder for a [`HostImageLayoutTransitionInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct HostImageLayoutTransitionInfoEXTBuilder {
    value: HostImageLayoutTransitionInfoEXT,
}

impl HostImageLayoutTransitionInfoEXTBuilder {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn old_layout(mut self, old_layout: ImageLayout) -> Self {
        self.value.old_layout = old_layout;
        self
    }

    #[inline]
    pub fn new_layout(mut self, new_layout: ImageLayout) -> Self {
        self.value.new_layout = new_layout;
        self
    }

    #[inline]
    pub fn subresource_range(
        mut self,
        subresource_range: impl Cast<Target = ImageSubresourceRange>,
    ) -> Self {
        self.value.subresource_range = subresource_range.into();
        self
    }

    #[inline]
    pub fn build(self) -> HostImageLayoutTransitionInfoEXT {
        self.value
    }
}

impl ops::Deref for HostImageLayoutTransitionInfoEXTBuilder {
    type Target = HostImageLayoutTransitionInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for HostImageLayoutTransitionInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for HostImageLayoutTransitionInfoEXTBuilder {
    type Target = HostImageLayoutTransitionInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for IOSSurfaceCreateInfoMVK {
    type Target = IOSSurfaceCreateInfoMVK;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for IOSSurfaceCreateInfoMVK {
    type Builder = IOSSurfaceCreateInfoMVKBuilder<'b>;
}

/// A builder for a [`IOSSurfaceCreateInfoMVK`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct IOSSurfaceCreateInfoMVKBuilder<'b> {
    value: IOSSurfaceCreateInfoMVK,
    _marker: PhantomData<&'b ()>,
}

impl<'b> IOSSurfaceCreateInfoMVKBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: IOSSurfaceCreateFlagsMVK) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn view<T>(mut self, view: &'b T) -> Self {
        self.value.view = (view as *const T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> IOSSurfaceCreateInfoMVK {
        self.value
    }
}

impl<'b> ops::Deref for IOSSurfaceCreateInfoMVKBuilder<'b> {
    type Target = IOSSurfaceCreateInfoMVK;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for IOSSurfaceCreateInfoMVKBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for IOSSurfaceCreateInfoMVKBuilder<'b> {
    type Target = IOSSurfaceCreateInfoMVK;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageAlignmentControlCreateInfoMESA {
    type Target = ImageAlignmentControlCreateInfoMESA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageAlignmentControlCreateInfoMESA {
    type Builder = ImageAlignmentControlCreateInfoMESABuilder;
}

/// A builder for a [`ImageAlignmentControlCreateInfoMESA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageAlignmentControlCreateInfoMESABuilder {
    value: ImageAlignmentControlCreateInfoMESA,
}

impl ImageAlignmentControlCreateInfoMESABuilder {
    #[inline]
    pub fn maximum_requested_alignment(mut self, maximum_requested_alignment: u32) -> Self {
        self.value.maximum_requested_alignment = maximum_requested_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> ImageAlignmentControlCreateInfoMESA {
        self.value
    }
}

impl ops::Deref for ImageAlignmentControlCreateInfoMESABuilder {
    type Target = ImageAlignmentControlCreateInfoMESA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageAlignmentControlCreateInfoMESABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageAlignmentControlCreateInfoMESABuilder {
    type Target = ImageAlignmentControlCreateInfoMESA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageBlit {
    type Target = ImageBlit;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageBlit {
    type Builder = ImageBlitBuilder;
}

/// A builder for a [`ImageBlit`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageBlitBuilder {
    value: ImageBlit,
}

impl ImageBlitBuilder {
    #[inline]
    pub fn src_subresource(
        mut self,
        src_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.src_subresource = src_subresource.into();
        self
    }

    #[inline]
    pub fn src_offsets(mut self, src_offsets: [Offset3D; 2]) -> Self {
        self.value.src_offsets = src_offsets;
        self
    }

    #[inline]
    pub fn dst_subresource(
        mut self,
        dst_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.dst_subresource = dst_subresource.into();
        self
    }

    #[inline]
    pub fn dst_offsets(mut self, dst_offsets: [Offset3D; 2]) -> Self {
        self.value.dst_offsets = dst_offsets;
        self
    }

    #[inline]
    pub fn build(self) -> ImageBlit {
        self.value
    }
}

impl ops::Deref for ImageBlitBuilder {
    type Target = ImageBlit;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageBlitBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageBlitBuilder {
    type Target = ImageBlit;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ImageBlit2`].
pub unsafe trait ExtendsImageBlit2: fmt::Debug {}
unsafe impl ExtendsImageBlit2 for CopyCommandTransformInfoQCOM {}

unsafe impl Cast for ImageBlit2 {
    type Target = ImageBlit2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageBlit2 {
    type Builder = ImageBlit2Builder<'b>;
}

/// A builder for a [`ImageBlit2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageBlit2Builder<'b> {
    value: ImageBlit2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageBlit2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsImageBlit2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn src_subresource(
        mut self,
        src_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.src_subresource = src_subresource.into();
        self
    }

    #[inline]
    pub fn src_offsets(mut self, src_offsets: [Offset3D; 2]) -> Self {
        self.value.src_offsets = src_offsets;
        self
    }

    #[inline]
    pub fn dst_subresource(
        mut self,
        dst_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.dst_subresource = dst_subresource.into();
        self
    }

    #[inline]
    pub fn dst_offsets(mut self, dst_offsets: [Offset3D; 2]) -> Self {
        self.value.dst_offsets = dst_offsets;
        self
    }

    #[inline]
    pub fn build(self) -> ImageBlit2 {
        self.value
    }
}

impl<'b> ops::Deref for ImageBlit2Builder<'b> {
    type Target = ImageBlit2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageBlit2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageBlit2Builder<'b> {
    type Target = ImageBlit2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageCaptureDescriptorDataInfoEXT {
    type Target = ImageCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageCaptureDescriptorDataInfoEXT {
    type Builder = ImageCaptureDescriptorDataInfoEXTBuilder;
}

/// A builder for a [`ImageCaptureDescriptorDataInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageCaptureDescriptorDataInfoEXTBuilder {
    value: ImageCaptureDescriptorDataInfoEXT,
}

impl ImageCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn build(self) -> ImageCaptureDescriptorDataInfoEXT {
        self.value
    }
}

impl ops::Deref for ImageCaptureDescriptorDataInfoEXTBuilder {
    type Target = ImageCaptureDescriptorDataInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageCaptureDescriptorDataInfoEXTBuilder {
    type Target = ImageCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageCompressionControlEXT {
    type Target = ImageCompressionControlEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageCompressionControlEXT {
    type Builder = ImageCompressionControlEXTBuilder<'b>;
}

/// A builder for a [`ImageCompressionControlEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageCompressionControlEXTBuilder<'b> {
    value: ImageCompressionControlEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageCompressionControlEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: ImageCompressionFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn fixed_rate_flags(
        mut self,
        fixed_rate_flags: &'b mut [ImageCompressionFixedRateFlagsEXT],
    ) -> Self {
        self.value.compression_control_plane_count = fixed_rate_flags.len() as u32;
        self.value.fixed_rate_flags = fixed_rate_flags.as_mut_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> ImageCompressionControlEXT {
        self.value
    }
}

impl<'b> ops::Deref for ImageCompressionControlEXTBuilder<'b> {
    type Target = ImageCompressionControlEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageCompressionControlEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageCompressionControlEXTBuilder<'b> {
    type Target = ImageCompressionControlEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageCompressionPropertiesEXT {
    type Target = ImageCompressionPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageCompressionPropertiesEXT {
    type Builder = ImageCompressionPropertiesEXTBuilder;
}

/// A builder for a [`ImageCompressionPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageCompressionPropertiesEXTBuilder {
    value: ImageCompressionPropertiesEXT,
}

impl ImageCompressionPropertiesEXTBuilder {
    #[inline]
    pub fn image_compression_flags(
        mut self,
        image_compression_flags: ImageCompressionFlagsEXT,
    ) -> Self {
        self.value.image_compression_flags = image_compression_flags;
        self
    }

    #[inline]
    pub fn image_compression_fixed_rate_flags(
        mut self,
        image_compression_fixed_rate_flags: ImageCompressionFixedRateFlagsEXT,
    ) -> Self {
        self.value.image_compression_fixed_rate_flags = image_compression_fixed_rate_flags;
        self
    }

    #[inline]
    pub fn build(self) -> ImageCompressionPropertiesEXT {
        self.value
    }
}

impl ops::Deref for ImageCompressionPropertiesEXTBuilder {
    type Target = ImageCompressionPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageCompressionPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageCompressionPropertiesEXTBuilder {
    type Target = ImageCompressionPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageConstraintsInfoFUCHSIA {
    type Target = ImageConstraintsInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageConstraintsInfoFUCHSIA {
    type Builder = ImageConstraintsInfoFUCHSIABuilder<'b>;
}

/// A builder for a [`ImageConstraintsInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageConstraintsInfoFUCHSIABuilder<'b> {
    value: ImageConstraintsInfoFUCHSIA,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageConstraintsInfoFUCHSIABuilder<'b> {
    #[inline]
    pub fn format_constraints(
        mut self,
        format_constraints: &'b [impl Cast<Target = ImageFormatConstraintsInfoFUCHSIA>],
    ) -> Self {
        self.value.format_constraints_count = format_constraints.len() as u32;
        self.value.format_constraints = format_constraints.as_ptr().cast();
        self
    }

    #[inline]
    pub fn buffer_collection_constraints(
        mut self,
        buffer_collection_constraints: impl Cast<Target = BufferCollectionConstraintsInfoFUCHSIA>,
    ) -> Self {
        self.value.buffer_collection_constraints = buffer_collection_constraints.into();
        self
    }

    #[inline]
    pub fn flags(mut self, flags: ImageConstraintsInfoFlagsFUCHSIA) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> ImageConstraintsInfoFUCHSIA {
        self.value
    }
}

impl<'b> ops::Deref for ImageConstraintsInfoFUCHSIABuilder<'b> {
    type Target = ImageConstraintsInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageConstraintsInfoFUCHSIABuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageConstraintsInfoFUCHSIABuilder<'b> {
    type Target = ImageConstraintsInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageCopy {
    type Target = ImageCopy;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageCopy {
    type Builder = ImageCopyBuilder;
}

/// A builder for a [`ImageCopy`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageCopyBuilder {
    value: ImageCopy,
}

impl ImageCopyBuilder {
    #[inline]
    pub fn src_subresource(
        mut self,
        src_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.src_subresource = src_subresource.into();
        self
    }

    #[inline]
    pub fn src_offset(mut self, src_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.src_offset = src_offset.into();
        self
    }

    #[inline]
    pub fn dst_subresource(
        mut self,
        dst_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.dst_subresource = dst_subresource.into();
        self
    }

    #[inline]
    pub fn dst_offset(mut self, dst_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.dst_offset = dst_offset.into();
        self
    }

    #[inline]
    pub fn extent(mut self, extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.extent = extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageCopy {
        self.value
    }
}

impl ops::Deref for ImageCopyBuilder {
    type Target = ImageCopy;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageCopyBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageCopyBuilder {
    type Target = ImageCopy;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageCopy2 {
    type Target = ImageCopy2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageCopy2 {
    type Builder = ImageCopy2Builder;
}

/// A builder for a [`ImageCopy2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageCopy2Builder {
    value: ImageCopy2,
}

impl ImageCopy2Builder {
    #[inline]
    pub fn src_subresource(
        mut self,
        src_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.src_subresource = src_subresource.into();
        self
    }

    #[inline]
    pub fn src_offset(mut self, src_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.src_offset = src_offset.into();
        self
    }

    #[inline]
    pub fn dst_subresource(
        mut self,
        dst_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.dst_subresource = dst_subresource.into();
        self
    }

    #[inline]
    pub fn dst_offset(mut self, dst_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.dst_offset = dst_offset.into();
        self
    }

    #[inline]
    pub fn extent(mut self, extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.extent = extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageCopy2 {
        self.value
    }
}

impl ops::Deref for ImageCopy2Builder {
    type Target = ImageCopy2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageCopy2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageCopy2Builder {
    type Target = ImageCopy2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ImageCreateInfo`].
pub unsafe trait ExtendsImageCreateInfo: fmt::Debug {}
unsafe impl ExtendsImageCreateInfo for BufferCollectionImageCreateInfoFUCHSIA {}
unsafe impl ExtendsImageCreateInfo for DedicatedAllocationImageCreateInfoNV {}
unsafe impl ExtendsImageCreateInfo for ExportMetalObjectCreateInfoEXT {}
unsafe impl ExtendsImageCreateInfo for ExternalFormatANDROID {}
unsafe impl ExtendsImageCreateInfo for ExternalFormatQNX {}
unsafe impl ExtendsImageCreateInfo for ExternalMemoryImageCreateInfo {}
unsafe impl ExtendsImageCreateInfo for ExternalMemoryImageCreateInfoNV {}
unsafe impl ExtendsImageCreateInfo for ImageAlignmentControlCreateInfoMESA {}
unsafe impl ExtendsImageCreateInfo for ImageCompressionControlEXT {}
unsafe impl ExtendsImageCreateInfo for ImageDrmFormatModifierExplicitCreateInfoEXT {}
unsafe impl ExtendsImageCreateInfo for ImageDrmFormatModifierListCreateInfoEXT {}
unsafe impl ExtendsImageCreateInfo for ImageFormatListCreateInfo {}
unsafe impl ExtendsImageCreateInfo for ImageStencilUsageCreateInfo {}
unsafe impl ExtendsImageCreateInfo for ImageSwapchainCreateInfoKHR {}
unsafe impl ExtendsImageCreateInfo for ImportMetalIOSurfaceInfoEXT {}
unsafe impl ExtendsImageCreateInfo for ImportMetalTextureInfoEXT {}
unsafe impl ExtendsImageCreateInfo for OpaqueCaptureDescriptorDataCreateInfoEXT {}
unsafe impl ExtendsImageCreateInfo for OpticalFlowImageFormatInfoNV {}
unsafe impl ExtendsImageCreateInfo for VideoProfileListInfoKHR {}

unsafe impl Cast for ImageCreateInfo {
    type Target = ImageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageCreateInfo {
    type Builder = ImageCreateInfoBuilder<'b>;
}

/// A builder for a [`ImageCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageCreateInfoBuilder<'b> {
    value: ImageCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsImageCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: ImageCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn image_type(mut self, image_type: ImageType) -> Self {
        self.value.image_type = image_type;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn extent(mut self, extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.extent = extent.into();
        self
    }

    #[inline]
    pub fn mip_levels(mut self, mip_levels: u32) -> Self {
        self.value.mip_levels = mip_levels;
        self
    }

    #[inline]
    pub fn array_layers(mut self, array_layers: u32) -> Self {
        self.value.array_layers = array_layers;
        self
    }

    #[inline]
    pub fn samples(mut self, samples: SampleCountFlags) -> Self {
        self.value.samples = samples;
        self
    }

    #[inline]
    pub fn tiling(mut self, tiling: ImageTiling) -> Self {
        self.value.tiling = tiling;
        self
    }

    #[inline]
    pub fn usage(mut self, usage: ImageUsageFlags) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn sharing_mode(mut self, sharing_mode: SharingMode) -> Self {
        self.value.sharing_mode = sharing_mode;
        self
    }

    #[inline]
    pub fn queue_family_indices(mut self, queue_family_indices: &'b [u32]) -> Self {
        self.value.queue_family_index_count = queue_family_indices.len() as u32;
        self.value.queue_family_indices = queue_family_indices.as_ptr();
        self
    }

    #[inline]
    pub fn initial_layout(mut self, initial_layout: ImageLayout) -> Self {
        self.value.initial_layout = initial_layout;
        self
    }

    #[inline]
    pub fn build(self) -> ImageCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for ImageCreateInfoBuilder<'b> {
    type Target = ImageCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageCreateInfoBuilder<'b> {
    type Target = ImageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageDrmFormatModifierExplicitCreateInfoEXT {
    type Target = ImageDrmFormatModifierExplicitCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageDrmFormatModifierExplicitCreateInfoEXT {
    type Builder = ImageDrmFormatModifierExplicitCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`ImageDrmFormatModifierExplicitCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageDrmFormatModifierExplicitCreateInfoEXTBuilder<'b> {
    value: ImageDrmFormatModifierExplicitCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageDrmFormatModifierExplicitCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn drm_format_modifier(mut self, drm_format_modifier: u64) -> Self {
        self.value.drm_format_modifier = drm_format_modifier;
        self
    }

    #[inline]
    pub fn plane_layouts(
        mut self,
        plane_layouts: &'b [impl Cast<Target = SubresourceLayout>],
    ) -> Self {
        self.value.drm_format_modifier_plane_count = plane_layouts.len() as u32;
        self.value.plane_layouts = plane_layouts.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> ImageDrmFormatModifierExplicitCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for ImageDrmFormatModifierExplicitCreateInfoEXTBuilder<'b> {
    type Target = ImageDrmFormatModifierExplicitCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageDrmFormatModifierExplicitCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageDrmFormatModifierExplicitCreateInfoEXTBuilder<'b> {
    type Target = ImageDrmFormatModifierExplicitCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageDrmFormatModifierListCreateInfoEXT {
    type Target = ImageDrmFormatModifierListCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageDrmFormatModifierListCreateInfoEXT {
    type Builder = ImageDrmFormatModifierListCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`ImageDrmFormatModifierListCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageDrmFormatModifierListCreateInfoEXTBuilder<'b> {
    value: ImageDrmFormatModifierListCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageDrmFormatModifierListCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn drm_format_modifiers(mut self, drm_format_modifiers: &'b [u64]) -> Self {
        self.value.drm_format_modifier_count = drm_format_modifiers.len() as u32;
        self.value.drm_format_modifiers = drm_format_modifiers.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> ImageDrmFormatModifierListCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for ImageDrmFormatModifierListCreateInfoEXTBuilder<'b> {
    type Target = ImageDrmFormatModifierListCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageDrmFormatModifierListCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageDrmFormatModifierListCreateInfoEXTBuilder<'b> {
    type Target = ImageDrmFormatModifierListCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageDrmFormatModifierPropertiesEXT {
    type Target = ImageDrmFormatModifierPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageDrmFormatModifierPropertiesEXT {
    type Builder = ImageDrmFormatModifierPropertiesEXTBuilder;
}

/// A builder for a [`ImageDrmFormatModifierPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageDrmFormatModifierPropertiesEXTBuilder {
    value: ImageDrmFormatModifierPropertiesEXT,
}

impl ImageDrmFormatModifierPropertiesEXTBuilder {
    #[inline]
    pub fn drm_format_modifier(mut self, drm_format_modifier: u64) -> Self {
        self.value.drm_format_modifier = drm_format_modifier;
        self
    }

    #[inline]
    pub fn build(self) -> ImageDrmFormatModifierPropertiesEXT {
        self.value
    }
}

impl ops::Deref for ImageDrmFormatModifierPropertiesEXTBuilder {
    type Target = ImageDrmFormatModifierPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageDrmFormatModifierPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageDrmFormatModifierPropertiesEXTBuilder {
    type Target = ImageDrmFormatModifierPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageFormatConstraintsInfoFUCHSIA {
    type Target = ImageFormatConstraintsInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageFormatConstraintsInfoFUCHSIA {
    type Builder = ImageFormatConstraintsInfoFUCHSIABuilder<'b>;
}

/// A builder for a [`ImageFormatConstraintsInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageFormatConstraintsInfoFUCHSIABuilder<'b> {
    value: ImageFormatConstraintsInfoFUCHSIA,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageFormatConstraintsInfoFUCHSIABuilder<'b> {
    #[inline]
    pub fn image_create_info(
        mut self,
        image_create_info: impl Cast<Target = ImageCreateInfo>,
    ) -> Self {
        self.value.image_create_info = image_create_info.into();
        self
    }

    #[inline]
    pub fn required_format_features(
        mut self,
        required_format_features: FormatFeatureFlags,
    ) -> Self {
        self.value.required_format_features = required_format_features;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: ImageFormatConstraintsFlagsFUCHSIA) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn sysmem_pixel_format(mut self, sysmem_pixel_format: u64) -> Self {
        self.value.sysmem_pixel_format = sysmem_pixel_format;
        self
    }

    #[inline]
    pub fn color_spaces(
        mut self,
        color_spaces: &'b [impl Cast<Target = SysmemColorSpaceFUCHSIA>],
    ) -> Self {
        self.value.color_space_count = color_spaces.len() as u32;
        self.value.color_spaces = color_spaces.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> ImageFormatConstraintsInfoFUCHSIA {
        self.value
    }
}

impl<'b> ops::Deref for ImageFormatConstraintsInfoFUCHSIABuilder<'b> {
    type Target = ImageFormatConstraintsInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageFormatConstraintsInfoFUCHSIABuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageFormatConstraintsInfoFUCHSIABuilder<'b> {
    type Target = ImageFormatConstraintsInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageFormatListCreateInfo {
    type Target = ImageFormatListCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageFormatListCreateInfo {
    type Builder = ImageFormatListCreateInfoBuilder<'b>;
}

/// A builder for a [`ImageFormatListCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageFormatListCreateInfoBuilder<'b> {
    value: ImageFormatListCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageFormatListCreateInfoBuilder<'b> {
    #[inline]
    pub fn view_formats(mut self, view_formats: &'b [Format]) -> Self {
        self.value.view_format_count = view_formats.len() as u32;
        self.value.view_formats = view_formats.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> ImageFormatListCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for ImageFormatListCreateInfoBuilder<'b> {
    type Target = ImageFormatListCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageFormatListCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageFormatListCreateInfoBuilder<'b> {
    type Target = ImageFormatListCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageFormatProperties {
    type Target = ImageFormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageFormatProperties {
    type Builder = ImageFormatPropertiesBuilder;
}

/// A builder for a [`ImageFormatProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageFormatPropertiesBuilder {
    value: ImageFormatProperties,
}

impl ImageFormatPropertiesBuilder {
    #[inline]
    pub fn max_extent(mut self, max_extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.max_extent = max_extent.into();
        self
    }

    #[inline]
    pub fn max_mip_levels(mut self, max_mip_levels: u32) -> Self {
        self.value.max_mip_levels = max_mip_levels;
        self
    }

    #[inline]
    pub fn max_array_layers(mut self, max_array_layers: u32) -> Self {
        self.value.max_array_layers = max_array_layers;
        self
    }

    #[inline]
    pub fn sample_counts(mut self, sample_counts: SampleCountFlags) -> Self {
        self.value.sample_counts = sample_counts;
        self
    }

    #[inline]
    pub fn max_resource_size(mut self, max_resource_size: DeviceSize) -> Self {
        self.value.max_resource_size = max_resource_size;
        self
    }

    #[inline]
    pub fn build(self) -> ImageFormatProperties {
        self.value
    }
}

impl ops::Deref for ImageFormatPropertiesBuilder {
    type Target = ImageFormatProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageFormatPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageFormatPropertiesBuilder {
    type Target = ImageFormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ImageFormatProperties2`].
pub unsafe trait ExtendsImageFormatProperties2: fmt::Debug {}
unsafe impl ExtendsImageFormatProperties2 for AndroidHardwareBufferUsageANDROID {}
unsafe impl ExtendsImageFormatProperties2 for ExternalImageFormatProperties {}
unsafe impl ExtendsImageFormatProperties2 for FilterCubicImageViewImageFormatPropertiesEXT {}
unsafe impl ExtendsImageFormatProperties2 for HostImageCopyDevicePerformanceQueryEXT {}
unsafe impl ExtendsImageFormatProperties2 for ImageCompressionPropertiesEXT {}
unsafe impl ExtendsImageFormatProperties2 for SamplerYcbcrConversionImageFormatProperties {}
unsafe impl ExtendsImageFormatProperties2 for TextureLODGatherFormatPropertiesAMD {}

unsafe impl Cast for ImageFormatProperties2 {
    type Target = ImageFormatProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageFormatProperties2 {
    type Builder = ImageFormatProperties2Builder<'b>;
}

/// A builder for a [`ImageFormatProperties2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageFormatProperties2Builder<'b> {
    value: ImageFormatProperties2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageFormatProperties2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsImageFormatProperties2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn image_format_properties(
        mut self,
        image_format_properties: impl Cast<Target = ImageFormatProperties>,
    ) -> Self {
        self.value.image_format_properties = image_format_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageFormatProperties2 {
        self.value
    }
}

impl<'b> ops::Deref for ImageFormatProperties2Builder<'b> {
    type Target = ImageFormatProperties2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageFormatProperties2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageFormatProperties2Builder<'b> {
    type Target = ImageFormatProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ImageMemoryBarrier`].
pub unsafe trait ExtendsImageMemoryBarrier: fmt::Debug {}
unsafe impl ExtendsImageMemoryBarrier for ExternalMemoryAcquireUnmodifiedEXT {}
unsafe impl ExtendsImageMemoryBarrier for SampleLocationsInfoEXT {}

unsafe impl Cast for ImageMemoryBarrier {
    type Target = ImageMemoryBarrier;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageMemoryBarrier {
    type Builder = ImageMemoryBarrierBuilder<'b>;
}

/// A builder for a [`ImageMemoryBarrier`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageMemoryBarrierBuilder<'b> {
    value: ImageMemoryBarrier,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageMemoryBarrierBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsImageMemoryBarrier,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn src_access_mask(mut self, src_access_mask: AccessFlags) -> Self {
        self.value.src_access_mask = src_access_mask;
        self
    }

    #[inline]
    pub fn dst_access_mask(mut self, dst_access_mask: AccessFlags) -> Self {
        self.value.dst_access_mask = dst_access_mask;
        self
    }

    #[inline]
    pub fn old_layout(mut self, old_layout: ImageLayout) -> Self {
        self.value.old_layout = old_layout;
        self
    }

    #[inline]
    pub fn new_layout(mut self, new_layout: ImageLayout) -> Self {
        self.value.new_layout = new_layout;
        self
    }

    #[inline]
    pub fn src_queue_family_index(mut self, src_queue_family_index: u32) -> Self {
        self.value.src_queue_family_index = src_queue_family_index;
        self
    }

    #[inline]
    pub fn dst_queue_family_index(mut self, dst_queue_family_index: u32) -> Self {
        self.value.dst_queue_family_index = dst_queue_family_index;
        self
    }

    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn subresource_range(
        mut self,
        subresource_range: impl Cast<Target = ImageSubresourceRange>,
    ) -> Self {
        self.value.subresource_range = subresource_range.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageMemoryBarrier {
        self.value
    }
}

impl<'b> ops::Deref for ImageMemoryBarrierBuilder<'b> {
    type Target = ImageMemoryBarrier;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageMemoryBarrierBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageMemoryBarrierBuilder<'b> {
    type Target = ImageMemoryBarrier;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ImageMemoryBarrier2`].
pub unsafe trait ExtendsImageMemoryBarrier2: fmt::Debug {}
unsafe impl ExtendsImageMemoryBarrier2 for ExternalMemoryAcquireUnmodifiedEXT {}
unsafe impl ExtendsImageMemoryBarrier2 for SampleLocationsInfoEXT {}

unsafe impl Cast for ImageMemoryBarrier2 {
    type Target = ImageMemoryBarrier2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageMemoryBarrier2 {
    type Builder = ImageMemoryBarrier2Builder<'b>;
}

/// A builder for a [`ImageMemoryBarrier2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageMemoryBarrier2Builder<'b> {
    value: ImageMemoryBarrier2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageMemoryBarrier2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsImageMemoryBarrier2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn src_stage_mask(mut self, src_stage_mask: PipelineStageFlags2) -> Self {
        self.value.src_stage_mask = src_stage_mask;
        self
    }

    #[inline]
    pub fn src_access_mask(mut self, src_access_mask: AccessFlags2) -> Self {
        self.value.src_access_mask = src_access_mask;
        self
    }

    #[inline]
    pub fn dst_stage_mask(mut self, dst_stage_mask: PipelineStageFlags2) -> Self {
        self.value.dst_stage_mask = dst_stage_mask;
        self
    }

    #[inline]
    pub fn dst_access_mask(mut self, dst_access_mask: AccessFlags2) -> Self {
        self.value.dst_access_mask = dst_access_mask;
        self
    }

    #[inline]
    pub fn old_layout(mut self, old_layout: ImageLayout) -> Self {
        self.value.old_layout = old_layout;
        self
    }

    #[inline]
    pub fn new_layout(mut self, new_layout: ImageLayout) -> Self {
        self.value.new_layout = new_layout;
        self
    }

    #[inline]
    pub fn src_queue_family_index(mut self, src_queue_family_index: u32) -> Self {
        self.value.src_queue_family_index = src_queue_family_index;
        self
    }

    #[inline]
    pub fn dst_queue_family_index(mut self, dst_queue_family_index: u32) -> Self {
        self.value.dst_queue_family_index = dst_queue_family_index;
        self
    }

    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn subresource_range(
        mut self,
        subresource_range: impl Cast<Target = ImageSubresourceRange>,
    ) -> Self {
        self.value.subresource_range = subresource_range.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageMemoryBarrier2 {
        self.value
    }
}

impl<'b> ops::Deref for ImageMemoryBarrier2Builder<'b> {
    type Target = ImageMemoryBarrier2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageMemoryBarrier2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageMemoryBarrier2Builder<'b> {
    type Target = ImageMemoryBarrier2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ImageMemoryRequirementsInfo2`].
pub unsafe trait ExtendsImageMemoryRequirementsInfo2: fmt::Debug {}
unsafe impl ExtendsImageMemoryRequirementsInfo2 for ImagePlaneMemoryRequirementsInfo {}

unsafe impl Cast for ImageMemoryRequirementsInfo2 {
    type Target = ImageMemoryRequirementsInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageMemoryRequirementsInfo2 {
    type Builder = ImageMemoryRequirementsInfo2Builder<'b>;
}

/// A builder for a [`ImageMemoryRequirementsInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageMemoryRequirementsInfo2Builder<'b> {
    value: ImageMemoryRequirementsInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageMemoryRequirementsInfo2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsImageMemoryRequirementsInfo2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn build(self) -> ImageMemoryRequirementsInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for ImageMemoryRequirementsInfo2Builder<'b> {
    type Target = ImageMemoryRequirementsInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageMemoryRequirementsInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageMemoryRequirementsInfo2Builder<'b> {
    type Target = ImageMemoryRequirementsInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImagePipeSurfaceCreateInfoFUCHSIA {
    type Target = ImagePipeSurfaceCreateInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImagePipeSurfaceCreateInfoFUCHSIA {
    type Builder = ImagePipeSurfaceCreateInfoFUCHSIABuilder;
}

/// A builder for a [`ImagePipeSurfaceCreateInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImagePipeSurfaceCreateInfoFUCHSIABuilder {
    value: ImagePipeSurfaceCreateInfoFUCHSIA,
}

impl ImagePipeSurfaceCreateInfoFUCHSIABuilder {
    #[inline]
    pub fn flags(mut self, flags: ImagePipeSurfaceCreateFlagsFUCHSIA) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn image_pipe_handle(mut self, image_pipe_handle: zx_handle_t) -> Self {
        self.value.image_pipe_handle = image_pipe_handle;
        self
    }

    #[inline]
    pub fn build(self) -> ImagePipeSurfaceCreateInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for ImagePipeSurfaceCreateInfoFUCHSIABuilder {
    type Target = ImagePipeSurfaceCreateInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImagePipeSurfaceCreateInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImagePipeSurfaceCreateInfoFUCHSIABuilder {
    type Target = ImagePipeSurfaceCreateInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImagePlaneMemoryRequirementsInfo {
    type Target = ImagePlaneMemoryRequirementsInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImagePlaneMemoryRequirementsInfo {
    type Builder = ImagePlaneMemoryRequirementsInfoBuilder;
}

/// A builder for a [`ImagePlaneMemoryRequirementsInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImagePlaneMemoryRequirementsInfoBuilder {
    value: ImagePlaneMemoryRequirementsInfo,
}

impl ImagePlaneMemoryRequirementsInfoBuilder {
    #[inline]
    pub fn plane_aspect(mut self, plane_aspect: ImageAspectFlags) -> Self {
        self.value.plane_aspect = plane_aspect;
        self
    }

    #[inline]
    pub fn build(self) -> ImagePlaneMemoryRequirementsInfo {
        self.value
    }
}

impl ops::Deref for ImagePlaneMemoryRequirementsInfoBuilder {
    type Target = ImagePlaneMemoryRequirementsInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImagePlaneMemoryRequirementsInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImagePlaneMemoryRequirementsInfoBuilder {
    type Target = ImagePlaneMemoryRequirementsInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageResolve {
    type Target = ImageResolve;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageResolve {
    type Builder = ImageResolveBuilder;
}

/// A builder for a [`ImageResolve`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageResolveBuilder {
    value: ImageResolve,
}

impl ImageResolveBuilder {
    #[inline]
    pub fn src_subresource(
        mut self,
        src_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.src_subresource = src_subresource.into();
        self
    }

    #[inline]
    pub fn src_offset(mut self, src_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.src_offset = src_offset.into();
        self
    }

    #[inline]
    pub fn dst_subresource(
        mut self,
        dst_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.dst_subresource = dst_subresource.into();
        self
    }

    #[inline]
    pub fn dst_offset(mut self, dst_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.dst_offset = dst_offset.into();
        self
    }

    #[inline]
    pub fn extent(mut self, extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.extent = extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageResolve {
        self.value
    }
}

impl ops::Deref for ImageResolveBuilder {
    type Target = ImageResolve;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageResolveBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageResolveBuilder {
    type Target = ImageResolve;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageResolve2 {
    type Target = ImageResolve2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageResolve2 {
    type Builder = ImageResolve2Builder;
}

/// A builder for a [`ImageResolve2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageResolve2Builder {
    value: ImageResolve2,
}

impl ImageResolve2Builder {
    #[inline]
    pub fn src_subresource(
        mut self,
        src_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.src_subresource = src_subresource.into();
        self
    }

    #[inline]
    pub fn src_offset(mut self, src_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.src_offset = src_offset.into();
        self
    }

    #[inline]
    pub fn dst_subresource(
        mut self,
        dst_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.dst_subresource = dst_subresource.into();
        self
    }

    #[inline]
    pub fn dst_offset(mut self, dst_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.dst_offset = dst_offset.into();
        self
    }

    #[inline]
    pub fn extent(mut self, extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.extent = extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageResolve2 {
        self.value
    }
}

impl ops::Deref for ImageResolve2Builder {
    type Target = ImageResolve2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageResolve2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageResolve2Builder {
    type Target = ImageResolve2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageSparseMemoryRequirementsInfo2 {
    type Target = ImageSparseMemoryRequirementsInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageSparseMemoryRequirementsInfo2 {
    type Builder = ImageSparseMemoryRequirementsInfo2Builder;
}

/// A builder for a [`ImageSparseMemoryRequirementsInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageSparseMemoryRequirementsInfo2Builder {
    value: ImageSparseMemoryRequirementsInfo2,
}

impl ImageSparseMemoryRequirementsInfo2Builder {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn build(self) -> ImageSparseMemoryRequirementsInfo2 {
        self.value
    }
}

impl ops::Deref for ImageSparseMemoryRequirementsInfo2Builder {
    type Target = ImageSparseMemoryRequirementsInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageSparseMemoryRequirementsInfo2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageSparseMemoryRequirementsInfo2Builder {
    type Target = ImageSparseMemoryRequirementsInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageStencilUsageCreateInfo {
    type Target = ImageStencilUsageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageStencilUsageCreateInfo {
    type Builder = ImageStencilUsageCreateInfoBuilder;
}

/// A builder for a [`ImageStencilUsageCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageStencilUsageCreateInfoBuilder {
    value: ImageStencilUsageCreateInfo,
}

impl ImageStencilUsageCreateInfoBuilder {
    #[inline]
    pub fn stencil_usage(mut self, stencil_usage: ImageUsageFlags) -> Self {
        self.value.stencil_usage = stencil_usage;
        self
    }

    #[inline]
    pub fn build(self) -> ImageStencilUsageCreateInfo {
        self.value
    }
}

impl ops::Deref for ImageStencilUsageCreateInfoBuilder {
    type Target = ImageStencilUsageCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageStencilUsageCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageStencilUsageCreateInfoBuilder {
    type Target = ImageStencilUsageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageSubresource {
    type Target = ImageSubresource;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageSubresource {
    type Builder = ImageSubresourceBuilder;
}

/// A builder for a [`ImageSubresource`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageSubresourceBuilder {
    value: ImageSubresource,
}

impl ImageSubresourceBuilder {
    #[inline]
    pub fn aspect_mask(mut self, aspect_mask: ImageAspectFlags) -> Self {
        self.value.aspect_mask = aspect_mask;
        self
    }

    #[inline]
    pub fn mip_level(mut self, mip_level: u32) -> Self {
        self.value.mip_level = mip_level;
        self
    }

    #[inline]
    pub fn array_layer(mut self, array_layer: u32) -> Self {
        self.value.array_layer = array_layer;
        self
    }

    #[inline]
    pub fn build(self) -> ImageSubresource {
        self.value
    }
}

impl ops::Deref for ImageSubresourceBuilder {
    type Target = ImageSubresource;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageSubresourceBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageSubresourceBuilder {
    type Target = ImageSubresource;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageSubresource2KHR {
    type Target = ImageSubresource2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageSubresource2KHR {
    type Builder = ImageSubresource2KHRBuilder;
}

/// A builder for a [`ImageSubresource2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageSubresource2KHRBuilder {
    value: ImageSubresource2KHR,
}

impl ImageSubresource2KHRBuilder {
    #[inline]
    pub fn image_subresource(
        mut self,
        image_subresource: impl Cast<Target = ImageSubresource>,
    ) -> Self {
        self.value.image_subresource = image_subresource.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageSubresource2KHR {
        self.value
    }
}

impl ops::Deref for ImageSubresource2KHRBuilder {
    type Target = ImageSubresource2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageSubresource2KHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageSubresource2KHRBuilder {
    type Target = ImageSubresource2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageSubresourceLayers {
    type Target = ImageSubresourceLayers;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageSubresourceLayers {
    type Builder = ImageSubresourceLayersBuilder;
}

/// A builder for a [`ImageSubresourceLayers`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageSubresourceLayersBuilder {
    value: ImageSubresourceLayers,
}

impl ImageSubresourceLayersBuilder {
    #[inline]
    pub fn aspect_mask(mut self, aspect_mask: ImageAspectFlags) -> Self {
        self.value.aspect_mask = aspect_mask;
        self
    }

    #[inline]
    pub fn mip_level(mut self, mip_level: u32) -> Self {
        self.value.mip_level = mip_level;
        self
    }

    #[inline]
    pub fn base_array_layer(mut self, base_array_layer: u32) -> Self {
        self.value.base_array_layer = base_array_layer;
        self
    }

    #[inline]
    pub fn layer_count(mut self, layer_count: u32) -> Self {
        self.value.layer_count = layer_count;
        self
    }

    #[inline]
    pub fn build(self) -> ImageSubresourceLayers {
        self.value
    }
}

impl ops::Deref for ImageSubresourceLayersBuilder {
    type Target = ImageSubresourceLayers;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageSubresourceLayersBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageSubresourceLayersBuilder {
    type Target = ImageSubresourceLayers;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageSubresourceRange {
    type Target = ImageSubresourceRange;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageSubresourceRange {
    type Builder = ImageSubresourceRangeBuilder;
}

/// A builder for a [`ImageSubresourceRange`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageSubresourceRangeBuilder {
    value: ImageSubresourceRange,
}

impl ImageSubresourceRangeBuilder {
    #[inline]
    pub fn aspect_mask(mut self, aspect_mask: ImageAspectFlags) -> Self {
        self.value.aspect_mask = aspect_mask;
        self
    }

    #[inline]
    pub fn base_mip_level(mut self, base_mip_level: u32) -> Self {
        self.value.base_mip_level = base_mip_level;
        self
    }

    #[inline]
    pub fn level_count(mut self, level_count: u32) -> Self {
        self.value.level_count = level_count;
        self
    }

    #[inline]
    pub fn base_array_layer(mut self, base_array_layer: u32) -> Self {
        self.value.base_array_layer = base_array_layer;
        self
    }

    #[inline]
    pub fn layer_count(mut self, layer_count: u32) -> Self {
        self.value.layer_count = layer_count;
        self
    }

    #[inline]
    pub fn build(self) -> ImageSubresourceRange {
        self.value
    }
}

impl ops::Deref for ImageSubresourceRangeBuilder {
    type Target = ImageSubresourceRange;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageSubresourceRangeBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageSubresourceRangeBuilder {
    type Target = ImageSubresourceRange;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageSwapchainCreateInfoKHR {
    type Target = ImageSwapchainCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageSwapchainCreateInfoKHR {
    type Builder = ImageSwapchainCreateInfoKHRBuilder;
}

/// A builder for a [`ImageSwapchainCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageSwapchainCreateInfoKHRBuilder {
    value: ImageSwapchainCreateInfoKHR,
}

impl ImageSwapchainCreateInfoKHRBuilder {
    #[inline]
    pub fn swapchain(mut self, swapchain: SwapchainKHR) -> Self {
        self.value.swapchain = swapchain;
        self
    }

    #[inline]
    pub fn build(self) -> ImageSwapchainCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for ImageSwapchainCreateInfoKHRBuilder {
    type Target = ImageSwapchainCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageSwapchainCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageSwapchainCreateInfoKHRBuilder {
    type Target = ImageSwapchainCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageToMemoryCopyEXT {
    type Target = ImageToMemoryCopyEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageToMemoryCopyEXT {
    type Builder = ImageToMemoryCopyEXTBuilder<'b>;
}

/// A builder for a [`ImageToMemoryCopyEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageToMemoryCopyEXTBuilder<'b> {
    value: ImageToMemoryCopyEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageToMemoryCopyEXTBuilder<'b> {
    #[inline]
    pub fn host_pointer<T>(mut self, host_pointer: &'b mut T) -> Self {
        self.value.host_pointer = (host_pointer as *mut T).cast();
        self
    }

    #[inline]
    pub fn memory_row_length(mut self, memory_row_length: u32) -> Self {
        self.value.memory_row_length = memory_row_length;
        self
    }

    #[inline]
    pub fn memory_image_height(mut self, memory_image_height: u32) -> Self {
        self.value.memory_image_height = memory_image_height;
        self
    }

    #[inline]
    pub fn image_subresource(
        mut self,
        image_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.image_subresource = image_subresource.into();
        self
    }

    #[inline]
    pub fn image_offset(mut self, image_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.image_offset = image_offset.into();
        self
    }

    #[inline]
    pub fn image_extent(mut self, image_extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.image_extent = image_extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageToMemoryCopyEXT {
        self.value
    }
}

impl<'b> ops::Deref for ImageToMemoryCopyEXTBuilder<'b> {
    type Target = ImageToMemoryCopyEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageToMemoryCopyEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageToMemoryCopyEXTBuilder<'b> {
    type Target = ImageToMemoryCopyEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageViewASTCDecodeModeEXT {
    type Target = ImageViewASTCDecodeModeEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageViewASTCDecodeModeEXT {
    type Builder = ImageViewASTCDecodeModeEXTBuilder;
}

/// A builder for a [`ImageViewASTCDecodeModeEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewASTCDecodeModeEXTBuilder {
    value: ImageViewASTCDecodeModeEXT,
}

impl ImageViewASTCDecodeModeEXTBuilder {
    #[inline]
    pub fn decode_mode(mut self, decode_mode: Format) -> Self {
        self.value.decode_mode = decode_mode;
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewASTCDecodeModeEXT {
        self.value
    }
}

impl ops::Deref for ImageViewASTCDecodeModeEXTBuilder {
    type Target = ImageViewASTCDecodeModeEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageViewASTCDecodeModeEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageViewASTCDecodeModeEXTBuilder {
    type Target = ImageViewASTCDecodeModeEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageViewAddressPropertiesNVX {
    type Target = ImageViewAddressPropertiesNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageViewAddressPropertiesNVX {
    type Builder = ImageViewAddressPropertiesNVXBuilder;
}

/// A builder for a [`ImageViewAddressPropertiesNVX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewAddressPropertiesNVXBuilder {
    value: ImageViewAddressPropertiesNVX,
}

impl ImageViewAddressPropertiesNVXBuilder {
    #[inline]
    pub fn device_address(mut self, device_address: DeviceAddress) -> Self {
        self.value.device_address = device_address;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewAddressPropertiesNVX {
        self.value
    }
}

impl ops::Deref for ImageViewAddressPropertiesNVXBuilder {
    type Target = ImageViewAddressPropertiesNVX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageViewAddressPropertiesNVXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageViewAddressPropertiesNVXBuilder {
    type Target = ImageViewAddressPropertiesNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageViewCaptureDescriptorDataInfoEXT {
    type Target = ImageViewCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageViewCaptureDescriptorDataInfoEXT {
    type Builder = ImageViewCaptureDescriptorDataInfoEXTBuilder;
}

/// A builder for a [`ImageViewCaptureDescriptorDataInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewCaptureDescriptorDataInfoEXTBuilder {
    value: ImageViewCaptureDescriptorDataInfoEXT,
}

impl ImageViewCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    pub fn image_view(mut self, image_view: ImageView) -> Self {
        self.value.image_view = image_view;
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewCaptureDescriptorDataInfoEXT {
        self.value
    }
}

impl ops::Deref for ImageViewCaptureDescriptorDataInfoEXTBuilder {
    type Target = ImageViewCaptureDescriptorDataInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageViewCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageViewCaptureDescriptorDataInfoEXTBuilder {
    type Target = ImageViewCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ImageViewCreateInfo`].
pub unsafe trait ExtendsImageViewCreateInfo: fmt::Debug {}
unsafe impl ExtendsImageViewCreateInfo for ExportMetalObjectCreateInfoEXT {}
unsafe impl ExtendsImageViewCreateInfo for ImageViewASTCDecodeModeEXT {}
unsafe impl ExtendsImageViewCreateInfo for ImageViewMinLodCreateInfoEXT {}
unsafe impl ExtendsImageViewCreateInfo for ImageViewSampleWeightCreateInfoQCOM {}
unsafe impl ExtendsImageViewCreateInfo for ImageViewSlicedCreateInfoEXT {}
unsafe impl ExtendsImageViewCreateInfo for ImageViewUsageCreateInfo {}
unsafe impl ExtendsImageViewCreateInfo for OpaqueCaptureDescriptorDataCreateInfoEXT {}
unsafe impl ExtendsImageViewCreateInfo for SamplerYcbcrConversionInfo {}

unsafe impl Cast for ImageViewCreateInfo {
    type Target = ImageViewCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImageViewCreateInfo {
    type Builder = ImageViewCreateInfoBuilder<'b>;
}

/// A builder for a [`ImageViewCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewCreateInfoBuilder<'b> {
    value: ImageViewCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImageViewCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsImageViewCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: ImageViewCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn view_type(mut self, view_type: ImageViewType) -> Self {
        self.value.view_type = view_type;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn components(mut self, components: impl Cast<Target = ComponentMapping>) -> Self {
        self.value.components = components.into();
        self
    }

    #[inline]
    pub fn subresource_range(
        mut self,
        subresource_range: impl Cast<Target = ImageSubresourceRange>,
    ) -> Self {
        self.value.subresource_range = subresource_range.into();
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for ImageViewCreateInfoBuilder<'b> {
    type Target = ImageViewCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImageViewCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImageViewCreateInfoBuilder<'b> {
    type Target = ImageViewCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageViewHandleInfoNVX {
    type Target = ImageViewHandleInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageViewHandleInfoNVX {
    type Builder = ImageViewHandleInfoNVXBuilder;
}

/// A builder for a [`ImageViewHandleInfoNVX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewHandleInfoNVXBuilder {
    value: ImageViewHandleInfoNVX,
}

impl ImageViewHandleInfoNVXBuilder {
    #[inline]
    pub fn image_view(mut self, image_view: ImageView) -> Self {
        self.value.image_view = image_view;
        self
    }

    #[inline]
    pub fn descriptor_type(mut self, descriptor_type: DescriptorType) -> Self {
        self.value.descriptor_type = descriptor_type;
        self
    }

    #[inline]
    pub fn sampler(mut self, sampler: Sampler) -> Self {
        self.value.sampler = sampler;
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewHandleInfoNVX {
        self.value
    }
}

impl ops::Deref for ImageViewHandleInfoNVXBuilder {
    type Target = ImageViewHandleInfoNVX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageViewHandleInfoNVXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageViewHandleInfoNVXBuilder {
    type Target = ImageViewHandleInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageViewMinLodCreateInfoEXT {
    type Target = ImageViewMinLodCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageViewMinLodCreateInfoEXT {
    type Builder = ImageViewMinLodCreateInfoEXTBuilder;
}

/// A builder for a [`ImageViewMinLodCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewMinLodCreateInfoEXTBuilder {
    value: ImageViewMinLodCreateInfoEXT,
}

impl ImageViewMinLodCreateInfoEXTBuilder {
    #[inline]
    pub fn min_lod(mut self, min_lod: f32) -> Self {
        self.value.min_lod = min_lod;
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewMinLodCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for ImageViewMinLodCreateInfoEXTBuilder {
    type Target = ImageViewMinLodCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageViewMinLodCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageViewMinLodCreateInfoEXTBuilder {
    type Target = ImageViewMinLodCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageViewSampleWeightCreateInfoQCOM {
    type Target = ImageViewSampleWeightCreateInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageViewSampleWeightCreateInfoQCOM {
    type Builder = ImageViewSampleWeightCreateInfoQCOMBuilder;
}

/// A builder for a [`ImageViewSampleWeightCreateInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewSampleWeightCreateInfoQCOMBuilder {
    value: ImageViewSampleWeightCreateInfoQCOM,
}

impl ImageViewSampleWeightCreateInfoQCOMBuilder {
    #[inline]
    pub fn filter_center(mut self, filter_center: impl Cast<Target = Offset2D>) -> Self {
        self.value.filter_center = filter_center.into();
        self
    }

    #[inline]
    pub fn filter_size(mut self, filter_size: impl Cast<Target = Extent2D>) -> Self {
        self.value.filter_size = filter_size.into();
        self
    }

    #[inline]
    pub fn num_phases(mut self, num_phases: u32) -> Self {
        self.value.num_phases = num_phases;
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewSampleWeightCreateInfoQCOM {
        self.value
    }
}

impl ops::Deref for ImageViewSampleWeightCreateInfoQCOMBuilder {
    type Target = ImageViewSampleWeightCreateInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageViewSampleWeightCreateInfoQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageViewSampleWeightCreateInfoQCOMBuilder {
    type Target = ImageViewSampleWeightCreateInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageViewSlicedCreateInfoEXT {
    type Target = ImageViewSlicedCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageViewSlicedCreateInfoEXT {
    type Builder = ImageViewSlicedCreateInfoEXTBuilder;
}

/// A builder for a [`ImageViewSlicedCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewSlicedCreateInfoEXTBuilder {
    value: ImageViewSlicedCreateInfoEXT,
}

impl ImageViewSlicedCreateInfoEXTBuilder {
    #[inline]
    pub fn slice_offset(mut self, slice_offset: u32) -> Self {
        self.value.slice_offset = slice_offset;
        self
    }

    #[inline]
    pub fn slice_count(mut self, slice_count: u32) -> Self {
        self.value.slice_count = slice_count;
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewSlicedCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for ImageViewSlicedCreateInfoEXTBuilder {
    type Target = ImageViewSlicedCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageViewSlicedCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageViewSlicedCreateInfoEXTBuilder {
    type Target = ImageViewSlicedCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImageViewUsageCreateInfo {
    type Target = ImageViewUsageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImageViewUsageCreateInfo {
    type Builder = ImageViewUsageCreateInfoBuilder;
}

/// A builder for a [`ImageViewUsageCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImageViewUsageCreateInfoBuilder {
    value: ImageViewUsageCreateInfo,
}

impl ImageViewUsageCreateInfoBuilder {
    #[inline]
    pub fn usage(mut self, usage: ImageUsageFlags) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn build(self) -> ImageViewUsageCreateInfo {
        self.value
    }
}

impl ops::Deref for ImageViewUsageCreateInfoBuilder {
    type Target = ImageViewUsageCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImageViewUsageCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImageViewUsageCreateInfoBuilder {
    type Target = ImageViewUsageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportAndroidHardwareBufferInfoANDROID {
    type Target = ImportAndroidHardwareBufferInfoANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImportAndroidHardwareBufferInfoANDROID {
    type Builder = ImportAndroidHardwareBufferInfoANDROIDBuilder<'b>;
}

/// A builder for a [`ImportAndroidHardwareBufferInfoANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportAndroidHardwareBufferInfoANDROIDBuilder<'b> {
    value: ImportAndroidHardwareBufferInfoANDROID,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImportAndroidHardwareBufferInfoANDROIDBuilder<'b> {
    #[inline]
    pub fn buffer(mut self, buffer: *mut AHardwareBuffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn build(self) -> ImportAndroidHardwareBufferInfoANDROID {
        self.value
    }
}

impl<'b> ops::Deref for ImportAndroidHardwareBufferInfoANDROIDBuilder<'b> {
    type Target = ImportAndroidHardwareBufferInfoANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImportAndroidHardwareBufferInfoANDROIDBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImportAndroidHardwareBufferInfoANDROIDBuilder<'b> {
    type Target = ImportAndroidHardwareBufferInfoANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportFenceFdInfoKHR {
    type Target = ImportFenceFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportFenceFdInfoKHR {
    type Builder = ImportFenceFdInfoKHRBuilder;
}

/// A builder for a [`ImportFenceFdInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportFenceFdInfoKHRBuilder {
    value: ImportFenceFdInfoKHR,
}

impl ImportFenceFdInfoKHRBuilder {
    #[inline]
    pub fn fence(mut self, fence: Fence) -> Self {
        self.value.fence = fence;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: FenceImportFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalFenceHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn fd(mut self, fd: c_int) -> Self {
        self.value.fd = fd;
        self
    }

    #[inline]
    pub fn build(self) -> ImportFenceFdInfoKHR {
        self.value
    }
}

impl ops::Deref for ImportFenceFdInfoKHRBuilder {
    type Target = ImportFenceFdInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportFenceFdInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportFenceFdInfoKHRBuilder {
    type Target = ImportFenceFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportFenceSciSyncInfoNV {
    type Target = ImportFenceSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImportFenceSciSyncInfoNV {
    type Builder = ImportFenceSciSyncInfoNVBuilder<'b>;
}

/// A builder for a [`ImportFenceSciSyncInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportFenceSciSyncInfoNVBuilder<'b> {
    value: ImportFenceSciSyncInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImportFenceSciSyncInfoNVBuilder<'b> {
    #[inline]
    pub fn fence(mut self, fence: Fence) -> Self {
        self.value.fence = fence;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalFenceHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn handle<T>(mut self, handle: &'b mut T) -> Self {
        self.value.handle = (handle as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> ImportFenceSciSyncInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for ImportFenceSciSyncInfoNVBuilder<'b> {
    type Target = ImportFenceSciSyncInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImportFenceSciSyncInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImportFenceSciSyncInfoNVBuilder<'b> {
    type Target = ImportFenceSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportFenceWin32HandleInfoKHR {
    type Target = ImportFenceWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportFenceWin32HandleInfoKHR {
    type Builder = ImportFenceWin32HandleInfoKHRBuilder;
}

/// A builder for a [`ImportFenceWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportFenceWin32HandleInfoKHRBuilder {
    value: ImportFenceWin32HandleInfoKHR,
}

impl ImportFenceWin32HandleInfoKHRBuilder {
    #[inline]
    pub fn fence(mut self, fence: Fence) -> Self {
        self.value.fence = fence;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: FenceImportFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalFenceHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn handle(mut self, handle: HANDLE) -> Self {
        self.value.handle = handle;
        self
    }

    #[inline]
    pub fn name(mut self, name: LPCWSTR) -> Self {
        self.value.name = name;
        self
    }

    #[inline]
    pub fn build(self) -> ImportFenceWin32HandleInfoKHR {
        self.value
    }
}

impl ops::Deref for ImportFenceWin32HandleInfoKHRBuilder {
    type Target = ImportFenceWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportFenceWin32HandleInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportFenceWin32HandleInfoKHRBuilder {
    type Target = ImportFenceWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMemoryBufferCollectionFUCHSIA {
    type Target = ImportMemoryBufferCollectionFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMemoryBufferCollectionFUCHSIA {
    type Builder = ImportMemoryBufferCollectionFUCHSIABuilder;
}

/// A builder for a [`ImportMemoryBufferCollectionFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMemoryBufferCollectionFUCHSIABuilder {
    value: ImportMemoryBufferCollectionFUCHSIA,
}

impl ImportMemoryBufferCollectionFUCHSIABuilder {
    #[inline]
    pub fn collection(mut self, collection: BufferCollectionFUCHSIA) -> Self {
        self.value.collection = collection;
        self
    }

    #[inline]
    pub fn index(mut self, index: u32) -> Self {
        self.value.index = index;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMemoryBufferCollectionFUCHSIA {
        self.value
    }
}

impl ops::Deref for ImportMemoryBufferCollectionFUCHSIABuilder {
    type Target = ImportMemoryBufferCollectionFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMemoryBufferCollectionFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMemoryBufferCollectionFUCHSIABuilder {
    type Target = ImportMemoryBufferCollectionFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMemoryFdInfoKHR {
    type Target = ImportMemoryFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMemoryFdInfoKHR {
    type Builder = ImportMemoryFdInfoKHRBuilder;
}

/// A builder for a [`ImportMemoryFdInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMemoryFdInfoKHRBuilder {
    value: ImportMemoryFdInfoKHR,
}

impl ImportMemoryFdInfoKHRBuilder {
    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn fd(mut self, fd: c_int) -> Self {
        self.value.fd = fd;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMemoryFdInfoKHR {
        self.value
    }
}

impl ops::Deref for ImportMemoryFdInfoKHRBuilder {
    type Target = ImportMemoryFdInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMemoryFdInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMemoryFdInfoKHRBuilder {
    type Target = ImportMemoryFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMemoryHostPointerInfoEXT {
    type Target = ImportMemoryHostPointerInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImportMemoryHostPointerInfoEXT {
    type Builder = ImportMemoryHostPointerInfoEXTBuilder<'b>;
}

/// A builder for a [`ImportMemoryHostPointerInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMemoryHostPointerInfoEXTBuilder<'b> {
    value: ImportMemoryHostPointerInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImportMemoryHostPointerInfoEXTBuilder<'b> {
    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn host_pointer<T>(mut self, host_pointer: &'b mut T) -> Self {
        self.value.host_pointer = (host_pointer as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> ImportMemoryHostPointerInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for ImportMemoryHostPointerInfoEXTBuilder<'b> {
    type Target = ImportMemoryHostPointerInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImportMemoryHostPointerInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImportMemoryHostPointerInfoEXTBuilder<'b> {
    type Target = ImportMemoryHostPointerInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMemorySciBufInfoNV {
    type Target = ImportMemorySciBufInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMemorySciBufInfoNV {
    type Builder = ImportMemorySciBufInfoNVBuilder;
}

/// A builder for a [`ImportMemorySciBufInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMemorySciBufInfoNVBuilder {
    value: ImportMemorySciBufInfoNV,
}

impl ImportMemorySciBufInfoNVBuilder {
    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn handle(mut self, handle: NvSciBufObj) -> Self {
        self.value.handle = handle;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMemorySciBufInfoNV {
        self.value
    }
}

impl ops::Deref for ImportMemorySciBufInfoNVBuilder {
    type Target = ImportMemorySciBufInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMemorySciBufInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMemorySciBufInfoNVBuilder {
    type Target = ImportMemorySciBufInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMemoryWin32HandleInfoKHR {
    type Target = ImportMemoryWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMemoryWin32HandleInfoKHR {
    type Builder = ImportMemoryWin32HandleInfoKHRBuilder;
}

/// A builder for a [`ImportMemoryWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMemoryWin32HandleInfoKHRBuilder {
    value: ImportMemoryWin32HandleInfoKHR,
}

impl ImportMemoryWin32HandleInfoKHRBuilder {
    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn handle(mut self, handle: HANDLE) -> Self {
        self.value.handle = handle;
        self
    }

    #[inline]
    pub fn name(mut self, name: LPCWSTR) -> Self {
        self.value.name = name;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMemoryWin32HandleInfoKHR {
        self.value
    }
}

impl ops::Deref for ImportMemoryWin32HandleInfoKHRBuilder {
    type Target = ImportMemoryWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMemoryWin32HandleInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMemoryWin32HandleInfoKHRBuilder {
    type Target = ImportMemoryWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMemoryWin32HandleInfoNV {
    type Target = ImportMemoryWin32HandleInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMemoryWin32HandleInfoNV {
    type Builder = ImportMemoryWin32HandleInfoNVBuilder;
}

/// A builder for a [`ImportMemoryWin32HandleInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMemoryWin32HandleInfoNVBuilder {
    value: ImportMemoryWin32HandleInfoNV,
}

impl ImportMemoryWin32HandleInfoNVBuilder {
    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlagsNV) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn handle(mut self, handle: HANDLE) -> Self {
        self.value.handle = handle;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMemoryWin32HandleInfoNV {
        self.value
    }
}

impl ops::Deref for ImportMemoryWin32HandleInfoNVBuilder {
    type Target = ImportMemoryWin32HandleInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMemoryWin32HandleInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMemoryWin32HandleInfoNVBuilder {
    type Target = ImportMemoryWin32HandleInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMemoryZirconHandleInfoFUCHSIA {
    type Target = ImportMemoryZirconHandleInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMemoryZirconHandleInfoFUCHSIA {
    type Builder = ImportMemoryZirconHandleInfoFUCHSIABuilder;
}

/// A builder for a [`ImportMemoryZirconHandleInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMemoryZirconHandleInfoFUCHSIABuilder {
    value: ImportMemoryZirconHandleInfoFUCHSIA,
}

impl ImportMemoryZirconHandleInfoFUCHSIABuilder {
    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn handle(mut self, handle: zx_handle_t) -> Self {
        self.value.handle = handle;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMemoryZirconHandleInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for ImportMemoryZirconHandleInfoFUCHSIABuilder {
    type Target = ImportMemoryZirconHandleInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMemoryZirconHandleInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMemoryZirconHandleInfoFUCHSIABuilder {
    type Target = ImportMemoryZirconHandleInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMetalBufferInfoEXT {
    type Target = ImportMetalBufferInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMetalBufferInfoEXT {
    type Builder = ImportMetalBufferInfoEXTBuilder;
}

/// A builder for a [`ImportMetalBufferInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMetalBufferInfoEXTBuilder {
    value: ImportMetalBufferInfoEXT,
}

impl ImportMetalBufferInfoEXTBuilder {
    #[inline]
    pub fn mtl_buffer(mut self, mtl_buffer: MTLBuffer_id) -> Self {
        self.value.mtl_buffer = mtl_buffer;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMetalBufferInfoEXT {
        self.value
    }
}

impl ops::Deref for ImportMetalBufferInfoEXTBuilder {
    type Target = ImportMetalBufferInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMetalBufferInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMetalBufferInfoEXTBuilder {
    type Target = ImportMetalBufferInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMetalIOSurfaceInfoEXT {
    type Target = ImportMetalIOSurfaceInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMetalIOSurfaceInfoEXT {
    type Builder = ImportMetalIOSurfaceInfoEXTBuilder;
}

/// A builder for a [`ImportMetalIOSurfaceInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMetalIOSurfaceInfoEXTBuilder {
    value: ImportMetalIOSurfaceInfoEXT,
}

impl ImportMetalIOSurfaceInfoEXTBuilder {
    #[inline]
    pub fn io_surface(mut self, io_surface: IOSurfaceRef) -> Self {
        self.value.io_surface = io_surface;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMetalIOSurfaceInfoEXT {
        self.value
    }
}

impl ops::Deref for ImportMetalIOSurfaceInfoEXTBuilder {
    type Target = ImportMetalIOSurfaceInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMetalIOSurfaceInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMetalIOSurfaceInfoEXTBuilder {
    type Target = ImportMetalIOSurfaceInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMetalSharedEventInfoEXT {
    type Target = ImportMetalSharedEventInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMetalSharedEventInfoEXT {
    type Builder = ImportMetalSharedEventInfoEXTBuilder;
}

/// A builder for a [`ImportMetalSharedEventInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMetalSharedEventInfoEXTBuilder {
    value: ImportMetalSharedEventInfoEXT,
}

impl ImportMetalSharedEventInfoEXTBuilder {
    #[inline]
    pub fn mtl_shared_event(mut self, mtl_shared_event: MTLSharedEvent_id) -> Self {
        self.value.mtl_shared_event = mtl_shared_event;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMetalSharedEventInfoEXT {
        self.value
    }
}

impl ops::Deref for ImportMetalSharedEventInfoEXTBuilder {
    type Target = ImportMetalSharedEventInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMetalSharedEventInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMetalSharedEventInfoEXTBuilder {
    type Target = ImportMetalSharedEventInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportMetalTextureInfoEXT {
    type Target = ImportMetalTextureInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportMetalTextureInfoEXT {
    type Builder = ImportMetalTextureInfoEXTBuilder;
}

/// A builder for a [`ImportMetalTextureInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportMetalTextureInfoEXTBuilder {
    value: ImportMetalTextureInfoEXT,
}

impl ImportMetalTextureInfoEXTBuilder {
    #[inline]
    pub fn plane(mut self, plane: ImageAspectFlags) -> Self {
        self.value.plane = plane;
        self
    }

    #[inline]
    pub fn mtl_texture(mut self, mtl_texture: MTLTexture_id) -> Self {
        self.value.mtl_texture = mtl_texture;
        self
    }

    #[inline]
    pub fn build(self) -> ImportMetalTextureInfoEXT {
        self.value
    }
}

impl ops::Deref for ImportMetalTextureInfoEXTBuilder {
    type Target = ImportMetalTextureInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportMetalTextureInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportMetalTextureInfoEXTBuilder {
    type Target = ImportMetalTextureInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportScreenBufferInfoQNX {
    type Target = ImportScreenBufferInfoQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImportScreenBufferInfoQNX {
    type Builder = ImportScreenBufferInfoQNXBuilder<'b>;
}

/// A builder for a [`ImportScreenBufferInfoQNX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportScreenBufferInfoQNXBuilder<'b> {
    value: ImportScreenBufferInfoQNX,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImportScreenBufferInfoQNXBuilder<'b> {
    #[inline]
    pub fn buffer(mut self, buffer: &'b mut _screen_buffer) -> Self {
        self.value.buffer = buffer as *mut _screen_buffer;
        self
    }

    #[inline]
    pub fn build(self) -> ImportScreenBufferInfoQNX {
        self.value
    }
}

impl<'b> ops::Deref for ImportScreenBufferInfoQNXBuilder<'b> {
    type Target = ImportScreenBufferInfoQNX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImportScreenBufferInfoQNXBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImportScreenBufferInfoQNXBuilder<'b> {
    type Target = ImportScreenBufferInfoQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportSemaphoreFdInfoKHR {
    type Target = ImportSemaphoreFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportSemaphoreFdInfoKHR {
    type Builder = ImportSemaphoreFdInfoKHRBuilder;
}

/// A builder for a [`ImportSemaphoreFdInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportSemaphoreFdInfoKHRBuilder {
    value: ImportSemaphoreFdInfoKHR,
}

impl ImportSemaphoreFdInfoKHRBuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SemaphoreImportFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn fd(mut self, fd: c_int) -> Self {
        self.value.fd = fd;
        self
    }

    #[inline]
    pub fn build(self) -> ImportSemaphoreFdInfoKHR {
        self.value
    }
}

impl ops::Deref for ImportSemaphoreFdInfoKHRBuilder {
    type Target = ImportSemaphoreFdInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportSemaphoreFdInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportSemaphoreFdInfoKHRBuilder {
    type Target = ImportSemaphoreFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportSemaphoreSciSyncInfoNV {
    type Target = ImportSemaphoreSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ImportSemaphoreSciSyncInfoNV {
    type Builder = ImportSemaphoreSciSyncInfoNVBuilder<'b>;
}

/// A builder for a [`ImportSemaphoreSciSyncInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportSemaphoreSciSyncInfoNVBuilder<'b> {
    value: ImportSemaphoreSciSyncInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ImportSemaphoreSciSyncInfoNVBuilder<'b> {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn handle<T>(mut self, handle: &'b mut T) -> Self {
        self.value.handle = (handle as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> ImportSemaphoreSciSyncInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for ImportSemaphoreSciSyncInfoNVBuilder<'b> {
    type Target = ImportSemaphoreSciSyncInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ImportSemaphoreSciSyncInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ImportSemaphoreSciSyncInfoNVBuilder<'b> {
    type Target = ImportSemaphoreSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportSemaphoreWin32HandleInfoKHR {
    type Target = ImportSemaphoreWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportSemaphoreWin32HandleInfoKHR {
    type Builder = ImportSemaphoreWin32HandleInfoKHRBuilder;
}

/// A builder for a [`ImportSemaphoreWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportSemaphoreWin32HandleInfoKHRBuilder {
    value: ImportSemaphoreWin32HandleInfoKHR,
}

impl ImportSemaphoreWin32HandleInfoKHRBuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SemaphoreImportFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn handle(mut self, handle: HANDLE) -> Self {
        self.value.handle = handle;
        self
    }

    #[inline]
    pub fn name(mut self, name: LPCWSTR) -> Self {
        self.value.name = name;
        self
    }

    #[inline]
    pub fn build(self) -> ImportSemaphoreWin32HandleInfoKHR {
        self.value
    }
}

impl ops::Deref for ImportSemaphoreWin32HandleInfoKHRBuilder {
    type Target = ImportSemaphoreWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportSemaphoreWin32HandleInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportSemaphoreWin32HandleInfoKHRBuilder {
    type Target = ImportSemaphoreWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ImportSemaphoreZirconHandleInfoFUCHSIA {
    type Target = ImportSemaphoreZirconHandleInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ImportSemaphoreZirconHandleInfoFUCHSIA {
    type Builder = ImportSemaphoreZirconHandleInfoFUCHSIABuilder;
}

/// A builder for a [`ImportSemaphoreZirconHandleInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ImportSemaphoreZirconHandleInfoFUCHSIABuilder {
    value: ImportSemaphoreZirconHandleInfoFUCHSIA,
}

impl ImportSemaphoreZirconHandleInfoFUCHSIABuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SemaphoreImportFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn zircon_handle(mut self, zircon_handle: zx_handle_t) -> Self {
        self.value.zircon_handle = zircon_handle;
        self
    }

    #[inline]
    pub fn build(self) -> ImportSemaphoreZirconHandleInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for ImportSemaphoreZirconHandleInfoFUCHSIABuilder {
    type Target = ImportSemaphoreZirconHandleInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ImportSemaphoreZirconHandleInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ImportSemaphoreZirconHandleInfoFUCHSIABuilder {
    type Target = ImportSemaphoreZirconHandleInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for IndirectCommandsLayoutCreateInfoNV {
    type Target = IndirectCommandsLayoutCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for IndirectCommandsLayoutCreateInfoNV {
    type Builder = IndirectCommandsLayoutCreateInfoNVBuilder<'b>;
}

/// A builder for a [`IndirectCommandsLayoutCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct IndirectCommandsLayoutCreateInfoNVBuilder<'b> {
    value: IndirectCommandsLayoutCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> IndirectCommandsLayoutCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: IndirectCommandsLayoutUsageFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn pipeline_bind_point(mut self, pipeline_bind_point: PipelineBindPoint) -> Self {
        self.value.pipeline_bind_point = pipeline_bind_point;
        self
    }

    #[inline]
    pub fn tokens(
        mut self,
        tokens: &'b [impl Cast<Target = IndirectCommandsLayoutTokenNV>],
    ) -> Self {
        self.value.token_count = tokens.len() as u32;
        self.value.tokens = tokens.as_ptr().cast();
        self
    }

    #[inline]
    pub fn stream_strides(mut self, stream_strides: &'b [u32]) -> Self {
        self.value.stream_count = stream_strides.len() as u32;
        self.value.stream_strides = stream_strides.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> IndirectCommandsLayoutCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for IndirectCommandsLayoutCreateInfoNVBuilder<'b> {
    type Target = IndirectCommandsLayoutCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for IndirectCommandsLayoutCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for IndirectCommandsLayoutCreateInfoNVBuilder<'b> {
    type Target = IndirectCommandsLayoutCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for IndirectCommandsLayoutTokenNV {
    type Target = IndirectCommandsLayoutTokenNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for IndirectCommandsLayoutTokenNV {
    type Builder = IndirectCommandsLayoutTokenNVBuilder<'b>;
}

/// A builder for a [`IndirectCommandsLayoutTokenNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct IndirectCommandsLayoutTokenNVBuilder<'b> {
    value: IndirectCommandsLayoutTokenNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> IndirectCommandsLayoutTokenNVBuilder<'b> {
    #[inline]
    pub fn token_type(mut self, token_type: IndirectCommandsTokenTypeNV) -> Self {
        self.value.token_type = token_type;
        self
    }

    #[inline]
    pub fn stream(mut self, stream: u32) -> Self {
        self.value.stream = stream;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: u32) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn vertex_binding_unit(mut self, vertex_binding_unit: u32) -> Self {
        self.value.vertex_binding_unit = vertex_binding_unit;
        self
    }

    #[inline]
    pub fn vertex_dynamic_stride(mut self, vertex_dynamic_stride: bool) -> Self {
        self.value.vertex_dynamic_stride = vertex_dynamic_stride as Bool32;
        self
    }

    #[inline]
    pub fn pushconstant_pipeline_layout(
        mut self,
        pushconstant_pipeline_layout: PipelineLayout,
    ) -> Self {
        self.value.pushconstant_pipeline_layout = pushconstant_pipeline_layout;
        self
    }

    #[inline]
    pub fn pushconstant_shader_stage_flags(
        mut self,
        pushconstant_shader_stage_flags: ShaderStageFlags,
    ) -> Self {
        self.value.pushconstant_shader_stage_flags = pushconstant_shader_stage_flags;
        self
    }

    #[inline]
    pub fn pushconstant_offset(mut self, pushconstant_offset: u32) -> Self {
        self.value.pushconstant_offset = pushconstant_offset;
        self
    }

    #[inline]
    pub fn pushconstant_size(mut self, pushconstant_size: u32) -> Self {
        self.value.pushconstant_size = pushconstant_size;
        self
    }

    #[inline]
    pub fn indirect_state_flags(mut self, indirect_state_flags: IndirectStateFlagsNV) -> Self {
        self.value.indirect_state_flags = indirect_state_flags;
        self
    }

    #[inline]
    pub fn index_types(mut self, index_types: &'b [IndexType]) -> Self {
        self.value.index_type_count = index_types.len() as u32;
        self.value.index_types = index_types.as_ptr();
        self
    }

    #[inline]
    pub fn index_type_values(mut self, index_type_values: &'b [u32]) -> Self {
        self.value.index_type_count = index_type_values.len() as u32;
        self.value.index_type_values = index_type_values.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> IndirectCommandsLayoutTokenNV {
        self.value
    }
}

impl<'b> ops::Deref for IndirectCommandsLayoutTokenNVBuilder<'b> {
    type Target = IndirectCommandsLayoutTokenNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for IndirectCommandsLayoutTokenNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for IndirectCommandsLayoutTokenNVBuilder<'b> {
    type Target = IndirectCommandsLayoutTokenNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for IndirectCommandsStreamNV {
    type Target = IndirectCommandsStreamNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for IndirectCommandsStreamNV {
    type Builder = IndirectCommandsStreamNVBuilder;
}

/// A builder for a [`IndirectCommandsStreamNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct IndirectCommandsStreamNVBuilder {
    value: IndirectCommandsStreamNV,
}

impl IndirectCommandsStreamNVBuilder {
    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn build(self) -> IndirectCommandsStreamNV {
        self.value
    }
}

impl ops::Deref for IndirectCommandsStreamNVBuilder {
    type Target = IndirectCommandsStreamNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for IndirectCommandsStreamNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for IndirectCommandsStreamNVBuilder {
    type Target = IndirectCommandsStreamNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for InitializePerformanceApiInfoINTEL {
    type Target = InitializePerformanceApiInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for InitializePerformanceApiInfoINTEL {
    type Builder = InitializePerformanceApiInfoINTELBuilder<'b>;
}

/// A builder for a [`InitializePerformanceApiInfoINTEL`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct InitializePerformanceApiInfoINTELBuilder<'b> {
    value: InitializePerformanceApiInfoINTEL,
    _marker: PhantomData<&'b ()>,
}

impl<'b> InitializePerformanceApiInfoINTELBuilder<'b> {
    #[inline]
    pub fn user_data<T>(mut self, user_data: &'b mut T) -> Self {
        self.value.user_data = (user_data as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> InitializePerformanceApiInfoINTEL {
        self.value
    }
}

impl<'b> ops::Deref for InitializePerformanceApiInfoINTELBuilder<'b> {
    type Target = InitializePerformanceApiInfoINTEL;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for InitializePerformanceApiInfoINTELBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for InitializePerformanceApiInfoINTELBuilder<'b> {
    type Target = InitializePerformanceApiInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for InputAttachmentAspectReference {
    type Target = InputAttachmentAspectReference;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for InputAttachmentAspectReference {
    type Builder = InputAttachmentAspectReferenceBuilder;
}

/// A builder for a [`InputAttachmentAspectReference`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct InputAttachmentAspectReferenceBuilder {
    value: InputAttachmentAspectReference,
}

impl InputAttachmentAspectReferenceBuilder {
    #[inline]
    pub fn subpass(mut self, subpass: u32) -> Self {
        self.value.subpass = subpass;
        self
    }

    #[inline]
    pub fn input_attachment_index(mut self, input_attachment_index: u32) -> Self {
        self.value.input_attachment_index = input_attachment_index;
        self
    }

    #[inline]
    pub fn aspect_mask(mut self, aspect_mask: ImageAspectFlags) -> Self {
        self.value.aspect_mask = aspect_mask;
        self
    }

    #[inline]
    pub fn build(self) -> InputAttachmentAspectReference {
        self.value
    }
}

impl ops::Deref for InputAttachmentAspectReferenceBuilder {
    type Target = InputAttachmentAspectReference;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for InputAttachmentAspectReferenceBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for InputAttachmentAspectReferenceBuilder {
    type Target = InputAttachmentAspectReference;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`InstanceCreateInfo`].
pub unsafe trait ExtendsInstanceCreateInfo: fmt::Debug {}
unsafe impl ExtendsInstanceCreateInfo for DebugReportCallbackCreateInfoEXT {}
unsafe impl ExtendsInstanceCreateInfo for DebugUtilsMessengerCreateInfoEXT {}
unsafe impl ExtendsInstanceCreateInfo for DirectDriverLoadingListLUNARG {}
unsafe impl ExtendsInstanceCreateInfo for ExportMetalObjectCreateInfoEXT {}
unsafe impl ExtendsInstanceCreateInfo for LayerSettingsCreateInfoEXT {}
unsafe impl ExtendsInstanceCreateInfo for ValidationFeaturesEXT {}
unsafe impl ExtendsInstanceCreateInfo for ValidationFlagsEXT {}

unsafe impl Cast for InstanceCreateInfo {
    type Target = InstanceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for InstanceCreateInfo {
    type Builder = InstanceCreateInfoBuilder<'b>;
}

/// A builder for a [`InstanceCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct InstanceCreateInfoBuilder<'b> {
    value: InstanceCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> InstanceCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsInstanceCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: InstanceCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn application_info(
        mut self,
        application_info: &'b impl Cast<Target = ApplicationInfo>,
    ) -> Self {
        self.value.application_info = application_info.as_ref();
        self
    }

    #[inline]
    pub fn enabled_layer_names(mut self, enabled_layer_names: &'b [*const c_char]) -> Self {
        self.value.enabled_layer_count = enabled_layer_names.len() as u32;
        self.value.enabled_layer_names = enabled_layer_names.as_ptr();
        self
    }

    #[inline]
    pub fn enabled_extension_names(mut self, enabled_extension_names: &'b [*const c_char]) -> Self {
        self.value.enabled_extension_count = enabled_extension_names.len() as u32;
        self.value.enabled_extension_names = enabled_extension_names.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> InstanceCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for InstanceCreateInfoBuilder<'b> {
    type Target = InstanceCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for InstanceCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for InstanceCreateInfoBuilder<'b> {
    type Target = InstanceCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for LatencySleepInfoNV {
    type Target = LatencySleepInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for LatencySleepInfoNV {
    type Builder = LatencySleepInfoNVBuilder;
}

/// A builder for a [`LatencySleepInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct LatencySleepInfoNVBuilder {
    value: LatencySleepInfoNV,
}

impl LatencySleepInfoNVBuilder {
    #[inline]
    pub fn signal_semaphore(mut self, signal_semaphore: Semaphore) -> Self {
        self.value.signal_semaphore = signal_semaphore;
        self
    }

    #[inline]
    pub fn value(mut self, value: u64) -> Self {
        self.value.value = value;
        self
    }

    #[inline]
    pub fn build(self) -> LatencySleepInfoNV {
        self.value
    }
}

impl ops::Deref for LatencySleepInfoNVBuilder {
    type Target = LatencySleepInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for LatencySleepInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for LatencySleepInfoNVBuilder {
    type Target = LatencySleepInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for LatencySleepModeInfoNV {
    type Target = LatencySleepModeInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for LatencySleepModeInfoNV {
    type Builder = LatencySleepModeInfoNVBuilder;
}

/// A builder for a [`LatencySleepModeInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct LatencySleepModeInfoNVBuilder {
    value: LatencySleepModeInfoNV,
}

impl LatencySleepModeInfoNVBuilder {
    #[inline]
    pub fn low_latency_mode(mut self, low_latency_mode: bool) -> Self {
        self.value.low_latency_mode = low_latency_mode as Bool32;
        self
    }

    #[inline]
    pub fn low_latency_boost(mut self, low_latency_boost: bool) -> Self {
        self.value.low_latency_boost = low_latency_boost as Bool32;
        self
    }

    #[inline]
    pub fn minimum_interval_us(mut self, minimum_interval_us: u32) -> Self {
        self.value.minimum_interval_us = minimum_interval_us;
        self
    }

    #[inline]
    pub fn build(self) -> LatencySleepModeInfoNV {
        self.value
    }
}

impl ops::Deref for LatencySleepModeInfoNVBuilder {
    type Target = LatencySleepModeInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for LatencySleepModeInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for LatencySleepModeInfoNVBuilder {
    type Target = LatencySleepModeInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for LatencySubmissionPresentIdNV {
    type Target = LatencySubmissionPresentIdNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for LatencySubmissionPresentIdNV {
    type Builder = LatencySubmissionPresentIdNVBuilder;
}

/// A builder for a [`LatencySubmissionPresentIdNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct LatencySubmissionPresentIdNVBuilder {
    value: LatencySubmissionPresentIdNV,
}

impl LatencySubmissionPresentIdNVBuilder {
    #[inline]
    pub fn present_id(mut self, present_id: u64) -> Self {
        self.value.present_id = present_id;
        self
    }

    #[inline]
    pub fn build(self) -> LatencySubmissionPresentIdNV {
        self.value
    }
}

impl ops::Deref for LatencySubmissionPresentIdNVBuilder {
    type Target = LatencySubmissionPresentIdNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for LatencySubmissionPresentIdNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for LatencySubmissionPresentIdNVBuilder {
    type Target = LatencySubmissionPresentIdNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for LatencySurfaceCapabilitiesNV {
    type Target = LatencySurfaceCapabilitiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for LatencySurfaceCapabilitiesNV {
    type Builder = LatencySurfaceCapabilitiesNVBuilder<'b>;
}

/// A builder for a [`LatencySurfaceCapabilitiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct LatencySurfaceCapabilitiesNVBuilder<'b> {
    value: LatencySurfaceCapabilitiesNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> LatencySurfaceCapabilitiesNVBuilder<'b> {
    #[inline]
    pub fn present_mode_count(mut self, present_mode_count: u32) -> Self {
        self.value.present_mode_count = present_mode_count;
        self
    }

    #[inline]
    pub fn present_modes(mut self, present_modes: &'b mut [PresentModeKHR]) -> Self {
        self.value.present_mode_count = present_modes.len() as u32;
        self.value.present_modes = present_modes.as_mut_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> LatencySurfaceCapabilitiesNV {
        self.value
    }
}

impl<'b> ops::Deref for LatencySurfaceCapabilitiesNVBuilder<'b> {
    type Target = LatencySurfaceCapabilitiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for LatencySurfaceCapabilitiesNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for LatencySurfaceCapabilitiesNVBuilder<'b> {
    type Target = LatencySurfaceCapabilitiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for LatencyTimingsFrameReportNV {
    type Target = LatencyTimingsFrameReportNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for LatencyTimingsFrameReportNV {
    type Builder = LatencyTimingsFrameReportNVBuilder;
}

/// A builder for a [`LatencyTimingsFrameReportNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct LatencyTimingsFrameReportNVBuilder {
    value: LatencyTimingsFrameReportNV,
}

impl LatencyTimingsFrameReportNVBuilder {
    #[inline]
    pub fn present_id(mut self, present_id: u64) -> Self {
        self.value.present_id = present_id;
        self
    }

    #[inline]
    pub fn input_sample_time_us(mut self, input_sample_time_us: u64) -> Self {
        self.value.input_sample_time_us = input_sample_time_us;
        self
    }

    #[inline]
    pub fn sim_start_time_us(mut self, sim_start_time_us: u64) -> Self {
        self.value.sim_start_time_us = sim_start_time_us;
        self
    }

    #[inline]
    pub fn sim_end_time_us(mut self, sim_end_time_us: u64) -> Self {
        self.value.sim_end_time_us = sim_end_time_us;
        self
    }

    #[inline]
    pub fn render_submit_start_time_us(mut self, render_submit_start_time_us: u64) -> Self {
        self.value.render_submit_start_time_us = render_submit_start_time_us;
        self
    }

    #[inline]
    pub fn render_submit_end_time_us(mut self, render_submit_end_time_us: u64) -> Self {
        self.value.render_submit_end_time_us = render_submit_end_time_us;
        self
    }

    #[inline]
    pub fn present_start_time_us(mut self, present_start_time_us: u64) -> Self {
        self.value.present_start_time_us = present_start_time_us;
        self
    }

    #[inline]
    pub fn present_end_time_us(mut self, present_end_time_us: u64) -> Self {
        self.value.present_end_time_us = present_end_time_us;
        self
    }

    #[inline]
    pub fn driver_start_time_us(mut self, driver_start_time_us: u64) -> Self {
        self.value.driver_start_time_us = driver_start_time_us;
        self
    }

    #[inline]
    pub fn driver_end_time_us(mut self, driver_end_time_us: u64) -> Self {
        self.value.driver_end_time_us = driver_end_time_us;
        self
    }

    #[inline]
    pub fn os_render_queue_start_time_us(mut self, os_render_queue_start_time_us: u64) -> Self {
        self.value.os_render_queue_start_time_us = os_render_queue_start_time_us;
        self
    }

    #[inline]
    pub fn os_render_queue_end_time_us(mut self, os_render_queue_end_time_us: u64) -> Self {
        self.value.os_render_queue_end_time_us = os_render_queue_end_time_us;
        self
    }

    #[inline]
    pub fn gpu_render_start_time_us(mut self, gpu_render_start_time_us: u64) -> Self {
        self.value.gpu_render_start_time_us = gpu_render_start_time_us;
        self
    }

    #[inline]
    pub fn gpu_render_end_time_us(mut self, gpu_render_end_time_us: u64) -> Self {
        self.value.gpu_render_end_time_us = gpu_render_end_time_us;
        self
    }

    #[inline]
    pub fn build(self) -> LatencyTimingsFrameReportNV {
        self.value
    }
}

impl ops::Deref for LatencyTimingsFrameReportNVBuilder {
    type Target = LatencyTimingsFrameReportNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for LatencyTimingsFrameReportNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for LatencyTimingsFrameReportNVBuilder {
    type Target = LatencyTimingsFrameReportNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for LayerProperties {
    type Target = LayerProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for LayerProperties {
    type Builder = LayerPropertiesBuilder;
}

/// A builder for a [`LayerProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct LayerPropertiesBuilder {
    value: LayerProperties,
}

impl LayerPropertiesBuilder {
    #[inline]
    pub fn layer_name(
        mut self,
        layer_name: impl Into<StringArray<MAX_EXTENSION_NAME_SIZE>>,
    ) -> Self {
        self.value.layer_name = layer_name.into();
        self
    }

    #[inline]
    pub fn spec_version(mut self, spec_version: u32) -> Self {
        self.value.spec_version = spec_version;
        self
    }

    #[inline]
    pub fn implementation_version(mut self, implementation_version: u32) -> Self {
        self.value.implementation_version = implementation_version;
        self
    }

    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn build(self) -> LayerProperties {
        self.value
    }
}

impl ops::Deref for LayerPropertiesBuilder {
    type Target = LayerProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for LayerPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for LayerPropertiesBuilder {
    type Target = LayerProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for LayerSettingEXT {
    type Target = LayerSettingEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for LayerSettingEXT {
    type Builder = LayerSettingEXTBuilder<'b>;
}

/// A builder for a [`LayerSettingEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct LayerSettingEXTBuilder<'b> {
    value: LayerSettingEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> LayerSettingEXTBuilder<'b> {
    #[inline]
    pub fn layer_name(mut self, layer_name: &'b [u8]) -> Self {
        self.value.layer_name = layer_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn setting_name(mut self, setting_name: &'b [u8]) -> Self {
        self.value.setting_name = setting_name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn type_(mut self, type_: LayerSettingTypeEXT) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn values(mut self, values: &'b [u8]) -> Self {
        self.value.value_count = values.len() as u32;
        self.value.values = values.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> LayerSettingEXT {
        self.value
    }
}

impl<'b> ops::Deref for LayerSettingEXTBuilder<'b> {
    type Target = LayerSettingEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for LayerSettingEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for LayerSettingEXTBuilder<'b> {
    type Target = LayerSettingEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for LayerSettingsCreateInfoEXT {
    type Target = LayerSettingsCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for LayerSettingsCreateInfoEXT {
    type Builder = LayerSettingsCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`LayerSettingsCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct LayerSettingsCreateInfoEXTBuilder<'b> {
    value: LayerSettingsCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> LayerSettingsCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn settings(mut self, settings: &'b [impl Cast<Target = LayerSettingEXT>]) -> Self {
        self.value.setting_count = settings.len() as u32;
        self.value.settings = settings.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> LayerSettingsCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for LayerSettingsCreateInfoEXTBuilder<'b> {
    type Target = LayerSettingsCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for LayerSettingsCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for LayerSettingsCreateInfoEXTBuilder<'b> {
    type Target = LayerSettingsCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MacOSSurfaceCreateInfoMVK {
    type Target = MacOSSurfaceCreateInfoMVK;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MacOSSurfaceCreateInfoMVK {
    type Builder = MacOSSurfaceCreateInfoMVKBuilder<'b>;
}

/// A builder for a [`MacOSSurfaceCreateInfoMVK`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MacOSSurfaceCreateInfoMVKBuilder<'b> {
    value: MacOSSurfaceCreateInfoMVK,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MacOSSurfaceCreateInfoMVKBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: MacOSSurfaceCreateFlagsMVK) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn view<T>(mut self, view: &'b T) -> Self {
        self.value.view = (view as *const T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> MacOSSurfaceCreateInfoMVK {
        self.value
    }
}

impl<'b> ops::Deref for MacOSSurfaceCreateInfoMVKBuilder<'b> {
    type Target = MacOSSurfaceCreateInfoMVK;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MacOSSurfaceCreateInfoMVKBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MacOSSurfaceCreateInfoMVKBuilder<'b> {
    type Target = MacOSSurfaceCreateInfoMVK;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MappedMemoryRange {
    type Target = MappedMemoryRange;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MappedMemoryRange {
    type Builder = MappedMemoryRangeBuilder;
}

/// A builder for a [`MappedMemoryRange`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MappedMemoryRangeBuilder {
    value: MappedMemoryRange,
}

impl MappedMemoryRangeBuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> MappedMemoryRange {
        self.value
    }
}

impl ops::Deref for MappedMemoryRangeBuilder {
    type Target = MappedMemoryRange;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MappedMemoryRangeBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MappedMemoryRangeBuilder {
    type Target = MappedMemoryRange;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryAllocateFlagsInfo {
    type Target = MemoryAllocateFlagsInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryAllocateFlagsInfo {
    type Builder = MemoryAllocateFlagsInfoBuilder;
}

/// A builder for a [`MemoryAllocateFlagsInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryAllocateFlagsInfoBuilder {
    value: MemoryAllocateFlagsInfo,
}

impl MemoryAllocateFlagsInfoBuilder {
    #[inline]
    pub fn flags(mut self, flags: MemoryAllocateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn device_mask(mut self, device_mask: u32) -> Self {
        self.value.device_mask = device_mask;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryAllocateFlagsInfo {
        self.value
    }
}

impl ops::Deref for MemoryAllocateFlagsInfoBuilder {
    type Target = MemoryAllocateFlagsInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryAllocateFlagsInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryAllocateFlagsInfoBuilder {
    type Target = MemoryAllocateFlagsInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`MemoryAllocateInfo`].
pub unsafe trait ExtendsMemoryAllocateInfo: fmt::Debug {}
unsafe impl ExtendsMemoryAllocateInfo for DedicatedAllocationMemoryAllocateInfoNV {}
unsafe impl ExtendsMemoryAllocateInfo for ExportMemoryAllocateInfo {}
unsafe impl ExtendsMemoryAllocateInfo for ExportMemoryAllocateInfoNV {}
unsafe impl ExtendsMemoryAllocateInfo for ExportMemorySciBufInfoNV {}
unsafe impl ExtendsMemoryAllocateInfo for ExportMemoryWin32HandleInfoKHR {}
unsafe impl ExtendsMemoryAllocateInfo for ExportMemoryWin32HandleInfoNV {}
unsafe impl ExtendsMemoryAllocateInfo for ExportMetalObjectCreateInfoEXT {}
unsafe impl ExtendsMemoryAllocateInfo for ImportAndroidHardwareBufferInfoANDROID {}
unsafe impl ExtendsMemoryAllocateInfo for ImportMemoryBufferCollectionFUCHSIA {}
unsafe impl ExtendsMemoryAllocateInfo for ImportMemoryFdInfoKHR {}
unsafe impl ExtendsMemoryAllocateInfo for ImportMemoryHostPointerInfoEXT {}
unsafe impl ExtendsMemoryAllocateInfo for ImportMemorySciBufInfoNV {}
unsafe impl ExtendsMemoryAllocateInfo for ImportMemoryWin32HandleInfoKHR {}
unsafe impl ExtendsMemoryAllocateInfo for ImportMemoryWin32HandleInfoNV {}
unsafe impl ExtendsMemoryAllocateInfo for ImportMemoryZirconHandleInfoFUCHSIA {}
unsafe impl ExtendsMemoryAllocateInfo for ImportMetalBufferInfoEXT {}
unsafe impl ExtendsMemoryAllocateInfo for ImportScreenBufferInfoQNX {}
unsafe impl ExtendsMemoryAllocateInfo for MemoryAllocateFlagsInfo {}
unsafe impl ExtendsMemoryAllocateInfo for MemoryDedicatedAllocateInfo {}
unsafe impl ExtendsMemoryAllocateInfo for MemoryOpaqueCaptureAddressAllocateInfo {}
unsafe impl ExtendsMemoryAllocateInfo for MemoryPriorityAllocateInfoEXT {}

unsafe impl Cast for MemoryAllocateInfo {
    type Target = MemoryAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MemoryAllocateInfo {
    type Builder = MemoryAllocateInfoBuilder<'b>;
}

/// A builder for a [`MemoryAllocateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryAllocateInfoBuilder<'b> {
    value: MemoryAllocateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MemoryAllocateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsMemoryAllocateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn allocation_size(mut self, allocation_size: DeviceSize) -> Self {
        self.value.allocation_size = allocation_size;
        self
    }

    #[inline]
    pub fn memory_type_index(mut self, memory_type_index: u32) -> Self {
        self.value.memory_type_index = memory_type_index;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryAllocateInfo {
        self.value
    }
}

impl<'b> ops::Deref for MemoryAllocateInfoBuilder<'b> {
    type Target = MemoryAllocateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MemoryAllocateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MemoryAllocateInfoBuilder<'b> {
    type Target = MemoryAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryBarrier {
    type Target = MemoryBarrier;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryBarrier {
    type Builder = MemoryBarrierBuilder;
}

/// A builder for a [`MemoryBarrier`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryBarrierBuilder {
    value: MemoryBarrier,
}

impl MemoryBarrierBuilder {
    #[inline]
    pub fn src_access_mask(mut self, src_access_mask: AccessFlags) -> Self {
        self.value.src_access_mask = src_access_mask;
        self
    }

    #[inline]
    pub fn dst_access_mask(mut self, dst_access_mask: AccessFlags) -> Self {
        self.value.dst_access_mask = dst_access_mask;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryBarrier {
        self.value
    }
}

impl ops::Deref for MemoryBarrierBuilder {
    type Target = MemoryBarrier;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryBarrierBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryBarrierBuilder {
    type Target = MemoryBarrier;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryBarrier2 {
    type Target = MemoryBarrier2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryBarrier2 {
    type Builder = MemoryBarrier2Builder;
}

/// A builder for a [`MemoryBarrier2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryBarrier2Builder {
    value: MemoryBarrier2,
}

impl MemoryBarrier2Builder {
    #[inline]
    pub fn src_stage_mask(mut self, src_stage_mask: PipelineStageFlags2) -> Self {
        self.value.src_stage_mask = src_stage_mask;
        self
    }

    #[inline]
    pub fn src_access_mask(mut self, src_access_mask: AccessFlags2) -> Self {
        self.value.src_access_mask = src_access_mask;
        self
    }

    #[inline]
    pub fn dst_stage_mask(mut self, dst_stage_mask: PipelineStageFlags2) -> Self {
        self.value.dst_stage_mask = dst_stage_mask;
        self
    }

    #[inline]
    pub fn dst_access_mask(mut self, dst_access_mask: AccessFlags2) -> Self {
        self.value.dst_access_mask = dst_access_mask;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryBarrier2 {
        self.value
    }
}

impl ops::Deref for MemoryBarrier2Builder {
    type Target = MemoryBarrier2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryBarrier2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryBarrier2Builder {
    type Target = MemoryBarrier2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryDedicatedAllocateInfo {
    type Target = MemoryDedicatedAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryDedicatedAllocateInfo {
    type Builder = MemoryDedicatedAllocateInfoBuilder;
}

/// A builder for a [`MemoryDedicatedAllocateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryDedicatedAllocateInfoBuilder {
    value: MemoryDedicatedAllocateInfo,
}

impl MemoryDedicatedAllocateInfoBuilder {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryDedicatedAllocateInfo {
        self.value
    }
}

impl ops::Deref for MemoryDedicatedAllocateInfoBuilder {
    type Target = MemoryDedicatedAllocateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryDedicatedAllocateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryDedicatedAllocateInfoBuilder {
    type Target = MemoryDedicatedAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryDedicatedRequirements {
    type Target = MemoryDedicatedRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryDedicatedRequirements {
    type Builder = MemoryDedicatedRequirementsBuilder;
}

/// A builder for a [`MemoryDedicatedRequirements`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryDedicatedRequirementsBuilder {
    value: MemoryDedicatedRequirements,
}

impl MemoryDedicatedRequirementsBuilder {
    #[inline]
    pub fn prefers_dedicated_allocation(mut self, prefers_dedicated_allocation: bool) -> Self {
        self.value.prefers_dedicated_allocation = prefers_dedicated_allocation as Bool32;
        self
    }

    #[inline]
    pub fn requires_dedicated_allocation(mut self, requires_dedicated_allocation: bool) -> Self {
        self.value.requires_dedicated_allocation = requires_dedicated_allocation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryDedicatedRequirements {
        self.value
    }
}

impl ops::Deref for MemoryDedicatedRequirementsBuilder {
    type Target = MemoryDedicatedRequirements;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryDedicatedRequirementsBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryDedicatedRequirementsBuilder {
    type Target = MemoryDedicatedRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryFdPropertiesKHR {
    type Target = MemoryFdPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryFdPropertiesKHR {
    type Builder = MemoryFdPropertiesKHRBuilder;
}

/// A builder for a [`MemoryFdPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryFdPropertiesKHRBuilder {
    value: MemoryFdPropertiesKHR,
}

impl MemoryFdPropertiesKHRBuilder {
    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryFdPropertiesKHR {
        self.value
    }
}

impl ops::Deref for MemoryFdPropertiesKHRBuilder {
    type Target = MemoryFdPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryFdPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryFdPropertiesKHRBuilder {
    type Target = MemoryFdPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryGetAndroidHardwareBufferInfoANDROID {
    type Target = MemoryGetAndroidHardwareBufferInfoANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryGetAndroidHardwareBufferInfoANDROID {
    type Builder = MemoryGetAndroidHardwareBufferInfoANDROIDBuilder;
}

/// A builder for a [`MemoryGetAndroidHardwareBufferInfoANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryGetAndroidHardwareBufferInfoANDROIDBuilder {
    value: MemoryGetAndroidHardwareBufferInfoANDROID,
}

impl MemoryGetAndroidHardwareBufferInfoANDROIDBuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryGetAndroidHardwareBufferInfoANDROID {
        self.value
    }
}

impl ops::Deref for MemoryGetAndroidHardwareBufferInfoANDROIDBuilder {
    type Target = MemoryGetAndroidHardwareBufferInfoANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryGetAndroidHardwareBufferInfoANDROIDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryGetAndroidHardwareBufferInfoANDROIDBuilder {
    type Target = MemoryGetAndroidHardwareBufferInfoANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryGetFdInfoKHR {
    type Target = MemoryGetFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryGetFdInfoKHR {
    type Builder = MemoryGetFdInfoKHRBuilder;
}

/// A builder for a [`MemoryGetFdInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryGetFdInfoKHRBuilder {
    value: MemoryGetFdInfoKHR,
}

impl MemoryGetFdInfoKHRBuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryGetFdInfoKHR {
        self.value
    }
}

impl ops::Deref for MemoryGetFdInfoKHRBuilder {
    type Target = MemoryGetFdInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryGetFdInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryGetFdInfoKHRBuilder {
    type Target = MemoryGetFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryGetRemoteAddressInfoNV {
    type Target = MemoryGetRemoteAddressInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryGetRemoteAddressInfoNV {
    type Builder = MemoryGetRemoteAddressInfoNVBuilder;
}

/// A builder for a [`MemoryGetRemoteAddressInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryGetRemoteAddressInfoNVBuilder {
    value: MemoryGetRemoteAddressInfoNV,
}

impl MemoryGetRemoteAddressInfoNVBuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryGetRemoteAddressInfoNV {
        self.value
    }
}

impl ops::Deref for MemoryGetRemoteAddressInfoNVBuilder {
    type Target = MemoryGetRemoteAddressInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryGetRemoteAddressInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryGetRemoteAddressInfoNVBuilder {
    type Target = MemoryGetRemoteAddressInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryGetSciBufInfoNV {
    type Target = MemoryGetSciBufInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryGetSciBufInfoNV {
    type Builder = MemoryGetSciBufInfoNVBuilder;
}

/// A builder for a [`MemoryGetSciBufInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryGetSciBufInfoNVBuilder {
    value: MemoryGetSciBufInfoNV,
}

impl MemoryGetSciBufInfoNVBuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryGetSciBufInfoNV {
        self.value
    }
}

impl ops::Deref for MemoryGetSciBufInfoNVBuilder {
    type Target = MemoryGetSciBufInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryGetSciBufInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryGetSciBufInfoNVBuilder {
    type Target = MemoryGetSciBufInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryGetWin32HandleInfoKHR {
    type Target = MemoryGetWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryGetWin32HandleInfoKHR {
    type Builder = MemoryGetWin32HandleInfoKHRBuilder;
}

/// A builder for a [`MemoryGetWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryGetWin32HandleInfoKHRBuilder {
    value: MemoryGetWin32HandleInfoKHR,
}

impl MemoryGetWin32HandleInfoKHRBuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryGetWin32HandleInfoKHR {
        self.value
    }
}

impl ops::Deref for MemoryGetWin32HandleInfoKHRBuilder {
    type Target = MemoryGetWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryGetWin32HandleInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryGetWin32HandleInfoKHRBuilder {
    type Target = MemoryGetWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryGetZirconHandleInfoFUCHSIA {
    type Target = MemoryGetZirconHandleInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryGetZirconHandleInfoFUCHSIA {
    type Builder = MemoryGetZirconHandleInfoFUCHSIABuilder;
}

/// A builder for a [`MemoryGetZirconHandleInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryGetZirconHandleInfoFUCHSIABuilder {
    value: MemoryGetZirconHandleInfoFUCHSIA,
}

impl MemoryGetZirconHandleInfoFUCHSIABuilder {
    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryGetZirconHandleInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for MemoryGetZirconHandleInfoFUCHSIABuilder {
    type Target = MemoryGetZirconHandleInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryGetZirconHandleInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryGetZirconHandleInfoFUCHSIABuilder {
    type Target = MemoryGetZirconHandleInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryHeap {
    type Target = MemoryHeap;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryHeap {
    type Builder = MemoryHeapBuilder;
}

/// A builder for a [`MemoryHeap`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryHeapBuilder {
    value: MemoryHeap,
}

impl MemoryHeapBuilder {
    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: MemoryHeapFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryHeap {
        self.value
    }
}

impl ops::Deref for MemoryHeapBuilder {
    type Target = MemoryHeap;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryHeapBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryHeapBuilder {
    type Target = MemoryHeap;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryHostPointerPropertiesEXT {
    type Target = MemoryHostPointerPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryHostPointerPropertiesEXT {
    type Builder = MemoryHostPointerPropertiesEXTBuilder;
}

/// A builder for a [`MemoryHostPointerPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryHostPointerPropertiesEXTBuilder {
    value: MemoryHostPointerPropertiesEXT,
}

impl MemoryHostPointerPropertiesEXTBuilder {
    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryHostPointerPropertiesEXT {
        self.value
    }
}

impl ops::Deref for MemoryHostPointerPropertiesEXTBuilder {
    type Target = MemoryHostPointerPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryHostPointerPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryHostPointerPropertiesEXTBuilder {
    type Target = MemoryHostPointerPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`MemoryMapInfoKHR`].
pub unsafe trait ExtendsMemoryMapInfoKHR: fmt::Debug {}
unsafe impl ExtendsMemoryMapInfoKHR for MemoryMapPlacedInfoEXT {}

unsafe impl Cast for MemoryMapInfoKHR {
    type Target = MemoryMapInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MemoryMapInfoKHR {
    type Builder = MemoryMapInfoKHRBuilder<'b>;
}

/// A builder for a [`MemoryMapInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryMapInfoKHRBuilder<'b> {
    value: MemoryMapInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MemoryMapInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsMemoryMapInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: MemoryMapFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryMapInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for MemoryMapInfoKHRBuilder<'b> {
    type Target = MemoryMapInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MemoryMapInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MemoryMapInfoKHRBuilder<'b> {
    type Target = MemoryMapInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryMapPlacedInfoEXT {
    type Target = MemoryMapPlacedInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MemoryMapPlacedInfoEXT {
    type Builder = MemoryMapPlacedInfoEXTBuilder<'b>;
}

/// A builder for a [`MemoryMapPlacedInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryMapPlacedInfoEXTBuilder<'b> {
    value: MemoryMapPlacedInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MemoryMapPlacedInfoEXTBuilder<'b> {
    #[inline]
    pub fn placed_address<T>(mut self, placed_address: &'b mut T) -> Self {
        self.value.placed_address = (placed_address as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> MemoryMapPlacedInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for MemoryMapPlacedInfoEXTBuilder<'b> {
    type Target = MemoryMapPlacedInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MemoryMapPlacedInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MemoryMapPlacedInfoEXTBuilder<'b> {
    type Target = MemoryMapPlacedInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryOpaqueCaptureAddressAllocateInfo {
    type Target = MemoryOpaqueCaptureAddressAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryOpaqueCaptureAddressAllocateInfo {
    type Builder = MemoryOpaqueCaptureAddressAllocateInfoBuilder;
}

/// A builder for a [`MemoryOpaqueCaptureAddressAllocateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryOpaqueCaptureAddressAllocateInfoBuilder {
    value: MemoryOpaqueCaptureAddressAllocateInfo,
}

impl MemoryOpaqueCaptureAddressAllocateInfoBuilder {
    #[inline]
    pub fn opaque_capture_address(mut self, opaque_capture_address: u64) -> Self {
        self.value.opaque_capture_address = opaque_capture_address;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryOpaqueCaptureAddressAllocateInfo {
        self.value
    }
}

impl ops::Deref for MemoryOpaqueCaptureAddressAllocateInfoBuilder {
    type Target = MemoryOpaqueCaptureAddressAllocateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryOpaqueCaptureAddressAllocateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryOpaqueCaptureAddressAllocateInfoBuilder {
    type Target = MemoryOpaqueCaptureAddressAllocateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryPriorityAllocateInfoEXT {
    type Target = MemoryPriorityAllocateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryPriorityAllocateInfoEXT {
    type Builder = MemoryPriorityAllocateInfoEXTBuilder;
}

/// A builder for a [`MemoryPriorityAllocateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryPriorityAllocateInfoEXTBuilder {
    value: MemoryPriorityAllocateInfoEXT,
}

impl MemoryPriorityAllocateInfoEXTBuilder {
    #[inline]
    pub fn priority(mut self, priority: f32) -> Self {
        self.value.priority = priority;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryPriorityAllocateInfoEXT {
        self.value
    }
}

impl ops::Deref for MemoryPriorityAllocateInfoEXTBuilder {
    type Target = MemoryPriorityAllocateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryPriorityAllocateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryPriorityAllocateInfoEXTBuilder {
    type Target = MemoryPriorityAllocateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryRequirements {
    type Target = MemoryRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryRequirements {
    type Builder = MemoryRequirementsBuilder;
}

/// A builder for a [`MemoryRequirements`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryRequirementsBuilder {
    value: MemoryRequirements,
}

impl MemoryRequirementsBuilder {
    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn alignment(mut self, alignment: DeviceSize) -> Self {
        self.value.alignment = alignment;
        self
    }

    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryRequirements {
        self.value
    }
}

impl ops::Deref for MemoryRequirementsBuilder {
    type Target = MemoryRequirements;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryRequirementsBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryRequirementsBuilder {
    type Target = MemoryRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`MemoryRequirements2`].
pub unsafe trait ExtendsMemoryRequirements2: fmt::Debug {}
unsafe impl ExtendsMemoryRequirements2 for MemoryDedicatedRequirements {}

unsafe impl Cast for MemoryRequirements2 {
    type Target = MemoryRequirements2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MemoryRequirements2 {
    type Builder = MemoryRequirements2Builder<'b>;
}

/// A builder for a [`MemoryRequirements2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryRequirements2Builder<'b> {
    value: MemoryRequirements2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MemoryRequirements2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsMemoryRequirements2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn memory_requirements(
        mut self,
        memory_requirements: impl Cast<Target = MemoryRequirements>,
    ) -> Self {
        self.value.memory_requirements = memory_requirements.into();
        self
    }

    #[inline]
    pub fn build(self) -> MemoryRequirements2 {
        self.value
    }
}

impl<'b> ops::Deref for MemoryRequirements2Builder<'b> {
    type Target = MemoryRequirements2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MemoryRequirements2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MemoryRequirements2Builder<'b> {
    type Target = MemoryRequirements2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemorySciBufPropertiesNV {
    type Target = MemorySciBufPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemorySciBufPropertiesNV {
    type Builder = MemorySciBufPropertiesNVBuilder;
}

/// A builder for a [`MemorySciBufPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemorySciBufPropertiesNVBuilder {
    value: MemorySciBufPropertiesNV,
}

impl MemorySciBufPropertiesNVBuilder {
    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn build(self) -> MemorySciBufPropertiesNV {
        self.value
    }
}

impl ops::Deref for MemorySciBufPropertiesNVBuilder {
    type Target = MemorySciBufPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemorySciBufPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemorySciBufPropertiesNVBuilder {
    type Target = MemorySciBufPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryToImageCopyEXT {
    type Target = MemoryToImageCopyEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MemoryToImageCopyEXT {
    type Builder = MemoryToImageCopyEXTBuilder<'b>;
}

/// A builder for a [`MemoryToImageCopyEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryToImageCopyEXTBuilder<'b> {
    value: MemoryToImageCopyEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MemoryToImageCopyEXTBuilder<'b> {
    #[inline]
    pub fn host_pointer<T>(mut self, host_pointer: &'b T) -> Self {
        self.value.host_pointer = (host_pointer as *const T).cast();
        self
    }

    #[inline]
    pub fn memory_row_length(mut self, memory_row_length: u32) -> Self {
        self.value.memory_row_length = memory_row_length;
        self
    }

    #[inline]
    pub fn memory_image_height(mut self, memory_image_height: u32) -> Self {
        self.value.memory_image_height = memory_image_height;
        self
    }

    #[inline]
    pub fn image_subresource(
        mut self,
        image_subresource: impl Cast<Target = ImageSubresourceLayers>,
    ) -> Self {
        self.value.image_subresource = image_subresource.into();
        self
    }

    #[inline]
    pub fn image_offset(mut self, image_offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.image_offset = image_offset.into();
        self
    }

    #[inline]
    pub fn image_extent(mut self, image_extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.image_extent = image_extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> MemoryToImageCopyEXT {
        self.value
    }
}

impl<'b> ops::Deref for MemoryToImageCopyEXTBuilder<'b> {
    type Target = MemoryToImageCopyEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MemoryToImageCopyEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MemoryToImageCopyEXTBuilder<'b> {
    type Target = MemoryToImageCopyEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryType {
    type Target = MemoryType;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryType {
    type Builder = MemoryTypeBuilder;
}

/// A builder for a [`MemoryType`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryTypeBuilder {
    value: MemoryType,
}

impl MemoryTypeBuilder {
    #[inline]
    pub fn property_flags(mut self, property_flags: MemoryPropertyFlags) -> Self {
        self.value.property_flags = property_flags;
        self
    }

    #[inline]
    pub fn heap_index(mut self, heap_index: u32) -> Self {
        self.value.heap_index = heap_index;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryType {
        self.value
    }
}

impl ops::Deref for MemoryTypeBuilder {
    type Target = MemoryType;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryTypeBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryTypeBuilder {
    type Target = MemoryType;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryUnmapInfoKHR {
    type Target = MemoryUnmapInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryUnmapInfoKHR {
    type Builder = MemoryUnmapInfoKHRBuilder;
}

/// A builder for a [`MemoryUnmapInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryUnmapInfoKHRBuilder {
    value: MemoryUnmapInfoKHR,
}

impl MemoryUnmapInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: MemoryUnmapFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryUnmapInfoKHR {
        self.value
    }
}

impl ops::Deref for MemoryUnmapInfoKHRBuilder {
    type Target = MemoryUnmapInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryUnmapInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryUnmapInfoKHRBuilder {
    type Target = MemoryUnmapInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryWin32HandlePropertiesKHR {
    type Target = MemoryWin32HandlePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryWin32HandlePropertiesKHR {
    type Builder = MemoryWin32HandlePropertiesKHRBuilder;
}

/// A builder for a [`MemoryWin32HandlePropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryWin32HandlePropertiesKHRBuilder {
    value: MemoryWin32HandlePropertiesKHR,
}

impl MemoryWin32HandlePropertiesKHRBuilder {
    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryWin32HandlePropertiesKHR {
        self.value
    }
}

impl ops::Deref for MemoryWin32HandlePropertiesKHRBuilder {
    type Target = MemoryWin32HandlePropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryWin32HandlePropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryWin32HandlePropertiesKHRBuilder {
    type Target = MemoryWin32HandlePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MemoryZirconHandlePropertiesFUCHSIA {
    type Target = MemoryZirconHandlePropertiesFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MemoryZirconHandlePropertiesFUCHSIA {
    type Builder = MemoryZirconHandlePropertiesFUCHSIABuilder;
}

/// A builder for a [`MemoryZirconHandlePropertiesFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MemoryZirconHandlePropertiesFUCHSIABuilder {
    value: MemoryZirconHandlePropertiesFUCHSIA,
}

impl MemoryZirconHandlePropertiesFUCHSIABuilder {
    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn build(self) -> MemoryZirconHandlePropertiesFUCHSIA {
        self.value
    }
}

impl ops::Deref for MemoryZirconHandlePropertiesFUCHSIABuilder {
    type Target = MemoryZirconHandlePropertiesFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MemoryZirconHandlePropertiesFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MemoryZirconHandlePropertiesFUCHSIABuilder {
    type Target = MemoryZirconHandlePropertiesFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MetalSurfaceCreateInfoEXT {
    type Target = MetalSurfaceCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MetalSurfaceCreateInfoEXT {
    type Builder = MetalSurfaceCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`MetalSurfaceCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MetalSurfaceCreateInfoEXTBuilder<'b> {
    value: MetalSurfaceCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MetalSurfaceCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: MetalSurfaceCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn layer(mut self, layer: *const CAMetalLayer) -> Self {
        self.value.layer = layer;
        self
    }

    #[inline]
    pub fn build(self) -> MetalSurfaceCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for MetalSurfaceCreateInfoEXTBuilder<'b> {
    type Target = MetalSurfaceCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MetalSurfaceCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MetalSurfaceCreateInfoEXTBuilder<'b> {
    type Target = MetalSurfaceCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MicromapBuildInfoEXT {
    type Target = MicromapBuildInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MicromapBuildInfoEXT {
    type Builder = MicromapBuildInfoEXTBuilder<'b>;
}

/// A builder for a [`MicromapBuildInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MicromapBuildInfoEXTBuilder<'b> {
    value: MicromapBuildInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MicromapBuildInfoEXTBuilder<'b> {
    #[inline]
    pub fn type_(mut self, type_: MicromapTypeEXT) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: BuildMicromapFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn mode(mut self, mode: BuildMicromapModeEXT) -> Self {
        self.value.mode = mode;
        self
    }

    #[inline]
    pub fn dst_micromap(mut self, dst_micromap: MicromapEXT) -> Self {
        self.value.dst_micromap = dst_micromap;
        self
    }

    #[inline]
    pub fn usage_counts(
        mut self,
        usage_counts: &'b [impl Cast<Target = MicromapUsageEXT>],
    ) -> Self {
        self.value.usage_counts_count = usage_counts.len() as u32;
        self.value.usage_counts = usage_counts.as_ptr().cast();
        self
    }

    #[inline]
    pub fn pointer_usage_counts(
        mut self,
        pointer_usage_counts: &'b [*const MicromapUsageEXT],
    ) -> Self {
        self.value.usage_counts_count = pointer_usage_counts.len() as u32;
        self.value.pointer_usage_counts = pointer_usage_counts.as_ptr();
        self
    }

    #[inline]
    pub fn data(mut self, data: DeviceOrHostAddressConstKHR) -> Self {
        self.value.data = data;
        self
    }

    #[inline]
    pub fn scratch_data(mut self, scratch_data: DeviceOrHostAddressKHR) -> Self {
        self.value.scratch_data = scratch_data;
        self
    }

    #[inline]
    pub fn triangle_array(mut self, triangle_array: DeviceOrHostAddressConstKHR) -> Self {
        self.value.triangle_array = triangle_array;
        self
    }

    #[inline]
    pub fn triangle_array_stride(mut self, triangle_array_stride: DeviceSize) -> Self {
        self.value.triangle_array_stride = triangle_array_stride;
        self
    }

    #[inline]
    pub fn build(self) -> MicromapBuildInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for MicromapBuildInfoEXTBuilder<'b> {
    type Target = MicromapBuildInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MicromapBuildInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MicromapBuildInfoEXTBuilder<'b> {
    type Target = MicromapBuildInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MicromapBuildSizesInfoEXT {
    type Target = MicromapBuildSizesInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MicromapBuildSizesInfoEXT {
    type Builder = MicromapBuildSizesInfoEXTBuilder;
}

/// A builder for a [`MicromapBuildSizesInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MicromapBuildSizesInfoEXTBuilder {
    value: MicromapBuildSizesInfoEXT,
}

impl MicromapBuildSizesInfoEXTBuilder {
    #[inline]
    pub fn micromap_size(mut self, micromap_size: DeviceSize) -> Self {
        self.value.micromap_size = micromap_size;
        self
    }

    #[inline]
    pub fn build_scratch_size(mut self, build_scratch_size: DeviceSize) -> Self {
        self.value.build_scratch_size = build_scratch_size;
        self
    }

    #[inline]
    pub fn discardable(mut self, discardable: bool) -> Self {
        self.value.discardable = discardable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> MicromapBuildSizesInfoEXT {
        self.value
    }
}

impl ops::Deref for MicromapBuildSizesInfoEXTBuilder {
    type Target = MicromapBuildSizesInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MicromapBuildSizesInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MicromapBuildSizesInfoEXTBuilder {
    type Target = MicromapBuildSizesInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MicromapCreateInfoEXT {
    type Target = MicromapCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MicromapCreateInfoEXT {
    type Builder = MicromapCreateInfoEXTBuilder;
}

/// A builder for a [`MicromapCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MicromapCreateInfoEXTBuilder {
    value: MicromapCreateInfoEXT,
}

impl MicromapCreateInfoEXTBuilder {
    #[inline]
    pub fn create_flags(mut self, create_flags: MicromapCreateFlagsEXT) -> Self {
        self.value.create_flags = create_flags;
        self
    }

    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn type_(mut self, type_: MicromapTypeEXT) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn device_address(mut self, device_address: DeviceAddress) -> Self {
        self.value.device_address = device_address;
        self
    }

    #[inline]
    pub fn build(self) -> MicromapCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for MicromapCreateInfoEXTBuilder {
    type Target = MicromapCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MicromapCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MicromapCreateInfoEXTBuilder {
    type Target = MicromapCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MicromapTriangleEXT {
    type Target = MicromapTriangleEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MicromapTriangleEXT {
    type Builder = MicromapTriangleEXTBuilder;
}

/// A builder for a [`MicromapTriangleEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MicromapTriangleEXTBuilder {
    value: MicromapTriangleEXT,
}

impl MicromapTriangleEXTBuilder {
    #[inline]
    pub fn data_offset(mut self, data_offset: u32) -> Self {
        self.value.data_offset = data_offset;
        self
    }

    #[inline]
    pub fn subdivision_level(mut self, subdivision_level: u16) -> Self {
        self.value.subdivision_level = subdivision_level;
        self
    }

    #[inline]
    pub fn format(mut self, format: u16) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn build(self) -> MicromapTriangleEXT {
        self.value
    }
}

impl ops::Deref for MicromapTriangleEXTBuilder {
    type Target = MicromapTriangleEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MicromapTriangleEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MicromapTriangleEXTBuilder {
    type Target = MicromapTriangleEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MicromapUsageEXT {
    type Target = MicromapUsageEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MicromapUsageEXT {
    type Builder = MicromapUsageEXTBuilder;
}

/// A builder for a [`MicromapUsageEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MicromapUsageEXTBuilder {
    value: MicromapUsageEXT,
}

impl MicromapUsageEXTBuilder {
    #[inline]
    pub fn count(mut self, count: u32) -> Self {
        self.value.count = count;
        self
    }

    #[inline]
    pub fn subdivision_level(mut self, subdivision_level: u32) -> Self {
        self.value.subdivision_level = subdivision_level;
        self
    }

    #[inline]
    pub fn format(mut self, format: u32) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn build(self) -> MicromapUsageEXT {
        self.value
    }
}

impl ops::Deref for MicromapUsageEXTBuilder {
    type Target = MicromapUsageEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MicromapUsageEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MicromapUsageEXTBuilder {
    type Target = MicromapUsageEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MicromapVersionInfoEXT {
    type Target = MicromapVersionInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MicromapVersionInfoEXT {
    type Builder = MicromapVersionInfoEXTBuilder<'b>;
}

/// A builder for a [`MicromapVersionInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MicromapVersionInfoEXTBuilder<'b> {
    value: MicromapVersionInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MicromapVersionInfoEXTBuilder<'b> {
    #[inline]
    pub fn version_data(mut self, version_data: &'b [u8]) -> Self {
        self.value.version_data = version_data.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> MicromapVersionInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for MicromapVersionInfoEXTBuilder<'b> {
    type Target = MicromapVersionInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MicromapVersionInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MicromapVersionInfoEXTBuilder<'b> {
    type Target = MicromapVersionInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MultiDrawIndexedInfoEXT {
    type Target = MultiDrawIndexedInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MultiDrawIndexedInfoEXT {
    type Builder = MultiDrawIndexedInfoEXTBuilder;
}

/// A builder for a [`MultiDrawIndexedInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MultiDrawIndexedInfoEXTBuilder {
    value: MultiDrawIndexedInfoEXT,
}

impl MultiDrawIndexedInfoEXTBuilder {
    #[inline]
    pub fn first_index(mut self, first_index: u32) -> Self {
        self.value.first_index = first_index;
        self
    }

    #[inline]
    pub fn index_count(mut self, index_count: u32) -> Self {
        self.value.index_count = index_count;
        self
    }

    #[inline]
    pub fn vertex_offset(mut self, vertex_offset: i32) -> Self {
        self.value.vertex_offset = vertex_offset;
        self
    }

    #[inline]
    pub fn build(self) -> MultiDrawIndexedInfoEXT {
        self.value
    }
}

impl ops::Deref for MultiDrawIndexedInfoEXTBuilder {
    type Target = MultiDrawIndexedInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MultiDrawIndexedInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MultiDrawIndexedInfoEXTBuilder {
    type Target = MultiDrawIndexedInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MultiDrawInfoEXT {
    type Target = MultiDrawInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MultiDrawInfoEXT {
    type Builder = MultiDrawInfoEXTBuilder;
}

/// A builder for a [`MultiDrawInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MultiDrawInfoEXTBuilder {
    value: MultiDrawInfoEXT,
}

impl MultiDrawInfoEXTBuilder {
    #[inline]
    pub fn first_vertex(mut self, first_vertex: u32) -> Self {
        self.value.first_vertex = first_vertex;
        self
    }

    #[inline]
    pub fn vertex_count(mut self, vertex_count: u32) -> Self {
        self.value.vertex_count = vertex_count;
        self
    }

    #[inline]
    pub fn build(self) -> MultiDrawInfoEXT {
        self.value
    }
}

impl ops::Deref for MultiDrawInfoEXTBuilder {
    type Target = MultiDrawInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MultiDrawInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MultiDrawInfoEXTBuilder {
    type Target = MultiDrawInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MultisamplePropertiesEXT {
    type Target = MultisamplePropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MultisamplePropertiesEXT {
    type Builder = MultisamplePropertiesEXTBuilder;
}

/// A builder for a [`MultisamplePropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MultisamplePropertiesEXTBuilder {
    value: MultisamplePropertiesEXT,
}

impl MultisamplePropertiesEXTBuilder {
    #[inline]
    pub fn max_sample_location_grid_size(
        mut self,
        max_sample_location_grid_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_sample_location_grid_size = max_sample_location_grid_size.into();
        self
    }

    #[inline]
    pub fn build(self) -> MultisamplePropertiesEXT {
        self.value
    }
}

impl ops::Deref for MultisamplePropertiesEXTBuilder {
    type Target = MultisamplePropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MultisamplePropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MultisamplePropertiesEXTBuilder {
    type Target = MultisamplePropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MultisampledRenderToSingleSampledInfoEXT {
    type Target = MultisampledRenderToSingleSampledInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MultisampledRenderToSingleSampledInfoEXT {
    type Builder = MultisampledRenderToSingleSampledInfoEXTBuilder;
}

/// A builder for a [`MultisampledRenderToSingleSampledInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MultisampledRenderToSingleSampledInfoEXTBuilder {
    value: MultisampledRenderToSingleSampledInfoEXT,
}

impl MultisampledRenderToSingleSampledInfoEXTBuilder {
    #[inline]
    pub fn multisampled_render_to_single_sampled_enable(
        mut self,
        multisampled_render_to_single_sampled_enable: bool,
    ) -> Self {
        self.value.multisampled_render_to_single_sampled_enable =
            multisampled_render_to_single_sampled_enable as Bool32;
        self
    }

    #[inline]
    pub fn rasterization_samples(mut self, rasterization_samples: SampleCountFlags) -> Self {
        self.value.rasterization_samples = rasterization_samples;
        self
    }

    #[inline]
    pub fn build(self) -> MultisampledRenderToSingleSampledInfoEXT {
        self.value
    }
}

impl ops::Deref for MultisampledRenderToSingleSampledInfoEXTBuilder {
    type Target = MultisampledRenderToSingleSampledInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MultisampledRenderToSingleSampledInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MultisampledRenderToSingleSampledInfoEXTBuilder {
    type Target = MultisampledRenderToSingleSampledInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MultiviewPerViewAttributesInfoNVX {
    type Target = MultiviewPerViewAttributesInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for MultiviewPerViewAttributesInfoNVX {
    type Builder = MultiviewPerViewAttributesInfoNVXBuilder;
}

/// A builder for a [`MultiviewPerViewAttributesInfoNVX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MultiviewPerViewAttributesInfoNVXBuilder {
    value: MultiviewPerViewAttributesInfoNVX,
}

impl MultiviewPerViewAttributesInfoNVXBuilder {
    #[inline]
    pub fn per_view_attributes(mut self, per_view_attributes: bool) -> Self {
        self.value.per_view_attributes = per_view_attributes as Bool32;
        self
    }

    #[inline]
    pub fn per_view_attributes_position_x_only(
        mut self,
        per_view_attributes_position_x_only: bool,
    ) -> Self {
        self.value.per_view_attributes_position_x_only =
            per_view_attributes_position_x_only as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> MultiviewPerViewAttributesInfoNVX {
        self.value
    }
}

impl ops::Deref for MultiviewPerViewAttributesInfoNVXBuilder {
    type Target = MultiviewPerViewAttributesInfoNVX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for MultiviewPerViewAttributesInfoNVXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for MultiviewPerViewAttributesInfoNVXBuilder {
    type Target = MultiviewPerViewAttributesInfoNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    type Target = MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    type Builder = MultiviewPerViewRenderAreasRenderPassBeginInfoQCOMBuilder<'b>;
}

/// A builder for a [`MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MultiviewPerViewRenderAreasRenderPassBeginInfoQCOMBuilder<'b> {
    value: MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MultiviewPerViewRenderAreasRenderPassBeginInfoQCOMBuilder<'b> {
    #[inline]
    pub fn per_view_render_areas(
        mut self,
        per_view_render_areas: &'b [impl Cast<Target = Rect2D>],
    ) -> Self {
        self.value.per_view_render_area_count = per_view_render_areas.len() as u32;
        self.value.per_view_render_areas = per_view_render_areas.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
        self.value
    }
}

impl<'b> ops::Deref for MultiviewPerViewRenderAreasRenderPassBeginInfoQCOMBuilder<'b> {
    type Target = MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MultiviewPerViewRenderAreasRenderPassBeginInfoQCOMBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MultiviewPerViewRenderAreasRenderPassBeginInfoQCOMBuilder<'b> {
    type Target = MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MutableDescriptorTypeCreateInfoEXT {
    type Target = MutableDescriptorTypeCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MutableDescriptorTypeCreateInfoEXT {
    type Builder = MutableDescriptorTypeCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`MutableDescriptorTypeCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MutableDescriptorTypeCreateInfoEXTBuilder<'b> {
    value: MutableDescriptorTypeCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MutableDescriptorTypeCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn mutable_descriptor_type_lists(
        mut self,
        mutable_descriptor_type_lists: &'b [impl Cast<Target = MutableDescriptorTypeListEXT>],
    ) -> Self {
        self.value.mutable_descriptor_type_list_count = mutable_descriptor_type_lists.len() as u32;
        self.value.mutable_descriptor_type_lists = mutable_descriptor_type_lists.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> MutableDescriptorTypeCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for MutableDescriptorTypeCreateInfoEXTBuilder<'b> {
    type Target = MutableDescriptorTypeCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MutableDescriptorTypeCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MutableDescriptorTypeCreateInfoEXTBuilder<'b> {
    type Target = MutableDescriptorTypeCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for MutableDescriptorTypeListEXT {
    type Target = MutableDescriptorTypeListEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for MutableDescriptorTypeListEXT {
    type Builder = MutableDescriptorTypeListEXTBuilder<'b>;
}

/// A builder for a [`MutableDescriptorTypeListEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct MutableDescriptorTypeListEXTBuilder<'b> {
    value: MutableDescriptorTypeListEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> MutableDescriptorTypeListEXTBuilder<'b> {
    #[inline]
    pub fn descriptor_types(mut self, descriptor_types: &'b [DescriptorType]) -> Self {
        self.value.descriptor_type_count = descriptor_types.len() as u32;
        self.value.descriptor_types = descriptor_types.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> MutableDescriptorTypeListEXT {
        self.value
    }
}

impl<'b> ops::Deref for MutableDescriptorTypeListEXTBuilder<'b> {
    type Target = MutableDescriptorTypeListEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for MutableDescriptorTypeListEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for MutableDescriptorTypeListEXTBuilder<'b> {
    type Target = MutableDescriptorTypeListEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Offset2D {
    type Target = Offset2D;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for Offset2D {
    type Builder = Offset2DBuilder;
}

/// A builder for a [`Offset2D`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct Offset2DBuilder {
    value: Offset2D,
}

impl Offset2DBuilder {
    #[inline]
    pub fn x(mut self, x: i32) -> Self {
        self.value.x = x;
        self
    }

    #[inline]
    pub fn y(mut self, y: i32) -> Self {
        self.value.y = y;
        self
    }

    #[inline]
    pub fn build(self) -> Offset2D {
        self.value
    }
}

impl ops::Deref for Offset2DBuilder {
    type Target = Offset2D;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for Offset2DBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for Offset2DBuilder {
    type Target = Offset2D;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Offset3D {
    type Target = Offset3D;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for Offset3D {
    type Builder = Offset3DBuilder;
}

/// A builder for a [`Offset3D`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct Offset3DBuilder {
    value: Offset3D,
}

impl Offset3DBuilder {
    #[inline]
    pub fn x(mut self, x: i32) -> Self {
        self.value.x = x;
        self
    }

    #[inline]
    pub fn y(mut self, y: i32) -> Self {
        self.value.y = y;
        self
    }

    #[inline]
    pub fn z(mut self, z: i32) -> Self {
        self.value.z = z;
        self
    }

    #[inline]
    pub fn build(self) -> Offset3D {
        self.value
    }
}

impl ops::Deref for Offset3DBuilder {
    type Target = Offset3D;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for Offset3DBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for Offset3DBuilder {
    type Target = Offset3D;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for OpaqueCaptureDescriptorDataCreateInfoEXT {
    type Target = OpaqueCaptureDescriptorDataCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for OpaqueCaptureDescriptorDataCreateInfoEXT {
    type Builder = OpaqueCaptureDescriptorDataCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`OpaqueCaptureDescriptorDataCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct OpaqueCaptureDescriptorDataCreateInfoEXTBuilder<'b> {
    value: OpaqueCaptureDescriptorDataCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> OpaqueCaptureDescriptorDataCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn opaque_capture_descriptor_data<T>(
        mut self,
        opaque_capture_descriptor_data: &'b T,
    ) -> Self {
        self.value.opaque_capture_descriptor_data =
            (opaque_capture_descriptor_data as *const T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> OpaqueCaptureDescriptorDataCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for OpaqueCaptureDescriptorDataCreateInfoEXTBuilder<'b> {
    type Target = OpaqueCaptureDescriptorDataCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for OpaqueCaptureDescriptorDataCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for OpaqueCaptureDescriptorDataCreateInfoEXTBuilder<'b> {
    type Target = OpaqueCaptureDescriptorDataCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for OpticalFlowExecuteInfoNV {
    type Target = OpticalFlowExecuteInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for OpticalFlowExecuteInfoNV {
    type Builder = OpticalFlowExecuteInfoNVBuilder<'b>;
}

/// A builder for a [`OpticalFlowExecuteInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct OpticalFlowExecuteInfoNVBuilder<'b> {
    value: OpticalFlowExecuteInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> OpticalFlowExecuteInfoNVBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: OpticalFlowExecuteFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = Rect2D>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> OpticalFlowExecuteInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for OpticalFlowExecuteInfoNVBuilder<'b> {
    type Target = OpticalFlowExecuteInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for OpticalFlowExecuteInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for OpticalFlowExecuteInfoNVBuilder<'b> {
    type Target = OpticalFlowExecuteInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for OpticalFlowImageFormatInfoNV {
    type Target = OpticalFlowImageFormatInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for OpticalFlowImageFormatInfoNV {
    type Builder = OpticalFlowImageFormatInfoNVBuilder;
}

/// A builder for a [`OpticalFlowImageFormatInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct OpticalFlowImageFormatInfoNVBuilder {
    value: OpticalFlowImageFormatInfoNV,
}

impl OpticalFlowImageFormatInfoNVBuilder {
    #[inline]
    pub fn usage(mut self, usage: OpticalFlowUsageFlagsNV) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn build(self) -> OpticalFlowImageFormatInfoNV {
        self.value
    }
}

impl ops::Deref for OpticalFlowImageFormatInfoNVBuilder {
    type Target = OpticalFlowImageFormatInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for OpticalFlowImageFormatInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for OpticalFlowImageFormatInfoNVBuilder {
    type Target = OpticalFlowImageFormatInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for OpticalFlowImageFormatPropertiesNV {
    type Target = OpticalFlowImageFormatPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for OpticalFlowImageFormatPropertiesNV {
    type Builder = OpticalFlowImageFormatPropertiesNVBuilder;
}

/// A builder for a [`OpticalFlowImageFormatPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct OpticalFlowImageFormatPropertiesNVBuilder {
    value: OpticalFlowImageFormatPropertiesNV,
}

impl OpticalFlowImageFormatPropertiesNVBuilder {
    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn build(self) -> OpticalFlowImageFormatPropertiesNV {
        self.value
    }
}

impl ops::Deref for OpticalFlowImageFormatPropertiesNVBuilder {
    type Target = OpticalFlowImageFormatPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for OpticalFlowImageFormatPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for OpticalFlowImageFormatPropertiesNVBuilder {
    type Target = OpticalFlowImageFormatPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`OpticalFlowSessionCreateInfoNV`].
pub unsafe trait ExtendsOpticalFlowSessionCreateInfoNV: fmt::Debug {}
unsafe impl ExtendsOpticalFlowSessionCreateInfoNV for OpticalFlowSessionCreatePrivateDataInfoNV {}

unsafe impl Cast for OpticalFlowSessionCreateInfoNV {
    type Target = OpticalFlowSessionCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for OpticalFlowSessionCreateInfoNV {
    type Builder = OpticalFlowSessionCreateInfoNVBuilder<'b>;
}

/// A builder for a [`OpticalFlowSessionCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct OpticalFlowSessionCreateInfoNVBuilder<'b> {
    value: OpticalFlowSessionCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> OpticalFlowSessionCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsOpticalFlowSessionCreateInfoNV,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn width(mut self, width: u32) -> Self {
        self.value.width = width;
        self
    }

    #[inline]
    pub fn height(mut self, height: u32) -> Self {
        self.value.height = height;
        self
    }

    #[inline]
    pub fn image_format(mut self, image_format: Format) -> Self {
        self.value.image_format = image_format;
        self
    }

    #[inline]
    pub fn flow_vector_format(mut self, flow_vector_format: Format) -> Self {
        self.value.flow_vector_format = flow_vector_format;
        self
    }

    #[inline]
    pub fn cost_format(mut self, cost_format: Format) -> Self {
        self.value.cost_format = cost_format;
        self
    }

    #[inline]
    pub fn output_grid_size(mut self, output_grid_size: OpticalFlowGridSizeFlagsNV) -> Self {
        self.value.output_grid_size = output_grid_size;
        self
    }

    #[inline]
    pub fn hint_grid_size(mut self, hint_grid_size: OpticalFlowGridSizeFlagsNV) -> Self {
        self.value.hint_grid_size = hint_grid_size;
        self
    }

    #[inline]
    pub fn performance_level(mut self, performance_level: OpticalFlowPerformanceLevelNV) -> Self {
        self.value.performance_level = performance_level;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: OpticalFlowSessionCreateFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> OpticalFlowSessionCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for OpticalFlowSessionCreateInfoNVBuilder<'b> {
    type Target = OpticalFlowSessionCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for OpticalFlowSessionCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for OpticalFlowSessionCreateInfoNVBuilder<'b> {
    type Target = OpticalFlowSessionCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for OpticalFlowSessionCreatePrivateDataInfoNV {
    type Target = OpticalFlowSessionCreatePrivateDataInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for OpticalFlowSessionCreatePrivateDataInfoNV {
    type Builder = OpticalFlowSessionCreatePrivateDataInfoNVBuilder<'b>;
}

/// A builder for a [`OpticalFlowSessionCreatePrivateDataInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct OpticalFlowSessionCreatePrivateDataInfoNVBuilder<'b> {
    value: OpticalFlowSessionCreatePrivateDataInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> OpticalFlowSessionCreatePrivateDataInfoNVBuilder<'b> {
    #[inline]
    pub fn id(mut self, id: u32) -> Self {
        self.value.id = id;
        self
    }

    #[inline]
    pub fn size(mut self, size: u32) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn private_data<T>(mut self, private_data: &'b T) -> Self {
        self.value.private_data = (private_data as *const T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> OpticalFlowSessionCreatePrivateDataInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for OpticalFlowSessionCreatePrivateDataInfoNVBuilder<'b> {
    type Target = OpticalFlowSessionCreatePrivateDataInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for OpticalFlowSessionCreatePrivateDataInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for OpticalFlowSessionCreatePrivateDataInfoNVBuilder<'b> {
    type Target = OpticalFlowSessionCreatePrivateDataInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for OutOfBandQueueTypeInfoNV {
    type Target = OutOfBandQueueTypeInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for OutOfBandQueueTypeInfoNV {
    type Builder = OutOfBandQueueTypeInfoNVBuilder;
}

/// A builder for a [`OutOfBandQueueTypeInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct OutOfBandQueueTypeInfoNVBuilder {
    value: OutOfBandQueueTypeInfoNV,
}

impl OutOfBandQueueTypeInfoNVBuilder {
    #[inline]
    pub fn queue_type(mut self, queue_type: OutOfBandQueueTypeNV) -> Self {
        self.value.queue_type = queue_type;
        self
    }

    #[inline]
    pub fn build(self) -> OutOfBandQueueTypeInfoNV {
        self.value
    }
}

impl ops::Deref for OutOfBandQueueTypeInfoNVBuilder {
    type Target = OutOfBandQueueTypeInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for OutOfBandQueueTypeInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for OutOfBandQueueTypeInfoNVBuilder {
    type Target = OutOfBandQueueTypeInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PastPresentationTimingGOOGLE {
    type Target = PastPresentationTimingGOOGLE;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PastPresentationTimingGOOGLE {
    type Builder = PastPresentationTimingGOOGLEBuilder;
}

/// A builder for a [`PastPresentationTimingGOOGLE`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PastPresentationTimingGOOGLEBuilder {
    value: PastPresentationTimingGOOGLE,
}

impl PastPresentationTimingGOOGLEBuilder {
    #[inline]
    pub fn present_id(mut self, present_id: u32) -> Self {
        self.value.present_id = present_id;
        self
    }

    #[inline]
    pub fn desired_present_time(mut self, desired_present_time: u64) -> Self {
        self.value.desired_present_time = desired_present_time;
        self
    }

    #[inline]
    pub fn actual_present_time(mut self, actual_present_time: u64) -> Self {
        self.value.actual_present_time = actual_present_time;
        self
    }

    #[inline]
    pub fn earliest_present_time(mut self, earliest_present_time: u64) -> Self {
        self.value.earliest_present_time = earliest_present_time;
        self
    }

    #[inline]
    pub fn present_margin(mut self, present_margin: u64) -> Self {
        self.value.present_margin = present_margin;
        self
    }

    #[inline]
    pub fn build(self) -> PastPresentationTimingGOOGLE {
        self.value
    }
}

impl ops::Deref for PastPresentationTimingGOOGLEBuilder {
    type Target = PastPresentationTimingGOOGLE;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PastPresentationTimingGOOGLEBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PastPresentationTimingGOOGLEBuilder {
    type Target = PastPresentationTimingGOOGLE;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceConfigurationAcquireInfoINTEL {
    type Target = PerformanceConfigurationAcquireInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceConfigurationAcquireInfoINTEL {
    type Builder = PerformanceConfigurationAcquireInfoINTELBuilder;
}

/// A builder for a [`PerformanceConfigurationAcquireInfoINTEL`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceConfigurationAcquireInfoINTELBuilder {
    value: PerformanceConfigurationAcquireInfoINTEL,
}

impl PerformanceConfigurationAcquireInfoINTELBuilder {
    #[inline]
    pub fn type_(mut self, type_: PerformanceConfigurationTypeINTEL) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceConfigurationAcquireInfoINTEL {
        self.value
    }
}

impl ops::Deref for PerformanceConfigurationAcquireInfoINTELBuilder {
    type Target = PerformanceConfigurationAcquireInfoINTEL;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceConfigurationAcquireInfoINTELBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceConfigurationAcquireInfoINTELBuilder {
    type Target = PerformanceConfigurationAcquireInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceCounterDescriptionKHR {
    type Target = PerformanceCounterDescriptionKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceCounterDescriptionKHR {
    type Builder = PerformanceCounterDescriptionKHRBuilder;
}

/// A builder for a [`PerformanceCounterDescriptionKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceCounterDescriptionKHRBuilder {
    value: PerformanceCounterDescriptionKHR,
}

impl PerformanceCounterDescriptionKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: PerformanceCounterDescriptionFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn name(mut self, name: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>) -> Self {
        self.value.name = name.into();
        self
    }

    #[inline]
    pub fn category(mut self, category: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>) -> Self {
        self.value.category = category.into();
        self
    }

    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceCounterDescriptionKHR {
        self.value
    }
}

impl ops::Deref for PerformanceCounterDescriptionKHRBuilder {
    type Target = PerformanceCounterDescriptionKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceCounterDescriptionKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceCounterDescriptionKHRBuilder {
    type Target = PerformanceCounterDescriptionKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceCounterKHR {
    type Target = PerformanceCounterKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceCounterKHR {
    type Builder = PerformanceCounterKHRBuilder;
}

/// A builder for a [`PerformanceCounterKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceCounterKHRBuilder {
    value: PerformanceCounterKHR,
}

impl PerformanceCounterKHRBuilder {
    #[inline]
    pub fn unit(mut self, unit: PerformanceCounterUnitKHR) -> Self {
        self.value.unit = unit;
        self
    }

    #[inline]
    pub fn scope(mut self, scope: PerformanceCounterScopeKHR) -> Self {
        self.value.scope = scope;
        self
    }

    #[inline]
    pub fn storage(mut self, storage: PerformanceCounterStorageKHR) -> Self {
        self.value.storage = storage;
        self
    }

    #[inline]
    pub fn uuid(mut self, uuid: impl Into<ByteArray<UUID_SIZE>>) -> Self {
        self.value.uuid = uuid.into();
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceCounterKHR {
        self.value
    }
}

impl ops::Deref for PerformanceCounterKHRBuilder {
    type Target = PerformanceCounterKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceCounterKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceCounterKHRBuilder {
    type Target = PerformanceCounterKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceMarkerInfoINTEL {
    type Target = PerformanceMarkerInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceMarkerInfoINTEL {
    type Builder = PerformanceMarkerInfoINTELBuilder;
}

/// A builder for a [`PerformanceMarkerInfoINTEL`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceMarkerInfoINTELBuilder {
    value: PerformanceMarkerInfoINTEL,
}

impl PerformanceMarkerInfoINTELBuilder {
    #[inline]
    pub fn marker(mut self, marker: u64) -> Self {
        self.value.marker = marker;
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceMarkerInfoINTEL {
        self.value
    }
}

impl ops::Deref for PerformanceMarkerInfoINTELBuilder {
    type Target = PerformanceMarkerInfoINTEL;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceMarkerInfoINTELBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceMarkerInfoINTELBuilder {
    type Target = PerformanceMarkerInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceOverrideInfoINTEL {
    type Target = PerformanceOverrideInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceOverrideInfoINTEL {
    type Builder = PerformanceOverrideInfoINTELBuilder;
}

/// A builder for a [`PerformanceOverrideInfoINTEL`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceOverrideInfoINTELBuilder {
    value: PerformanceOverrideInfoINTEL,
}

impl PerformanceOverrideInfoINTELBuilder {
    #[inline]
    pub fn type_(mut self, type_: PerformanceOverrideTypeINTEL) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn enable(mut self, enable: bool) -> Self {
        self.value.enable = enable as Bool32;
        self
    }

    #[inline]
    pub fn parameter(mut self, parameter: u64) -> Self {
        self.value.parameter = parameter;
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceOverrideInfoINTEL {
        self.value
    }
}

impl ops::Deref for PerformanceOverrideInfoINTELBuilder {
    type Target = PerformanceOverrideInfoINTEL;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceOverrideInfoINTELBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceOverrideInfoINTELBuilder {
    type Target = PerformanceOverrideInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceQueryReservationInfoKHR {
    type Target = PerformanceQueryReservationInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceQueryReservationInfoKHR {
    type Builder = PerformanceQueryReservationInfoKHRBuilder;
}

/// A builder for a [`PerformanceQueryReservationInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceQueryReservationInfoKHRBuilder {
    value: PerformanceQueryReservationInfoKHR,
}

impl PerformanceQueryReservationInfoKHRBuilder {
    #[inline]
    pub fn max_performance_queries_per_pool(
        mut self,
        max_performance_queries_per_pool: u32,
    ) -> Self {
        self.value.max_performance_queries_per_pool = max_performance_queries_per_pool;
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceQueryReservationInfoKHR {
        self.value
    }
}

impl ops::Deref for PerformanceQueryReservationInfoKHRBuilder {
    type Target = PerformanceQueryReservationInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceQueryReservationInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceQueryReservationInfoKHRBuilder {
    type Target = PerformanceQueryReservationInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceQuerySubmitInfoKHR {
    type Target = PerformanceQuerySubmitInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceQuerySubmitInfoKHR {
    type Builder = PerformanceQuerySubmitInfoKHRBuilder;
}

/// A builder for a [`PerformanceQuerySubmitInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceQuerySubmitInfoKHRBuilder {
    value: PerformanceQuerySubmitInfoKHR,
}

impl PerformanceQuerySubmitInfoKHRBuilder {
    #[inline]
    pub fn counter_pass_index(mut self, counter_pass_index: u32) -> Self {
        self.value.counter_pass_index = counter_pass_index;
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceQuerySubmitInfoKHR {
        self.value
    }
}

impl ops::Deref for PerformanceQuerySubmitInfoKHRBuilder {
    type Target = PerformanceQuerySubmitInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceQuerySubmitInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceQuerySubmitInfoKHRBuilder {
    type Target = PerformanceQuerySubmitInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceStreamMarkerInfoINTEL {
    type Target = PerformanceStreamMarkerInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceStreamMarkerInfoINTEL {
    type Builder = PerformanceStreamMarkerInfoINTELBuilder;
}

/// A builder for a [`PerformanceStreamMarkerInfoINTEL`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceStreamMarkerInfoINTELBuilder {
    value: PerformanceStreamMarkerInfoINTEL,
}

impl PerformanceStreamMarkerInfoINTELBuilder {
    #[inline]
    pub fn marker(mut self, marker: u32) -> Self {
        self.value.marker = marker;
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceStreamMarkerInfoINTEL {
        self.value
    }
}

impl ops::Deref for PerformanceStreamMarkerInfoINTELBuilder {
    type Target = PerformanceStreamMarkerInfoINTEL;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceStreamMarkerInfoINTELBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceStreamMarkerInfoINTELBuilder {
    type Target = PerformanceStreamMarkerInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PerformanceValueINTEL {
    type Target = PerformanceValueINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PerformanceValueINTEL {
    type Builder = PerformanceValueINTELBuilder;
}

/// A builder for a [`PerformanceValueINTEL`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PerformanceValueINTELBuilder {
    value: PerformanceValueINTEL,
}

impl PerformanceValueINTELBuilder {
    #[inline]
    pub fn type_(mut self, type_: PerformanceValueTypeINTEL) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn data(mut self, data: PerformanceValueDataINTEL) -> Self {
        self.value.data = data;
        self
    }

    #[inline]
    pub fn build(self) -> PerformanceValueINTEL {
        self.value
    }
}

impl ops::Deref for PerformanceValueINTELBuilder {
    type Target = PerformanceValueINTEL;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PerformanceValueINTELBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PerformanceValueINTELBuilder {
    type Target = PerformanceValueINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevice16BitStorageFeatures {
    type Target = PhysicalDevice16BitStorageFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevice16BitStorageFeatures {
    type Builder = PhysicalDevice16BitStorageFeaturesBuilder;
}

/// A builder for a [`PhysicalDevice16BitStorageFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevice16BitStorageFeaturesBuilder {
    value: PhysicalDevice16BitStorageFeatures,
}

impl PhysicalDevice16BitStorageFeaturesBuilder {
    #[inline]
    pub fn storage_buffer_16bit_access(mut self, storage_buffer_16bit_access: bool) -> Self {
        self.value.storage_buffer_16bit_access = storage_buffer_16bit_access as Bool32;
        self
    }

    #[inline]
    pub fn uniform_and_storage_buffer_16bit_access(
        mut self,
        uniform_and_storage_buffer_16bit_access: bool,
    ) -> Self {
        self.value.uniform_and_storage_buffer_16bit_access =
            uniform_and_storage_buffer_16bit_access as Bool32;
        self
    }

    #[inline]
    pub fn storage_push_constant16(mut self, storage_push_constant16: bool) -> Self {
        self.value.storage_push_constant16 = storage_push_constant16 as Bool32;
        self
    }

    #[inline]
    pub fn storage_input_output16(mut self, storage_input_output16: bool) -> Self {
        self.value.storage_input_output16 = storage_input_output16 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevice16BitStorageFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDevice16BitStorageFeaturesBuilder {
    type Target = PhysicalDevice16BitStorageFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevice16BitStorageFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevice16BitStorageFeaturesBuilder {
    type Target = PhysicalDevice16BitStorageFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevice4444FormatsFeaturesEXT {
    type Target = PhysicalDevice4444FormatsFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevice4444FormatsFeaturesEXT {
    type Builder = PhysicalDevice4444FormatsFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDevice4444FormatsFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevice4444FormatsFeaturesEXTBuilder {
    value: PhysicalDevice4444FormatsFeaturesEXT,
}

impl PhysicalDevice4444FormatsFeaturesEXTBuilder {
    #[inline]
    pub fn format_a4_r4_g4_b4(mut self, format_a4_r4_g4_b4: bool) -> Self {
        self.value.format_a4_r4_g4_b4 = format_a4_r4_g4_b4 as Bool32;
        self
    }

    #[inline]
    pub fn format_a4_b4_g4_r4(mut self, format_a4_b4_g4_r4: bool) -> Self {
        self.value.format_a4_b4_g4_r4 = format_a4_b4_g4_r4 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevice4444FormatsFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevice4444FormatsFeaturesEXTBuilder {
    type Target = PhysicalDevice4444FormatsFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevice4444FormatsFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevice4444FormatsFeaturesEXTBuilder {
    type Target = PhysicalDevice4444FormatsFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevice8BitStorageFeatures {
    type Target = PhysicalDevice8BitStorageFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevice8BitStorageFeatures {
    type Builder = PhysicalDevice8BitStorageFeaturesBuilder;
}

/// A builder for a [`PhysicalDevice8BitStorageFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevice8BitStorageFeaturesBuilder {
    value: PhysicalDevice8BitStorageFeatures,
}

impl PhysicalDevice8BitStorageFeaturesBuilder {
    #[inline]
    pub fn storage_buffer_8bit_access(mut self, storage_buffer_8bit_access: bool) -> Self {
        self.value.storage_buffer_8bit_access = storage_buffer_8bit_access as Bool32;
        self
    }

    #[inline]
    pub fn uniform_and_storage_buffer_8bit_access(
        mut self,
        uniform_and_storage_buffer_8bit_access: bool,
    ) -> Self {
        self.value.uniform_and_storage_buffer_8bit_access =
            uniform_and_storage_buffer_8bit_access as Bool32;
        self
    }

    #[inline]
    pub fn storage_push_constant8(mut self, storage_push_constant8: bool) -> Self {
        self.value.storage_push_constant8 = storage_push_constant8 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevice8BitStorageFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDevice8BitStorageFeaturesBuilder {
    type Target = PhysicalDevice8BitStorageFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevice8BitStorageFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevice8BitStorageFeaturesBuilder {
    type Target = PhysicalDevice8BitStorageFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceASTCDecodeFeaturesEXT {
    type Target = PhysicalDeviceASTCDecodeFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceASTCDecodeFeaturesEXT {
    type Builder = PhysicalDeviceASTCDecodeFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceASTCDecodeFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceASTCDecodeFeaturesEXTBuilder {
    value: PhysicalDeviceASTCDecodeFeaturesEXT,
}

impl PhysicalDeviceASTCDecodeFeaturesEXTBuilder {
    #[inline]
    pub fn decode_mode_shared_exponent(mut self, decode_mode_shared_exponent: bool) -> Self {
        self.value.decode_mode_shared_exponent = decode_mode_shared_exponent as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceASTCDecodeFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceASTCDecodeFeaturesEXTBuilder {
    type Target = PhysicalDeviceASTCDecodeFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceASTCDecodeFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceASTCDecodeFeaturesEXTBuilder {
    type Target = PhysicalDeviceASTCDecodeFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceAccelerationStructureFeaturesKHR {
    type Target = PhysicalDeviceAccelerationStructureFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceAccelerationStructureFeaturesKHR {
    type Builder = PhysicalDeviceAccelerationStructureFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceAccelerationStructureFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceAccelerationStructureFeaturesKHRBuilder {
    value: PhysicalDeviceAccelerationStructureFeaturesKHR,
}

impl PhysicalDeviceAccelerationStructureFeaturesKHRBuilder {
    #[inline]
    pub fn acceleration_structure(mut self, acceleration_structure: bool) -> Self {
        self.value.acceleration_structure = acceleration_structure as Bool32;
        self
    }

    #[inline]
    pub fn acceleration_structure_capture_replay(
        mut self,
        acceleration_structure_capture_replay: bool,
    ) -> Self {
        self.value.acceleration_structure_capture_replay =
            acceleration_structure_capture_replay as Bool32;
        self
    }

    #[inline]
    pub fn acceleration_structure_indirect_build(
        mut self,
        acceleration_structure_indirect_build: bool,
    ) -> Self {
        self.value.acceleration_structure_indirect_build =
            acceleration_structure_indirect_build as Bool32;
        self
    }

    #[inline]
    pub fn acceleration_structure_host_commands(
        mut self,
        acceleration_structure_host_commands: bool,
    ) -> Self {
        self.value.acceleration_structure_host_commands =
            acceleration_structure_host_commands as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_acceleration_structure_update_after_bind(
        mut self,
        descriptor_binding_acceleration_structure_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_acceleration_structure_update_after_bind =
            descriptor_binding_acceleration_structure_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceAccelerationStructureFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceAccelerationStructureFeaturesKHRBuilder {
    type Target = PhysicalDeviceAccelerationStructureFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceAccelerationStructureFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceAccelerationStructureFeaturesKHRBuilder {
    type Target = PhysicalDeviceAccelerationStructureFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceAccelerationStructurePropertiesKHR {
    type Target = PhysicalDeviceAccelerationStructurePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceAccelerationStructurePropertiesKHR {
    type Builder = PhysicalDeviceAccelerationStructurePropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceAccelerationStructurePropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceAccelerationStructurePropertiesKHRBuilder {
    value: PhysicalDeviceAccelerationStructurePropertiesKHR,
}

impl PhysicalDeviceAccelerationStructurePropertiesKHRBuilder {
    #[inline]
    pub fn max_geometry_count(mut self, max_geometry_count: u64) -> Self {
        self.value.max_geometry_count = max_geometry_count;
        self
    }

    #[inline]
    pub fn max_instance_count(mut self, max_instance_count: u64) -> Self {
        self.value.max_instance_count = max_instance_count;
        self
    }

    #[inline]
    pub fn max_primitive_count(mut self, max_primitive_count: u64) -> Self {
        self.value.max_primitive_count = max_primitive_count;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_acceleration_structures(
        mut self,
        max_per_stage_descriptor_acceleration_structures: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_acceleration_structures =
            max_per_stage_descriptor_acceleration_structures;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_acceleration_structures(
        mut self,
        max_per_stage_descriptor_update_after_bind_acceleration_structures: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_acceleration_structures =
            max_per_stage_descriptor_update_after_bind_acceleration_structures;
        self
    }

    #[inline]
    pub fn max_descriptor_set_acceleration_structures(
        mut self,
        max_descriptor_set_acceleration_structures: u32,
    ) -> Self {
        self.value.max_descriptor_set_acceleration_structures =
            max_descriptor_set_acceleration_structures;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_acceleration_structures(
        mut self,
        max_descriptor_set_update_after_bind_acceleration_structures: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_acceleration_structures =
            max_descriptor_set_update_after_bind_acceleration_structures;
        self
    }

    #[inline]
    pub fn min_acceleration_structure_scratch_offset_alignment(
        mut self,
        min_acceleration_structure_scratch_offset_alignment: u32,
    ) -> Self {
        self.value
            .min_acceleration_structure_scratch_offset_alignment =
            min_acceleration_structure_scratch_offset_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceAccelerationStructurePropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceAccelerationStructurePropertiesKHRBuilder {
    type Target = PhysicalDeviceAccelerationStructurePropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceAccelerationStructurePropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceAccelerationStructurePropertiesKHRBuilder {
    type Target = PhysicalDeviceAccelerationStructurePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceAddressBindingReportFeaturesEXT {
    type Target = PhysicalDeviceAddressBindingReportFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceAddressBindingReportFeaturesEXT {
    type Builder = PhysicalDeviceAddressBindingReportFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceAddressBindingReportFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceAddressBindingReportFeaturesEXTBuilder {
    value: PhysicalDeviceAddressBindingReportFeaturesEXT,
}

impl PhysicalDeviceAddressBindingReportFeaturesEXTBuilder {
    #[inline]
    pub fn report_address_binding(mut self, report_address_binding: bool) -> Self {
        self.value.report_address_binding = report_address_binding as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceAddressBindingReportFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceAddressBindingReportFeaturesEXTBuilder {
    type Target = PhysicalDeviceAddressBindingReportFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceAddressBindingReportFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceAddressBindingReportFeaturesEXTBuilder {
    type Target = PhysicalDeviceAddressBindingReportFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceAmigoProfilingFeaturesSEC {
    type Target = PhysicalDeviceAmigoProfilingFeaturesSEC;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceAmigoProfilingFeaturesSEC {
    type Builder = PhysicalDeviceAmigoProfilingFeaturesSECBuilder;
}

/// A builder for a [`PhysicalDeviceAmigoProfilingFeaturesSEC`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceAmigoProfilingFeaturesSECBuilder {
    value: PhysicalDeviceAmigoProfilingFeaturesSEC,
}

impl PhysicalDeviceAmigoProfilingFeaturesSECBuilder {
    #[inline]
    pub fn amigo_profiling(mut self, amigo_profiling: bool) -> Self {
        self.value.amigo_profiling = amigo_profiling as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceAmigoProfilingFeaturesSEC {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceAmigoProfilingFeaturesSECBuilder {
    type Target = PhysicalDeviceAmigoProfilingFeaturesSEC;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceAmigoProfilingFeaturesSECBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceAmigoProfilingFeaturesSECBuilder {
    type Target = PhysicalDeviceAmigoProfilingFeaturesSEC;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceAntiLagFeaturesAMD {
    type Target = PhysicalDeviceAntiLagFeaturesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceAntiLagFeaturesAMD {
    type Builder = PhysicalDeviceAntiLagFeaturesAMDBuilder;
}

/// A builder for a [`PhysicalDeviceAntiLagFeaturesAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceAntiLagFeaturesAMDBuilder {
    value: PhysicalDeviceAntiLagFeaturesAMD,
}

impl PhysicalDeviceAntiLagFeaturesAMDBuilder {
    #[inline]
    pub fn anti_lag(mut self, anti_lag: bool) -> Self {
        self.value.anti_lag = anti_lag as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceAntiLagFeaturesAMD {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceAntiLagFeaturesAMDBuilder {
    type Target = PhysicalDeviceAntiLagFeaturesAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceAntiLagFeaturesAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceAntiLagFeaturesAMDBuilder {
    type Target = PhysicalDeviceAntiLagFeaturesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
    type Target = PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
    type Builder = PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTBuilder {
    value: PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT,
}

impl PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTBuilder {
    #[inline]
    pub fn attachment_feedback_loop_dynamic_state(
        mut self,
        attachment_feedback_loop_dynamic_state: bool,
    ) -> Self {
        self.value.attachment_feedback_loop_dynamic_state =
            attachment_feedback_loop_dynamic_state as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTBuilder {
    type Target = PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTBuilder {
    type Target = PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    type Target = PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    type Builder = PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTBuilder {
    value: PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
}

impl PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTBuilder {
    #[inline]
    pub fn attachment_feedback_loop_layout(
        mut self,
        attachment_feedback_loop_layout: bool,
    ) -> Self {
        self.value.attachment_feedback_loop_layout = attachment_feedback_loop_layout as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTBuilder {
    type Target = PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTBuilder {
    type Target = PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    type Target = PhysicalDeviceBlendOperationAdvancedFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    type Builder = PhysicalDeviceBlendOperationAdvancedFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceBlendOperationAdvancedFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceBlendOperationAdvancedFeaturesEXTBuilder {
    value: PhysicalDeviceBlendOperationAdvancedFeaturesEXT,
}

impl PhysicalDeviceBlendOperationAdvancedFeaturesEXTBuilder {
    #[inline]
    pub fn advanced_blend_coherent_operations(
        mut self,
        advanced_blend_coherent_operations: bool,
    ) -> Self {
        self.value.advanced_blend_coherent_operations =
            advanced_blend_coherent_operations as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceBlendOperationAdvancedFeaturesEXTBuilder {
    type Target = PhysicalDeviceBlendOperationAdvancedFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceBlendOperationAdvancedFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceBlendOperationAdvancedFeaturesEXTBuilder {
    type Target = PhysicalDeviceBlendOperationAdvancedFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    type Target = PhysicalDeviceBlendOperationAdvancedPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    type Builder = PhysicalDeviceBlendOperationAdvancedPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceBlendOperationAdvancedPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceBlendOperationAdvancedPropertiesEXTBuilder {
    value: PhysicalDeviceBlendOperationAdvancedPropertiesEXT,
}

impl PhysicalDeviceBlendOperationAdvancedPropertiesEXTBuilder {
    #[inline]
    pub fn advanced_blend_max_color_attachments(
        mut self,
        advanced_blend_max_color_attachments: u32,
    ) -> Self {
        self.value.advanced_blend_max_color_attachments = advanced_blend_max_color_attachments;
        self
    }

    #[inline]
    pub fn advanced_blend_independent_blend(
        mut self,
        advanced_blend_independent_blend: bool,
    ) -> Self {
        self.value.advanced_blend_independent_blend = advanced_blend_independent_blend as Bool32;
        self
    }

    #[inline]
    pub fn advanced_blend_non_premultiplied_src_color(
        mut self,
        advanced_blend_non_premultiplied_src_color: bool,
    ) -> Self {
        self.value.advanced_blend_non_premultiplied_src_color =
            advanced_blend_non_premultiplied_src_color as Bool32;
        self
    }

    #[inline]
    pub fn advanced_blend_non_premultiplied_dst_color(
        mut self,
        advanced_blend_non_premultiplied_dst_color: bool,
    ) -> Self {
        self.value.advanced_blend_non_premultiplied_dst_color =
            advanced_blend_non_premultiplied_dst_color as Bool32;
        self
    }

    #[inline]
    pub fn advanced_blend_correlated_overlap(
        mut self,
        advanced_blend_correlated_overlap: bool,
    ) -> Self {
        self.value.advanced_blend_correlated_overlap = advanced_blend_correlated_overlap as Bool32;
        self
    }

    #[inline]
    pub fn advanced_blend_all_operations(mut self, advanced_blend_all_operations: bool) -> Self {
        self.value.advanced_blend_all_operations = advanced_blend_all_operations as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceBlendOperationAdvancedPropertiesEXTBuilder {
    type Target = PhysicalDeviceBlendOperationAdvancedPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceBlendOperationAdvancedPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceBlendOperationAdvancedPropertiesEXTBuilder {
    type Target = PhysicalDeviceBlendOperationAdvancedPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceBorderColorSwizzleFeaturesEXT {
    type Target = PhysicalDeviceBorderColorSwizzleFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceBorderColorSwizzleFeaturesEXT {
    type Builder = PhysicalDeviceBorderColorSwizzleFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceBorderColorSwizzleFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceBorderColorSwizzleFeaturesEXTBuilder {
    value: PhysicalDeviceBorderColorSwizzleFeaturesEXT,
}

impl PhysicalDeviceBorderColorSwizzleFeaturesEXTBuilder {
    #[inline]
    pub fn border_color_swizzle(mut self, border_color_swizzle: bool) -> Self {
        self.value.border_color_swizzle = border_color_swizzle as Bool32;
        self
    }

    #[inline]
    pub fn border_color_swizzle_from_image(
        mut self,
        border_color_swizzle_from_image: bool,
    ) -> Self {
        self.value.border_color_swizzle_from_image = border_color_swizzle_from_image as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceBorderColorSwizzleFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceBorderColorSwizzleFeaturesEXTBuilder {
    type Target = PhysicalDeviceBorderColorSwizzleFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceBorderColorSwizzleFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceBorderColorSwizzleFeaturesEXTBuilder {
    type Target = PhysicalDeviceBorderColorSwizzleFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceBufferDeviceAddressFeatures {
    type Target = PhysicalDeviceBufferDeviceAddressFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceBufferDeviceAddressFeatures {
    type Builder = PhysicalDeviceBufferDeviceAddressFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceBufferDeviceAddressFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceBufferDeviceAddressFeaturesBuilder {
    value: PhysicalDeviceBufferDeviceAddressFeatures,
}

impl PhysicalDeviceBufferDeviceAddressFeaturesBuilder {
    #[inline]
    pub fn buffer_device_address(mut self, buffer_device_address: bool) -> Self {
        self.value.buffer_device_address = buffer_device_address as Bool32;
        self
    }

    #[inline]
    pub fn buffer_device_address_capture_replay(
        mut self,
        buffer_device_address_capture_replay: bool,
    ) -> Self {
        self.value.buffer_device_address_capture_replay =
            buffer_device_address_capture_replay as Bool32;
        self
    }

    #[inline]
    pub fn buffer_device_address_multi_device(
        mut self,
        buffer_device_address_multi_device: bool,
    ) -> Self {
        self.value.buffer_device_address_multi_device =
            buffer_device_address_multi_device as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceBufferDeviceAddressFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceBufferDeviceAddressFeaturesBuilder {
    type Target = PhysicalDeviceBufferDeviceAddressFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceBufferDeviceAddressFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceBufferDeviceAddressFeaturesBuilder {
    type Target = PhysicalDeviceBufferDeviceAddressFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceBufferDeviceAddressFeaturesEXT {
    type Target = PhysicalDeviceBufferDeviceAddressFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceBufferDeviceAddressFeaturesEXT {
    type Builder = PhysicalDeviceBufferDeviceAddressFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceBufferDeviceAddressFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceBufferDeviceAddressFeaturesEXTBuilder {
    value: PhysicalDeviceBufferDeviceAddressFeaturesEXT,
}

impl PhysicalDeviceBufferDeviceAddressFeaturesEXTBuilder {
    #[inline]
    pub fn buffer_device_address(mut self, buffer_device_address: bool) -> Self {
        self.value.buffer_device_address = buffer_device_address as Bool32;
        self
    }

    #[inline]
    pub fn buffer_device_address_capture_replay(
        mut self,
        buffer_device_address_capture_replay: bool,
    ) -> Self {
        self.value.buffer_device_address_capture_replay =
            buffer_device_address_capture_replay as Bool32;
        self
    }

    #[inline]
    pub fn buffer_device_address_multi_device(
        mut self,
        buffer_device_address_multi_device: bool,
    ) -> Self {
        self.value.buffer_device_address_multi_device =
            buffer_device_address_multi_device as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceBufferDeviceAddressFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceBufferDeviceAddressFeaturesEXTBuilder {
    type Target = PhysicalDeviceBufferDeviceAddressFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceBufferDeviceAddressFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceBufferDeviceAddressFeaturesEXTBuilder {
    type Target = PhysicalDeviceBufferDeviceAddressFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceClusterCullingShaderFeaturesHUAWEI`].
pub unsafe trait ExtendsPhysicalDeviceClusterCullingShaderFeaturesHUAWEI:
    fmt::Debug
{
}
unsafe impl ExtendsPhysicalDeviceClusterCullingShaderFeaturesHUAWEI
    for PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI
{
}

unsafe impl Cast for PhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    type Target = PhysicalDeviceClusterCullingShaderFeaturesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    type Builder = PhysicalDeviceClusterCullingShaderFeaturesHUAWEIBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceClusterCullingShaderFeaturesHUAWEI`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceClusterCullingShaderFeaturesHUAWEIBuilder<'b> {
    value: PhysicalDeviceClusterCullingShaderFeaturesHUAWEI,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceClusterCullingShaderFeaturesHUAWEIBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceClusterCullingShaderFeaturesHUAWEI,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn clusterculling_shader(mut self, clusterculling_shader: bool) -> Self {
        self.value.clusterculling_shader = clusterculling_shader as Bool32;
        self
    }

    #[inline]
    pub fn multiview_cluster_culling_shader(
        mut self,
        multiview_cluster_culling_shader: bool,
    ) -> Self {
        self.value.multiview_cluster_culling_shader = multiview_cluster_culling_shader as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceClusterCullingShaderFeaturesHUAWEIBuilder<'b> {
    type Target = PhysicalDeviceClusterCullingShaderFeaturesHUAWEI;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceClusterCullingShaderFeaturesHUAWEIBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceClusterCullingShaderFeaturesHUAWEIBuilder<'b> {
    type Target = PhysicalDeviceClusterCullingShaderFeaturesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    type Target = PhysicalDeviceClusterCullingShaderPropertiesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    type Builder = PhysicalDeviceClusterCullingShaderPropertiesHUAWEIBuilder;
}

/// A builder for a [`PhysicalDeviceClusterCullingShaderPropertiesHUAWEI`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceClusterCullingShaderPropertiesHUAWEIBuilder {
    value: PhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
}

impl PhysicalDeviceClusterCullingShaderPropertiesHUAWEIBuilder {
    #[inline]
    pub fn max_work_group_count(mut self, max_work_group_count: [u32; 3]) -> Self {
        self.value.max_work_group_count = max_work_group_count;
        self
    }

    #[inline]
    pub fn max_work_group_size(mut self, max_work_group_size: [u32; 3]) -> Self {
        self.value.max_work_group_size = max_work_group_size;
        self
    }

    #[inline]
    pub fn max_output_cluster_count(mut self, max_output_cluster_count: u32) -> Self {
        self.value.max_output_cluster_count = max_output_cluster_count;
        self
    }

    #[inline]
    pub fn indirect_buffer_offset_alignment(
        mut self,
        indirect_buffer_offset_alignment: DeviceSize,
    ) -> Self {
        self.value.indirect_buffer_offset_alignment = indirect_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceClusterCullingShaderPropertiesHUAWEIBuilder {
    type Target = PhysicalDeviceClusterCullingShaderPropertiesHUAWEI;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceClusterCullingShaderPropertiesHUAWEIBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceClusterCullingShaderPropertiesHUAWEIBuilder {
    type Target = PhysicalDeviceClusterCullingShaderPropertiesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
    type Target = PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
    type Builder = PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIBuilder;
}

/// A builder for a [`PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIBuilder {
    value: PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI,
}

impl PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIBuilder {
    #[inline]
    pub fn cluster_shading_rate(mut self, cluster_shading_rate: bool) -> Self {
        self.value.cluster_shading_rate = cluster_shading_rate as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIBuilder {
    type Target = PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIBuilder {
    type Target = PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCoherentMemoryFeaturesAMD {
    type Target = PhysicalDeviceCoherentMemoryFeaturesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCoherentMemoryFeaturesAMD {
    type Builder = PhysicalDeviceCoherentMemoryFeaturesAMDBuilder;
}

/// A builder for a [`PhysicalDeviceCoherentMemoryFeaturesAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCoherentMemoryFeaturesAMDBuilder {
    value: PhysicalDeviceCoherentMemoryFeaturesAMD,
}

impl PhysicalDeviceCoherentMemoryFeaturesAMDBuilder {
    #[inline]
    pub fn device_coherent_memory(mut self, device_coherent_memory: bool) -> Self {
        self.value.device_coherent_memory = device_coherent_memory as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCoherentMemoryFeaturesAMD {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCoherentMemoryFeaturesAMDBuilder {
    type Target = PhysicalDeviceCoherentMemoryFeaturesAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCoherentMemoryFeaturesAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCoherentMemoryFeaturesAMDBuilder {
    type Target = PhysicalDeviceCoherentMemoryFeaturesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceColorWriteEnableFeaturesEXT {
    type Target = PhysicalDeviceColorWriteEnableFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceColorWriteEnableFeaturesEXT {
    type Builder = PhysicalDeviceColorWriteEnableFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceColorWriteEnableFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceColorWriteEnableFeaturesEXTBuilder {
    value: PhysicalDeviceColorWriteEnableFeaturesEXT,
}

impl PhysicalDeviceColorWriteEnableFeaturesEXTBuilder {
    #[inline]
    pub fn color_write_enable(mut self, color_write_enable: bool) -> Self {
        self.value.color_write_enable = color_write_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceColorWriteEnableFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceColorWriteEnableFeaturesEXTBuilder {
    type Target = PhysicalDeviceColorWriteEnableFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceColorWriteEnableFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceColorWriteEnableFeaturesEXTBuilder {
    type Target = PhysicalDeviceColorWriteEnableFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCommandBufferInheritanceFeaturesNV {
    type Target = PhysicalDeviceCommandBufferInheritanceFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCommandBufferInheritanceFeaturesNV {
    type Builder = PhysicalDeviceCommandBufferInheritanceFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCommandBufferInheritanceFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCommandBufferInheritanceFeaturesNVBuilder {
    value: PhysicalDeviceCommandBufferInheritanceFeaturesNV,
}

impl PhysicalDeviceCommandBufferInheritanceFeaturesNVBuilder {
    #[inline]
    pub fn command_buffer_inheritance(mut self, command_buffer_inheritance: bool) -> Self {
        self.value.command_buffer_inheritance = command_buffer_inheritance as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCommandBufferInheritanceFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCommandBufferInheritanceFeaturesNVBuilder {
    type Target = PhysicalDeviceCommandBufferInheritanceFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCommandBufferInheritanceFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCommandBufferInheritanceFeaturesNVBuilder {
    type Target = PhysicalDeviceCommandBufferInheritanceFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceComputeShaderDerivativesFeaturesKHR {
    type Target = PhysicalDeviceComputeShaderDerivativesFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceComputeShaderDerivativesFeaturesKHR {
    type Builder = PhysicalDeviceComputeShaderDerivativesFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceComputeShaderDerivativesFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceComputeShaderDerivativesFeaturesKHRBuilder {
    value: PhysicalDeviceComputeShaderDerivativesFeaturesKHR,
}

impl PhysicalDeviceComputeShaderDerivativesFeaturesKHRBuilder {
    #[inline]
    pub fn compute_derivative_group_quads(mut self, compute_derivative_group_quads: bool) -> Self {
        self.value.compute_derivative_group_quads = compute_derivative_group_quads as Bool32;
        self
    }

    #[inline]
    pub fn compute_derivative_group_linear(
        mut self,
        compute_derivative_group_linear: bool,
    ) -> Self {
        self.value.compute_derivative_group_linear = compute_derivative_group_linear as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceComputeShaderDerivativesFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceComputeShaderDerivativesFeaturesKHRBuilder {
    type Target = PhysicalDeviceComputeShaderDerivativesFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceComputeShaderDerivativesFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceComputeShaderDerivativesFeaturesKHRBuilder {
    type Target = PhysicalDeviceComputeShaderDerivativesFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceComputeShaderDerivativesPropertiesKHR {
    type Target = PhysicalDeviceComputeShaderDerivativesPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceComputeShaderDerivativesPropertiesKHR {
    type Builder = PhysicalDeviceComputeShaderDerivativesPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceComputeShaderDerivativesPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceComputeShaderDerivativesPropertiesKHRBuilder {
    value: PhysicalDeviceComputeShaderDerivativesPropertiesKHR,
}

impl PhysicalDeviceComputeShaderDerivativesPropertiesKHRBuilder {
    #[inline]
    pub fn mesh_and_task_shader_derivatives(
        mut self,
        mesh_and_task_shader_derivatives: bool,
    ) -> Self {
        self.value.mesh_and_task_shader_derivatives = mesh_and_task_shader_derivatives as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceComputeShaderDerivativesPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceComputeShaderDerivativesPropertiesKHRBuilder {
    type Target = PhysicalDeviceComputeShaderDerivativesPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceComputeShaderDerivativesPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceComputeShaderDerivativesPropertiesKHRBuilder {
    type Target = PhysicalDeviceComputeShaderDerivativesPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceConditionalRenderingFeaturesEXT {
    type Target = PhysicalDeviceConditionalRenderingFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceConditionalRenderingFeaturesEXT {
    type Builder = PhysicalDeviceConditionalRenderingFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceConditionalRenderingFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceConditionalRenderingFeaturesEXTBuilder {
    value: PhysicalDeviceConditionalRenderingFeaturesEXT,
}

impl PhysicalDeviceConditionalRenderingFeaturesEXTBuilder {
    #[inline]
    pub fn conditional_rendering(mut self, conditional_rendering: bool) -> Self {
        self.value.conditional_rendering = conditional_rendering as Bool32;
        self
    }

    #[inline]
    pub fn inherited_conditional_rendering(
        mut self,
        inherited_conditional_rendering: bool,
    ) -> Self {
        self.value.inherited_conditional_rendering = inherited_conditional_rendering as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceConditionalRenderingFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceConditionalRenderingFeaturesEXTBuilder {
    type Target = PhysicalDeviceConditionalRenderingFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceConditionalRenderingFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceConditionalRenderingFeaturesEXTBuilder {
    type Target = PhysicalDeviceConditionalRenderingFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceConservativeRasterizationPropertiesEXT {
    type Target = PhysicalDeviceConservativeRasterizationPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceConservativeRasterizationPropertiesEXT {
    type Builder = PhysicalDeviceConservativeRasterizationPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceConservativeRasterizationPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceConservativeRasterizationPropertiesEXTBuilder {
    value: PhysicalDeviceConservativeRasterizationPropertiesEXT,
}

impl PhysicalDeviceConservativeRasterizationPropertiesEXTBuilder {
    #[inline]
    pub fn primitive_overestimation_size(mut self, primitive_overestimation_size: f32) -> Self {
        self.value.primitive_overestimation_size = primitive_overestimation_size;
        self
    }

    #[inline]
    pub fn max_extra_primitive_overestimation_size(
        mut self,
        max_extra_primitive_overestimation_size: f32,
    ) -> Self {
        self.value.max_extra_primitive_overestimation_size =
            max_extra_primitive_overestimation_size;
        self
    }

    #[inline]
    pub fn extra_primitive_overestimation_size_granularity(
        mut self,
        extra_primitive_overestimation_size_granularity: f32,
    ) -> Self {
        self.value.extra_primitive_overestimation_size_granularity =
            extra_primitive_overestimation_size_granularity;
        self
    }

    #[inline]
    pub fn primitive_underestimation(mut self, primitive_underestimation: bool) -> Self {
        self.value.primitive_underestimation = primitive_underestimation as Bool32;
        self
    }

    #[inline]
    pub fn conservative_point_and_line_rasterization(
        mut self,
        conservative_point_and_line_rasterization: bool,
    ) -> Self {
        self.value.conservative_point_and_line_rasterization =
            conservative_point_and_line_rasterization as Bool32;
        self
    }

    #[inline]
    pub fn degenerate_triangles_rasterized(
        mut self,
        degenerate_triangles_rasterized: bool,
    ) -> Self {
        self.value.degenerate_triangles_rasterized = degenerate_triangles_rasterized as Bool32;
        self
    }

    #[inline]
    pub fn degenerate_lines_rasterized(mut self, degenerate_lines_rasterized: bool) -> Self {
        self.value.degenerate_lines_rasterized = degenerate_lines_rasterized as Bool32;
        self
    }

    #[inline]
    pub fn fully_covered_fragment_shader_input_variable(
        mut self,
        fully_covered_fragment_shader_input_variable: bool,
    ) -> Self {
        self.value.fully_covered_fragment_shader_input_variable =
            fully_covered_fragment_shader_input_variable as Bool32;
        self
    }

    #[inline]
    pub fn conservative_rasterization_post_depth_coverage(
        mut self,
        conservative_rasterization_post_depth_coverage: bool,
    ) -> Self {
        self.value.conservative_rasterization_post_depth_coverage =
            conservative_rasterization_post_depth_coverage as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceConservativeRasterizationPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceConservativeRasterizationPropertiesEXTBuilder {
    type Target = PhysicalDeviceConservativeRasterizationPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceConservativeRasterizationPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceConservativeRasterizationPropertiesEXTBuilder {
    type Target = PhysicalDeviceConservativeRasterizationPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCooperativeMatrixFeaturesKHR {
    type Target = PhysicalDeviceCooperativeMatrixFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCooperativeMatrixFeaturesKHR {
    type Builder = PhysicalDeviceCooperativeMatrixFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceCooperativeMatrixFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCooperativeMatrixFeaturesKHRBuilder {
    value: PhysicalDeviceCooperativeMatrixFeaturesKHR,
}

impl PhysicalDeviceCooperativeMatrixFeaturesKHRBuilder {
    #[inline]
    pub fn cooperative_matrix(mut self, cooperative_matrix: bool) -> Self {
        self.value.cooperative_matrix = cooperative_matrix as Bool32;
        self
    }

    #[inline]
    pub fn cooperative_matrix_robust_buffer_access(
        mut self,
        cooperative_matrix_robust_buffer_access: bool,
    ) -> Self {
        self.value.cooperative_matrix_robust_buffer_access =
            cooperative_matrix_robust_buffer_access as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCooperativeMatrixFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCooperativeMatrixFeaturesKHRBuilder {
    type Target = PhysicalDeviceCooperativeMatrixFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCooperativeMatrixFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCooperativeMatrixFeaturesKHRBuilder {
    type Target = PhysicalDeviceCooperativeMatrixFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCooperativeMatrixFeaturesNV {
    type Target = PhysicalDeviceCooperativeMatrixFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCooperativeMatrixFeaturesNV {
    type Builder = PhysicalDeviceCooperativeMatrixFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCooperativeMatrixFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCooperativeMatrixFeaturesNVBuilder {
    value: PhysicalDeviceCooperativeMatrixFeaturesNV,
}

impl PhysicalDeviceCooperativeMatrixFeaturesNVBuilder {
    #[inline]
    pub fn cooperative_matrix(mut self, cooperative_matrix: bool) -> Self {
        self.value.cooperative_matrix = cooperative_matrix as Bool32;
        self
    }

    #[inline]
    pub fn cooperative_matrix_robust_buffer_access(
        mut self,
        cooperative_matrix_robust_buffer_access: bool,
    ) -> Self {
        self.value.cooperative_matrix_robust_buffer_access =
            cooperative_matrix_robust_buffer_access as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCooperativeMatrixFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCooperativeMatrixFeaturesNVBuilder {
    type Target = PhysicalDeviceCooperativeMatrixFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCooperativeMatrixFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCooperativeMatrixFeaturesNVBuilder {
    type Target = PhysicalDeviceCooperativeMatrixFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCooperativeMatrixPropertiesKHR {
    type Target = PhysicalDeviceCooperativeMatrixPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCooperativeMatrixPropertiesKHR {
    type Builder = PhysicalDeviceCooperativeMatrixPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceCooperativeMatrixPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCooperativeMatrixPropertiesKHRBuilder {
    value: PhysicalDeviceCooperativeMatrixPropertiesKHR,
}

impl PhysicalDeviceCooperativeMatrixPropertiesKHRBuilder {
    #[inline]
    pub fn cooperative_matrix_supported_stages(
        mut self,
        cooperative_matrix_supported_stages: ShaderStageFlags,
    ) -> Self {
        self.value.cooperative_matrix_supported_stages = cooperative_matrix_supported_stages;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCooperativeMatrixPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCooperativeMatrixPropertiesKHRBuilder {
    type Target = PhysicalDeviceCooperativeMatrixPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCooperativeMatrixPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCooperativeMatrixPropertiesKHRBuilder {
    type Target = PhysicalDeviceCooperativeMatrixPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCooperativeMatrixPropertiesNV {
    type Target = PhysicalDeviceCooperativeMatrixPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCooperativeMatrixPropertiesNV {
    type Builder = PhysicalDeviceCooperativeMatrixPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCooperativeMatrixPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCooperativeMatrixPropertiesNVBuilder {
    value: PhysicalDeviceCooperativeMatrixPropertiesNV,
}

impl PhysicalDeviceCooperativeMatrixPropertiesNVBuilder {
    #[inline]
    pub fn cooperative_matrix_supported_stages(
        mut self,
        cooperative_matrix_supported_stages: ShaderStageFlags,
    ) -> Self {
        self.value.cooperative_matrix_supported_stages = cooperative_matrix_supported_stages;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCooperativeMatrixPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCooperativeMatrixPropertiesNVBuilder {
    type Target = PhysicalDeviceCooperativeMatrixPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCooperativeMatrixPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCooperativeMatrixPropertiesNVBuilder {
    type Target = PhysicalDeviceCooperativeMatrixPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCopyMemoryIndirectFeaturesNV {
    type Target = PhysicalDeviceCopyMemoryIndirectFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCopyMemoryIndirectFeaturesNV {
    type Builder = PhysicalDeviceCopyMemoryIndirectFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCopyMemoryIndirectFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCopyMemoryIndirectFeaturesNVBuilder {
    value: PhysicalDeviceCopyMemoryIndirectFeaturesNV,
}

impl PhysicalDeviceCopyMemoryIndirectFeaturesNVBuilder {
    #[inline]
    pub fn indirect_copy(mut self, indirect_copy: bool) -> Self {
        self.value.indirect_copy = indirect_copy as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCopyMemoryIndirectFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCopyMemoryIndirectFeaturesNVBuilder {
    type Target = PhysicalDeviceCopyMemoryIndirectFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCopyMemoryIndirectFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCopyMemoryIndirectFeaturesNVBuilder {
    type Target = PhysicalDeviceCopyMemoryIndirectFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCopyMemoryIndirectPropertiesNV {
    type Target = PhysicalDeviceCopyMemoryIndirectPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCopyMemoryIndirectPropertiesNV {
    type Builder = PhysicalDeviceCopyMemoryIndirectPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCopyMemoryIndirectPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCopyMemoryIndirectPropertiesNVBuilder {
    value: PhysicalDeviceCopyMemoryIndirectPropertiesNV,
}

impl PhysicalDeviceCopyMemoryIndirectPropertiesNVBuilder {
    #[inline]
    pub fn supported_queues(mut self, supported_queues: QueueFlags) -> Self {
        self.value.supported_queues = supported_queues;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCopyMemoryIndirectPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCopyMemoryIndirectPropertiesNVBuilder {
    type Target = PhysicalDeviceCopyMemoryIndirectPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCopyMemoryIndirectPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCopyMemoryIndirectPropertiesNVBuilder {
    type Target = PhysicalDeviceCopyMemoryIndirectPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCornerSampledImageFeaturesNV {
    type Target = PhysicalDeviceCornerSampledImageFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCornerSampledImageFeaturesNV {
    type Builder = PhysicalDeviceCornerSampledImageFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCornerSampledImageFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCornerSampledImageFeaturesNVBuilder {
    value: PhysicalDeviceCornerSampledImageFeaturesNV,
}

impl PhysicalDeviceCornerSampledImageFeaturesNVBuilder {
    #[inline]
    pub fn corner_sampled_image(mut self, corner_sampled_image: bool) -> Self {
        self.value.corner_sampled_image = corner_sampled_image as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCornerSampledImageFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCornerSampledImageFeaturesNVBuilder {
    type Target = PhysicalDeviceCornerSampledImageFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCornerSampledImageFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCornerSampledImageFeaturesNVBuilder {
    type Target = PhysicalDeviceCornerSampledImageFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCoverageReductionModeFeaturesNV {
    type Target = PhysicalDeviceCoverageReductionModeFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCoverageReductionModeFeaturesNV {
    type Builder = PhysicalDeviceCoverageReductionModeFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCoverageReductionModeFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCoverageReductionModeFeaturesNVBuilder {
    value: PhysicalDeviceCoverageReductionModeFeaturesNV,
}

impl PhysicalDeviceCoverageReductionModeFeaturesNVBuilder {
    #[inline]
    pub fn coverage_reduction_mode(mut self, coverage_reduction_mode: bool) -> Self {
        self.value.coverage_reduction_mode = coverage_reduction_mode as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCoverageReductionModeFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCoverageReductionModeFeaturesNVBuilder {
    type Target = PhysicalDeviceCoverageReductionModeFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCoverageReductionModeFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCoverageReductionModeFeaturesNVBuilder {
    type Target = PhysicalDeviceCoverageReductionModeFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCubicClampFeaturesQCOM {
    type Target = PhysicalDeviceCubicClampFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCubicClampFeaturesQCOM {
    type Builder = PhysicalDeviceCubicClampFeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceCubicClampFeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCubicClampFeaturesQCOMBuilder {
    value: PhysicalDeviceCubicClampFeaturesQCOM,
}

impl PhysicalDeviceCubicClampFeaturesQCOMBuilder {
    #[inline]
    pub fn cubic_range_clamp(mut self, cubic_range_clamp: bool) -> Self {
        self.value.cubic_range_clamp = cubic_range_clamp as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCubicClampFeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCubicClampFeaturesQCOMBuilder {
    type Target = PhysicalDeviceCubicClampFeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCubicClampFeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCubicClampFeaturesQCOMBuilder {
    type Target = PhysicalDeviceCubicClampFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCubicWeightsFeaturesQCOM {
    type Target = PhysicalDeviceCubicWeightsFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCubicWeightsFeaturesQCOM {
    type Builder = PhysicalDeviceCubicWeightsFeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceCubicWeightsFeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCubicWeightsFeaturesQCOMBuilder {
    value: PhysicalDeviceCubicWeightsFeaturesQCOM,
}

impl PhysicalDeviceCubicWeightsFeaturesQCOMBuilder {
    #[inline]
    pub fn selectable_cubic_weights(mut self, selectable_cubic_weights: bool) -> Self {
        self.value.selectable_cubic_weights = selectable_cubic_weights as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCubicWeightsFeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCubicWeightsFeaturesQCOMBuilder {
    type Target = PhysicalDeviceCubicWeightsFeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCubicWeightsFeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCubicWeightsFeaturesQCOMBuilder {
    type Target = PhysicalDeviceCubicWeightsFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCudaKernelLaunchFeaturesNV {
    type Target = PhysicalDeviceCudaKernelLaunchFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCudaKernelLaunchFeaturesNV {
    type Builder = PhysicalDeviceCudaKernelLaunchFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCudaKernelLaunchFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCudaKernelLaunchFeaturesNVBuilder {
    value: PhysicalDeviceCudaKernelLaunchFeaturesNV,
}

impl PhysicalDeviceCudaKernelLaunchFeaturesNVBuilder {
    #[inline]
    pub fn cuda_kernel_launch_features(mut self, cuda_kernel_launch_features: bool) -> Self {
        self.value.cuda_kernel_launch_features = cuda_kernel_launch_features as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCudaKernelLaunchFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCudaKernelLaunchFeaturesNVBuilder {
    type Target = PhysicalDeviceCudaKernelLaunchFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCudaKernelLaunchFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCudaKernelLaunchFeaturesNVBuilder {
    type Target = PhysicalDeviceCudaKernelLaunchFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCudaKernelLaunchPropertiesNV {
    type Target = PhysicalDeviceCudaKernelLaunchPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCudaKernelLaunchPropertiesNV {
    type Builder = PhysicalDeviceCudaKernelLaunchPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceCudaKernelLaunchPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCudaKernelLaunchPropertiesNVBuilder {
    value: PhysicalDeviceCudaKernelLaunchPropertiesNV,
}

impl PhysicalDeviceCudaKernelLaunchPropertiesNVBuilder {
    #[inline]
    pub fn compute_capability_minor(mut self, compute_capability_minor: u32) -> Self {
        self.value.compute_capability_minor = compute_capability_minor;
        self
    }

    #[inline]
    pub fn compute_capability_major(mut self, compute_capability_major: u32) -> Self {
        self.value.compute_capability_major = compute_capability_major;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCudaKernelLaunchPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCudaKernelLaunchPropertiesNVBuilder {
    type Target = PhysicalDeviceCudaKernelLaunchPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCudaKernelLaunchPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCudaKernelLaunchPropertiesNVBuilder {
    type Target = PhysicalDeviceCudaKernelLaunchPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCustomBorderColorFeaturesEXT {
    type Target = PhysicalDeviceCustomBorderColorFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCustomBorderColorFeaturesEXT {
    type Builder = PhysicalDeviceCustomBorderColorFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceCustomBorderColorFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCustomBorderColorFeaturesEXTBuilder {
    value: PhysicalDeviceCustomBorderColorFeaturesEXT,
}

impl PhysicalDeviceCustomBorderColorFeaturesEXTBuilder {
    #[inline]
    pub fn custom_border_colors(mut self, custom_border_colors: bool) -> Self {
        self.value.custom_border_colors = custom_border_colors as Bool32;
        self
    }

    #[inline]
    pub fn custom_border_color_without_format(
        mut self,
        custom_border_color_without_format: bool,
    ) -> Self {
        self.value.custom_border_color_without_format =
            custom_border_color_without_format as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCustomBorderColorFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCustomBorderColorFeaturesEXTBuilder {
    type Target = PhysicalDeviceCustomBorderColorFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCustomBorderColorFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCustomBorderColorFeaturesEXTBuilder {
    type Target = PhysicalDeviceCustomBorderColorFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceCustomBorderColorPropertiesEXT {
    type Target = PhysicalDeviceCustomBorderColorPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceCustomBorderColorPropertiesEXT {
    type Builder = PhysicalDeviceCustomBorderColorPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceCustomBorderColorPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceCustomBorderColorPropertiesEXTBuilder {
    value: PhysicalDeviceCustomBorderColorPropertiesEXT,
}

impl PhysicalDeviceCustomBorderColorPropertiesEXTBuilder {
    #[inline]
    pub fn max_custom_border_color_samplers(
        mut self,
        max_custom_border_color_samplers: u32,
    ) -> Self {
        self.value.max_custom_border_color_samplers = max_custom_border_color_samplers;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceCustomBorderColorPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceCustomBorderColorPropertiesEXTBuilder {
    type Target = PhysicalDeviceCustomBorderColorPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceCustomBorderColorPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceCustomBorderColorPropertiesEXTBuilder {
    type Target = PhysicalDeviceCustomBorderColorPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    type Target = PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    type Builder = PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVBuilder {
    value: PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
}

impl PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVBuilder {
    #[inline]
    pub fn dedicated_allocation_image_aliasing(
        mut self,
        dedicated_allocation_image_aliasing: bool,
    ) -> Self {
        self.value.dedicated_allocation_image_aliasing =
            dedicated_allocation_image_aliasing as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVBuilder {
    type Target = PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVBuilder {
    type Target = PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthBiasControlFeaturesEXT {
    type Target = PhysicalDeviceDepthBiasControlFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDepthBiasControlFeaturesEXT {
    type Builder = PhysicalDeviceDepthBiasControlFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDepthBiasControlFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDepthBiasControlFeaturesEXTBuilder {
    value: PhysicalDeviceDepthBiasControlFeaturesEXT,
}

impl PhysicalDeviceDepthBiasControlFeaturesEXTBuilder {
    #[inline]
    pub fn depth_bias_control(mut self, depth_bias_control: bool) -> Self {
        self.value.depth_bias_control = depth_bias_control as Bool32;
        self
    }

    #[inline]
    pub fn least_representable_value_force_unorm_representation(
        mut self,
        least_representable_value_force_unorm_representation: bool,
    ) -> Self {
        self.value
            .least_representable_value_force_unorm_representation =
            least_representable_value_force_unorm_representation as Bool32;
        self
    }

    #[inline]
    pub fn float_representation(mut self, float_representation: bool) -> Self {
        self.value.float_representation = float_representation as Bool32;
        self
    }

    #[inline]
    pub fn depth_bias_exact(mut self, depth_bias_exact: bool) -> Self {
        self.value.depth_bias_exact = depth_bias_exact as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDepthBiasControlFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDepthBiasControlFeaturesEXTBuilder {
    type Target = PhysicalDeviceDepthBiasControlFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDepthBiasControlFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthBiasControlFeaturesEXTBuilder {
    type Target = PhysicalDeviceDepthBiasControlFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthClampZeroOneFeaturesEXT {
    type Target = PhysicalDeviceDepthClampZeroOneFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDepthClampZeroOneFeaturesEXT {
    type Builder = PhysicalDeviceDepthClampZeroOneFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDepthClampZeroOneFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDepthClampZeroOneFeaturesEXTBuilder {
    value: PhysicalDeviceDepthClampZeroOneFeaturesEXT,
}

impl PhysicalDeviceDepthClampZeroOneFeaturesEXTBuilder {
    #[inline]
    pub fn depth_clamp_zero_one(mut self, depth_clamp_zero_one: bool) -> Self {
        self.value.depth_clamp_zero_one = depth_clamp_zero_one as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDepthClampZeroOneFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDepthClampZeroOneFeaturesEXTBuilder {
    type Target = PhysicalDeviceDepthClampZeroOneFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDepthClampZeroOneFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthClampZeroOneFeaturesEXTBuilder {
    type Target = PhysicalDeviceDepthClampZeroOneFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthClipControlFeaturesEXT {
    type Target = PhysicalDeviceDepthClipControlFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDepthClipControlFeaturesEXT {
    type Builder = PhysicalDeviceDepthClipControlFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDepthClipControlFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDepthClipControlFeaturesEXTBuilder {
    value: PhysicalDeviceDepthClipControlFeaturesEXT,
}

impl PhysicalDeviceDepthClipControlFeaturesEXTBuilder {
    #[inline]
    pub fn depth_clip_control(mut self, depth_clip_control: bool) -> Self {
        self.value.depth_clip_control = depth_clip_control as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDepthClipControlFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDepthClipControlFeaturesEXTBuilder {
    type Target = PhysicalDeviceDepthClipControlFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDepthClipControlFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthClipControlFeaturesEXTBuilder {
    type Target = PhysicalDeviceDepthClipControlFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthClipEnableFeaturesEXT {
    type Target = PhysicalDeviceDepthClipEnableFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDepthClipEnableFeaturesEXT {
    type Builder = PhysicalDeviceDepthClipEnableFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDepthClipEnableFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDepthClipEnableFeaturesEXTBuilder {
    value: PhysicalDeviceDepthClipEnableFeaturesEXT,
}

impl PhysicalDeviceDepthClipEnableFeaturesEXTBuilder {
    #[inline]
    pub fn depth_clip_enable(mut self, depth_clip_enable: bool) -> Self {
        self.value.depth_clip_enable = depth_clip_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDepthClipEnableFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDepthClipEnableFeaturesEXTBuilder {
    type Target = PhysicalDeviceDepthClipEnableFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDepthClipEnableFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthClipEnableFeaturesEXTBuilder {
    type Target = PhysicalDeviceDepthClipEnableFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthStencilResolveProperties {
    type Target = PhysicalDeviceDepthStencilResolveProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDepthStencilResolveProperties {
    type Builder = PhysicalDeviceDepthStencilResolvePropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceDepthStencilResolveProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDepthStencilResolvePropertiesBuilder {
    value: PhysicalDeviceDepthStencilResolveProperties,
}

impl PhysicalDeviceDepthStencilResolvePropertiesBuilder {
    #[inline]
    pub fn supported_depth_resolve_modes(
        mut self,
        supported_depth_resolve_modes: ResolveModeFlags,
    ) -> Self {
        self.value.supported_depth_resolve_modes = supported_depth_resolve_modes;
        self
    }

    #[inline]
    pub fn supported_stencil_resolve_modes(
        mut self,
        supported_stencil_resolve_modes: ResolveModeFlags,
    ) -> Self {
        self.value.supported_stencil_resolve_modes = supported_stencil_resolve_modes;
        self
    }

    #[inline]
    pub fn independent_resolve_none(mut self, independent_resolve_none: bool) -> Self {
        self.value.independent_resolve_none = independent_resolve_none as Bool32;
        self
    }

    #[inline]
    pub fn independent_resolve(mut self, independent_resolve: bool) -> Self {
        self.value.independent_resolve = independent_resolve as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDepthStencilResolveProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDepthStencilResolvePropertiesBuilder {
    type Target = PhysicalDeviceDepthStencilResolveProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDepthStencilResolvePropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDepthStencilResolvePropertiesBuilder {
    type Target = PhysicalDeviceDepthStencilResolveProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    type Target = PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    type Builder = PhysicalDeviceDescriptorBufferDensityMapPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDescriptorBufferDensityMapPropertiesEXTBuilder {
    value: PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
}

impl PhysicalDeviceDescriptorBufferDensityMapPropertiesEXTBuilder {
    #[inline]
    pub fn combined_image_sampler_density_map_descriptor_size(
        mut self,
        combined_image_sampler_density_map_descriptor_size: usize,
    ) -> Self {
        self.value
            .combined_image_sampler_density_map_descriptor_size =
            combined_image_sampler_density_map_descriptor_size;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDescriptorBufferDensityMapPropertiesEXTBuilder {
    type Target = PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDescriptorBufferDensityMapPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorBufferDensityMapPropertiesEXTBuilder {
    type Target = PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorBufferFeaturesEXT {
    type Target = PhysicalDeviceDescriptorBufferFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDescriptorBufferFeaturesEXT {
    type Builder = PhysicalDeviceDescriptorBufferFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDescriptorBufferFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDescriptorBufferFeaturesEXTBuilder {
    value: PhysicalDeviceDescriptorBufferFeaturesEXT,
}

impl PhysicalDeviceDescriptorBufferFeaturesEXTBuilder {
    #[inline]
    pub fn descriptor_buffer(mut self, descriptor_buffer: bool) -> Self {
        self.value.descriptor_buffer = descriptor_buffer as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_buffer_capture_replay(
        mut self,
        descriptor_buffer_capture_replay: bool,
    ) -> Self {
        self.value.descriptor_buffer_capture_replay = descriptor_buffer_capture_replay as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_buffer_image_layout_ignored(
        mut self,
        descriptor_buffer_image_layout_ignored: bool,
    ) -> Self {
        self.value.descriptor_buffer_image_layout_ignored =
            descriptor_buffer_image_layout_ignored as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_buffer_push_descriptors(
        mut self,
        descriptor_buffer_push_descriptors: bool,
    ) -> Self {
        self.value.descriptor_buffer_push_descriptors =
            descriptor_buffer_push_descriptors as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDescriptorBufferFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDescriptorBufferFeaturesEXTBuilder {
    type Target = PhysicalDeviceDescriptorBufferFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDescriptorBufferFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorBufferFeaturesEXTBuilder {
    type Target = PhysicalDeviceDescriptorBufferFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorBufferPropertiesEXT {
    type Target = PhysicalDeviceDescriptorBufferPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDescriptorBufferPropertiesEXT {
    type Builder = PhysicalDeviceDescriptorBufferPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDescriptorBufferPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDescriptorBufferPropertiesEXTBuilder {
    value: PhysicalDeviceDescriptorBufferPropertiesEXT,
}

impl PhysicalDeviceDescriptorBufferPropertiesEXTBuilder {
    #[inline]
    pub fn combined_image_sampler_descriptor_single_array(
        mut self,
        combined_image_sampler_descriptor_single_array: bool,
    ) -> Self {
        self.value.combined_image_sampler_descriptor_single_array =
            combined_image_sampler_descriptor_single_array as Bool32;
        self
    }

    #[inline]
    pub fn bufferless_push_descriptors(mut self, bufferless_push_descriptors: bool) -> Self {
        self.value.bufferless_push_descriptors = bufferless_push_descriptors as Bool32;
        self
    }

    #[inline]
    pub fn allow_sampler_image_view_post_submit_creation(
        mut self,
        allow_sampler_image_view_post_submit_creation: bool,
    ) -> Self {
        self.value.allow_sampler_image_view_post_submit_creation =
            allow_sampler_image_view_post_submit_creation as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_buffer_offset_alignment(
        mut self,
        descriptor_buffer_offset_alignment: DeviceSize,
    ) -> Self {
        self.value.descriptor_buffer_offset_alignment = descriptor_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn max_descriptor_buffer_bindings(mut self, max_descriptor_buffer_bindings: u32) -> Self {
        self.value.max_descriptor_buffer_bindings = max_descriptor_buffer_bindings;
        self
    }

    #[inline]
    pub fn max_resource_descriptor_buffer_bindings(
        mut self,
        max_resource_descriptor_buffer_bindings: u32,
    ) -> Self {
        self.value.max_resource_descriptor_buffer_bindings =
            max_resource_descriptor_buffer_bindings;
        self
    }

    #[inline]
    pub fn max_sampler_descriptor_buffer_bindings(
        mut self,
        max_sampler_descriptor_buffer_bindings: u32,
    ) -> Self {
        self.value.max_sampler_descriptor_buffer_bindings = max_sampler_descriptor_buffer_bindings;
        self
    }

    #[inline]
    pub fn max_embedded_immutable_sampler_bindings(
        mut self,
        max_embedded_immutable_sampler_bindings: u32,
    ) -> Self {
        self.value.max_embedded_immutable_sampler_bindings =
            max_embedded_immutable_sampler_bindings;
        self
    }

    #[inline]
    pub fn max_embedded_immutable_samplers(mut self, max_embedded_immutable_samplers: u32) -> Self {
        self.value.max_embedded_immutable_samplers = max_embedded_immutable_samplers;
        self
    }

    #[inline]
    pub fn buffer_capture_replay_descriptor_data_size(
        mut self,
        buffer_capture_replay_descriptor_data_size: usize,
    ) -> Self {
        self.value.buffer_capture_replay_descriptor_data_size =
            buffer_capture_replay_descriptor_data_size;
        self
    }

    #[inline]
    pub fn image_capture_replay_descriptor_data_size(
        mut self,
        image_capture_replay_descriptor_data_size: usize,
    ) -> Self {
        self.value.image_capture_replay_descriptor_data_size =
            image_capture_replay_descriptor_data_size;
        self
    }

    #[inline]
    pub fn image_view_capture_replay_descriptor_data_size(
        mut self,
        image_view_capture_replay_descriptor_data_size: usize,
    ) -> Self {
        self.value.image_view_capture_replay_descriptor_data_size =
            image_view_capture_replay_descriptor_data_size;
        self
    }

    #[inline]
    pub fn sampler_capture_replay_descriptor_data_size(
        mut self,
        sampler_capture_replay_descriptor_data_size: usize,
    ) -> Self {
        self.value.sampler_capture_replay_descriptor_data_size =
            sampler_capture_replay_descriptor_data_size;
        self
    }

    #[inline]
    pub fn acceleration_structure_capture_replay_descriptor_data_size(
        mut self,
        acceleration_structure_capture_replay_descriptor_data_size: usize,
    ) -> Self {
        self.value
            .acceleration_structure_capture_replay_descriptor_data_size =
            acceleration_structure_capture_replay_descriptor_data_size;
        self
    }

    #[inline]
    pub fn sampler_descriptor_size(mut self, sampler_descriptor_size: usize) -> Self {
        self.value.sampler_descriptor_size = sampler_descriptor_size;
        self
    }

    #[inline]
    pub fn combined_image_sampler_descriptor_size(
        mut self,
        combined_image_sampler_descriptor_size: usize,
    ) -> Self {
        self.value.combined_image_sampler_descriptor_size = combined_image_sampler_descriptor_size;
        self
    }

    #[inline]
    pub fn sampled_image_descriptor_size(mut self, sampled_image_descriptor_size: usize) -> Self {
        self.value.sampled_image_descriptor_size = sampled_image_descriptor_size;
        self
    }

    #[inline]
    pub fn storage_image_descriptor_size(mut self, storage_image_descriptor_size: usize) -> Self {
        self.value.storage_image_descriptor_size = storage_image_descriptor_size;
        self
    }

    #[inline]
    pub fn uniform_texel_buffer_descriptor_size(
        mut self,
        uniform_texel_buffer_descriptor_size: usize,
    ) -> Self {
        self.value.uniform_texel_buffer_descriptor_size = uniform_texel_buffer_descriptor_size;
        self
    }

    #[inline]
    pub fn robust_uniform_texel_buffer_descriptor_size(
        mut self,
        robust_uniform_texel_buffer_descriptor_size: usize,
    ) -> Self {
        self.value.robust_uniform_texel_buffer_descriptor_size =
            robust_uniform_texel_buffer_descriptor_size;
        self
    }

    #[inline]
    pub fn storage_texel_buffer_descriptor_size(
        mut self,
        storage_texel_buffer_descriptor_size: usize,
    ) -> Self {
        self.value.storage_texel_buffer_descriptor_size = storage_texel_buffer_descriptor_size;
        self
    }

    #[inline]
    pub fn robust_storage_texel_buffer_descriptor_size(
        mut self,
        robust_storage_texel_buffer_descriptor_size: usize,
    ) -> Self {
        self.value.robust_storage_texel_buffer_descriptor_size =
            robust_storage_texel_buffer_descriptor_size;
        self
    }

    #[inline]
    pub fn uniform_buffer_descriptor_size(mut self, uniform_buffer_descriptor_size: usize) -> Self {
        self.value.uniform_buffer_descriptor_size = uniform_buffer_descriptor_size;
        self
    }

    #[inline]
    pub fn robust_uniform_buffer_descriptor_size(
        mut self,
        robust_uniform_buffer_descriptor_size: usize,
    ) -> Self {
        self.value.robust_uniform_buffer_descriptor_size = robust_uniform_buffer_descriptor_size;
        self
    }

    #[inline]
    pub fn storage_buffer_descriptor_size(mut self, storage_buffer_descriptor_size: usize) -> Self {
        self.value.storage_buffer_descriptor_size = storage_buffer_descriptor_size;
        self
    }

    #[inline]
    pub fn robust_storage_buffer_descriptor_size(
        mut self,
        robust_storage_buffer_descriptor_size: usize,
    ) -> Self {
        self.value.robust_storage_buffer_descriptor_size = robust_storage_buffer_descriptor_size;
        self
    }

    #[inline]
    pub fn input_attachment_descriptor_size(
        mut self,
        input_attachment_descriptor_size: usize,
    ) -> Self {
        self.value.input_attachment_descriptor_size = input_attachment_descriptor_size;
        self
    }

    #[inline]
    pub fn acceleration_structure_descriptor_size(
        mut self,
        acceleration_structure_descriptor_size: usize,
    ) -> Self {
        self.value.acceleration_structure_descriptor_size = acceleration_structure_descriptor_size;
        self
    }

    #[inline]
    pub fn max_sampler_descriptor_buffer_range(
        mut self,
        max_sampler_descriptor_buffer_range: DeviceSize,
    ) -> Self {
        self.value.max_sampler_descriptor_buffer_range = max_sampler_descriptor_buffer_range;
        self
    }

    #[inline]
    pub fn max_resource_descriptor_buffer_range(
        mut self,
        max_resource_descriptor_buffer_range: DeviceSize,
    ) -> Self {
        self.value.max_resource_descriptor_buffer_range = max_resource_descriptor_buffer_range;
        self
    }

    #[inline]
    pub fn sampler_descriptor_buffer_address_space_size(
        mut self,
        sampler_descriptor_buffer_address_space_size: DeviceSize,
    ) -> Self {
        self.value.sampler_descriptor_buffer_address_space_size =
            sampler_descriptor_buffer_address_space_size;
        self
    }

    #[inline]
    pub fn resource_descriptor_buffer_address_space_size(
        mut self,
        resource_descriptor_buffer_address_space_size: DeviceSize,
    ) -> Self {
        self.value.resource_descriptor_buffer_address_space_size =
            resource_descriptor_buffer_address_space_size;
        self
    }

    #[inline]
    pub fn descriptor_buffer_address_space_size(
        mut self,
        descriptor_buffer_address_space_size: DeviceSize,
    ) -> Self {
        self.value.descriptor_buffer_address_space_size = descriptor_buffer_address_space_size;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDescriptorBufferPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDescriptorBufferPropertiesEXTBuilder {
    type Target = PhysicalDeviceDescriptorBufferPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDescriptorBufferPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorBufferPropertiesEXTBuilder {
    type Target = PhysicalDeviceDescriptorBufferPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorIndexingFeatures {
    type Target = PhysicalDeviceDescriptorIndexingFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDescriptorIndexingFeatures {
    type Builder = PhysicalDeviceDescriptorIndexingFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceDescriptorIndexingFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDescriptorIndexingFeaturesBuilder {
    value: PhysicalDeviceDescriptorIndexingFeatures,
}

impl PhysicalDeviceDescriptorIndexingFeaturesBuilder {
    #[inline]
    pub fn shader_input_attachment_array_dynamic_indexing(
        mut self,
        shader_input_attachment_array_dynamic_indexing: bool,
    ) -> Self {
        self.value.shader_input_attachment_array_dynamic_indexing =
            shader_input_attachment_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_uniform_texel_buffer_array_dynamic_indexing(
        mut self,
        shader_uniform_texel_buffer_array_dynamic_indexing: bool,
    ) -> Self {
        self.value
            .shader_uniform_texel_buffer_array_dynamic_indexing =
            shader_uniform_texel_buffer_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_texel_buffer_array_dynamic_indexing(
        mut self,
        shader_storage_texel_buffer_array_dynamic_indexing: bool,
    ) -> Self {
        self.value
            .shader_storage_texel_buffer_array_dynamic_indexing =
            shader_storage_texel_buffer_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_uniform_buffer_array_non_uniform_indexing(
        mut self,
        shader_uniform_buffer_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value.shader_uniform_buffer_array_non_uniform_indexing =
            shader_uniform_buffer_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_sampled_image_array_non_uniform_indexing(
        mut self,
        shader_sampled_image_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value.shader_sampled_image_array_non_uniform_indexing =
            shader_sampled_image_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_buffer_array_non_uniform_indexing(
        mut self,
        shader_storage_buffer_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value.shader_storage_buffer_array_non_uniform_indexing =
            shader_storage_buffer_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_array_non_uniform_indexing(
        mut self,
        shader_storage_image_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value.shader_storage_image_array_non_uniform_indexing =
            shader_storage_image_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_input_attachment_array_non_uniform_indexing(
        mut self,
        shader_input_attachment_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value
            .shader_input_attachment_array_non_uniform_indexing =
            shader_input_attachment_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_uniform_texel_buffer_array_non_uniform_indexing(
        mut self,
        shader_uniform_texel_buffer_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value
            .shader_uniform_texel_buffer_array_non_uniform_indexing =
            shader_uniform_texel_buffer_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_texel_buffer_array_non_uniform_indexing(
        mut self,
        shader_storage_texel_buffer_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value
            .shader_storage_texel_buffer_array_non_uniform_indexing =
            shader_storage_texel_buffer_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_uniform_buffer_update_after_bind(
        mut self,
        descriptor_binding_uniform_buffer_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_uniform_buffer_update_after_bind =
            descriptor_binding_uniform_buffer_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_sampled_image_update_after_bind(
        mut self,
        descriptor_binding_sampled_image_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_sampled_image_update_after_bind =
            descriptor_binding_sampled_image_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_storage_image_update_after_bind(
        mut self,
        descriptor_binding_storage_image_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_storage_image_update_after_bind =
            descriptor_binding_storage_image_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_storage_buffer_update_after_bind(
        mut self,
        descriptor_binding_storage_buffer_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_storage_buffer_update_after_bind =
            descriptor_binding_storage_buffer_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_uniform_texel_buffer_update_after_bind(
        mut self,
        descriptor_binding_uniform_texel_buffer_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_uniform_texel_buffer_update_after_bind =
            descriptor_binding_uniform_texel_buffer_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_storage_texel_buffer_update_after_bind(
        mut self,
        descriptor_binding_storage_texel_buffer_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_storage_texel_buffer_update_after_bind =
            descriptor_binding_storage_texel_buffer_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_update_unused_while_pending(
        mut self,
        descriptor_binding_update_unused_while_pending: bool,
    ) -> Self {
        self.value.descriptor_binding_update_unused_while_pending =
            descriptor_binding_update_unused_while_pending as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_partially_bound(
        mut self,
        descriptor_binding_partially_bound: bool,
    ) -> Self {
        self.value.descriptor_binding_partially_bound =
            descriptor_binding_partially_bound as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_variable_descriptor_count(
        mut self,
        descriptor_binding_variable_descriptor_count: bool,
    ) -> Self {
        self.value.descriptor_binding_variable_descriptor_count =
            descriptor_binding_variable_descriptor_count as Bool32;
        self
    }

    #[inline]
    pub fn runtime_descriptor_array(mut self, runtime_descriptor_array: bool) -> Self {
        self.value.runtime_descriptor_array = runtime_descriptor_array as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDescriptorIndexingFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDescriptorIndexingFeaturesBuilder {
    type Target = PhysicalDeviceDescriptorIndexingFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDescriptorIndexingFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorIndexingFeaturesBuilder {
    type Target = PhysicalDeviceDescriptorIndexingFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorIndexingProperties {
    type Target = PhysicalDeviceDescriptorIndexingProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDescriptorIndexingProperties {
    type Builder = PhysicalDeviceDescriptorIndexingPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceDescriptorIndexingProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDescriptorIndexingPropertiesBuilder {
    value: PhysicalDeviceDescriptorIndexingProperties,
}

impl PhysicalDeviceDescriptorIndexingPropertiesBuilder {
    #[inline]
    pub fn max_update_after_bind_descriptors_in_all_pools(
        mut self,
        max_update_after_bind_descriptors_in_all_pools: u32,
    ) -> Self {
        self.value.max_update_after_bind_descriptors_in_all_pools =
            max_update_after_bind_descriptors_in_all_pools;
        self
    }

    #[inline]
    pub fn shader_uniform_buffer_array_non_uniform_indexing_native(
        mut self,
        shader_uniform_buffer_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_uniform_buffer_array_non_uniform_indexing_native =
            shader_uniform_buffer_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn shader_sampled_image_array_non_uniform_indexing_native(
        mut self,
        shader_sampled_image_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_sampled_image_array_non_uniform_indexing_native =
            shader_sampled_image_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_buffer_array_non_uniform_indexing_native(
        mut self,
        shader_storage_buffer_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_storage_buffer_array_non_uniform_indexing_native =
            shader_storage_buffer_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_array_non_uniform_indexing_native(
        mut self,
        shader_storage_image_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_storage_image_array_non_uniform_indexing_native =
            shader_storage_image_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn shader_input_attachment_array_non_uniform_indexing_native(
        mut self,
        shader_input_attachment_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_input_attachment_array_non_uniform_indexing_native =
            shader_input_attachment_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn robust_buffer_access_update_after_bind(
        mut self,
        robust_buffer_access_update_after_bind: bool,
    ) -> Self {
        self.value.robust_buffer_access_update_after_bind =
            robust_buffer_access_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn quad_divergent_implicit_lod(mut self, quad_divergent_implicit_lod: bool) -> Self {
        self.value.quad_divergent_implicit_lod = quad_divergent_implicit_lod as Bool32;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_samplers(
        mut self,
        max_per_stage_descriptor_update_after_bind_samplers: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_samplers =
            max_per_stage_descriptor_update_after_bind_samplers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_uniform_buffers(
        mut self,
        max_per_stage_descriptor_update_after_bind_uniform_buffers: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_uniform_buffers =
            max_per_stage_descriptor_update_after_bind_uniform_buffers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_storage_buffers(
        mut self,
        max_per_stage_descriptor_update_after_bind_storage_buffers: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_storage_buffers =
            max_per_stage_descriptor_update_after_bind_storage_buffers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_sampled_images(
        mut self,
        max_per_stage_descriptor_update_after_bind_sampled_images: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_sampled_images =
            max_per_stage_descriptor_update_after_bind_sampled_images;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_storage_images(
        mut self,
        max_per_stage_descriptor_update_after_bind_storage_images: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_storage_images =
            max_per_stage_descriptor_update_after_bind_storage_images;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_input_attachments(
        mut self,
        max_per_stage_descriptor_update_after_bind_input_attachments: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_input_attachments =
            max_per_stage_descriptor_update_after_bind_input_attachments;
        self
    }

    #[inline]
    pub fn max_per_stage_update_after_bind_resources(
        mut self,
        max_per_stage_update_after_bind_resources: u32,
    ) -> Self {
        self.value.max_per_stage_update_after_bind_resources =
            max_per_stage_update_after_bind_resources;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_samplers(
        mut self,
        max_descriptor_set_update_after_bind_samplers: u32,
    ) -> Self {
        self.value.max_descriptor_set_update_after_bind_samplers =
            max_descriptor_set_update_after_bind_samplers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_uniform_buffers(
        mut self,
        max_descriptor_set_update_after_bind_uniform_buffers: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_uniform_buffers =
            max_descriptor_set_update_after_bind_uniform_buffers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_uniform_buffers_dynamic(
        mut self,
        max_descriptor_set_update_after_bind_uniform_buffers_dynamic: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_uniform_buffers_dynamic =
            max_descriptor_set_update_after_bind_uniform_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_storage_buffers(
        mut self,
        max_descriptor_set_update_after_bind_storage_buffers: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_storage_buffers =
            max_descriptor_set_update_after_bind_storage_buffers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_storage_buffers_dynamic(
        mut self,
        max_descriptor_set_update_after_bind_storage_buffers_dynamic: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_storage_buffers_dynamic =
            max_descriptor_set_update_after_bind_storage_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_sampled_images(
        mut self,
        max_descriptor_set_update_after_bind_sampled_images: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_sampled_images =
            max_descriptor_set_update_after_bind_sampled_images;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_storage_images(
        mut self,
        max_descriptor_set_update_after_bind_storage_images: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_storage_images =
            max_descriptor_set_update_after_bind_storage_images;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_input_attachments(
        mut self,
        max_descriptor_set_update_after_bind_input_attachments: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_input_attachments =
            max_descriptor_set_update_after_bind_input_attachments;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDescriptorIndexingProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDescriptorIndexingPropertiesBuilder {
    type Target = PhysicalDeviceDescriptorIndexingProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDescriptorIndexingPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorIndexingPropertiesBuilder {
    type Target = PhysicalDeviceDescriptorIndexingProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
    type Target = PhysicalDeviceDescriptorPoolOverallocationFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
    type Builder = PhysicalDeviceDescriptorPoolOverallocationFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceDescriptorPoolOverallocationFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDescriptorPoolOverallocationFeaturesNVBuilder {
    value: PhysicalDeviceDescriptorPoolOverallocationFeaturesNV,
}

impl PhysicalDeviceDescriptorPoolOverallocationFeaturesNVBuilder {
    #[inline]
    pub fn descriptor_pool_overallocation(mut self, descriptor_pool_overallocation: bool) -> Self {
        self.value.descriptor_pool_overallocation = descriptor_pool_overallocation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDescriptorPoolOverallocationFeaturesNVBuilder {
    type Target = PhysicalDeviceDescriptorPoolOverallocationFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDescriptorPoolOverallocationFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorPoolOverallocationFeaturesNVBuilder {
    type Target = PhysicalDeviceDescriptorPoolOverallocationFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    type Target = PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    type Builder = PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder;
}

/// A builder for a [`PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder {
    value: PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE,
}

impl PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder {
    #[inline]
    pub fn descriptor_set_host_mapping(mut self, descriptor_set_host_mapping: bool) -> Self {
        self.value.descriptor_set_host_mapping = descriptor_set_host_mapping as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder {
    type Target = PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder {
    type Target = PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
    type Target = PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
    type Builder = PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVBuilder {
    value: PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
}

impl PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVBuilder {
    #[inline]
    pub fn device_generated_compute(mut self, device_generated_compute: bool) -> Self {
        self.value.device_generated_compute = device_generated_compute as Bool32;
        self
    }

    #[inline]
    pub fn device_generated_compute_pipelines(
        mut self,
        device_generated_compute_pipelines: bool,
    ) -> Self {
        self.value.device_generated_compute_pipelines =
            device_generated_compute_pipelines as Bool32;
        self
    }

    #[inline]
    pub fn device_generated_compute_capture_replay(
        mut self,
        device_generated_compute_capture_replay: bool,
    ) -> Self {
        self.value.device_generated_compute_capture_replay =
            device_generated_compute_capture_replay as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVBuilder {
    type Target = PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVBuilder {
    type Target = PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    type Target = PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    type Builder = PhysicalDeviceDeviceGeneratedCommandsFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceDeviceGeneratedCommandsFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDeviceGeneratedCommandsFeaturesNVBuilder {
    value: PhysicalDeviceDeviceGeneratedCommandsFeaturesNV,
}

impl PhysicalDeviceDeviceGeneratedCommandsFeaturesNVBuilder {
    #[inline]
    pub fn device_generated_commands(mut self, device_generated_commands: bool) -> Self {
        self.value.device_generated_commands = device_generated_commands as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDeviceGeneratedCommandsFeaturesNVBuilder {
    type Target = PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDeviceGeneratedCommandsFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDeviceGeneratedCommandsFeaturesNVBuilder {
    type Target = PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    type Target = PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    type Builder = PhysicalDeviceDeviceGeneratedCommandsPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceDeviceGeneratedCommandsPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDeviceGeneratedCommandsPropertiesNVBuilder {
    value: PhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
}

impl PhysicalDeviceDeviceGeneratedCommandsPropertiesNVBuilder {
    #[inline]
    pub fn max_graphics_shader_group_count(mut self, max_graphics_shader_group_count: u32) -> Self {
        self.value.max_graphics_shader_group_count = max_graphics_shader_group_count;
        self
    }

    #[inline]
    pub fn max_indirect_sequence_count(mut self, max_indirect_sequence_count: u32) -> Self {
        self.value.max_indirect_sequence_count = max_indirect_sequence_count;
        self
    }

    #[inline]
    pub fn max_indirect_commands_token_count(
        mut self,
        max_indirect_commands_token_count: u32,
    ) -> Self {
        self.value.max_indirect_commands_token_count = max_indirect_commands_token_count;
        self
    }

    #[inline]
    pub fn max_indirect_commands_stream_count(
        mut self,
        max_indirect_commands_stream_count: u32,
    ) -> Self {
        self.value.max_indirect_commands_stream_count = max_indirect_commands_stream_count;
        self
    }

    #[inline]
    pub fn max_indirect_commands_token_offset(
        mut self,
        max_indirect_commands_token_offset: u32,
    ) -> Self {
        self.value.max_indirect_commands_token_offset = max_indirect_commands_token_offset;
        self
    }

    #[inline]
    pub fn max_indirect_commands_stream_stride(
        mut self,
        max_indirect_commands_stream_stride: u32,
    ) -> Self {
        self.value.max_indirect_commands_stream_stride = max_indirect_commands_stream_stride;
        self
    }

    #[inline]
    pub fn min_sequences_count_buffer_offset_alignment(
        mut self,
        min_sequences_count_buffer_offset_alignment: u32,
    ) -> Self {
        self.value.min_sequences_count_buffer_offset_alignment =
            min_sequences_count_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn min_sequences_index_buffer_offset_alignment(
        mut self,
        min_sequences_index_buffer_offset_alignment: u32,
    ) -> Self {
        self.value.min_sequences_index_buffer_offset_alignment =
            min_sequences_index_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn min_indirect_commands_buffer_offset_alignment(
        mut self,
        min_indirect_commands_buffer_offset_alignment: u32,
    ) -> Self {
        self.value.min_indirect_commands_buffer_offset_alignment =
            min_indirect_commands_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDeviceGeneratedCommandsPropertiesNVBuilder {
    type Target = PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDeviceGeneratedCommandsPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDeviceGeneratedCommandsPropertiesNVBuilder {
    type Target = PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDeviceMemoryReportFeaturesEXT {
    type Target = PhysicalDeviceDeviceMemoryReportFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDeviceMemoryReportFeaturesEXT {
    type Builder = PhysicalDeviceDeviceMemoryReportFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDeviceMemoryReportFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDeviceMemoryReportFeaturesEXTBuilder {
    value: PhysicalDeviceDeviceMemoryReportFeaturesEXT,
}

impl PhysicalDeviceDeviceMemoryReportFeaturesEXTBuilder {
    #[inline]
    pub fn device_memory_report(mut self, device_memory_report: bool) -> Self {
        self.value.device_memory_report = device_memory_report as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDeviceMemoryReportFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDeviceMemoryReportFeaturesEXTBuilder {
    type Target = PhysicalDeviceDeviceMemoryReportFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDeviceMemoryReportFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDeviceMemoryReportFeaturesEXTBuilder {
    type Target = PhysicalDeviceDeviceMemoryReportFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDiagnosticsConfigFeaturesNV {
    type Target = PhysicalDeviceDiagnosticsConfigFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDiagnosticsConfigFeaturesNV {
    type Builder = PhysicalDeviceDiagnosticsConfigFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceDiagnosticsConfigFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDiagnosticsConfigFeaturesNVBuilder {
    value: PhysicalDeviceDiagnosticsConfigFeaturesNV,
}

impl PhysicalDeviceDiagnosticsConfigFeaturesNVBuilder {
    #[inline]
    pub fn diagnostics_config(mut self, diagnostics_config: bool) -> Self {
        self.value.diagnostics_config = diagnostics_config as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDiagnosticsConfigFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDiagnosticsConfigFeaturesNVBuilder {
    type Target = PhysicalDeviceDiagnosticsConfigFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDiagnosticsConfigFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDiagnosticsConfigFeaturesNVBuilder {
    type Target = PhysicalDeviceDiagnosticsConfigFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDiscardRectanglePropertiesEXT {
    type Target = PhysicalDeviceDiscardRectanglePropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDiscardRectanglePropertiesEXT {
    type Builder = PhysicalDeviceDiscardRectanglePropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDiscardRectanglePropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDiscardRectanglePropertiesEXTBuilder {
    value: PhysicalDeviceDiscardRectanglePropertiesEXT,
}

impl PhysicalDeviceDiscardRectanglePropertiesEXTBuilder {
    #[inline]
    pub fn max_discard_rectangles(mut self, max_discard_rectangles: u32) -> Self {
        self.value.max_discard_rectangles = max_discard_rectangles;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDiscardRectanglePropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDiscardRectanglePropertiesEXTBuilder {
    type Target = PhysicalDeviceDiscardRectanglePropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDiscardRectanglePropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDiscardRectanglePropertiesEXTBuilder {
    type Target = PhysicalDeviceDiscardRectanglePropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDisplacementMicromapFeaturesNV {
    type Target = PhysicalDeviceDisplacementMicromapFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDisplacementMicromapFeaturesNV {
    type Builder = PhysicalDeviceDisplacementMicromapFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceDisplacementMicromapFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDisplacementMicromapFeaturesNVBuilder {
    value: PhysicalDeviceDisplacementMicromapFeaturesNV,
}

impl PhysicalDeviceDisplacementMicromapFeaturesNVBuilder {
    #[inline]
    pub fn displacement_micromap(mut self, displacement_micromap: bool) -> Self {
        self.value.displacement_micromap = displacement_micromap as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDisplacementMicromapFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDisplacementMicromapFeaturesNVBuilder {
    type Target = PhysicalDeviceDisplacementMicromapFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDisplacementMicromapFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDisplacementMicromapFeaturesNVBuilder {
    type Target = PhysicalDeviceDisplacementMicromapFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDisplacementMicromapPropertiesNV {
    type Target = PhysicalDeviceDisplacementMicromapPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDisplacementMicromapPropertiesNV {
    type Builder = PhysicalDeviceDisplacementMicromapPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceDisplacementMicromapPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDisplacementMicromapPropertiesNVBuilder {
    value: PhysicalDeviceDisplacementMicromapPropertiesNV,
}

impl PhysicalDeviceDisplacementMicromapPropertiesNVBuilder {
    #[inline]
    pub fn max_displacement_micromap_subdivision_level(
        mut self,
        max_displacement_micromap_subdivision_level: u32,
    ) -> Self {
        self.value.max_displacement_micromap_subdivision_level =
            max_displacement_micromap_subdivision_level;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDisplacementMicromapPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDisplacementMicromapPropertiesNVBuilder {
    type Target = PhysicalDeviceDisplacementMicromapPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDisplacementMicromapPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDisplacementMicromapPropertiesNVBuilder {
    type Target = PhysicalDeviceDisplacementMicromapPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDriverProperties {
    type Target = PhysicalDeviceDriverProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDriverProperties {
    type Builder = PhysicalDeviceDriverPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceDriverProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDriverPropertiesBuilder {
    value: PhysicalDeviceDriverProperties,
}

impl PhysicalDeviceDriverPropertiesBuilder {
    #[inline]
    pub fn driver_id(mut self, driver_id: DriverId) -> Self {
        self.value.driver_id = driver_id;
        self
    }

    #[inline]
    pub fn driver_name(
        mut self,
        driver_name: impl Into<StringArray<MAX_DRIVER_NAME_SIZE>>,
    ) -> Self {
        self.value.driver_name = driver_name.into();
        self
    }

    #[inline]
    pub fn driver_info(
        mut self,
        driver_info: impl Into<StringArray<MAX_DRIVER_INFO_SIZE>>,
    ) -> Self {
        self.value.driver_info = driver_info.into();
        self
    }

    #[inline]
    pub fn conformance_version(
        mut self,
        conformance_version: impl Cast<Target = ConformanceVersion>,
    ) -> Self {
        self.value.conformance_version = conformance_version.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDriverProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDriverPropertiesBuilder {
    type Target = PhysicalDeviceDriverProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDriverPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDriverPropertiesBuilder {
    type Target = PhysicalDeviceDriverProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDrmPropertiesEXT {
    type Target = PhysicalDeviceDrmPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDrmPropertiesEXT {
    type Builder = PhysicalDeviceDrmPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDrmPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDrmPropertiesEXTBuilder {
    value: PhysicalDeviceDrmPropertiesEXT,
}

impl PhysicalDeviceDrmPropertiesEXTBuilder {
    #[inline]
    pub fn has_primary(mut self, has_primary: bool) -> Self {
        self.value.has_primary = has_primary as Bool32;
        self
    }

    #[inline]
    pub fn has_render(mut self, has_render: bool) -> Self {
        self.value.has_render = has_render as Bool32;
        self
    }

    #[inline]
    pub fn primary_major(mut self, primary_major: i64) -> Self {
        self.value.primary_major = primary_major;
        self
    }

    #[inline]
    pub fn primary_minor(mut self, primary_minor: i64) -> Self {
        self.value.primary_minor = primary_minor;
        self
    }

    #[inline]
    pub fn render_major(mut self, render_major: i64) -> Self {
        self.value.render_major = render_major;
        self
    }

    #[inline]
    pub fn render_minor(mut self, render_minor: i64) -> Self {
        self.value.render_minor = render_minor;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDrmPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDrmPropertiesEXTBuilder {
    type Target = PhysicalDeviceDrmPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDrmPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDrmPropertiesEXTBuilder {
    type Target = PhysicalDeviceDrmPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDynamicRenderingFeatures {
    type Target = PhysicalDeviceDynamicRenderingFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDynamicRenderingFeatures {
    type Builder = PhysicalDeviceDynamicRenderingFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceDynamicRenderingFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDynamicRenderingFeaturesBuilder {
    value: PhysicalDeviceDynamicRenderingFeatures,
}

impl PhysicalDeviceDynamicRenderingFeaturesBuilder {
    #[inline]
    pub fn dynamic_rendering(mut self, dynamic_rendering: bool) -> Self {
        self.value.dynamic_rendering = dynamic_rendering as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDynamicRenderingFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDynamicRenderingFeaturesBuilder {
    type Target = PhysicalDeviceDynamicRenderingFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDynamicRenderingFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDynamicRenderingFeaturesBuilder {
    type Target = PhysicalDeviceDynamicRenderingFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {
    type Target = PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {
    type Builder = PhysicalDeviceDynamicRenderingLocalReadFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDynamicRenderingLocalReadFeaturesKHRBuilder {
    value: PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR,
}

impl PhysicalDeviceDynamicRenderingLocalReadFeaturesKHRBuilder {
    #[inline]
    pub fn dynamic_rendering_local_read(mut self, dynamic_rendering_local_read: bool) -> Self {
        self.value.dynamic_rendering_local_read = dynamic_rendering_local_read as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDynamicRenderingLocalReadFeaturesKHRBuilder {
    type Target = PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDynamicRenderingLocalReadFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDynamicRenderingLocalReadFeaturesKHRBuilder {
    type Target = PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
    type Target = PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
    type Builder = PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTBuilder {
    value: PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT,
}

impl PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTBuilder {
    #[inline]
    pub fn dynamic_rendering_unused_attachments(
        mut self,
        dynamic_rendering_unused_attachments: bool,
    ) -> Self {
        self.value.dynamic_rendering_unused_attachments =
            dynamic_rendering_unused_attachments as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTBuilder {
    type Target = PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTBuilder {
    type Target = PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExclusiveScissorFeaturesNV {
    type Target = PhysicalDeviceExclusiveScissorFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExclusiveScissorFeaturesNV {
    type Builder = PhysicalDeviceExclusiveScissorFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceExclusiveScissorFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExclusiveScissorFeaturesNVBuilder {
    value: PhysicalDeviceExclusiveScissorFeaturesNV,
}

impl PhysicalDeviceExclusiveScissorFeaturesNVBuilder {
    #[inline]
    pub fn exclusive_scissor(mut self, exclusive_scissor: bool) -> Self {
        self.value.exclusive_scissor = exclusive_scissor as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExclusiveScissorFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExclusiveScissorFeaturesNVBuilder {
    type Target = PhysicalDeviceExclusiveScissorFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExclusiveScissorFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExclusiveScissorFeaturesNVBuilder {
    type Target = PhysicalDeviceExclusiveScissorFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedDynamicState2FeaturesEXT {
    type Target = PhysicalDeviceExtendedDynamicState2FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExtendedDynamicState2FeaturesEXT {
    type Builder = PhysicalDeviceExtendedDynamicState2FeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceExtendedDynamicState2FeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExtendedDynamicState2FeaturesEXTBuilder {
    value: PhysicalDeviceExtendedDynamicState2FeaturesEXT,
}

impl PhysicalDeviceExtendedDynamicState2FeaturesEXTBuilder {
    #[inline]
    pub fn extended_dynamic_state2(mut self, extended_dynamic_state2: bool) -> Self {
        self.value.extended_dynamic_state2 = extended_dynamic_state2 as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state2_logic_op(
        mut self,
        extended_dynamic_state2_logic_op: bool,
    ) -> Self {
        self.value.extended_dynamic_state2_logic_op = extended_dynamic_state2_logic_op as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state2_patch_control_points(
        mut self,
        extended_dynamic_state2_patch_control_points: bool,
    ) -> Self {
        self.value.extended_dynamic_state2_patch_control_points =
            extended_dynamic_state2_patch_control_points as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExtendedDynamicState2FeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExtendedDynamicState2FeaturesEXTBuilder {
    type Target = PhysicalDeviceExtendedDynamicState2FeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExtendedDynamicState2FeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedDynamicState2FeaturesEXTBuilder {
    type Target = PhysicalDeviceExtendedDynamicState2FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedDynamicState3FeaturesEXT {
    type Target = PhysicalDeviceExtendedDynamicState3FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExtendedDynamicState3FeaturesEXT {
    type Builder = PhysicalDeviceExtendedDynamicState3FeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceExtendedDynamicState3FeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExtendedDynamicState3FeaturesEXTBuilder {
    value: PhysicalDeviceExtendedDynamicState3FeaturesEXT,
}

impl PhysicalDeviceExtendedDynamicState3FeaturesEXTBuilder {
    #[inline]
    pub fn extended_dynamic_state3_tessellation_domain_origin(
        mut self,
        extended_dynamic_state3_tessellation_domain_origin: bool,
    ) -> Self {
        self.value
            .extended_dynamic_state3_tessellation_domain_origin =
            extended_dynamic_state3_tessellation_domain_origin as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state_3depth_clamp_enable(
        mut self,
        extended_dynamic_state_3depth_clamp_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state_3depth_clamp_enable =
            extended_dynamic_state_3depth_clamp_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_polygon_mode(
        mut self,
        extended_dynamic_state3_polygon_mode: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_polygon_mode =
            extended_dynamic_state3_polygon_mode as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_rasterization_samples(
        mut self,
        extended_dynamic_state3_rasterization_samples: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_rasterization_samples =
            extended_dynamic_state3_rasterization_samples as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_sample_mask(
        mut self,
        extended_dynamic_state3_sample_mask: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_sample_mask =
            extended_dynamic_state3_sample_mask as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_alpha_to_coverage_enable(
        mut self,
        extended_dynamic_state3_alpha_to_coverage_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_alpha_to_coverage_enable =
            extended_dynamic_state3_alpha_to_coverage_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_alpha_to_one_enable(
        mut self,
        extended_dynamic_state3_alpha_to_one_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_alpha_to_one_enable =
            extended_dynamic_state3_alpha_to_one_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_logic_op_enable(
        mut self,
        extended_dynamic_state3_logic_op_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_logic_op_enable =
            extended_dynamic_state3_logic_op_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_color_blend_enable(
        mut self,
        extended_dynamic_state3_color_blend_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_color_blend_enable =
            extended_dynamic_state3_color_blend_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_color_blend_equation(
        mut self,
        extended_dynamic_state3_color_blend_equation: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_color_blend_equation =
            extended_dynamic_state3_color_blend_equation as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_color_write_mask(
        mut self,
        extended_dynamic_state3_color_write_mask: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_color_write_mask =
            extended_dynamic_state3_color_write_mask as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_rasterization_stream(
        mut self,
        extended_dynamic_state3_rasterization_stream: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_rasterization_stream =
            extended_dynamic_state3_rasterization_stream as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_conservative_rasterization_mode(
        mut self,
        extended_dynamic_state3_conservative_rasterization_mode: bool,
    ) -> Self {
        self.value
            .extended_dynamic_state3_conservative_rasterization_mode =
            extended_dynamic_state3_conservative_rasterization_mode as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_extra_primitive_overestimation_size(
        mut self,
        extended_dynamic_state3_extra_primitive_overestimation_size: bool,
    ) -> Self {
        self.value
            .extended_dynamic_state3_extra_primitive_overestimation_size =
            extended_dynamic_state3_extra_primitive_overestimation_size as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state_3depth_clip_enable(
        mut self,
        extended_dynamic_state_3depth_clip_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state_3depth_clip_enable =
            extended_dynamic_state_3depth_clip_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_sample_locations_enable(
        mut self,
        extended_dynamic_state3_sample_locations_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_sample_locations_enable =
            extended_dynamic_state3_sample_locations_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_color_blend_advanced(
        mut self,
        extended_dynamic_state3_color_blend_advanced: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_color_blend_advanced =
            extended_dynamic_state3_color_blend_advanced as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_provoking_vertex_mode(
        mut self,
        extended_dynamic_state3_provoking_vertex_mode: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_provoking_vertex_mode =
            extended_dynamic_state3_provoking_vertex_mode as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_line_rasterization_mode(
        mut self,
        extended_dynamic_state3_line_rasterization_mode: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_line_rasterization_mode =
            extended_dynamic_state3_line_rasterization_mode as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_line_stipple_enable(
        mut self,
        extended_dynamic_state3_line_stipple_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_line_stipple_enable =
            extended_dynamic_state3_line_stipple_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state_3depth_clip_negative_one_to_one(
        mut self,
        extended_dynamic_state_3depth_clip_negative_one_to_one: bool,
    ) -> Self {
        self.value
            .extended_dynamic_state_3depth_clip_negative_one_to_one =
            extended_dynamic_state_3depth_clip_negative_one_to_one as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_viewport_w_scaling_enable(
        mut self,
        extended_dynamic_state3_viewport_w_scaling_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_viewport_w_scaling_enable =
            extended_dynamic_state3_viewport_w_scaling_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_viewport_swizzle(
        mut self,
        extended_dynamic_state3_viewport_swizzle: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_viewport_swizzle =
            extended_dynamic_state3_viewport_swizzle as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_coverage_to_color_enable(
        mut self,
        extended_dynamic_state3_coverage_to_color_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_coverage_to_color_enable =
            extended_dynamic_state3_coverage_to_color_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_coverage_to_color_location(
        mut self,
        extended_dynamic_state3_coverage_to_color_location: bool,
    ) -> Self {
        self.value
            .extended_dynamic_state3_coverage_to_color_location =
            extended_dynamic_state3_coverage_to_color_location as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_coverage_modulation_mode(
        mut self,
        extended_dynamic_state3_coverage_modulation_mode: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_coverage_modulation_mode =
            extended_dynamic_state3_coverage_modulation_mode as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_coverage_modulation_table_enable(
        mut self,
        extended_dynamic_state3_coverage_modulation_table_enable: bool,
    ) -> Self {
        self.value
            .extended_dynamic_state3_coverage_modulation_table_enable =
            extended_dynamic_state3_coverage_modulation_table_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_coverage_modulation_table(
        mut self,
        extended_dynamic_state3_coverage_modulation_table: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_coverage_modulation_table =
            extended_dynamic_state3_coverage_modulation_table as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_coverage_reduction_mode(
        mut self,
        extended_dynamic_state3_coverage_reduction_mode: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_coverage_reduction_mode =
            extended_dynamic_state3_coverage_reduction_mode as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_representative_fragment_test_enable(
        mut self,
        extended_dynamic_state3_representative_fragment_test_enable: bool,
    ) -> Self {
        self.value
            .extended_dynamic_state3_representative_fragment_test_enable =
            extended_dynamic_state3_representative_fragment_test_enable as Bool32;
        self
    }

    #[inline]
    pub fn extended_dynamic_state3_shading_rate_image_enable(
        mut self,
        extended_dynamic_state3_shading_rate_image_enable: bool,
    ) -> Self {
        self.value.extended_dynamic_state3_shading_rate_image_enable =
            extended_dynamic_state3_shading_rate_image_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExtendedDynamicState3FeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExtendedDynamicState3FeaturesEXTBuilder {
    type Target = PhysicalDeviceExtendedDynamicState3FeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExtendedDynamicState3FeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedDynamicState3FeaturesEXTBuilder {
    type Target = PhysicalDeviceExtendedDynamicState3FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedDynamicState3PropertiesEXT {
    type Target = PhysicalDeviceExtendedDynamicState3PropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExtendedDynamicState3PropertiesEXT {
    type Builder = PhysicalDeviceExtendedDynamicState3PropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceExtendedDynamicState3PropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExtendedDynamicState3PropertiesEXTBuilder {
    value: PhysicalDeviceExtendedDynamicState3PropertiesEXT,
}

impl PhysicalDeviceExtendedDynamicState3PropertiesEXTBuilder {
    #[inline]
    pub fn dynamic_primitive_topology_unrestricted(
        mut self,
        dynamic_primitive_topology_unrestricted: bool,
    ) -> Self {
        self.value.dynamic_primitive_topology_unrestricted =
            dynamic_primitive_topology_unrestricted as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExtendedDynamicState3PropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExtendedDynamicState3PropertiesEXTBuilder {
    type Target = PhysicalDeviceExtendedDynamicState3PropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExtendedDynamicState3PropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedDynamicState3PropertiesEXTBuilder {
    type Target = PhysicalDeviceExtendedDynamicState3PropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedDynamicStateFeaturesEXT {
    type Target = PhysicalDeviceExtendedDynamicStateFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExtendedDynamicStateFeaturesEXT {
    type Builder = PhysicalDeviceExtendedDynamicStateFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceExtendedDynamicStateFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExtendedDynamicStateFeaturesEXTBuilder {
    value: PhysicalDeviceExtendedDynamicStateFeaturesEXT,
}

impl PhysicalDeviceExtendedDynamicStateFeaturesEXTBuilder {
    #[inline]
    pub fn extended_dynamic_state(mut self, extended_dynamic_state: bool) -> Self {
        self.value.extended_dynamic_state = extended_dynamic_state as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExtendedDynamicStateFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExtendedDynamicStateFeaturesEXTBuilder {
    type Target = PhysicalDeviceExtendedDynamicStateFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExtendedDynamicStateFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedDynamicStateFeaturesEXTBuilder {
    type Target = PhysicalDeviceExtendedDynamicStateFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
    type Target = PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
    type Builder = PhysicalDeviceExtendedSparseAddressSpaceFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExtendedSparseAddressSpaceFeaturesNVBuilder {
    value: PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV,
}

impl PhysicalDeviceExtendedSparseAddressSpaceFeaturesNVBuilder {
    #[inline]
    pub fn extended_sparse_address_space(mut self, extended_sparse_address_space: bool) -> Self {
        self.value.extended_sparse_address_space = extended_sparse_address_space as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExtendedSparseAddressSpaceFeaturesNVBuilder {
    type Target = PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExtendedSparseAddressSpaceFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedSparseAddressSpaceFeaturesNVBuilder {
    type Target = PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
    type Target = PhysicalDeviceExtendedSparseAddressSpacePropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
    type Builder = PhysicalDeviceExtendedSparseAddressSpacePropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceExtendedSparseAddressSpacePropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExtendedSparseAddressSpacePropertiesNVBuilder {
    value: PhysicalDeviceExtendedSparseAddressSpacePropertiesNV,
}

impl PhysicalDeviceExtendedSparseAddressSpacePropertiesNVBuilder {
    #[inline]
    pub fn extended_sparse_address_space_size(
        mut self,
        extended_sparse_address_space_size: DeviceSize,
    ) -> Self {
        self.value.extended_sparse_address_space_size = extended_sparse_address_space_size;
        self
    }

    #[inline]
    pub fn extended_sparse_image_usage_flags(
        mut self,
        extended_sparse_image_usage_flags: ImageUsageFlags,
    ) -> Self {
        self.value.extended_sparse_image_usage_flags = extended_sparse_image_usage_flags;
        self
    }

    #[inline]
    pub fn extended_sparse_buffer_usage_flags(
        mut self,
        extended_sparse_buffer_usage_flags: BufferUsageFlags,
    ) -> Self {
        self.value.extended_sparse_buffer_usage_flags = extended_sparse_buffer_usage_flags;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExtendedSparseAddressSpacePropertiesNVBuilder {
    type Target = PhysicalDeviceExtendedSparseAddressSpacePropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExtendedSparseAddressSpacePropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExtendedSparseAddressSpacePropertiesNVBuilder {
    type Target = PhysicalDeviceExtendedSparseAddressSpacePropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceExternalBufferInfo`].
pub unsafe trait ExtendsPhysicalDeviceExternalBufferInfo: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceExternalBufferInfo for BufferUsageFlags2CreateInfoKHR {}

unsafe impl Cast for PhysicalDeviceExternalBufferInfo {
    type Target = PhysicalDeviceExternalBufferInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceExternalBufferInfo {
    type Builder = PhysicalDeviceExternalBufferInfoBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceExternalBufferInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalBufferInfoBuilder<'b> {
    value: PhysicalDeviceExternalBufferInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceExternalBufferInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceExternalBufferInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: BufferCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn usage(mut self, usage: BufferUsageFlags) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalBufferInfo {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceExternalBufferInfoBuilder<'b> {
    type Target = PhysicalDeviceExternalBufferInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceExternalBufferInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceExternalBufferInfoBuilder<'b> {
    type Target = PhysicalDeviceExternalBufferInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalFenceInfo {
    type Target = PhysicalDeviceExternalFenceInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalFenceInfo {
    type Builder = PhysicalDeviceExternalFenceInfoBuilder;
}

/// A builder for a [`PhysicalDeviceExternalFenceInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalFenceInfoBuilder {
    value: PhysicalDeviceExternalFenceInfo,
}

impl PhysicalDeviceExternalFenceInfoBuilder {
    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalFenceHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalFenceInfo {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalFenceInfoBuilder {
    type Target = PhysicalDeviceExternalFenceInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalFenceInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalFenceInfoBuilder {
    type Target = PhysicalDeviceExternalFenceInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalFormatResolveFeaturesANDROID {
    type Target = PhysicalDeviceExternalFormatResolveFeaturesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalFormatResolveFeaturesANDROID {
    type Builder = PhysicalDeviceExternalFormatResolveFeaturesANDROIDBuilder;
}

/// A builder for a [`PhysicalDeviceExternalFormatResolveFeaturesANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalFormatResolveFeaturesANDROIDBuilder {
    value: PhysicalDeviceExternalFormatResolveFeaturesANDROID,
}

impl PhysicalDeviceExternalFormatResolveFeaturesANDROIDBuilder {
    #[inline]
    pub fn external_format_resolve(mut self, external_format_resolve: bool) -> Self {
        self.value.external_format_resolve = external_format_resolve as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalFormatResolveFeaturesANDROID {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalFormatResolveFeaturesANDROIDBuilder {
    type Target = PhysicalDeviceExternalFormatResolveFeaturesANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalFormatResolveFeaturesANDROIDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalFormatResolveFeaturesANDROIDBuilder {
    type Target = PhysicalDeviceExternalFormatResolveFeaturesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalFormatResolvePropertiesANDROID {
    type Target = PhysicalDeviceExternalFormatResolvePropertiesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalFormatResolvePropertiesANDROID {
    type Builder = PhysicalDeviceExternalFormatResolvePropertiesANDROIDBuilder;
}

/// A builder for a [`PhysicalDeviceExternalFormatResolvePropertiesANDROID`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalFormatResolvePropertiesANDROIDBuilder {
    value: PhysicalDeviceExternalFormatResolvePropertiesANDROID,
}

impl PhysicalDeviceExternalFormatResolvePropertiesANDROIDBuilder {
    #[inline]
    pub fn null_color_attachment_with_external_format_resolve(
        mut self,
        null_color_attachment_with_external_format_resolve: bool,
    ) -> Self {
        self.value
            .null_color_attachment_with_external_format_resolve =
            null_color_attachment_with_external_format_resolve as Bool32;
        self
    }

    #[inline]
    pub fn external_format_resolve_chroma_offset_x(
        mut self,
        external_format_resolve_chroma_offset_x: ChromaLocation,
    ) -> Self {
        self.value.external_format_resolve_chroma_offset_x =
            external_format_resolve_chroma_offset_x;
        self
    }

    #[inline]
    pub fn external_format_resolve_chroma_offset_y(
        mut self,
        external_format_resolve_chroma_offset_y: ChromaLocation,
    ) -> Self {
        self.value.external_format_resolve_chroma_offset_y =
            external_format_resolve_chroma_offset_y;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalFormatResolvePropertiesANDROID {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalFormatResolvePropertiesANDROIDBuilder {
    type Target = PhysicalDeviceExternalFormatResolvePropertiesANDROID;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalFormatResolvePropertiesANDROIDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalFormatResolvePropertiesANDROIDBuilder {
    type Target = PhysicalDeviceExternalFormatResolvePropertiesANDROID;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalImageFormatInfo {
    type Target = PhysicalDeviceExternalImageFormatInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalImageFormatInfo {
    type Builder = PhysicalDeviceExternalImageFormatInfoBuilder;
}

/// A builder for a [`PhysicalDeviceExternalImageFormatInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalImageFormatInfoBuilder {
    value: PhysicalDeviceExternalImageFormatInfo,
}

impl PhysicalDeviceExternalImageFormatInfoBuilder {
    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalMemoryHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalImageFormatInfo {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalImageFormatInfoBuilder {
    type Target = PhysicalDeviceExternalImageFormatInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalImageFormatInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalImageFormatInfoBuilder {
    type Target = PhysicalDeviceExternalImageFormatInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalMemoryHostPropertiesEXT {
    type Target = PhysicalDeviceExternalMemoryHostPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalMemoryHostPropertiesEXT {
    type Builder = PhysicalDeviceExternalMemoryHostPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceExternalMemoryHostPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalMemoryHostPropertiesEXTBuilder {
    value: PhysicalDeviceExternalMemoryHostPropertiesEXT,
}

impl PhysicalDeviceExternalMemoryHostPropertiesEXTBuilder {
    #[inline]
    pub fn min_imported_host_pointer_alignment(
        mut self,
        min_imported_host_pointer_alignment: DeviceSize,
    ) -> Self {
        self.value.min_imported_host_pointer_alignment = min_imported_host_pointer_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalMemoryHostPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalMemoryHostPropertiesEXTBuilder {
    type Target = PhysicalDeviceExternalMemoryHostPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalMemoryHostPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalMemoryHostPropertiesEXTBuilder {
    type Target = PhysicalDeviceExternalMemoryHostPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalMemoryRDMAFeaturesNV {
    type Target = PhysicalDeviceExternalMemoryRDMAFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalMemoryRDMAFeaturesNV {
    type Builder = PhysicalDeviceExternalMemoryRDMAFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceExternalMemoryRDMAFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalMemoryRDMAFeaturesNVBuilder {
    value: PhysicalDeviceExternalMemoryRDMAFeaturesNV,
}

impl PhysicalDeviceExternalMemoryRDMAFeaturesNVBuilder {
    #[inline]
    pub fn external_memory_rdma(mut self, external_memory_rdma: bool) -> Self {
        self.value.external_memory_rdma = external_memory_rdma as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalMemoryRDMAFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalMemoryRDMAFeaturesNVBuilder {
    type Target = PhysicalDeviceExternalMemoryRDMAFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalMemoryRDMAFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalMemoryRDMAFeaturesNVBuilder {
    type Target = PhysicalDeviceExternalMemoryRDMAFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalMemorySciBufFeaturesNV {
    type Target = PhysicalDeviceExternalMemorySciBufFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalMemorySciBufFeaturesNV {
    type Builder = PhysicalDeviceExternalMemorySciBufFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceExternalMemorySciBufFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalMemorySciBufFeaturesNVBuilder {
    value: PhysicalDeviceExternalMemorySciBufFeaturesNV,
}

impl PhysicalDeviceExternalMemorySciBufFeaturesNVBuilder {
    #[inline]
    pub fn sci_buf_import(mut self, sci_buf_import: bool) -> Self {
        self.value.sci_buf_import = sci_buf_import as Bool32;
        self
    }

    #[inline]
    pub fn sci_buf_export(mut self, sci_buf_export: bool) -> Self {
        self.value.sci_buf_export = sci_buf_export as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalMemorySciBufFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalMemorySciBufFeaturesNVBuilder {
    type Target = PhysicalDeviceExternalMemorySciBufFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalMemorySciBufFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalMemorySciBufFeaturesNVBuilder {
    type Target = PhysicalDeviceExternalMemorySciBufFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX {
    type Target = PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX {
    type Builder = PhysicalDeviceExternalMemoryScreenBufferFeaturesQNXBuilder;
}

/// A builder for a [`PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalMemoryScreenBufferFeaturesQNXBuilder {
    value: PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX,
}

impl PhysicalDeviceExternalMemoryScreenBufferFeaturesQNXBuilder {
    #[inline]
    pub fn screen_buffer_import(mut self, screen_buffer_import: bool) -> Self {
        self.value.screen_buffer_import = screen_buffer_import as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalMemoryScreenBufferFeaturesQNXBuilder {
    type Target = PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalMemoryScreenBufferFeaturesQNXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalMemoryScreenBufferFeaturesQNXBuilder {
    type Target = PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalSciSync2FeaturesNV {
    type Target = PhysicalDeviceExternalSciSync2FeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalSciSync2FeaturesNV {
    type Builder = PhysicalDeviceExternalSciSync2FeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceExternalSciSync2FeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalSciSync2FeaturesNVBuilder {
    value: PhysicalDeviceExternalSciSync2FeaturesNV,
}

impl PhysicalDeviceExternalSciSync2FeaturesNVBuilder {
    #[inline]
    pub fn sci_sync_fence(mut self, sci_sync_fence: bool) -> Self {
        self.value.sci_sync_fence = sci_sync_fence as Bool32;
        self
    }

    #[inline]
    pub fn sci_sync_semaphore2(mut self, sci_sync_semaphore2: bool) -> Self {
        self.value.sci_sync_semaphore2 = sci_sync_semaphore2 as Bool32;
        self
    }

    #[inline]
    pub fn sci_sync_import(mut self, sci_sync_import: bool) -> Self {
        self.value.sci_sync_import = sci_sync_import as Bool32;
        self
    }

    #[inline]
    pub fn sci_sync_export(mut self, sci_sync_export: bool) -> Self {
        self.value.sci_sync_export = sci_sync_export as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalSciSync2FeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalSciSync2FeaturesNVBuilder {
    type Target = PhysicalDeviceExternalSciSync2FeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalSciSync2FeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalSciSync2FeaturesNVBuilder {
    type Target = PhysicalDeviceExternalSciSync2FeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalSciSyncFeaturesNV {
    type Target = PhysicalDeviceExternalSciSyncFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceExternalSciSyncFeaturesNV {
    type Builder = PhysicalDeviceExternalSciSyncFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceExternalSciSyncFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalSciSyncFeaturesNVBuilder {
    value: PhysicalDeviceExternalSciSyncFeaturesNV,
}

impl PhysicalDeviceExternalSciSyncFeaturesNVBuilder {
    #[inline]
    pub fn sci_sync_fence(mut self, sci_sync_fence: bool) -> Self {
        self.value.sci_sync_fence = sci_sync_fence as Bool32;
        self
    }

    #[inline]
    pub fn sci_sync_semaphore(mut self, sci_sync_semaphore: bool) -> Self {
        self.value.sci_sync_semaphore = sci_sync_semaphore as Bool32;
        self
    }

    #[inline]
    pub fn sci_sync_import(mut self, sci_sync_import: bool) -> Self {
        self.value.sci_sync_import = sci_sync_import as Bool32;
        self
    }

    #[inline]
    pub fn sci_sync_export(mut self, sci_sync_export: bool) -> Self {
        self.value.sci_sync_export = sci_sync_export as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalSciSyncFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceExternalSciSyncFeaturesNVBuilder {
    type Target = PhysicalDeviceExternalSciSyncFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceExternalSciSyncFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceExternalSciSyncFeaturesNVBuilder {
    type Target = PhysicalDeviceExternalSciSyncFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceExternalSemaphoreInfo`].
pub unsafe trait ExtendsPhysicalDeviceExternalSemaphoreInfo: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceExternalSemaphoreInfo for SemaphoreTypeCreateInfo {}

unsafe impl Cast for PhysicalDeviceExternalSemaphoreInfo {
    type Target = PhysicalDeviceExternalSemaphoreInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceExternalSemaphoreInfo {
    type Builder = PhysicalDeviceExternalSemaphoreInfoBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceExternalSemaphoreInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceExternalSemaphoreInfoBuilder<'b> {
    value: PhysicalDeviceExternalSemaphoreInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceExternalSemaphoreInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceExternalSemaphoreInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceExternalSemaphoreInfo {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceExternalSemaphoreInfoBuilder<'b> {
    type Target = PhysicalDeviceExternalSemaphoreInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceExternalSemaphoreInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceExternalSemaphoreInfoBuilder<'b> {
    type Target = PhysicalDeviceExternalSemaphoreInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFaultFeaturesEXT {
    type Target = PhysicalDeviceFaultFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFaultFeaturesEXT {
    type Builder = PhysicalDeviceFaultFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceFaultFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFaultFeaturesEXTBuilder {
    value: PhysicalDeviceFaultFeaturesEXT,
}

impl PhysicalDeviceFaultFeaturesEXTBuilder {
    #[inline]
    pub fn device_fault(mut self, device_fault: bool) -> Self {
        self.value.device_fault = device_fault as Bool32;
        self
    }

    #[inline]
    pub fn device_fault_vendor_binary(mut self, device_fault_vendor_binary: bool) -> Self {
        self.value.device_fault_vendor_binary = device_fault_vendor_binary as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFaultFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFaultFeaturesEXTBuilder {
    type Target = PhysicalDeviceFaultFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFaultFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFaultFeaturesEXTBuilder {
    type Target = PhysicalDeviceFaultFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFeatures {
    type Target = PhysicalDeviceFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFeatures {
    type Builder = PhysicalDeviceFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFeaturesBuilder {
    value: PhysicalDeviceFeatures,
}

impl PhysicalDeviceFeaturesBuilder {
    #[inline]
    pub fn robust_buffer_access(mut self, robust_buffer_access: bool) -> Self {
        self.value.robust_buffer_access = robust_buffer_access as Bool32;
        self
    }

    #[inline]
    pub fn full_draw_index_uint32(mut self, full_draw_index_uint32: bool) -> Self {
        self.value.full_draw_index_uint32 = full_draw_index_uint32 as Bool32;
        self
    }

    #[inline]
    pub fn image_cube_array(mut self, image_cube_array: bool) -> Self {
        self.value.image_cube_array = image_cube_array as Bool32;
        self
    }

    #[inline]
    pub fn independent_blend(mut self, independent_blend: bool) -> Self {
        self.value.independent_blend = independent_blend as Bool32;
        self
    }

    #[inline]
    pub fn geometry_shader(mut self, geometry_shader: bool) -> Self {
        self.value.geometry_shader = geometry_shader as Bool32;
        self
    }

    #[inline]
    pub fn tessellation_shader(mut self, tessellation_shader: bool) -> Self {
        self.value.tessellation_shader = tessellation_shader as Bool32;
        self
    }

    #[inline]
    pub fn sample_rate_shading(mut self, sample_rate_shading: bool) -> Self {
        self.value.sample_rate_shading = sample_rate_shading as Bool32;
        self
    }

    #[inline]
    pub fn dual_src_blend(mut self, dual_src_blend: bool) -> Self {
        self.value.dual_src_blend = dual_src_blend as Bool32;
        self
    }

    #[inline]
    pub fn logic_op(mut self, logic_op: bool) -> Self {
        self.value.logic_op = logic_op as Bool32;
        self
    }

    #[inline]
    pub fn multi_draw_indirect(mut self, multi_draw_indirect: bool) -> Self {
        self.value.multi_draw_indirect = multi_draw_indirect as Bool32;
        self
    }

    #[inline]
    pub fn draw_indirect_first_instance(mut self, draw_indirect_first_instance: bool) -> Self {
        self.value.draw_indirect_first_instance = draw_indirect_first_instance as Bool32;
        self
    }

    #[inline]
    pub fn depth_clamp(mut self, depth_clamp: bool) -> Self {
        self.value.depth_clamp = depth_clamp as Bool32;
        self
    }

    #[inline]
    pub fn depth_bias_clamp(mut self, depth_bias_clamp: bool) -> Self {
        self.value.depth_bias_clamp = depth_bias_clamp as Bool32;
        self
    }

    #[inline]
    pub fn fill_mode_non_solid(mut self, fill_mode_non_solid: bool) -> Self {
        self.value.fill_mode_non_solid = fill_mode_non_solid as Bool32;
        self
    }

    #[inline]
    pub fn depth_bounds(mut self, depth_bounds: bool) -> Self {
        self.value.depth_bounds = depth_bounds as Bool32;
        self
    }

    #[inline]
    pub fn wide_lines(mut self, wide_lines: bool) -> Self {
        self.value.wide_lines = wide_lines as Bool32;
        self
    }

    #[inline]
    pub fn large_points(mut self, large_points: bool) -> Self {
        self.value.large_points = large_points as Bool32;
        self
    }

    #[inline]
    pub fn alpha_to_one(mut self, alpha_to_one: bool) -> Self {
        self.value.alpha_to_one = alpha_to_one as Bool32;
        self
    }

    #[inline]
    pub fn multi_viewport(mut self, multi_viewport: bool) -> Self {
        self.value.multi_viewport = multi_viewport as Bool32;
        self
    }

    #[inline]
    pub fn sampler_anisotropy(mut self, sampler_anisotropy: bool) -> Self {
        self.value.sampler_anisotropy = sampler_anisotropy as Bool32;
        self
    }

    #[inline]
    pub fn texture_compression_etc2(mut self, texture_compression_etc2: bool) -> Self {
        self.value.texture_compression_etc2 = texture_compression_etc2 as Bool32;
        self
    }

    #[inline]
    pub fn texture_compression_astc_ldr(mut self, texture_compression_astc_ldr: bool) -> Self {
        self.value.texture_compression_astc_ldr = texture_compression_astc_ldr as Bool32;
        self
    }

    #[inline]
    pub fn texture_compression_bc(mut self, texture_compression_bc: bool) -> Self {
        self.value.texture_compression_bc = texture_compression_bc as Bool32;
        self
    }

    #[inline]
    pub fn occlusion_query_precise(mut self, occlusion_query_precise: bool) -> Self {
        self.value.occlusion_query_precise = occlusion_query_precise as Bool32;
        self
    }

    #[inline]
    pub fn pipeline_statistics_query(mut self, pipeline_statistics_query: bool) -> Self {
        self.value.pipeline_statistics_query = pipeline_statistics_query as Bool32;
        self
    }

    #[inline]
    pub fn vertex_pipeline_stores_and_atomics(
        mut self,
        vertex_pipeline_stores_and_atomics: bool,
    ) -> Self {
        self.value.vertex_pipeline_stores_and_atomics =
            vertex_pipeline_stores_and_atomics as Bool32;
        self
    }

    #[inline]
    pub fn fragment_stores_and_atomics(mut self, fragment_stores_and_atomics: bool) -> Self {
        self.value.fragment_stores_and_atomics = fragment_stores_and_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_tessellation_and_geometry_point_size(
        mut self,
        shader_tessellation_and_geometry_point_size: bool,
    ) -> Self {
        self.value.shader_tessellation_and_geometry_point_size =
            shader_tessellation_and_geometry_point_size as Bool32;
        self
    }

    #[inline]
    pub fn shader_image_gather_extended(mut self, shader_image_gather_extended: bool) -> Self {
        self.value.shader_image_gather_extended = shader_image_gather_extended as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_extended_formats(
        mut self,
        shader_storage_image_extended_formats: bool,
    ) -> Self {
        self.value.shader_storage_image_extended_formats =
            shader_storage_image_extended_formats as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_multisample(
        mut self,
        shader_storage_image_multisample: bool,
    ) -> Self {
        self.value.shader_storage_image_multisample = shader_storage_image_multisample as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_read_without_format(
        mut self,
        shader_storage_image_read_without_format: bool,
    ) -> Self {
        self.value.shader_storage_image_read_without_format =
            shader_storage_image_read_without_format as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_write_without_format(
        mut self,
        shader_storage_image_write_without_format: bool,
    ) -> Self {
        self.value.shader_storage_image_write_without_format =
            shader_storage_image_write_without_format as Bool32;
        self
    }

    #[inline]
    pub fn shader_uniform_buffer_array_dynamic_indexing(
        mut self,
        shader_uniform_buffer_array_dynamic_indexing: bool,
    ) -> Self {
        self.value.shader_uniform_buffer_array_dynamic_indexing =
            shader_uniform_buffer_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_sampled_image_array_dynamic_indexing(
        mut self,
        shader_sampled_image_array_dynamic_indexing: bool,
    ) -> Self {
        self.value.shader_sampled_image_array_dynamic_indexing =
            shader_sampled_image_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_buffer_array_dynamic_indexing(
        mut self,
        shader_storage_buffer_array_dynamic_indexing: bool,
    ) -> Self {
        self.value.shader_storage_buffer_array_dynamic_indexing =
            shader_storage_buffer_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_array_dynamic_indexing(
        mut self,
        shader_storage_image_array_dynamic_indexing: bool,
    ) -> Self {
        self.value.shader_storage_image_array_dynamic_indexing =
            shader_storage_image_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_clip_distance(mut self, shader_clip_distance: bool) -> Self {
        self.value.shader_clip_distance = shader_clip_distance as Bool32;
        self
    }

    #[inline]
    pub fn shader_cull_distance(mut self, shader_cull_distance: bool) -> Self {
        self.value.shader_cull_distance = shader_cull_distance as Bool32;
        self
    }

    #[inline]
    pub fn shader_float64(mut self, shader_float64: bool) -> Self {
        self.value.shader_float64 = shader_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_int64(mut self, shader_int64: bool) -> Self {
        self.value.shader_int64 = shader_int64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_int16(mut self, shader_int16: bool) -> Self {
        self.value.shader_int16 = shader_int16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_resource_residency(mut self, shader_resource_residency: bool) -> Self {
        self.value.shader_resource_residency = shader_resource_residency as Bool32;
        self
    }

    #[inline]
    pub fn shader_resource_min_lod(mut self, shader_resource_min_lod: bool) -> Self {
        self.value.shader_resource_min_lod = shader_resource_min_lod as Bool32;
        self
    }

    #[inline]
    pub fn sparse_binding(mut self, sparse_binding: bool) -> Self {
        self.value.sparse_binding = sparse_binding as Bool32;
        self
    }

    #[inline]
    pub fn sparse_residency_buffer(mut self, sparse_residency_buffer: bool) -> Self {
        self.value.sparse_residency_buffer = sparse_residency_buffer as Bool32;
        self
    }

    #[inline]
    pub fn sparse_residency_image_2d(mut self, sparse_residency_image_2d: bool) -> Self {
        self.value.sparse_residency_image_2d = sparse_residency_image_2d as Bool32;
        self
    }

    #[inline]
    pub fn sparse_residency_image_3d(mut self, sparse_residency_image_3d: bool) -> Self {
        self.value.sparse_residency_image_3d = sparse_residency_image_3d as Bool32;
        self
    }

    #[inline]
    pub fn sparse_residency2_samples(mut self, sparse_residency2_samples: bool) -> Self {
        self.value.sparse_residency2_samples = sparse_residency2_samples as Bool32;
        self
    }

    #[inline]
    pub fn sparse_residency4_samples(mut self, sparse_residency4_samples: bool) -> Self {
        self.value.sparse_residency4_samples = sparse_residency4_samples as Bool32;
        self
    }

    #[inline]
    pub fn sparse_residency8_samples(mut self, sparse_residency8_samples: bool) -> Self {
        self.value.sparse_residency8_samples = sparse_residency8_samples as Bool32;
        self
    }

    #[inline]
    pub fn sparse_residency16_samples(mut self, sparse_residency16_samples: bool) -> Self {
        self.value.sparse_residency16_samples = sparse_residency16_samples as Bool32;
        self
    }

    #[inline]
    pub fn sparse_residency_aliased(mut self, sparse_residency_aliased: bool) -> Self {
        self.value.sparse_residency_aliased = sparse_residency_aliased as Bool32;
        self
    }

    #[inline]
    pub fn variable_multisample_rate(mut self, variable_multisample_rate: bool) -> Self {
        self.value.variable_multisample_rate = variable_multisample_rate as Bool32;
        self
    }

    #[inline]
    pub fn inherited_queries(mut self, inherited_queries: bool) -> Self {
        self.value.inherited_queries = inherited_queries as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFeaturesBuilder {
    type Target = PhysicalDeviceFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFeaturesBuilder {
    type Target = PhysicalDeviceFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceFeatures2`].
pub unsafe trait ExtendsPhysicalDeviceFeatures2: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevice16BitStorageFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevice4444FormatsFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevice8BitStorageFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceASTCDecodeFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceAccelerationStructureFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceAddressBindingReportFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceAmigoProfilingFeaturesSEC {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceAntiLagFeaturesAMD {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceBlendOperationAdvancedFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceBorderColorSwizzleFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceBufferDeviceAddressFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceBufferDeviceAddressFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceClusterCullingShaderFeaturesHUAWEI {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCoherentMemoryFeaturesAMD {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceColorWriteEnableFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCommandBufferInheritanceFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceComputeShaderDerivativesFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceConditionalRenderingFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCooperativeMatrixFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCooperativeMatrixFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCopyMemoryIndirectFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCornerSampledImageFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCoverageReductionModeFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCubicClampFeaturesQCOM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCubicWeightsFeaturesQCOM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCudaKernelLaunchFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceCustomBorderColorFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDepthBiasControlFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDepthClampZeroOneFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDepthClipControlFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDepthClipEnableFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDescriptorBufferFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDescriptorIndexingFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceDescriptorPoolOverallocationFeaturesNV
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDeviceMemoryReportFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDiagnosticsConfigFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDisplacementMicromapFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDynamicRenderingFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExclusiveScissorFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExtendedDynamicState2FeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExtendedDynamicState3FeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExtendedDynamicStateFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExternalFormatResolveFeaturesANDROID {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExternalMemoryRDMAFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExternalMemorySciBufFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExternalSciSync2FeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceExternalSciSyncFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFaultFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFragmentDensityMap2FeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFragmentDensityMapFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFragmentShaderInterlockFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFragmentShadingRateFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceFrameBoundaryFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceGlobalPriorityQueryFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceHostImageCopyFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceHostQueryResetFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImage2DViewOf3DFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImageAlignmentControlFeaturesMESA {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImageCompressionControlFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImageProcessing2FeaturesQCOM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImageProcessingFeaturesQCOM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImageRobustnessFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImageSlicedViewOf3DFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImageViewMinLodFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceImagelessFramebufferFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceIndexTypeUint8FeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceInheritedViewportScissorFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceInlineUniformBlockFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceInvocationMaskFeaturesHUAWEI {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceLegacyDitheringFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceLegacyVertexAttributesFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceLineRasterizationFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceLinearColorAttachmentFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMaintenance4Features {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMaintenance5FeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMaintenance6FeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMaintenance7FeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMapMemoryPlacedFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMemoryDecompressionFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMemoryPriorityFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMeshShaderFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMeshShaderFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMultiDrawFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMultiviewFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceMutableDescriptorTypeFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceNestedCommandBufferFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceOpacityMicromapFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceOpticalFlowFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePerStageDescriptorSetFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePerformanceQueryFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePipelineBinaryFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePipelineCreationCacheControlFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDevicePipelineExecutablePropertiesFeaturesKHR
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePipelinePropertiesFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePipelineProtectedAccessFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePipelineRobustnessFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePortabilitySubsetFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePresentBarrierFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePresentIdFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePresentWaitFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDevicePrivateDataFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceProtectedMemoryFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceProvokingVertexFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRGBA10X6FormatsFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRawAccessChainsFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRayQueryFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRayTracingInvocationReorderFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRayTracingMaintenance1FeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRayTracingMotionBlurFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRayTracingPipelineFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRayTracingPositionFetchFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRayTracingValidationFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRelaxedLineRasterizationFeaturesIMG {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRenderPassStripedFeaturesARM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRepresentativeFragmentTestFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceRobustness2FeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceSamplerYcbcrConversionFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceScalarBlockLayoutFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceSchedulingControlsFeaturesARM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceSeparateDepthStencilLayoutsFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderAtomicFloat2FeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderAtomicFloatFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderAtomicInt64Features {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderClockFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderCoreBuiltinsFeaturesARM {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceShaderDemoteToHelperInvocationFeatures
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderDrawParametersFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderEnqueueFeaturesAMDX {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderExpectAssumeFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderFloat16Int8Features {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderFloatControls2FeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderImageFootprintFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderIntegerDotProductFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderModuleIdentifierFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderObjectFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderQuadControlFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderReplicatedCompositesFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderSMBuiltinsFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderSubgroupExtendedTypesFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderSubgroupRotateFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderTerminateInvocationFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShaderTileImageFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceShadingRateImageFeaturesNV {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceSubgroupSizeControlFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceSubpassShadingFeaturesHUAWEI {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceSwapchainMaintenance1FeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceSynchronization2Features {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceTexelBufferAlignmentFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceTextureCompressionASTCHDRFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceTilePropertiesFeaturesQCOM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceTimelineSemaphoreFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceTransformFeedbackFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceUniformBufferStandardLayoutFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceVariablePointersFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceVertexAttributeDivisorFeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceVertexInputDynamicStateFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceVideoMaintenance1FeaturesKHR {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceVulkan11Features {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceVulkan12Features {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceVulkan13Features {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceVulkanMemoryModelFeatures {}
unsafe impl ExtendsPhysicalDeviceFeatures2
    for PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
{
}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceYcbcrDegammaFeaturesQCOM {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceYcbcrImageArraysFeaturesEXT {}
unsafe impl ExtendsPhysicalDeviceFeatures2 for PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {}

unsafe impl Cast for PhysicalDeviceFeatures2 {
    type Target = PhysicalDeviceFeatures2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceFeatures2 {
    type Builder = PhysicalDeviceFeatures2Builder<'b>;
}

/// A builder for a [`PhysicalDeviceFeatures2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFeatures2Builder<'b> {
    value: PhysicalDeviceFeatures2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceFeatures2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceFeatures2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn features(mut self, features: impl Cast<Target = PhysicalDeviceFeatures>) -> Self {
        self.value.features = features.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFeatures2 {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceFeatures2Builder<'b> {
    type Target = PhysicalDeviceFeatures2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceFeatures2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceFeatures2Builder<'b> {
    type Target = PhysicalDeviceFeatures2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFloatControlsProperties {
    type Target = PhysicalDeviceFloatControlsProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFloatControlsProperties {
    type Builder = PhysicalDeviceFloatControlsPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceFloatControlsProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFloatControlsPropertiesBuilder {
    value: PhysicalDeviceFloatControlsProperties,
}

impl PhysicalDeviceFloatControlsPropertiesBuilder {
    #[inline]
    pub fn denorm_behavior_independence(
        mut self,
        denorm_behavior_independence: ShaderFloatControlsIndependence,
    ) -> Self {
        self.value.denorm_behavior_independence = denorm_behavior_independence;
        self
    }

    #[inline]
    pub fn rounding_mode_independence(
        mut self,
        rounding_mode_independence: ShaderFloatControlsIndependence,
    ) -> Self {
        self.value.rounding_mode_independence = rounding_mode_independence;
        self
    }

    #[inline]
    pub fn shader_signed_zero_inf_nan_preserve_float16(
        mut self,
        shader_signed_zero_inf_nan_preserve_float16: bool,
    ) -> Self {
        self.value.shader_signed_zero_inf_nan_preserve_float16 =
            shader_signed_zero_inf_nan_preserve_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_signed_zero_inf_nan_preserve_float32(
        mut self,
        shader_signed_zero_inf_nan_preserve_float32: bool,
    ) -> Self {
        self.value.shader_signed_zero_inf_nan_preserve_float32 =
            shader_signed_zero_inf_nan_preserve_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_signed_zero_inf_nan_preserve_float64(
        mut self,
        shader_signed_zero_inf_nan_preserve_float64: bool,
    ) -> Self {
        self.value.shader_signed_zero_inf_nan_preserve_float64 =
            shader_signed_zero_inf_nan_preserve_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_preserve_float16(mut self, shader_denorm_preserve_float16: bool) -> Self {
        self.value.shader_denorm_preserve_float16 = shader_denorm_preserve_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_preserve_float32(mut self, shader_denorm_preserve_float32: bool) -> Self {
        self.value.shader_denorm_preserve_float32 = shader_denorm_preserve_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_preserve_float64(mut self, shader_denorm_preserve_float64: bool) -> Self {
        self.value.shader_denorm_preserve_float64 = shader_denorm_preserve_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_flush_to_zero_float16(
        mut self,
        shader_denorm_flush_to_zero_float16: bool,
    ) -> Self {
        self.value.shader_denorm_flush_to_zero_float16 =
            shader_denorm_flush_to_zero_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_flush_to_zero_float32(
        mut self,
        shader_denorm_flush_to_zero_float32: bool,
    ) -> Self {
        self.value.shader_denorm_flush_to_zero_float32 =
            shader_denorm_flush_to_zero_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_flush_to_zero_float64(
        mut self,
        shader_denorm_flush_to_zero_float64: bool,
    ) -> Self {
        self.value.shader_denorm_flush_to_zero_float64 =
            shader_denorm_flush_to_zero_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rte_float16(
        mut self,
        shader_rounding_mode_rte_float16: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rte_float16 = shader_rounding_mode_rte_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rte_float32(
        mut self,
        shader_rounding_mode_rte_float32: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rte_float32 = shader_rounding_mode_rte_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rte_float64(
        mut self,
        shader_rounding_mode_rte_float64: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rte_float64 = shader_rounding_mode_rte_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rtz_float16(
        mut self,
        shader_rounding_mode_rtz_float16: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rtz_float16 = shader_rounding_mode_rtz_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rtz_float32(
        mut self,
        shader_rounding_mode_rtz_float32: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rtz_float32 = shader_rounding_mode_rtz_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rtz_float64(
        mut self,
        shader_rounding_mode_rtz_float64: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rtz_float64 = shader_rounding_mode_rtz_float64 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFloatControlsProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFloatControlsPropertiesBuilder {
    type Target = PhysicalDeviceFloatControlsProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFloatControlsPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFloatControlsPropertiesBuilder {
    type Target = PhysicalDeviceFloatControlsProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMap2FeaturesEXT {
    type Target = PhysicalDeviceFragmentDensityMap2FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentDensityMap2FeaturesEXT {
    type Builder = PhysicalDeviceFragmentDensityMap2FeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentDensityMap2FeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentDensityMap2FeaturesEXTBuilder {
    value: PhysicalDeviceFragmentDensityMap2FeaturesEXT,
}

impl PhysicalDeviceFragmentDensityMap2FeaturesEXTBuilder {
    #[inline]
    pub fn fragment_density_map_deferred(mut self, fragment_density_map_deferred: bool) -> Self {
        self.value.fragment_density_map_deferred = fragment_density_map_deferred as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentDensityMap2FeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentDensityMap2FeaturesEXTBuilder {
    type Target = PhysicalDeviceFragmentDensityMap2FeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentDensityMap2FeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMap2FeaturesEXTBuilder {
    type Target = PhysicalDeviceFragmentDensityMap2FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMap2PropertiesEXT {
    type Target = PhysicalDeviceFragmentDensityMap2PropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentDensityMap2PropertiesEXT {
    type Builder = PhysicalDeviceFragmentDensityMap2PropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentDensityMap2PropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentDensityMap2PropertiesEXTBuilder {
    value: PhysicalDeviceFragmentDensityMap2PropertiesEXT,
}

impl PhysicalDeviceFragmentDensityMap2PropertiesEXTBuilder {
    #[inline]
    pub fn subsampled_loads(mut self, subsampled_loads: bool) -> Self {
        self.value.subsampled_loads = subsampled_loads as Bool32;
        self
    }

    #[inline]
    pub fn subsampled_coarse_reconstruction_early_access(
        mut self,
        subsampled_coarse_reconstruction_early_access: bool,
    ) -> Self {
        self.value.subsampled_coarse_reconstruction_early_access =
            subsampled_coarse_reconstruction_early_access as Bool32;
        self
    }

    #[inline]
    pub fn max_subsampled_array_layers(mut self, max_subsampled_array_layers: u32) -> Self {
        self.value.max_subsampled_array_layers = max_subsampled_array_layers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_subsampled_samplers(
        mut self,
        max_descriptor_set_subsampled_samplers: u32,
    ) -> Self {
        self.value.max_descriptor_set_subsampled_samplers = max_descriptor_set_subsampled_samplers;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentDensityMap2PropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentDensityMap2PropertiesEXTBuilder {
    type Target = PhysicalDeviceFragmentDensityMap2PropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentDensityMap2PropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMap2PropertiesEXTBuilder {
    type Target = PhysicalDeviceFragmentDensityMap2PropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMapFeaturesEXT {
    type Target = PhysicalDeviceFragmentDensityMapFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentDensityMapFeaturesEXT {
    type Builder = PhysicalDeviceFragmentDensityMapFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentDensityMapFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentDensityMapFeaturesEXTBuilder {
    value: PhysicalDeviceFragmentDensityMapFeaturesEXT,
}

impl PhysicalDeviceFragmentDensityMapFeaturesEXTBuilder {
    #[inline]
    pub fn fragment_density_map(mut self, fragment_density_map: bool) -> Self {
        self.value.fragment_density_map = fragment_density_map as Bool32;
        self
    }

    #[inline]
    pub fn fragment_density_map_dynamic(mut self, fragment_density_map_dynamic: bool) -> Self {
        self.value.fragment_density_map_dynamic = fragment_density_map_dynamic as Bool32;
        self
    }

    #[inline]
    pub fn fragment_density_map_non_subsampled_images(
        mut self,
        fragment_density_map_non_subsampled_images: bool,
    ) -> Self {
        self.value.fragment_density_map_non_subsampled_images =
            fragment_density_map_non_subsampled_images as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentDensityMapFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentDensityMapFeaturesEXTBuilder {
    type Target = PhysicalDeviceFragmentDensityMapFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentDensityMapFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMapFeaturesEXTBuilder {
    type Target = PhysicalDeviceFragmentDensityMapFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    type Target = PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    type Builder = PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMBuilder {
    value: PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM,
}

impl PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMBuilder {
    #[inline]
    pub fn fragment_density_map_offset(mut self, fragment_density_map_offset: bool) -> Self {
        self.value.fragment_density_map_offset = fragment_density_map_offset as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMBuilder {
    type Target = PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMBuilder {
    type Target = PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    type Target = PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    type Builder = PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMBuilder {
    value: PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM,
}

impl PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMBuilder {
    #[inline]
    pub fn fragment_density_offset_granularity(
        mut self,
        fragment_density_offset_granularity: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.fragment_density_offset_granularity = fragment_density_offset_granularity.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMBuilder {
    type Target = PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMBuilder {
    type Target = PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMapPropertiesEXT {
    type Target = PhysicalDeviceFragmentDensityMapPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentDensityMapPropertiesEXT {
    type Builder = PhysicalDeviceFragmentDensityMapPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentDensityMapPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentDensityMapPropertiesEXTBuilder {
    value: PhysicalDeviceFragmentDensityMapPropertiesEXT,
}

impl PhysicalDeviceFragmentDensityMapPropertiesEXTBuilder {
    #[inline]
    pub fn min_fragment_density_texel_size(
        mut self,
        min_fragment_density_texel_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.min_fragment_density_texel_size = min_fragment_density_texel_size.into();
        self
    }

    #[inline]
    pub fn max_fragment_density_texel_size(
        mut self,
        max_fragment_density_texel_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_fragment_density_texel_size = max_fragment_density_texel_size.into();
        self
    }

    #[inline]
    pub fn fragment_density_invocations(mut self, fragment_density_invocations: bool) -> Self {
        self.value.fragment_density_invocations = fragment_density_invocations as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentDensityMapPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentDensityMapPropertiesEXTBuilder {
    type Target = PhysicalDeviceFragmentDensityMapPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentDensityMapPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentDensityMapPropertiesEXTBuilder {
    type Target = PhysicalDeviceFragmentDensityMapPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    type Target = PhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    type Builder = PhysicalDeviceFragmentShaderBarycentricFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentShaderBarycentricFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentShaderBarycentricFeaturesKHRBuilder {
    value: PhysicalDeviceFragmentShaderBarycentricFeaturesKHR,
}

impl PhysicalDeviceFragmentShaderBarycentricFeaturesKHRBuilder {
    #[inline]
    pub fn fragment_shader_barycentric(mut self, fragment_shader_barycentric: bool) -> Self {
        self.value.fragment_shader_barycentric = fragment_shader_barycentric as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentShaderBarycentricFeaturesKHRBuilder {
    type Target = PhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentShaderBarycentricFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShaderBarycentricFeaturesKHRBuilder {
    type Target = PhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    type Target = PhysicalDeviceFragmentShaderBarycentricPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    type Builder = PhysicalDeviceFragmentShaderBarycentricPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentShaderBarycentricPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentShaderBarycentricPropertiesKHRBuilder {
    value: PhysicalDeviceFragmentShaderBarycentricPropertiesKHR,
}

impl PhysicalDeviceFragmentShaderBarycentricPropertiesKHRBuilder {
    #[inline]
    pub fn tri_strip_vertex_order_independent_of_provoking_vertex(
        mut self,
        tri_strip_vertex_order_independent_of_provoking_vertex: bool,
    ) -> Self {
        self.value
            .tri_strip_vertex_order_independent_of_provoking_vertex =
            tri_strip_vertex_order_independent_of_provoking_vertex as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentShaderBarycentricPropertiesKHRBuilder {
    type Target = PhysicalDeviceFragmentShaderBarycentricPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentShaderBarycentricPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShaderBarycentricPropertiesKHRBuilder {
    type Target = PhysicalDeviceFragmentShaderBarycentricPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    type Target = PhysicalDeviceFragmentShaderInterlockFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    type Builder = PhysicalDeviceFragmentShaderInterlockFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentShaderInterlockFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentShaderInterlockFeaturesEXTBuilder {
    value: PhysicalDeviceFragmentShaderInterlockFeaturesEXT,
}

impl PhysicalDeviceFragmentShaderInterlockFeaturesEXTBuilder {
    #[inline]
    pub fn fragment_shader_sample_interlock(
        mut self,
        fragment_shader_sample_interlock: bool,
    ) -> Self {
        self.value.fragment_shader_sample_interlock = fragment_shader_sample_interlock as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shader_pixel_interlock(
        mut self,
        fragment_shader_pixel_interlock: bool,
    ) -> Self {
        self.value.fragment_shader_pixel_interlock = fragment_shader_pixel_interlock as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shader_shading_rate_interlock(
        mut self,
        fragment_shader_shading_rate_interlock: bool,
    ) -> Self {
        self.value.fragment_shader_shading_rate_interlock =
            fragment_shader_shading_rate_interlock as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentShaderInterlockFeaturesEXTBuilder {
    type Target = PhysicalDeviceFragmentShaderInterlockFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentShaderInterlockFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShaderInterlockFeaturesEXTBuilder {
    type Target = PhysicalDeviceFragmentShaderInterlockFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    type Target = PhysicalDeviceFragmentShadingRateEnumsFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    type Builder = PhysicalDeviceFragmentShadingRateEnumsFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentShadingRateEnumsFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentShadingRateEnumsFeaturesNVBuilder {
    value: PhysicalDeviceFragmentShadingRateEnumsFeaturesNV,
}

impl PhysicalDeviceFragmentShadingRateEnumsFeaturesNVBuilder {
    #[inline]
    pub fn fragment_shading_rate_enums(mut self, fragment_shading_rate_enums: bool) -> Self {
        self.value.fragment_shading_rate_enums = fragment_shading_rate_enums as Bool32;
        self
    }

    #[inline]
    pub fn supersample_fragment_shading_rates(
        mut self,
        supersample_fragment_shading_rates: bool,
    ) -> Self {
        self.value.supersample_fragment_shading_rates =
            supersample_fragment_shading_rates as Bool32;
        self
    }

    #[inline]
    pub fn no_invocation_fragment_shading_rates(
        mut self,
        no_invocation_fragment_shading_rates: bool,
    ) -> Self {
        self.value.no_invocation_fragment_shading_rates =
            no_invocation_fragment_shading_rates as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentShadingRateEnumsFeaturesNVBuilder {
    type Target = PhysicalDeviceFragmentShadingRateEnumsFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentShadingRateEnumsFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRateEnumsFeaturesNVBuilder {
    type Target = PhysicalDeviceFragmentShadingRateEnumsFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    type Target = PhysicalDeviceFragmentShadingRateEnumsPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    type Builder = PhysicalDeviceFragmentShadingRateEnumsPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentShadingRateEnumsPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentShadingRateEnumsPropertiesNVBuilder {
    value: PhysicalDeviceFragmentShadingRateEnumsPropertiesNV,
}

impl PhysicalDeviceFragmentShadingRateEnumsPropertiesNVBuilder {
    #[inline]
    pub fn max_fragment_shading_rate_invocation_count(
        mut self,
        max_fragment_shading_rate_invocation_count: SampleCountFlags,
    ) -> Self {
        self.value.max_fragment_shading_rate_invocation_count =
            max_fragment_shading_rate_invocation_count;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentShadingRateEnumsPropertiesNVBuilder {
    type Target = PhysicalDeviceFragmentShadingRateEnumsPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentShadingRateEnumsPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRateEnumsPropertiesNVBuilder {
    type Target = PhysicalDeviceFragmentShadingRateEnumsPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRateFeaturesKHR {
    type Target = PhysicalDeviceFragmentShadingRateFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentShadingRateFeaturesKHR {
    type Builder = PhysicalDeviceFragmentShadingRateFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentShadingRateFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentShadingRateFeaturesKHRBuilder {
    value: PhysicalDeviceFragmentShadingRateFeaturesKHR,
}

impl PhysicalDeviceFragmentShadingRateFeaturesKHRBuilder {
    #[inline]
    pub fn pipeline_fragment_shading_rate(mut self, pipeline_fragment_shading_rate: bool) -> Self {
        self.value.pipeline_fragment_shading_rate = pipeline_fragment_shading_rate as Bool32;
        self
    }

    #[inline]
    pub fn primitive_fragment_shading_rate(
        mut self,
        primitive_fragment_shading_rate: bool,
    ) -> Self {
        self.value.primitive_fragment_shading_rate = primitive_fragment_shading_rate as Bool32;
        self
    }

    #[inline]
    pub fn attachment_fragment_shading_rate(
        mut self,
        attachment_fragment_shading_rate: bool,
    ) -> Self {
        self.value.attachment_fragment_shading_rate = attachment_fragment_shading_rate as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentShadingRateFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentShadingRateFeaturesKHRBuilder {
    type Target = PhysicalDeviceFragmentShadingRateFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentShadingRateFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRateFeaturesKHRBuilder {
    type Target = PhysicalDeviceFragmentShadingRateFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRateKHR {
    type Target = PhysicalDeviceFragmentShadingRateKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentShadingRateKHR {
    type Builder = PhysicalDeviceFragmentShadingRateKHRBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentShadingRateKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentShadingRateKHRBuilder {
    value: PhysicalDeviceFragmentShadingRateKHR,
}

impl PhysicalDeviceFragmentShadingRateKHRBuilder {
    #[inline]
    pub fn sample_counts(mut self, sample_counts: SampleCountFlags) -> Self {
        self.value.sample_counts = sample_counts;
        self
    }

    #[inline]
    pub fn fragment_size(mut self, fragment_size: impl Cast<Target = Extent2D>) -> Self {
        self.value.fragment_size = fragment_size.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentShadingRateKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentShadingRateKHRBuilder {
    type Target = PhysicalDeviceFragmentShadingRateKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentShadingRateKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRateKHRBuilder {
    type Target = PhysicalDeviceFragmentShadingRateKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRatePropertiesKHR {
    type Target = PhysicalDeviceFragmentShadingRatePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFragmentShadingRatePropertiesKHR {
    type Builder = PhysicalDeviceFragmentShadingRatePropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceFragmentShadingRatePropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFragmentShadingRatePropertiesKHRBuilder {
    value: PhysicalDeviceFragmentShadingRatePropertiesKHR,
}

impl PhysicalDeviceFragmentShadingRatePropertiesKHRBuilder {
    #[inline]
    pub fn min_fragment_shading_rate_attachment_texel_size(
        mut self,
        min_fragment_shading_rate_attachment_texel_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.min_fragment_shading_rate_attachment_texel_size =
            min_fragment_shading_rate_attachment_texel_size.into();
        self
    }

    #[inline]
    pub fn max_fragment_shading_rate_attachment_texel_size(
        mut self,
        max_fragment_shading_rate_attachment_texel_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_fragment_shading_rate_attachment_texel_size =
            max_fragment_shading_rate_attachment_texel_size.into();
        self
    }

    #[inline]
    pub fn max_fragment_shading_rate_attachment_texel_size_aspect_ratio(
        mut self,
        max_fragment_shading_rate_attachment_texel_size_aspect_ratio: u32,
    ) -> Self {
        self.value
            .max_fragment_shading_rate_attachment_texel_size_aspect_ratio =
            max_fragment_shading_rate_attachment_texel_size_aspect_ratio;
        self
    }

    #[inline]
    pub fn primitive_fragment_shading_rate_with_multiple_viewports(
        mut self,
        primitive_fragment_shading_rate_with_multiple_viewports: bool,
    ) -> Self {
        self.value
            .primitive_fragment_shading_rate_with_multiple_viewports =
            primitive_fragment_shading_rate_with_multiple_viewports as Bool32;
        self
    }

    #[inline]
    pub fn layered_shading_rate_attachments(
        mut self,
        layered_shading_rate_attachments: bool,
    ) -> Self {
        self.value.layered_shading_rate_attachments = layered_shading_rate_attachments as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_non_trivial_combiner_ops(
        mut self,
        fragment_shading_rate_non_trivial_combiner_ops: bool,
    ) -> Self {
        self.value.fragment_shading_rate_non_trivial_combiner_ops =
            fragment_shading_rate_non_trivial_combiner_ops as Bool32;
        self
    }

    #[inline]
    pub fn max_fragment_size(mut self, max_fragment_size: impl Cast<Target = Extent2D>) -> Self {
        self.value.max_fragment_size = max_fragment_size.into();
        self
    }

    #[inline]
    pub fn max_fragment_size_aspect_ratio(mut self, max_fragment_size_aspect_ratio: u32) -> Self {
        self.value.max_fragment_size_aspect_ratio = max_fragment_size_aspect_ratio;
        self
    }

    #[inline]
    pub fn max_fragment_shading_rate_coverage_samples(
        mut self,
        max_fragment_shading_rate_coverage_samples: u32,
    ) -> Self {
        self.value.max_fragment_shading_rate_coverage_samples =
            max_fragment_shading_rate_coverage_samples;
        self
    }

    #[inline]
    pub fn max_fragment_shading_rate_rasterization_samples(
        mut self,
        max_fragment_shading_rate_rasterization_samples: SampleCountFlags,
    ) -> Self {
        self.value.max_fragment_shading_rate_rasterization_samples =
            max_fragment_shading_rate_rasterization_samples;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_with_shader_depth_stencil_writes(
        mut self,
        fragment_shading_rate_with_shader_depth_stencil_writes: bool,
    ) -> Self {
        self.value
            .fragment_shading_rate_with_shader_depth_stencil_writes =
            fragment_shading_rate_with_shader_depth_stencil_writes as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_with_sample_mask(
        mut self,
        fragment_shading_rate_with_sample_mask: bool,
    ) -> Self {
        self.value.fragment_shading_rate_with_sample_mask =
            fragment_shading_rate_with_sample_mask as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_with_shader_sample_mask(
        mut self,
        fragment_shading_rate_with_shader_sample_mask: bool,
    ) -> Self {
        self.value.fragment_shading_rate_with_shader_sample_mask =
            fragment_shading_rate_with_shader_sample_mask as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_with_conservative_rasterization(
        mut self,
        fragment_shading_rate_with_conservative_rasterization: bool,
    ) -> Self {
        self.value
            .fragment_shading_rate_with_conservative_rasterization =
            fragment_shading_rate_with_conservative_rasterization as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_with_fragment_shader_interlock(
        mut self,
        fragment_shading_rate_with_fragment_shader_interlock: bool,
    ) -> Self {
        self.value
            .fragment_shading_rate_with_fragment_shader_interlock =
            fragment_shading_rate_with_fragment_shader_interlock as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_with_custom_sample_locations(
        mut self,
        fragment_shading_rate_with_custom_sample_locations: bool,
    ) -> Self {
        self.value
            .fragment_shading_rate_with_custom_sample_locations =
            fragment_shading_rate_with_custom_sample_locations as Bool32;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_strict_multiply_combiner(
        mut self,
        fragment_shading_rate_strict_multiply_combiner: bool,
    ) -> Self {
        self.value.fragment_shading_rate_strict_multiply_combiner =
            fragment_shading_rate_strict_multiply_combiner as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFragmentShadingRatePropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFragmentShadingRatePropertiesKHRBuilder {
    type Target = PhysicalDeviceFragmentShadingRatePropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFragmentShadingRatePropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFragmentShadingRatePropertiesKHRBuilder {
    type Target = PhysicalDeviceFragmentShadingRatePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceFrameBoundaryFeaturesEXT {
    type Target = PhysicalDeviceFrameBoundaryFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceFrameBoundaryFeaturesEXT {
    type Builder = PhysicalDeviceFrameBoundaryFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceFrameBoundaryFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceFrameBoundaryFeaturesEXTBuilder {
    value: PhysicalDeviceFrameBoundaryFeaturesEXT,
}

impl PhysicalDeviceFrameBoundaryFeaturesEXTBuilder {
    #[inline]
    pub fn frame_boundary(mut self, frame_boundary: bool) -> Self {
        self.value.frame_boundary = frame_boundary as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceFrameBoundaryFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceFrameBoundaryFeaturesEXTBuilder {
    type Target = PhysicalDeviceFrameBoundaryFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceFrameBoundaryFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceFrameBoundaryFeaturesEXTBuilder {
    type Target = PhysicalDeviceFrameBoundaryFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceGlobalPriorityQueryFeaturesKHR {
    type Target = PhysicalDeviceGlobalPriorityQueryFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceGlobalPriorityQueryFeaturesKHR {
    type Builder = PhysicalDeviceGlobalPriorityQueryFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceGlobalPriorityQueryFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceGlobalPriorityQueryFeaturesKHRBuilder {
    value: PhysicalDeviceGlobalPriorityQueryFeaturesKHR,
}

impl PhysicalDeviceGlobalPriorityQueryFeaturesKHRBuilder {
    #[inline]
    pub fn global_priority_query(mut self, global_priority_query: bool) -> Self {
        self.value.global_priority_query = global_priority_query as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceGlobalPriorityQueryFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceGlobalPriorityQueryFeaturesKHRBuilder {
    type Target = PhysicalDeviceGlobalPriorityQueryFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceGlobalPriorityQueryFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceGlobalPriorityQueryFeaturesKHRBuilder {
    type Target = PhysicalDeviceGlobalPriorityQueryFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    type Target = PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    type Builder = PhysicalDeviceGraphicsPipelineLibraryFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceGraphicsPipelineLibraryFeaturesEXTBuilder {
    value: PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT,
}

impl PhysicalDeviceGraphicsPipelineLibraryFeaturesEXTBuilder {
    #[inline]
    pub fn graphics_pipeline_library(mut self, graphics_pipeline_library: bool) -> Self {
        self.value.graphics_pipeline_library = graphics_pipeline_library as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceGraphicsPipelineLibraryFeaturesEXTBuilder {
    type Target = PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceGraphicsPipelineLibraryFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceGraphicsPipelineLibraryFeaturesEXTBuilder {
    type Target = PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    type Target = PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    type Builder = PhysicalDeviceGraphicsPipelineLibraryPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceGraphicsPipelineLibraryPropertiesEXTBuilder {
    value: PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT,
}

impl PhysicalDeviceGraphicsPipelineLibraryPropertiesEXTBuilder {
    #[inline]
    pub fn graphics_pipeline_library_fast_linking(
        mut self,
        graphics_pipeline_library_fast_linking: bool,
    ) -> Self {
        self.value.graphics_pipeline_library_fast_linking =
            graphics_pipeline_library_fast_linking as Bool32;
        self
    }

    #[inline]
    pub fn graphics_pipeline_library_independent_interpolation_decoration(
        mut self,
        graphics_pipeline_library_independent_interpolation_decoration: bool,
    ) -> Self {
        self.value
            .graphics_pipeline_library_independent_interpolation_decoration =
            graphics_pipeline_library_independent_interpolation_decoration as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceGraphicsPipelineLibraryPropertiesEXTBuilder {
    type Target = PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceGraphicsPipelineLibraryPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceGraphicsPipelineLibraryPropertiesEXTBuilder {
    type Target = PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceGroupProperties {
    type Target = PhysicalDeviceGroupProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceGroupProperties {
    type Builder = PhysicalDeviceGroupPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceGroupProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceGroupPropertiesBuilder {
    value: PhysicalDeviceGroupProperties,
}

impl PhysicalDeviceGroupPropertiesBuilder {
    #[inline]
    pub fn physical_device_count(mut self, physical_device_count: u32) -> Self {
        self.value.physical_device_count = physical_device_count;
        self
    }

    #[inline]
    pub fn physical_devices(
        mut self,
        physical_devices: [PhysicalDevice; MAX_DEVICE_GROUP_SIZE],
    ) -> Self {
        self.value.physical_devices = physical_devices;
        self
    }

    #[inline]
    pub fn subset_allocation(mut self, subset_allocation: bool) -> Self {
        self.value.subset_allocation = subset_allocation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceGroupProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceGroupPropertiesBuilder {
    type Target = PhysicalDeviceGroupProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceGroupPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceGroupPropertiesBuilder {
    type Target = PhysicalDeviceGroupProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceHostImageCopyFeaturesEXT {
    type Target = PhysicalDeviceHostImageCopyFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceHostImageCopyFeaturesEXT {
    type Builder = PhysicalDeviceHostImageCopyFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceHostImageCopyFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceHostImageCopyFeaturesEXTBuilder {
    value: PhysicalDeviceHostImageCopyFeaturesEXT,
}

impl PhysicalDeviceHostImageCopyFeaturesEXTBuilder {
    #[inline]
    pub fn host_image_copy(mut self, host_image_copy: bool) -> Self {
        self.value.host_image_copy = host_image_copy as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceHostImageCopyFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceHostImageCopyFeaturesEXTBuilder {
    type Target = PhysicalDeviceHostImageCopyFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceHostImageCopyFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceHostImageCopyFeaturesEXTBuilder {
    type Target = PhysicalDeviceHostImageCopyFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceHostImageCopyPropertiesEXT {
    type Target = PhysicalDeviceHostImageCopyPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceHostImageCopyPropertiesEXT {
    type Builder = PhysicalDeviceHostImageCopyPropertiesEXTBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceHostImageCopyPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceHostImageCopyPropertiesEXTBuilder<'b> {
    value: PhysicalDeviceHostImageCopyPropertiesEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceHostImageCopyPropertiesEXTBuilder<'b> {
    #[inline]
    pub fn copy_src_layout_count(mut self, copy_src_layout_count: u32) -> Self {
        self.value.copy_src_layout_count = copy_src_layout_count;
        self
    }

    #[inline]
    pub fn copy_src_layouts(mut self, copy_src_layouts: &'b mut [ImageLayout]) -> Self {
        self.value.copy_src_layout_count = copy_src_layouts.len() as u32;
        self.value.copy_src_layouts = copy_src_layouts.as_mut_ptr();
        self
    }

    #[inline]
    pub fn copy_dst_layout_count(mut self, copy_dst_layout_count: u32) -> Self {
        self.value.copy_dst_layout_count = copy_dst_layout_count;
        self
    }

    #[inline]
    pub fn copy_dst_layouts(mut self, copy_dst_layouts: &'b mut [ImageLayout]) -> Self {
        self.value.copy_dst_layout_count = copy_dst_layouts.len() as u32;
        self.value.copy_dst_layouts = copy_dst_layouts.as_mut_ptr();
        self
    }

    #[inline]
    pub fn optimal_tiling_layout_uuid(
        mut self,
        optimal_tiling_layout_uuid: impl Into<ByteArray<UUID_SIZE>>,
    ) -> Self {
        self.value.optimal_tiling_layout_uuid = optimal_tiling_layout_uuid.into();
        self
    }

    #[inline]
    pub fn identical_memory_type_requirements(
        mut self,
        identical_memory_type_requirements: bool,
    ) -> Self {
        self.value.identical_memory_type_requirements =
            identical_memory_type_requirements as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceHostImageCopyPropertiesEXT {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceHostImageCopyPropertiesEXTBuilder<'b> {
    type Target = PhysicalDeviceHostImageCopyPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceHostImageCopyPropertiesEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceHostImageCopyPropertiesEXTBuilder<'b> {
    type Target = PhysicalDeviceHostImageCopyPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceHostQueryResetFeatures {
    type Target = PhysicalDeviceHostQueryResetFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceHostQueryResetFeatures {
    type Builder = PhysicalDeviceHostQueryResetFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceHostQueryResetFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceHostQueryResetFeaturesBuilder {
    value: PhysicalDeviceHostQueryResetFeatures,
}

impl PhysicalDeviceHostQueryResetFeaturesBuilder {
    #[inline]
    pub fn host_query_reset(mut self, host_query_reset: bool) -> Self {
        self.value.host_query_reset = host_query_reset as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceHostQueryResetFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceHostQueryResetFeaturesBuilder {
    type Target = PhysicalDeviceHostQueryResetFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceHostQueryResetFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceHostQueryResetFeaturesBuilder {
    type Target = PhysicalDeviceHostQueryResetFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceIDProperties {
    type Target = PhysicalDeviceIDProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceIDProperties {
    type Builder = PhysicalDeviceIDPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceIDProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceIDPropertiesBuilder {
    value: PhysicalDeviceIDProperties,
}

impl PhysicalDeviceIDPropertiesBuilder {
    #[inline]
    pub fn device_uuid(mut self, device_uuid: impl Into<ByteArray<UUID_SIZE>>) -> Self {
        self.value.device_uuid = device_uuid.into();
        self
    }

    #[inline]
    pub fn driver_uuid(mut self, driver_uuid: impl Into<ByteArray<UUID_SIZE>>) -> Self {
        self.value.driver_uuid = driver_uuid.into();
        self
    }

    #[inline]
    pub fn device_luid(mut self, device_luid: impl Into<ByteArray<LUID_SIZE>>) -> Self {
        self.value.device_luid = device_luid.into();
        self
    }

    #[inline]
    pub fn device_node_mask(mut self, device_node_mask: u32) -> Self {
        self.value.device_node_mask = device_node_mask;
        self
    }

    #[inline]
    pub fn device_luid_valid(mut self, device_luid_valid: bool) -> Self {
        self.value.device_luid_valid = device_luid_valid as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceIDProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceIDPropertiesBuilder {
    type Target = PhysicalDeviceIDProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceIDPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceIDPropertiesBuilder {
    type Target = PhysicalDeviceIDProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImage2DViewOf3DFeaturesEXT {
    type Target = PhysicalDeviceImage2DViewOf3DFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImage2DViewOf3DFeaturesEXT {
    type Builder = PhysicalDeviceImage2DViewOf3DFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceImage2DViewOf3DFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImage2DViewOf3DFeaturesEXTBuilder {
    value: PhysicalDeviceImage2DViewOf3DFeaturesEXT,
}

impl PhysicalDeviceImage2DViewOf3DFeaturesEXTBuilder {
    #[inline]
    pub fn image_2d_view_of_3d(mut self, image_2d_view_of_3d: bool) -> Self {
        self.value.image_2d_view_of_3d = image_2d_view_of_3d as Bool32;
        self
    }

    #[inline]
    pub fn sampler_2d_view_of_3d(mut self, sampler_2d_view_of_3d: bool) -> Self {
        self.value.sampler_2d_view_of_3d = sampler_2d_view_of_3d as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImage2DViewOf3DFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImage2DViewOf3DFeaturesEXTBuilder {
    type Target = PhysicalDeviceImage2DViewOf3DFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImage2DViewOf3DFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImage2DViewOf3DFeaturesEXTBuilder {
    type Target = PhysicalDeviceImage2DViewOf3DFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageAlignmentControlFeaturesMESA {
    type Target = PhysicalDeviceImageAlignmentControlFeaturesMESA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageAlignmentControlFeaturesMESA {
    type Builder = PhysicalDeviceImageAlignmentControlFeaturesMESABuilder;
}

/// A builder for a [`PhysicalDeviceImageAlignmentControlFeaturesMESA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageAlignmentControlFeaturesMESABuilder {
    value: PhysicalDeviceImageAlignmentControlFeaturesMESA,
}

impl PhysicalDeviceImageAlignmentControlFeaturesMESABuilder {
    #[inline]
    pub fn image_alignment_control(mut self, image_alignment_control: bool) -> Self {
        self.value.image_alignment_control = image_alignment_control as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageAlignmentControlFeaturesMESA {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageAlignmentControlFeaturesMESABuilder {
    type Target = PhysicalDeviceImageAlignmentControlFeaturesMESA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageAlignmentControlFeaturesMESABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageAlignmentControlFeaturesMESABuilder {
    type Target = PhysicalDeviceImageAlignmentControlFeaturesMESA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageAlignmentControlPropertiesMESA {
    type Target = PhysicalDeviceImageAlignmentControlPropertiesMESA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageAlignmentControlPropertiesMESA {
    type Builder = PhysicalDeviceImageAlignmentControlPropertiesMESABuilder;
}

/// A builder for a [`PhysicalDeviceImageAlignmentControlPropertiesMESA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageAlignmentControlPropertiesMESABuilder {
    value: PhysicalDeviceImageAlignmentControlPropertiesMESA,
}

impl PhysicalDeviceImageAlignmentControlPropertiesMESABuilder {
    #[inline]
    pub fn supported_image_alignment_mask(mut self, supported_image_alignment_mask: u32) -> Self {
        self.value.supported_image_alignment_mask = supported_image_alignment_mask;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageAlignmentControlPropertiesMESA {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageAlignmentControlPropertiesMESABuilder {
    type Target = PhysicalDeviceImageAlignmentControlPropertiesMESA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageAlignmentControlPropertiesMESABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageAlignmentControlPropertiesMESABuilder {
    type Target = PhysicalDeviceImageAlignmentControlPropertiesMESA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageCompressionControlFeaturesEXT {
    type Target = PhysicalDeviceImageCompressionControlFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageCompressionControlFeaturesEXT {
    type Builder = PhysicalDeviceImageCompressionControlFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceImageCompressionControlFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageCompressionControlFeaturesEXTBuilder {
    value: PhysicalDeviceImageCompressionControlFeaturesEXT,
}

impl PhysicalDeviceImageCompressionControlFeaturesEXTBuilder {
    #[inline]
    pub fn image_compression_control(mut self, image_compression_control: bool) -> Self {
        self.value.image_compression_control = image_compression_control as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageCompressionControlFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageCompressionControlFeaturesEXTBuilder {
    type Target = PhysicalDeviceImageCompressionControlFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageCompressionControlFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageCompressionControlFeaturesEXTBuilder {
    type Target = PhysicalDeviceImageCompressionControlFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    type Target = PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    type Builder = PhysicalDeviceImageCompressionControlSwapchainFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageCompressionControlSwapchainFeaturesEXTBuilder {
    value: PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT,
}

impl PhysicalDeviceImageCompressionControlSwapchainFeaturesEXTBuilder {
    #[inline]
    pub fn image_compression_control_swapchain(
        mut self,
        image_compression_control_swapchain: bool,
    ) -> Self {
        self.value.image_compression_control_swapchain =
            image_compression_control_swapchain as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageCompressionControlSwapchainFeaturesEXTBuilder {
    type Target = PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageCompressionControlSwapchainFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageCompressionControlSwapchainFeaturesEXTBuilder {
    type Target = PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageDrmFormatModifierInfoEXT {
    type Target = PhysicalDeviceImageDrmFormatModifierInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceImageDrmFormatModifierInfoEXT {
    type Builder = PhysicalDeviceImageDrmFormatModifierInfoEXTBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceImageDrmFormatModifierInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageDrmFormatModifierInfoEXTBuilder<'b> {
    value: PhysicalDeviceImageDrmFormatModifierInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceImageDrmFormatModifierInfoEXTBuilder<'b> {
    #[inline]
    pub fn drm_format_modifier(mut self, drm_format_modifier: u64) -> Self {
        self.value.drm_format_modifier = drm_format_modifier;
        self
    }

    #[inline]
    pub fn sharing_mode(mut self, sharing_mode: SharingMode) -> Self {
        self.value.sharing_mode = sharing_mode;
        self
    }

    #[inline]
    pub fn queue_family_indices(mut self, queue_family_indices: &'b [u32]) -> Self {
        self.value.queue_family_index_count = queue_family_indices.len() as u32;
        self.value.queue_family_indices = queue_family_indices.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageDrmFormatModifierInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceImageDrmFormatModifierInfoEXTBuilder<'b> {
    type Target = PhysicalDeviceImageDrmFormatModifierInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceImageDrmFormatModifierInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceImageDrmFormatModifierInfoEXTBuilder<'b> {
    type Target = PhysicalDeviceImageDrmFormatModifierInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceImageFormatInfo2`].
pub unsafe trait ExtendsPhysicalDeviceImageFormatInfo2: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceImageFormatInfo2 for ImageCompressionControlEXT {}
unsafe impl ExtendsPhysicalDeviceImageFormatInfo2 for ImageFormatListCreateInfo {}
unsafe impl ExtendsPhysicalDeviceImageFormatInfo2 for ImageStencilUsageCreateInfo {}
unsafe impl ExtendsPhysicalDeviceImageFormatInfo2 for OpticalFlowImageFormatInfoNV {}
unsafe impl ExtendsPhysicalDeviceImageFormatInfo2 for PhysicalDeviceExternalImageFormatInfo {}
unsafe impl ExtendsPhysicalDeviceImageFormatInfo2 for PhysicalDeviceImageDrmFormatModifierInfoEXT {}
unsafe impl ExtendsPhysicalDeviceImageFormatInfo2 for PhysicalDeviceImageViewImageFormatInfoEXT {}
unsafe impl ExtendsPhysicalDeviceImageFormatInfo2 for VideoProfileListInfoKHR {}

unsafe impl Cast for PhysicalDeviceImageFormatInfo2 {
    type Target = PhysicalDeviceImageFormatInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceImageFormatInfo2 {
    type Builder = PhysicalDeviceImageFormatInfo2Builder<'b>;
}

/// A builder for a [`PhysicalDeviceImageFormatInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageFormatInfo2Builder<'b> {
    value: PhysicalDeviceImageFormatInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceImageFormatInfo2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceImageFormatInfo2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn type_(mut self, type_: ImageType) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn tiling(mut self, tiling: ImageTiling) -> Self {
        self.value.tiling = tiling;
        self
    }

    #[inline]
    pub fn usage(mut self, usage: ImageUsageFlags) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: ImageCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageFormatInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceImageFormatInfo2Builder<'b> {
    type Target = PhysicalDeviceImageFormatInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceImageFormatInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceImageFormatInfo2Builder<'b> {
    type Target = PhysicalDeviceImageFormatInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageProcessing2FeaturesQCOM {
    type Target = PhysicalDeviceImageProcessing2FeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageProcessing2FeaturesQCOM {
    type Builder = PhysicalDeviceImageProcessing2FeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceImageProcessing2FeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageProcessing2FeaturesQCOMBuilder {
    value: PhysicalDeviceImageProcessing2FeaturesQCOM,
}

impl PhysicalDeviceImageProcessing2FeaturesQCOMBuilder {
    #[inline]
    pub fn texture_block_match2(mut self, texture_block_match2: bool) -> Self {
        self.value.texture_block_match2 = texture_block_match2 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageProcessing2FeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageProcessing2FeaturesQCOMBuilder {
    type Target = PhysicalDeviceImageProcessing2FeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageProcessing2FeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageProcessing2FeaturesQCOMBuilder {
    type Target = PhysicalDeviceImageProcessing2FeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageProcessing2PropertiesQCOM {
    type Target = PhysicalDeviceImageProcessing2PropertiesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageProcessing2PropertiesQCOM {
    type Builder = PhysicalDeviceImageProcessing2PropertiesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceImageProcessing2PropertiesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageProcessing2PropertiesQCOMBuilder {
    value: PhysicalDeviceImageProcessing2PropertiesQCOM,
}

impl PhysicalDeviceImageProcessing2PropertiesQCOMBuilder {
    #[inline]
    pub fn max_block_match_window(
        mut self,
        max_block_match_window: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_block_match_window = max_block_match_window.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageProcessing2PropertiesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageProcessing2PropertiesQCOMBuilder {
    type Target = PhysicalDeviceImageProcessing2PropertiesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageProcessing2PropertiesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageProcessing2PropertiesQCOMBuilder {
    type Target = PhysicalDeviceImageProcessing2PropertiesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageProcessingFeaturesQCOM {
    type Target = PhysicalDeviceImageProcessingFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageProcessingFeaturesQCOM {
    type Builder = PhysicalDeviceImageProcessingFeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceImageProcessingFeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageProcessingFeaturesQCOMBuilder {
    value: PhysicalDeviceImageProcessingFeaturesQCOM,
}

impl PhysicalDeviceImageProcessingFeaturesQCOMBuilder {
    #[inline]
    pub fn texture_sample_weighted(mut self, texture_sample_weighted: bool) -> Self {
        self.value.texture_sample_weighted = texture_sample_weighted as Bool32;
        self
    }

    #[inline]
    pub fn texture_box_filter(mut self, texture_box_filter: bool) -> Self {
        self.value.texture_box_filter = texture_box_filter as Bool32;
        self
    }

    #[inline]
    pub fn texture_block_match(mut self, texture_block_match: bool) -> Self {
        self.value.texture_block_match = texture_block_match as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageProcessingFeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageProcessingFeaturesQCOMBuilder {
    type Target = PhysicalDeviceImageProcessingFeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageProcessingFeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageProcessingFeaturesQCOMBuilder {
    type Target = PhysicalDeviceImageProcessingFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageProcessingPropertiesQCOM {
    type Target = PhysicalDeviceImageProcessingPropertiesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageProcessingPropertiesQCOM {
    type Builder = PhysicalDeviceImageProcessingPropertiesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceImageProcessingPropertiesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageProcessingPropertiesQCOMBuilder {
    value: PhysicalDeviceImageProcessingPropertiesQCOM,
}

impl PhysicalDeviceImageProcessingPropertiesQCOMBuilder {
    #[inline]
    pub fn max_weight_filter_phases(mut self, max_weight_filter_phases: u32) -> Self {
        self.value.max_weight_filter_phases = max_weight_filter_phases;
        self
    }

    #[inline]
    pub fn max_weight_filter_dimension(
        mut self,
        max_weight_filter_dimension: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_weight_filter_dimension = max_weight_filter_dimension.into();
        self
    }

    #[inline]
    pub fn max_block_match_region(
        mut self,
        max_block_match_region: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_block_match_region = max_block_match_region.into();
        self
    }

    #[inline]
    pub fn max_box_filter_block_size(
        mut self,
        max_box_filter_block_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_box_filter_block_size = max_box_filter_block_size.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageProcessingPropertiesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageProcessingPropertiesQCOMBuilder {
    type Target = PhysicalDeviceImageProcessingPropertiesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageProcessingPropertiesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageProcessingPropertiesQCOMBuilder {
    type Target = PhysicalDeviceImageProcessingPropertiesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageRobustnessFeatures {
    type Target = PhysicalDeviceImageRobustnessFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageRobustnessFeatures {
    type Builder = PhysicalDeviceImageRobustnessFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceImageRobustnessFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageRobustnessFeaturesBuilder {
    value: PhysicalDeviceImageRobustnessFeatures,
}

impl PhysicalDeviceImageRobustnessFeaturesBuilder {
    #[inline]
    pub fn robust_image_access(mut self, robust_image_access: bool) -> Self {
        self.value.robust_image_access = robust_image_access as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageRobustnessFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageRobustnessFeaturesBuilder {
    type Target = PhysicalDeviceImageRobustnessFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageRobustnessFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageRobustnessFeaturesBuilder {
    type Target = PhysicalDeviceImageRobustnessFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    type Target = PhysicalDeviceImageSlicedViewOf3DFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    type Builder = PhysicalDeviceImageSlicedViewOf3DFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceImageSlicedViewOf3DFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageSlicedViewOf3DFeaturesEXTBuilder {
    value: PhysicalDeviceImageSlicedViewOf3DFeaturesEXT,
}

impl PhysicalDeviceImageSlicedViewOf3DFeaturesEXTBuilder {
    #[inline]
    pub fn image_sliced_view_of_3d(mut self, image_sliced_view_of_3d: bool) -> Self {
        self.value.image_sliced_view_of_3d = image_sliced_view_of_3d as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageSlicedViewOf3DFeaturesEXTBuilder {
    type Target = PhysicalDeviceImageSlicedViewOf3DFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageSlicedViewOf3DFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageSlicedViewOf3DFeaturesEXTBuilder {
    type Target = PhysicalDeviceImageSlicedViewOf3DFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageViewImageFormatInfoEXT {
    type Target = PhysicalDeviceImageViewImageFormatInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageViewImageFormatInfoEXT {
    type Builder = PhysicalDeviceImageViewImageFormatInfoEXTBuilder;
}

/// A builder for a [`PhysicalDeviceImageViewImageFormatInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageViewImageFormatInfoEXTBuilder {
    value: PhysicalDeviceImageViewImageFormatInfoEXT,
}

impl PhysicalDeviceImageViewImageFormatInfoEXTBuilder {
    #[inline]
    pub fn image_view_type(mut self, image_view_type: ImageViewType) -> Self {
        self.value.image_view_type = image_view_type;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageViewImageFormatInfoEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageViewImageFormatInfoEXTBuilder {
    type Target = PhysicalDeviceImageViewImageFormatInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageViewImageFormatInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageViewImageFormatInfoEXTBuilder {
    type Target = PhysicalDeviceImageViewImageFormatInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageViewMinLodFeaturesEXT {
    type Target = PhysicalDeviceImageViewMinLodFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImageViewMinLodFeaturesEXT {
    type Builder = PhysicalDeviceImageViewMinLodFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceImageViewMinLodFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImageViewMinLodFeaturesEXTBuilder {
    value: PhysicalDeviceImageViewMinLodFeaturesEXT,
}

impl PhysicalDeviceImageViewMinLodFeaturesEXTBuilder {
    #[inline]
    pub fn min_lod(mut self, min_lod: bool) -> Self {
        self.value.min_lod = min_lod as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImageViewMinLodFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImageViewMinLodFeaturesEXTBuilder {
    type Target = PhysicalDeviceImageViewMinLodFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImageViewMinLodFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImageViewMinLodFeaturesEXTBuilder {
    type Target = PhysicalDeviceImageViewMinLodFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceImagelessFramebufferFeatures {
    type Target = PhysicalDeviceImagelessFramebufferFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceImagelessFramebufferFeatures {
    type Builder = PhysicalDeviceImagelessFramebufferFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceImagelessFramebufferFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceImagelessFramebufferFeaturesBuilder {
    value: PhysicalDeviceImagelessFramebufferFeatures,
}

impl PhysicalDeviceImagelessFramebufferFeaturesBuilder {
    #[inline]
    pub fn imageless_framebuffer(mut self, imageless_framebuffer: bool) -> Self {
        self.value.imageless_framebuffer = imageless_framebuffer as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceImagelessFramebufferFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceImagelessFramebufferFeaturesBuilder {
    type Target = PhysicalDeviceImagelessFramebufferFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceImagelessFramebufferFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceImagelessFramebufferFeaturesBuilder {
    type Target = PhysicalDeviceImagelessFramebufferFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceIndexTypeUint8FeaturesKHR {
    type Target = PhysicalDeviceIndexTypeUint8FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceIndexTypeUint8FeaturesKHR {
    type Builder = PhysicalDeviceIndexTypeUint8FeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceIndexTypeUint8FeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceIndexTypeUint8FeaturesKHRBuilder {
    value: PhysicalDeviceIndexTypeUint8FeaturesKHR,
}

impl PhysicalDeviceIndexTypeUint8FeaturesKHRBuilder {
    #[inline]
    pub fn index_type_uint8(mut self, index_type_uint8: bool) -> Self {
        self.value.index_type_uint8 = index_type_uint8 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceIndexTypeUint8FeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceIndexTypeUint8FeaturesKHRBuilder {
    type Target = PhysicalDeviceIndexTypeUint8FeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceIndexTypeUint8FeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceIndexTypeUint8FeaturesKHRBuilder {
    type Target = PhysicalDeviceIndexTypeUint8FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceInheritedViewportScissorFeaturesNV {
    type Target = PhysicalDeviceInheritedViewportScissorFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceInheritedViewportScissorFeaturesNV {
    type Builder = PhysicalDeviceInheritedViewportScissorFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceInheritedViewportScissorFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceInheritedViewportScissorFeaturesNVBuilder {
    value: PhysicalDeviceInheritedViewportScissorFeaturesNV,
}

impl PhysicalDeviceInheritedViewportScissorFeaturesNVBuilder {
    #[inline]
    pub fn inherited_viewport_scissor_2d(mut self, inherited_viewport_scissor_2d: bool) -> Self {
        self.value.inherited_viewport_scissor_2d = inherited_viewport_scissor_2d as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceInheritedViewportScissorFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceInheritedViewportScissorFeaturesNVBuilder {
    type Target = PhysicalDeviceInheritedViewportScissorFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceInheritedViewportScissorFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceInheritedViewportScissorFeaturesNVBuilder {
    type Target = PhysicalDeviceInheritedViewportScissorFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceInlineUniformBlockFeatures {
    type Target = PhysicalDeviceInlineUniformBlockFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceInlineUniformBlockFeatures {
    type Builder = PhysicalDeviceInlineUniformBlockFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceInlineUniformBlockFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceInlineUniformBlockFeaturesBuilder {
    value: PhysicalDeviceInlineUniformBlockFeatures,
}

impl PhysicalDeviceInlineUniformBlockFeaturesBuilder {
    #[inline]
    pub fn inline_uniform_block(mut self, inline_uniform_block: bool) -> Self {
        self.value.inline_uniform_block = inline_uniform_block as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_inline_uniform_block_update_after_bind(
        mut self,
        descriptor_binding_inline_uniform_block_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_inline_uniform_block_update_after_bind =
            descriptor_binding_inline_uniform_block_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceInlineUniformBlockFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceInlineUniformBlockFeaturesBuilder {
    type Target = PhysicalDeviceInlineUniformBlockFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceInlineUniformBlockFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceInlineUniformBlockFeaturesBuilder {
    type Target = PhysicalDeviceInlineUniformBlockFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceInlineUniformBlockProperties {
    type Target = PhysicalDeviceInlineUniformBlockProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceInlineUniformBlockProperties {
    type Builder = PhysicalDeviceInlineUniformBlockPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceInlineUniformBlockProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceInlineUniformBlockPropertiesBuilder {
    value: PhysicalDeviceInlineUniformBlockProperties,
}

impl PhysicalDeviceInlineUniformBlockPropertiesBuilder {
    #[inline]
    pub fn max_inline_uniform_block_size(mut self, max_inline_uniform_block_size: u32) -> Self {
        self.value.max_inline_uniform_block_size = max_inline_uniform_block_size;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_inline_uniform_blocks(
        mut self,
        max_per_stage_descriptor_inline_uniform_blocks: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_inline_uniform_blocks =
            max_per_stage_descriptor_inline_uniform_blocks;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_inline_uniform_blocks(
        mut self,
        max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_inline_uniform_blocks =
            max_per_stage_descriptor_update_after_bind_inline_uniform_blocks;
        self
    }

    #[inline]
    pub fn max_descriptor_set_inline_uniform_blocks(
        mut self,
        max_descriptor_set_inline_uniform_blocks: u32,
    ) -> Self {
        self.value.max_descriptor_set_inline_uniform_blocks =
            max_descriptor_set_inline_uniform_blocks;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_inline_uniform_blocks(
        mut self,
        max_descriptor_set_update_after_bind_inline_uniform_blocks: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_inline_uniform_blocks =
            max_descriptor_set_update_after_bind_inline_uniform_blocks;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceInlineUniformBlockProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceInlineUniformBlockPropertiesBuilder {
    type Target = PhysicalDeviceInlineUniformBlockProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceInlineUniformBlockPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceInlineUniformBlockPropertiesBuilder {
    type Target = PhysicalDeviceInlineUniformBlockProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceInvocationMaskFeaturesHUAWEI {
    type Target = PhysicalDeviceInvocationMaskFeaturesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceInvocationMaskFeaturesHUAWEI {
    type Builder = PhysicalDeviceInvocationMaskFeaturesHUAWEIBuilder;
}

/// A builder for a [`PhysicalDeviceInvocationMaskFeaturesHUAWEI`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceInvocationMaskFeaturesHUAWEIBuilder {
    value: PhysicalDeviceInvocationMaskFeaturesHUAWEI,
}

impl PhysicalDeviceInvocationMaskFeaturesHUAWEIBuilder {
    #[inline]
    pub fn invocation_mask(mut self, invocation_mask: bool) -> Self {
        self.value.invocation_mask = invocation_mask as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceInvocationMaskFeaturesHUAWEI {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceInvocationMaskFeaturesHUAWEIBuilder {
    type Target = PhysicalDeviceInvocationMaskFeaturesHUAWEI;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceInvocationMaskFeaturesHUAWEIBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceInvocationMaskFeaturesHUAWEIBuilder {
    type Target = PhysicalDeviceInvocationMaskFeaturesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceLayeredApiPropertiesKHR`].
pub unsafe trait ExtendsPhysicalDeviceLayeredApiPropertiesKHR: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceLayeredApiPropertiesKHR
    for PhysicalDeviceLayeredApiVulkanPropertiesKHR
{
}

unsafe impl Cast for PhysicalDeviceLayeredApiPropertiesKHR {
    type Target = PhysicalDeviceLayeredApiPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceLayeredApiPropertiesKHR {
    type Builder = PhysicalDeviceLayeredApiPropertiesKHRBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceLayeredApiPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLayeredApiPropertiesKHRBuilder<'b> {
    value: PhysicalDeviceLayeredApiPropertiesKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceLayeredApiPropertiesKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceLayeredApiPropertiesKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn vendor_id(mut self, vendor_id: u32) -> Self {
        self.value.vendor_id = vendor_id;
        self
    }

    #[inline]
    pub fn device_id(mut self, device_id: u32) -> Self {
        self.value.device_id = device_id;
        self
    }

    #[inline]
    pub fn layered_api(mut self, layered_api: PhysicalDeviceLayeredApiKHR) -> Self {
        self.value.layered_api = layered_api;
        self
    }

    #[inline]
    pub fn device_name(
        mut self,
        device_name: impl Into<StringArray<MAX_PHYSICAL_DEVICE_NAME_SIZE>>,
    ) -> Self {
        self.value.device_name = device_name.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLayeredApiPropertiesKHR {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceLayeredApiPropertiesKHRBuilder<'b> {
    type Target = PhysicalDeviceLayeredApiPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceLayeredApiPropertiesKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceLayeredApiPropertiesKHRBuilder<'b> {
    type Target = PhysicalDeviceLayeredApiPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLayeredApiPropertiesListKHR {
    type Target = PhysicalDeviceLayeredApiPropertiesListKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceLayeredApiPropertiesListKHR {
    type Builder = PhysicalDeviceLayeredApiPropertiesListKHRBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceLayeredApiPropertiesListKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLayeredApiPropertiesListKHRBuilder<'b> {
    value: PhysicalDeviceLayeredApiPropertiesListKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceLayeredApiPropertiesListKHRBuilder<'b> {
    #[inline]
    pub fn layered_api_count(mut self, layered_api_count: u32) -> Self {
        self.value.layered_api_count = layered_api_count;
        self
    }

    #[inline]
    pub fn layered_apis(
        mut self,
        layered_apis: &'b mut [impl Cast<Target = PhysicalDeviceLayeredApiPropertiesKHR>],
    ) -> Self {
        self.value.layered_api_count = layered_apis.len() as u32;
        self.value.layered_apis = layered_apis.as_mut_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLayeredApiPropertiesListKHR {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceLayeredApiPropertiesListKHRBuilder<'b> {
    type Target = PhysicalDeviceLayeredApiPropertiesListKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceLayeredApiPropertiesListKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceLayeredApiPropertiesListKHRBuilder<'b> {
    type Target = PhysicalDeviceLayeredApiPropertiesListKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLayeredApiVulkanPropertiesKHR {
    type Target = PhysicalDeviceLayeredApiVulkanPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceLayeredApiVulkanPropertiesKHR {
    type Builder = PhysicalDeviceLayeredApiVulkanPropertiesKHRBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceLayeredApiVulkanPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLayeredApiVulkanPropertiesKHRBuilder<'b> {
    value: PhysicalDeviceLayeredApiVulkanPropertiesKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceLayeredApiVulkanPropertiesKHRBuilder<'b> {
    #[inline]
    pub fn properties(mut self, properties: impl Cast<Target = PhysicalDeviceProperties2>) -> Self {
        self.value.properties = properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLayeredApiVulkanPropertiesKHR {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceLayeredApiVulkanPropertiesKHRBuilder<'b> {
    type Target = PhysicalDeviceLayeredApiVulkanPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceLayeredApiVulkanPropertiesKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceLayeredApiVulkanPropertiesKHRBuilder<'b> {
    type Target = PhysicalDeviceLayeredApiVulkanPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLayeredDriverPropertiesMSFT {
    type Target = PhysicalDeviceLayeredDriverPropertiesMSFT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceLayeredDriverPropertiesMSFT {
    type Builder = PhysicalDeviceLayeredDriverPropertiesMSFTBuilder;
}

/// A builder for a [`PhysicalDeviceLayeredDriverPropertiesMSFT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLayeredDriverPropertiesMSFTBuilder {
    value: PhysicalDeviceLayeredDriverPropertiesMSFT,
}

impl PhysicalDeviceLayeredDriverPropertiesMSFTBuilder {
    #[inline]
    pub fn underlying_api(mut self, underlying_api: LayeredDriverUnderlyingApiMSFT) -> Self {
        self.value.underlying_api = underlying_api;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLayeredDriverPropertiesMSFT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceLayeredDriverPropertiesMSFTBuilder {
    type Target = PhysicalDeviceLayeredDriverPropertiesMSFT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceLayeredDriverPropertiesMSFTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceLayeredDriverPropertiesMSFTBuilder {
    type Target = PhysicalDeviceLayeredDriverPropertiesMSFT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLegacyDitheringFeaturesEXT {
    type Target = PhysicalDeviceLegacyDitheringFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceLegacyDitheringFeaturesEXT {
    type Builder = PhysicalDeviceLegacyDitheringFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceLegacyDitheringFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLegacyDitheringFeaturesEXTBuilder {
    value: PhysicalDeviceLegacyDitheringFeaturesEXT,
}

impl PhysicalDeviceLegacyDitheringFeaturesEXTBuilder {
    #[inline]
    pub fn legacy_dithering(mut self, legacy_dithering: bool) -> Self {
        self.value.legacy_dithering = legacy_dithering as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLegacyDitheringFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceLegacyDitheringFeaturesEXTBuilder {
    type Target = PhysicalDeviceLegacyDitheringFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceLegacyDitheringFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceLegacyDitheringFeaturesEXTBuilder {
    type Target = PhysicalDeviceLegacyDitheringFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLegacyVertexAttributesFeaturesEXT {
    type Target = PhysicalDeviceLegacyVertexAttributesFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceLegacyVertexAttributesFeaturesEXT {
    type Builder = PhysicalDeviceLegacyVertexAttributesFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceLegacyVertexAttributesFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLegacyVertexAttributesFeaturesEXTBuilder {
    value: PhysicalDeviceLegacyVertexAttributesFeaturesEXT,
}

impl PhysicalDeviceLegacyVertexAttributesFeaturesEXTBuilder {
    #[inline]
    pub fn legacy_vertex_attributes(mut self, legacy_vertex_attributes: bool) -> Self {
        self.value.legacy_vertex_attributes = legacy_vertex_attributes as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLegacyVertexAttributesFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceLegacyVertexAttributesFeaturesEXTBuilder {
    type Target = PhysicalDeviceLegacyVertexAttributesFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceLegacyVertexAttributesFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceLegacyVertexAttributesFeaturesEXTBuilder {
    type Target = PhysicalDeviceLegacyVertexAttributesFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLegacyVertexAttributesPropertiesEXT {
    type Target = PhysicalDeviceLegacyVertexAttributesPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceLegacyVertexAttributesPropertiesEXT {
    type Builder = PhysicalDeviceLegacyVertexAttributesPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceLegacyVertexAttributesPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLegacyVertexAttributesPropertiesEXTBuilder {
    value: PhysicalDeviceLegacyVertexAttributesPropertiesEXT,
}

impl PhysicalDeviceLegacyVertexAttributesPropertiesEXTBuilder {
    #[inline]
    pub fn native_unaligned_performance(mut self, native_unaligned_performance: bool) -> Self {
        self.value.native_unaligned_performance = native_unaligned_performance as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLegacyVertexAttributesPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceLegacyVertexAttributesPropertiesEXTBuilder {
    type Target = PhysicalDeviceLegacyVertexAttributesPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceLegacyVertexAttributesPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceLegacyVertexAttributesPropertiesEXTBuilder {
    type Target = PhysicalDeviceLegacyVertexAttributesPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLimits {
    type Target = PhysicalDeviceLimits;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceLimits {
    type Builder = PhysicalDeviceLimitsBuilder;
}

/// A builder for a [`PhysicalDeviceLimits`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLimitsBuilder {
    value: PhysicalDeviceLimits,
}

impl PhysicalDeviceLimitsBuilder {
    #[inline]
    pub fn max_image_dimension_1d(mut self, max_image_dimension_1d: u32) -> Self {
        self.value.max_image_dimension_1d = max_image_dimension_1d;
        self
    }

    #[inline]
    pub fn max_image_dimension_2d(mut self, max_image_dimension_2d: u32) -> Self {
        self.value.max_image_dimension_2d = max_image_dimension_2d;
        self
    }

    #[inline]
    pub fn max_image_dimension_3d(mut self, max_image_dimension_3d: u32) -> Self {
        self.value.max_image_dimension_3d = max_image_dimension_3d;
        self
    }

    #[inline]
    pub fn max_image_dimension_cube(mut self, max_image_dimension_cube: u32) -> Self {
        self.value.max_image_dimension_cube = max_image_dimension_cube;
        self
    }

    #[inline]
    pub fn max_image_array_layers(mut self, max_image_array_layers: u32) -> Self {
        self.value.max_image_array_layers = max_image_array_layers;
        self
    }

    #[inline]
    pub fn max_texel_buffer_elements(mut self, max_texel_buffer_elements: u32) -> Self {
        self.value.max_texel_buffer_elements = max_texel_buffer_elements;
        self
    }

    #[inline]
    pub fn max_uniform_buffer_range(mut self, max_uniform_buffer_range: u32) -> Self {
        self.value.max_uniform_buffer_range = max_uniform_buffer_range;
        self
    }

    #[inline]
    pub fn max_storage_buffer_range(mut self, max_storage_buffer_range: u32) -> Self {
        self.value.max_storage_buffer_range = max_storage_buffer_range;
        self
    }

    #[inline]
    pub fn max_push_constants_size(mut self, max_push_constants_size: u32) -> Self {
        self.value.max_push_constants_size = max_push_constants_size;
        self
    }

    #[inline]
    pub fn max_memory_allocation_count(mut self, max_memory_allocation_count: u32) -> Self {
        self.value.max_memory_allocation_count = max_memory_allocation_count;
        self
    }

    #[inline]
    pub fn max_sampler_allocation_count(mut self, max_sampler_allocation_count: u32) -> Self {
        self.value.max_sampler_allocation_count = max_sampler_allocation_count;
        self
    }

    #[inline]
    pub fn buffer_image_granularity(mut self, buffer_image_granularity: DeviceSize) -> Self {
        self.value.buffer_image_granularity = buffer_image_granularity;
        self
    }

    #[inline]
    pub fn sparse_address_space_size(mut self, sparse_address_space_size: DeviceSize) -> Self {
        self.value.sparse_address_space_size = sparse_address_space_size;
        self
    }

    #[inline]
    pub fn max_bound_descriptor_sets(mut self, max_bound_descriptor_sets: u32) -> Self {
        self.value.max_bound_descriptor_sets = max_bound_descriptor_sets;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_samplers(
        mut self,
        max_per_stage_descriptor_samplers: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_samplers = max_per_stage_descriptor_samplers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_uniform_buffers(
        mut self,
        max_per_stage_descriptor_uniform_buffers: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_uniform_buffers =
            max_per_stage_descriptor_uniform_buffers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_storage_buffers(
        mut self,
        max_per_stage_descriptor_storage_buffers: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_storage_buffers =
            max_per_stage_descriptor_storage_buffers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_sampled_images(
        mut self,
        max_per_stage_descriptor_sampled_images: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_sampled_images =
            max_per_stage_descriptor_sampled_images;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_storage_images(
        mut self,
        max_per_stage_descriptor_storage_images: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_storage_images =
            max_per_stage_descriptor_storage_images;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_input_attachments(
        mut self,
        max_per_stage_descriptor_input_attachments: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_input_attachments =
            max_per_stage_descriptor_input_attachments;
        self
    }

    #[inline]
    pub fn max_per_stage_resources(mut self, max_per_stage_resources: u32) -> Self {
        self.value.max_per_stage_resources = max_per_stage_resources;
        self
    }

    #[inline]
    pub fn max_descriptor_set_samplers(mut self, max_descriptor_set_samplers: u32) -> Self {
        self.value.max_descriptor_set_samplers = max_descriptor_set_samplers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_uniform_buffers(
        mut self,
        max_descriptor_set_uniform_buffers: u32,
    ) -> Self {
        self.value.max_descriptor_set_uniform_buffers = max_descriptor_set_uniform_buffers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_uniform_buffers_dynamic(
        mut self,
        max_descriptor_set_uniform_buffers_dynamic: u32,
    ) -> Self {
        self.value.max_descriptor_set_uniform_buffers_dynamic =
            max_descriptor_set_uniform_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_storage_buffers(
        mut self,
        max_descriptor_set_storage_buffers: u32,
    ) -> Self {
        self.value.max_descriptor_set_storage_buffers = max_descriptor_set_storage_buffers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_storage_buffers_dynamic(
        mut self,
        max_descriptor_set_storage_buffers_dynamic: u32,
    ) -> Self {
        self.value.max_descriptor_set_storage_buffers_dynamic =
            max_descriptor_set_storage_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_sampled_images(
        mut self,
        max_descriptor_set_sampled_images: u32,
    ) -> Self {
        self.value.max_descriptor_set_sampled_images = max_descriptor_set_sampled_images;
        self
    }

    #[inline]
    pub fn max_descriptor_set_storage_images(
        mut self,
        max_descriptor_set_storage_images: u32,
    ) -> Self {
        self.value.max_descriptor_set_storage_images = max_descriptor_set_storage_images;
        self
    }

    #[inline]
    pub fn max_descriptor_set_input_attachments(
        mut self,
        max_descriptor_set_input_attachments: u32,
    ) -> Self {
        self.value.max_descriptor_set_input_attachments = max_descriptor_set_input_attachments;
        self
    }

    #[inline]
    pub fn max_vertex_input_attributes(mut self, max_vertex_input_attributes: u32) -> Self {
        self.value.max_vertex_input_attributes = max_vertex_input_attributes;
        self
    }

    #[inline]
    pub fn max_vertex_input_bindings(mut self, max_vertex_input_bindings: u32) -> Self {
        self.value.max_vertex_input_bindings = max_vertex_input_bindings;
        self
    }

    #[inline]
    pub fn max_vertex_input_attribute_offset(
        mut self,
        max_vertex_input_attribute_offset: u32,
    ) -> Self {
        self.value.max_vertex_input_attribute_offset = max_vertex_input_attribute_offset;
        self
    }

    #[inline]
    pub fn max_vertex_input_binding_stride(mut self, max_vertex_input_binding_stride: u32) -> Self {
        self.value.max_vertex_input_binding_stride = max_vertex_input_binding_stride;
        self
    }

    #[inline]
    pub fn max_vertex_output_components(mut self, max_vertex_output_components: u32) -> Self {
        self.value.max_vertex_output_components = max_vertex_output_components;
        self
    }

    #[inline]
    pub fn max_tessellation_generation_level(
        mut self,
        max_tessellation_generation_level: u32,
    ) -> Self {
        self.value.max_tessellation_generation_level = max_tessellation_generation_level;
        self
    }

    #[inline]
    pub fn max_tessellation_patch_size(mut self, max_tessellation_patch_size: u32) -> Self {
        self.value.max_tessellation_patch_size = max_tessellation_patch_size;
        self
    }

    #[inline]
    pub fn max_tessellation_control_per_vertex_input_components(
        mut self,
        max_tessellation_control_per_vertex_input_components: u32,
    ) -> Self {
        self.value
            .max_tessellation_control_per_vertex_input_components =
            max_tessellation_control_per_vertex_input_components;
        self
    }

    #[inline]
    pub fn max_tessellation_control_per_vertex_output_components(
        mut self,
        max_tessellation_control_per_vertex_output_components: u32,
    ) -> Self {
        self.value
            .max_tessellation_control_per_vertex_output_components =
            max_tessellation_control_per_vertex_output_components;
        self
    }

    #[inline]
    pub fn max_tessellation_control_per_patch_output_components(
        mut self,
        max_tessellation_control_per_patch_output_components: u32,
    ) -> Self {
        self.value
            .max_tessellation_control_per_patch_output_components =
            max_tessellation_control_per_patch_output_components;
        self
    }

    #[inline]
    pub fn max_tessellation_control_total_output_components(
        mut self,
        max_tessellation_control_total_output_components: u32,
    ) -> Self {
        self.value.max_tessellation_control_total_output_components =
            max_tessellation_control_total_output_components;
        self
    }

    #[inline]
    pub fn max_tessellation_evaluation_input_components(
        mut self,
        max_tessellation_evaluation_input_components: u32,
    ) -> Self {
        self.value.max_tessellation_evaluation_input_components =
            max_tessellation_evaluation_input_components;
        self
    }

    #[inline]
    pub fn max_tessellation_evaluation_output_components(
        mut self,
        max_tessellation_evaluation_output_components: u32,
    ) -> Self {
        self.value.max_tessellation_evaluation_output_components =
            max_tessellation_evaluation_output_components;
        self
    }

    #[inline]
    pub fn max_geometry_shader_invocations(mut self, max_geometry_shader_invocations: u32) -> Self {
        self.value.max_geometry_shader_invocations = max_geometry_shader_invocations;
        self
    }

    #[inline]
    pub fn max_geometry_input_components(mut self, max_geometry_input_components: u32) -> Self {
        self.value.max_geometry_input_components = max_geometry_input_components;
        self
    }

    #[inline]
    pub fn max_geometry_output_components(mut self, max_geometry_output_components: u32) -> Self {
        self.value.max_geometry_output_components = max_geometry_output_components;
        self
    }

    #[inline]
    pub fn max_geometry_output_vertices(mut self, max_geometry_output_vertices: u32) -> Self {
        self.value.max_geometry_output_vertices = max_geometry_output_vertices;
        self
    }

    #[inline]
    pub fn max_geometry_total_output_components(
        mut self,
        max_geometry_total_output_components: u32,
    ) -> Self {
        self.value.max_geometry_total_output_components = max_geometry_total_output_components;
        self
    }

    #[inline]
    pub fn max_fragment_input_components(mut self, max_fragment_input_components: u32) -> Self {
        self.value.max_fragment_input_components = max_fragment_input_components;
        self
    }

    #[inline]
    pub fn max_fragment_output_attachments(mut self, max_fragment_output_attachments: u32) -> Self {
        self.value.max_fragment_output_attachments = max_fragment_output_attachments;
        self
    }

    #[inline]
    pub fn max_fragment_dual_src_attachments(
        mut self,
        max_fragment_dual_src_attachments: u32,
    ) -> Self {
        self.value.max_fragment_dual_src_attachments = max_fragment_dual_src_attachments;
        self
    }

    #[inline]
    pub fn max_fragment_combined_output_resources(
        mut self,
        max_fragment_combined_output_resources: u32,
    ) -> Self {
        self.value.max_fragment_combined_output_resources = max_fragment_combined_output_resources;
        self
    }

    #[inline]
    pub fn max_compute_shared_memory_size(mut self, max_compute_shared_memory_size: u32) -> Self {
        self.value.max_compute_shared_memory_size = max_compute_shared_memory_size;
        self
    }

    #[inline]
    pub fn max_compute_work_group_count(mut self, max_compute_work_group_count: [u32; 3]) -> Self {
        self.value.max_compute_work_group_count = max_compute_work_group_count;
        self
    }

    #[inline]
    pub fn max_compute_work_group_invocations(
        mut self,
        max_compute_work_group_invocations: u32,
    ) -> Self {
        self.value.max_compute_work_group_invocations = max_compute_work_group_invocations;
        self
    }

    #[inline]
    pub fn max_compute_work_group_size(mut self, max_compute_work_group_size: [u32; 3]) -> Self {
        self.value.max_compute_work_group_size = max_compute_work_group_size;
        self
    }

    #[inline]
    pub fn sub_pixel_precision_bits(mut self, sub_pixel_precision_bits: u32) -> Self {
        self.value.sub_pixel_precision_bits = sub_pixel_precision_bits;
        self
    }

    #[inline]
    pub fn sub_texel_precision_bits(mut self, sub_texel_precision_bits: u32) -> Self {
        self.value.sub_texel_precision_bits = sub_texel_precision_bits;
        self
    }

    #[inline]
    pub fn mipmap_precision_bits(mut self, mipmap_precision_bits: u32) -> Self {
        self.value.mipmap_precision_bits = mipmap_precision_bits;
        self
    }

    #[inline]
    pub fn max_draw_indexed_index_value(mut self, max_draw_indexed_index_value: u32) -> Self {
        self.value.max_draw_indexed_index_value = max_draw_indexed_index_value;
        self
    }

    #[inline]
    pub fn max_draw_indirect_count(mut self, max_draw_indirect_count: u32) -> Self {
        self.value.max_draw_indirect_count = max_draw_indirect_count;
        self
    }

    #[inline]
    pub fn max_sampler_lod_bias(mut self, max_sampler_lod_bias: f32) -> Self {
        self.value.max_sampler_lod_bias = max_sampler_lod_bias;
        self
    }

    #[inline]
    pub fn max_sampler_anisotropy(mut self, max_sampler_anisotropy: f32) -> Self {
        self.value.max_sampler_anisotropy = max_sampler_anisotropy;
        self
    }

    #[inline]
    pub fn max_viewports(mut self, max_viewports: u32) -> Self {
        self.value.max_viewports = max_viewports;
        self
    }

    #[inline]
    pub fn max_viewport_dimensions(mut self, max_viewport_dimensions: [u32; 2]) -> Self {
        self.value.max_viewport_dimensions = max_viewport_dimensions;
        self
    }

    #[inline]
    pub fn viewport_bounds_range(mut self, viewport_bounds_range: [f32; 2]) -> Self {
        self.value.viewport_bounds_range = viewport_bounds_range;
        self
    }

    #[inline]
    pub fn viewport_sub_pixel_bits(mut self, viewport_sub_pixel_bits: u32) -> Self {
        self.value.viewport_sub_pixel_bits = viewport_sub_pixel_bits;
        self
    }

    #[inline]
    pub fn min_memory_map_alignment(mut self, min_memory_map_alignment: usize) -> Self {
        self.value.min_memory_map_alignment = min_memory_map_alignment;
        self
    }

    #[inline]
    pub fn min_texel_buffer_offset_alignment(
        mut self,
        min_texel_buffer_offset_alignment: DeviceSize,
    ) -> Self {
        self.value.min_texel_buffer_offset_alignment = min_texel_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn min_uniform_buffer_offset_alignment(
        mut self,
        min_uniform_buffer_offset_alignment: DeviceSize,
    ) -> Self {
        self.value.min_uniform_buffer_offset_alignment = min_uniform_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn min_storage_buffer_offset_alignment(
        mut self,
        min_storage_buffer_offset_alignment: DeviceSize,
    ) -> Self {
        self.value.min_storage_buffer_offset_alignment = min_storage_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn min_texel_offset(mut self, min_texel_offset: i32) -> Self {
        self.value.min_texel_offset = min_texel_offset;
        self
    }

    #[inline]
    pub fn max_texel_offset(mut self, max_texel_offset: u32) -> Self {
        self.value.max_texel_offset = max_texel_offset;
        self
    }

    #[inline]
    pub fn min_texel_gather_offset(mut self, min_texel_gather_offset: i32) -> Self {
        self.value.min_texel_gather_offset = min_texel_gather_offset;
        self
    }

    #[inline]
    pub fn max_texel_gather_offset(mut self, max_texel_gather_offset: u32) -> Self {
        self.value.max_texel_gather_offset = max_texel_gather_offset;
        self
    }

    #[inline]
    pub fn min_interpolation_offset(mut self, min_interpolation_offset: f32) -> Self {
        self.value.min_interpolation_offset = min_interpolation_offset;
        self
    }

    #[inline]
    pub fn max_interpolation_offset(mut self, max_interpolation_offset: f32) -> Self {
        self.value.max_interpolation_offset = max_interpolation_offset;
        self
    }

    #[inline]
    pub fn sub_pixel_interpolation_offset_bits(
        mut self,
        sub_pixel_interpolation_offset_bits: u32,
    ) -> Self {
        self.value.sub_pixel_interpolation_offset_bits = sub_pixel_interpolation_offset_bits;
        self
    }

    #[inline]
    pub fn max_framebuffer_width(mut self, max_framebuffer_width: u32) -> Self {
        self.value.max_framebuffer_width = max_framebuffer_width;
        self
    }

    #[inline]
    pub fn max_framebuffer_height(mut self, max_framebuffer_height: u32) -> Self {
        self.value.max_framebuffer_height = max_framebuffer_height;
        self
    }

    #[inline]
    pub fn max_framebuffer_layers(mut self, max_framebuffer_layers: u32) -> Self {
        self.value.max_framebuffer_layers = max_framebuffer_layers;
        self
    }

    #[inline]
    pub fn framebuffer_color_sample_counts(
        mut self,
        framebuffer_color_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.framebuffer_color_sample_counts = framebuffer_color_sample_counts;
        self
    }

    #[inline]
    pub fn framebuffer_depth_sample_counts(
        mut self,
        framebuffer_depth_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.framebuffer_depth_sample_counts = framebuffer_depth_sample_counts;
        self
    }

    #[inline]
    pub fn framebuffer_stencil_sample_counts(
        mut self,
        framebuffer_stencil_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.framebuffer_stencil_sample_counts = framebuffer_stencil_sample_counts;
        self
    }

    #[inline]
    pub fn framebuffer_no_attachments_sample_counts(
        mut self,
        framebuffer_no_attachments_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.framebuffer_no_attachments_sample_counts =
            framebuffer_no_attachments_sample_counts;
        self
    }

    #[inline]
    pub fn max_color_attachments(mut self, max_color_attachments: u32) -> Self {
        self.value.max_color_attachments = max_color_attachments;
        self
    }

    #[inline]
    pub fn sampled_image_color_sample_counts(
        mut self,
        sampled_image_color_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.sampled_image_color_sample_counts = sampled_image_color_sample_counts;
        self
    }

    #[inline]
    pub fn sampled_image_integer_sample_counts(
        mut self,
        sampled_image_integer_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.sampled_image_integer_sample_counts = sampled_image_integer_sample_counts;
        self
    }

    #[inline]
    pub fn sampled_image_depth_sample_counts(
        mut self,
        sampled_image_depth_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.sampled_image_depth_sample_counts = sampled_image_depth_sample_counts;
        self
    }

    #[inline]
    pub fn sampled_image_stencil_sample_counts(
        mut self,
        sampled_image_stencil_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.sampled_image_stencil_sample_counts = sampled_image_stencil_sample_counts;
        self
    }

    #[inline]
    pub fn storage_image_sample_counts(
        mut self,
        storage_image_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.storage_image_sample_counts = storage_image_sample_counts;
        self
    }

    #[inline]
    pub fn max_sample_mask_words(mut self, max_sample_mask_words: u32) -> Self {
        self.value.max_sample_mask_words = max_sample_mask_words;
        self
    }

    #[inline]
    pub fn timestamp_compute_and_graphics(mut self, timestamp_compute_and_graphics: bool) -> Self {
        self.value.timestamp_compute_and_graphics = timestamp_compute_and_graphics as Bool32;
        self
    }

    #[inline]
    pub fn timestamp_period(mut self, timestamp_period: f32) -> Self {
        self.value.timestamp_period = timestamp_period;
        self
    }

    #[inline]
    pub fn max_clip_distances(mut self, max_clip_distances: u32) -> Self {
        self.value.max_clip_distances = max_clip_distances;
        self
    }

    #[inline]
    pub fn max_cull_distances(mut self, max_cull_distances: u32) -> Self {
        self.value.max_cull_distances = max_cull_distances;
        self
    }

    #[inline]
    pub fn max_combined_clip_and_cull_distances(
        mut self,
        max_combined_clip_and_cull_distances: u32,
    ) -> Self {
        self.value.max_combined_clip_and_cull_distances = max_combined_clip_and_cull_distances;
        self
    }

    #[inline]
    pub fn discrete_queue_priorities(mut self, discrete_queue_priorities: u32) -> Self {
        self.value.discrete_queue_priorities = discrete_queue_priorities;
        self
    }

    #[inline]
    pub fn point_size_range(mut self, point_size_range: [f32; 2]) -> Self {
        self.value.point_size_range = point_size_range;
        self
    }

    #[inline]
    pub fn line_width_range(mut self, line_width_range: [f32; 2]) -> Self {
        self.value.line_width_range = line_width_range;
        self
    }

    #[inline]
    pub fn point_size_granularity(mut self, point_size_granularity: f32) -> Self {
        self.value.point_size_granularity = point_size_granularity;
        self
    }

    #[inline]
    pub fn line_width_granularity(mut self, line_width_granularity: f32) -> Self {
        self.value.line_width_granularity = line_width_granularity;
        self
    }

    #[inline]
    pub fn strict_lines(mut self, strict_lines: bool) -> Self {
        self.value.strict_lines = strict_lines as Bool32;
        self
    }

    #[inline]
    pub fn standard_sample_locations(mut self, standard_sample_locations: bool) -> Self {
        self.value.standard_sample_locations = standard_sample_locations as Bool32;
        self
    }

    #[inline]
    pub fn optimal_buffer_copy_offset_alignment(
        mut self,
        optimal_buffer_copy_offset_alignment: DeviceSize,
    ) -> Self {
        self.value.optimal_buffer_copy_offset_alignment = optimal_buffer_copy_offset_alignment;
        self
    }

    #[inline]
    pub fn optimal_buffer_copy_row_pitch_alignment(
        mut self,
        optimal_buffer_copy_row_pitch_alignment: DeviceSize,
    ) -> Self {
        self.value.optimal_buffer_copy_row_pitch_alignment =
            optimal_buffer_copy_row_pitch_alignment;
        self
    }

    #[inline]
    pub fn non_coherent_atom_size(mut self, non_coherent_atom_size: DeviceSize) -> Self {
        self.value.non_coherent_atom_size = non_coherent_atom_size;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLimits {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceLimitsBuilder {
    type Target = PhysicalDeviceLimits;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceLimitsBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceLimitsBuilder {
    type Target = PhysicalDeviceLimits;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLineRasterizationFeaturesKHR {
    type Target = PhysicalDeviceLineRasterizationFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceLineRasterizationFeaturesKHR {
    type Builder = PhysicalDeviceLineRasterizationFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceLineRasterizationFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLineRasterizationFeaturesKHRBuilder {
    value: PhysicalDeviceLineRasterizationFeaturesKHR,
}

impl PhysicalDeviceLineRasterizationFeaturesKHRBuilder {
    #[inline]
    pub fn rectangular_lines(mut self, rectangular_lines: bool) -> Self {
        self.value.rectangular_lines = rectangular_lines as Bool32;
        self
    }

    #[inline]
    pub fn bresenham_lines(mut self, bresenham_lines: bool) -> Self {
        self.value.bresenham_lines = bresenham_lines as Bool32;
        self
    }

    #[inline]
    pub fn smooth_lines(mut self, smooth_lines: bool) -> Self {
        self.value.smooth_lines = smooth_lines as Bool32;
        self
    }

    #[inline]
    pub fn stippled_rectangular_lines(mut self, stippled_rectangular_lines: bool) -> Self {
        self.value.stippled_rectangular_lines = stippled_rectangular_lines as Bool32;
        self
    }

    #[inline]
    pub fn stippled_bresenham_lines(mut self, stippled_bresenham_lines: bool) -> Self {
        self.value.stippled_bresenham_lines = stippled_bresenham_lines as Bool32;
        self
    }

    #[inline]
    pub fn stippled_smooth_lines(mut self, stippled_smooth_lines: bool) -> Self {
        self.value.stippled_smooth_lines = stippled_smooth_lines as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLineRasterizationFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceLineRasterizationFeaturesKHRBuilder {
    type Target = PhysicalDeviceLineRasterizationFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceLineRasterizationFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceLineRasterizationFeaturesKHRBuilder {
    type Target = PhysicalDeviceLineRasterizationFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLineRasterizationPropertiesKHR {
    type Target = PhysicalDeviceLineRasterizationPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceLineRasterizationPropertiesKHR {
    type Builder = PhysicalDeviceLineRasterizationPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceLineRasterizationPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLineRasterizationPropertiesKHRBuilder {
    value: PhysicalDeviceLineRasterizationPropertiesKHR,
}

impl PhysicalDeviceLineRasterizationPropertiesKHRBuilder {
    #[inline]
    pub fn line_sub_pixel_precision_bits(mut self, line_sub_pixel_precision_bits: u32) -> Self {
        self.value.line_sub_pixel_precision_bits = line_sub_pixel_precision_bits;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLineRasterizationPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceLineRasterizationPropertiesKHRBuilder {
    type Target = PhysicalDeviceLineRasterizationPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceLineRasterizationPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceLineRasterizationPropertiesKHRBuilder {
    type Target = PhysicalDeviceLineRasterizationPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceLinearColorAttachmentFeaturesNV {
    type Target = PhysicalDeviceLinearColorAttachmentFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceLinearColorAttachmentFeaturesNV {
    type Builder = PhysicalDeviceLinearColorAttachmentFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceLinearColorAttachmentFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceLinearColorAttachmentFeaturesNVBuilder {
    value: PhysicalDeviceLinearColorAttachmentFeaturesNV,
}

impl PhysicalDeviceLinearColorAttachmentFeaturesNVBuilder {
    #[inline]
    pub fn linear_color_attachment(mut self, linear_color_attachment: bool) -> Self {
        self.value.linear_color_attachment = linear_color_attachment as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceLinearColorAttachmentFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceLinearColorAttachmentFeaturesNVBuilder {
    type Target = PhysicalDeviceLinearColorAttachmentFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceLinearColorAttachmentFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceLinearColorAttachmentFeaturesNVBuilder {
    type Target = PhysicalDeviceLinearColorAttachmentFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance3Properties {
    type Target = PhysicalDeviceMaintenance3Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance3Properties {
    type Builder = PhysicalDeviceMaintenance3PropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance3Properties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance3PropertiesBuilder {
    value: PhysicalDeviceMaintenance3Properties,
}

impl PhysicalDeviceMaintenance3PropertiesBuilder {
    #[inline]
    pub fn max_per_set_descriptors(mut self, max_per_set_descriptors: u32) -> Self {
        self.value.max_per_set_descriptors = max_per_set_descriptors;
        self
    }

    #[inline]
    pub fn max_memory_allocation_size(mut self, max_memory_allocation_size: DeviceSize) -> Self {
        self.value.max_memory_allocation_size = max_memory_allocation_size;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance3Properties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance3PropertiesBuilder {
    type Target = PhysicalDeviceMaintenance3Properties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance3PropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance3PropertiesBuilder {
    type Target = PhysicalDeviceMaintenance3Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance4Features {
    type Target = PhysicalDeviceMaintenance4Features;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance4Features {
    type Builder = PhysicalDeviceMaintenance4FeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance4Features`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance4FeaturesBuilder {
    value: PhysicalDeviceMaintenance4Features,
}

impl PhysicalDeviceMaintenance4FeaturesBuilder {
    #[inline]
    pub fn maintenance4(mut self, maintenance4: bool) -> Self {
        self.value.maintenance4 = maintenance4 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance4Features {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance4FeaturesBuilder {
    type Target = PhysicalDeviceMaintenance4Features;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance4FeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance4FeaturesBuilder {
    type Target = PhysicalDeviceMaintenance4Features;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance4Properties {
    type Target = PhysicalDeviceMaintenance4Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance4Properties {
    type Builder = PhysicalDeviceMaintenance4PropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance4Properties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance4PropertiesBuilder {
    value: PhysicalDeviceMaintenance4Properties,
}

impl PhysicalDeviceMaintenance4PropertiesBuilder {
    #[inline]
    pub fn max_buffer_size(mut self, max_buffer_size: DeviceSize) -> Self {
        self.value.max_buffer_size = max_buffer_size;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance4Properties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance4PropertiesBuilder {
    type Target = PhysicalDeviceMaintenance4Properties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance4PropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance4PropertiesBuilder {
    type Target = PhysicalDeviceMaintenance4Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance5FeaturesKHR {
    type Target = PhysicalDeviceMaintenance5FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance5FeaturesKHR {
    type Builder = PhysicalDeviceMaintenance5FeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance5FeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance5FeaturesKHRBuilder {
    value: PhysicalDeviceMaintenance5FeaturesKHR,
}

impl PhysicalDeviceMaintenance5FeaturesKHRBuilder {
    #[inline]
    pub fn maintenance5(mut self, maintenance5: bool) -> Self {
        self.value.maintenance5 = maintenance5 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance5FeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance5FeaturesKHRBuilder {
    type Target = PhysicalDeviceMaintenance5FeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance5FeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance5FeaturesKHRBuilder {
    type Target = PhysicalDeviceMaintenance5FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance5PropertiesKHR {
    type Target = PhysicalDeviceMaintenance5PropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance5PropertiesKHR {
    type Builder = PhysicalDeviceMaintenance5PropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance5PropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance5PropertiesKHRBuilder {
    value: PhysicalDeviceMaintenance5PropertiesKHR,
}

impl PhysicalDeviceMaintenance5PropertiesKHRBuilder {
    #[inline]
    pub fn early_fragment_multisample_coverage_after_sample_counting(
        mut self,
        early_fragment_multisample_coverage_after_sample_counting: bool,
    ) -> Self {
        self.value
            .early_fragment_multisample_coverage_after_sample_counting =
            early_fragment_multisample_coverage_after_sample_counting as Bool32;
        self
    }

    #[inline]
    pub fn early_fragment_sample_mask_test_before_sample_counting(
        mut self,
        early_fragment_sample_mask_test_before_sample_counting: bool,
    ) -> Self {
        self.value
            .early_fragment_sample_mask_test_before_sample_counting =
            early_fragment_sample_mask_test_before_sample_counting as Bool32;
        self
    }

    #[inline]
    pub fn depth_stencil_swizzle_one_support(
        mut self,
        depth_stencil_swizzle_one_support: bool,
    ) -> Self {
        self.value.depth_stencil_swizzle_one_support = depth_stencil_swizzle_one_support as Bool32;
        self
    }

    #[inline]
    pub fn polygon_mode_point_size(mut self, polygon_mode_point_size: bool) -> Self {
        self.value.polygon_mode_point_size = polygon_mode_point_size as Bool32;
        self
    }

    #[inline]
    pub fn non_strict_single_pixel_wide_lines_use_parallelogram(
        mut self,
        non_strict_single_pixel_wide_lines_use_parallelogram: bool,
    ) -> Self {
        self.value
            .non_strict_single_pixel_wide_lines_use_parallelogram =
            non_strict_single_pixel_wide_lines_use_parallelogram as Bool32;
        self
    }

    #[inline]
    pub fn non_strict_wide_lines_use_parallelogram(
        mut self,
        non_strict_wide_lines_use_parallelogram: bool,
    ) -> Self {
        self.value.non_strict_wide_lines_use_parallelogram =
            non_strict_wide_lines_use_parallelogram as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance5PropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance5PropertiesKHRBuilder {
    type Target = PhysicalDeviceMaintenance5PropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance5PropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance5PropertiesKHRBuilder {
    type Target = PhysicalDeviceMaintenance5PropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance6FeaturesKHR {
    type Target = PhysicalDeviceMaintenance6FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance6FeaturesKHR {
    type Builder = PhysicalDeviceMaintenance6FeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance6FeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance6FeaturesKHRBuilder {
    value: PhysicalDeviceMaintenance6FeaturesKHR,
}

impl PhysicalDeviceMaintenance6FeaturesKHRBuilder {
    #[inline]
    pub fn maintenance6(mut self, maintenance6: bool) -> Self {
        self.value.maintenance6 = maintenance6 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance6FeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance6FeaturesKHRBuilder {
    type Target = PhysicalDeviceMaintenance6FeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance6FeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance6FeaturesKHRBuilder {
    type Target = PhysicalDeviceMaintenance6FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance6PropertiesKHR {
    type Target = PhysicalDeviceMaintenance6PropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance6PropertiesKHR {
    type Builder = PhysicalDeviceMaintenance6PropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance6PropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance6PropertiesKHRBuilder {
    value: PhysicalDeviceMaintenance6PropertiesKHR,
}

impl PhysicalDeviceMaintenance6PropertiesKHRBuilder {
    #[inline]
    pub fn block_texel_view_compatible_multiple_layers(
        mut self,
        block_texel_view_compatible_multiple_layers: bool,
    ) -> Self {
        self.value.block_texel_view_compatible_multiple_layers =
            block_texel_view_compatible_multiple_layers as Bool32;
        self
    }

    #[inline]
    pub fn max_combined_image_sampler_descriptor_count(
        mut self,
        max_combined_image_sampler_descriptor_count: u32,
    ) -> Self {
        self.value.max_combined_image_sampler_descriptor_count =
            max_combined_image_sampler_descriptor_count;
        self
    }

    #[inline]
    pub fn fragment_shading_rate_clamp_combiner_inputs(
        mut self,
        fragment_shading_rate_clamp_combiner_inputs: bool,
    ) -> Self {
        self.value.fragment_shading_rate_clamp_combiner_inputs =
            fragment_shading_rate_clamp_combiner_inputs as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance6PropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance6PropertiesKHRBuilder {
    type Target = PhysicalDeviceMaintenance6PropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance6PropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance6PropertiesKHRBuilder {
    type Target = PhysicalDeviceMaintenance6PropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance7FeaturesKHR {
    type Target = PhysicalDeviceMaintenance7FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance7FeaturesKHR {
    type Builder = PhysicalDeviceMaintenance7FeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance7FeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance7FeaturesKHRBuilder {
    value: PhysicalDeviceMaintenance7FeaturesKHR,
}

impl PhysicalDeviceMaintenance7FeaturesKHRBuilder {
    #[inline]
    pub fn maintenance7(mut self, maintenance7: bool) -> Self {
        self.value.maintenance7 = maintenance7 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance7FeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance7FeaturesKHRBuilder {
    type Target = PhysicalDeviceMaintenance7FeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance7FeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance7FeaturesKHRBuilder {
    type Target = PhysicalDeviceMaintenance7FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance7PropertiesKHR {
    type Target = PhysicalDeviceMaintenance7PropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMaintenance7PropertiesKHR {
    type Builder = PhysicalDeviceMaintenance7PropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceMaintenance7PropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMaintenance7PropertiesKHRBuilder {
    value: PhysicalDeviceMaintenance7PropertiesKHR,
}

impl PhysicalDeviceMaintenance7PropertiesKHRBuilder {
    #[inline]
    pub fn robust_fragment_shading_rate_attachment_access(
        mut self,
        robust_fragment_shading_rate_attachment_access: bool,
    ) -> Self {
        self.value.robust_fragment_shading_rate_attachment_access =
            robust_fragment_shading_rate_attachment_access as Bool32;
        self
    }

    #[inline]
    pub fn separate_depth_stencil_attachment_access(
        mut self,
        separate_depth_stencil_attachment_access: bool,
    ) -> Self {
        self.value.separate_depth_stencil_attachment_access =
            separate_depth_stencil_attachment_access as Bool32;
        self
    }

    #[inline]
    pub fn max_descriptor_set_total_uniform_buffers_dynamic(
        mut self,
        max_descriptor_set_total_uniform_buffers_dynamic: u32,
    ) -> Self {
        self.value.max_descriptor_set_total_uniform_buffers_dynamic =
            max_descriptor_set_total_uniform_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_total_storage_buffers_dynamic(
        mut self,
        max_descriptor_set_total_storage_buffers_dynamic: u32,
    ) -> Self {
        self.value.max_descriptor_set_total_storage_buffers_dynamic =
            max_descriptor_set_total_storage_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_total_buffers_dynamic(
        mut self,
        max_descriptor_set_total_buffers_dynamic: u32,
    ) -> Self {
        self.value.max_descriptor_set_total_buffers_dynamic =
            max_descriptor_set_total_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic(
        mut self,
        max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic =
            max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_total_storage_buffers_dynamic(
        mut self,
        max_descriptor_set_update_after_bind_total_storage_buffers_dynamic: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_total_storage_buffers_dynamic =
            max_descriptor_set_update_after_bind_total_storage_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_total_buffers_dynamic(
        mut self,
        max_descriptor_set_update_after_bind_total_buffers_dynamic: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_total_buffers_dynamic =
            max_descriptor_set_update_after_bind_total_buffers_dynamic;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMaintenance7PropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMaintenance7PropertiesKHRBuilder {
    type Target = PhysicalDeviceMaintenance7PropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMaintenance7PropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMaintenance7PropertiesKHRBuilder {
    type Target = PhysicalDeviceMaintenance7PropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMapMemoryPlacedFeaturesEXT {
    type Target = PhysicalDeviceMapMemoryPlacedFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMapMemoryPlacedFeaturesEXT {
    type Builder = PhysicalDeviceMapMemoryPlacedFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMapMemoryPlacedFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMapMemoryPlacedFeaturesEXTBuilder {
    value: PhysicalDeviceMapMemoryPlacedFeaturesEXT,
}

impl PhysicalDeviceMapMemoryPlacedFeaturesEXTBuilder {
    #[inline]
    pub fn memory_map_placed(mut self, memory_map_placed: bool) -> Self {
        self.value.memory_map_placed = memory_map_placed as Bool32;
        self
    }

    #[inline]
    pub fn memory_map_range_placed(mut self, memory_map_range_placed: bool) -> Self {
        self.value.memory_map_range_placed = memory_map_range_placed as Bool32;
        self
    }

    #[inline]
    pub fn memory_unmap_reserve(mut self, memory_unmap_reserve: bool) -> Self {
        self.value.memory_unmap_reserve = memory_unmap_reserve as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMapMemoryPlacedFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMapMemoryPlacedFeaturesEXTBuilder {
    type Target = PhysicalDeviceMapMemoryPlacedFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMapMemoryPlacedFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMapMemoryPlacedFeaturesEXTBuilder {
    type Target = PhysicalDeviceMapMemoryPlacedFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMapMemoryPlacedPropertiesEXT {
    type Target = PhysicalDeviceMapMemoryPlacedPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMapMemoryPlacedPropertiesEXT {
    type Builder = PhysicalDeviceMapMemoryPlacedPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMapMemoryPlacedPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMapMemoryPlacedPropertiesEXTBuilder {
    value: PhysicalDeviceMapMemoryPlacedPropertiesEXT,
}

impl PhysicalDeviceMapMemoryPlacedPropertiesEXTBuilder {
    #[inline]
    pub fn min_placed_memory_map_alignment(
        mut self,
        min_placed_memory_map_alignment: DeviceSize,
    ) -> Self {
        self.value.min_placed_memory_map_alignment = min_placed_memory_map_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMapMemoryPlacedPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMapMemoryPlacedPropertiesEXTBuilder {
    type Target = PhysicalDeviceMapMemoryPlacedPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMapMemoryPlacedPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMapMemoryPlacedPropertiesEXTBuilder {
    type Target = PhysicalDeviceMapMemoryPlacedPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryBudgetPropertiesEXT {
    type Target = PhysicalDeviceMemoryBudgetPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMemoryBudgetPropertiesEXT {
    type Builder = PhysicalDeviceMemoryBudgetPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMemoryBudgetPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMemoryBudgetPropertiesEXTBuilder {
    value: PhysicalDeviceMemoryBudgetPropertiesEXT,
}

impl PhysicalDeviceMemoryBudgetPropertiesEXTBuilder {
    #[inline]
    pub fn heap_budget(mut self, heap_budget: [DeviceSize; MAX_MEMORY_HEAPS]) -> Self {
        self.value.heap_budget = heap_budget;
        self
    }

    #[inline]
    pub fn heap_usage(mut self, heap_usage: [DeviceSize; MAX_MEMORY_HEAPS]) -> Self {
        self.value.heap_usage = heap_usage;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMemoryBudgetPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMemoryBudgetPropertiesEXTBuilder {
    type Target = PhysicalDeviceMemoryBudgetPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMemoryBudgetPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryBudgetPropertiesEXTBuilder {
    type Target = PhysicalDeviceMemoryBudgetPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryDecompressionFeaturesNV {
    type Target = PhysicalDeviceMemoryDecompressionFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMemoryDecompressionFeaturesNV {
    type Builder = PhysicalDeviceMemoryDecompressionFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceMemoryDecompressionFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMemoryDecompressionFeaturesNVBuilder {
    value: PhysicalDeviceMemoryDecompressionFeaturesNV,
}

impl PhysicalDeviceMemoryDecompressionFeaturesNVBuilder {
    #[inline]
    pub fn memory_decompression(mut self, memory_decompression: bool) -> Self {
        self.value.memory_decompression = memory_decompression as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMemoryDecompressionFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMemoryDecompressionFeaturesNVBuilder {
    type Target = PhysicalDeviceMemoryDecompressionFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMemoryDecompressionFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryDecompressionFeaturesNVBuilder {
    type Target = PhysicalDeviceMemoryDecompressionFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryDecompressionPropertiesNV {
    type Target = PhysicalDeviceMemoryDecompressionPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMemoryDecompressionPropertiesNV {
    type Builder = PhysicalDeviceMemoryDecompressionPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceMemoryDecompressionPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMemoryDecompressionPropertiesNVBuilder {
    value: PhysicalDeviceMemoryDecompressionPropertiesNV,
}

impl PhysicalDeviceMemoryDecompressionPropertiesNVBuilder {
    #[inline]
    pub fn decompression_methods(
        mut self,
        decompression_methods: MemoryDecompressionMethodFlagsNV,
    ) -> Self {
        self.value.decompression_methods = decompression_methods;
        self
    }

    #[inline]
    pub fn max_decompression_indirect_count(
        mut self,
        max_decompression_indirect_count: u64,
    ) -> Self {
        self.value.max_decompression_indirect_count = max_decompression_indirect_count;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMemoryDecompressionPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMemoryDecompressionPropertiesNVBuilder {
    type Target = PhysicalDeviceMemoryDecompressionPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMemoryDecompressionPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryDecompressionPropertiesNVBuilder {
    type Target = PhysicalDeviceMemoryDecompressionPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryPriorityFeaturesEXT {
    type Target = PhysicalDeviceMemoryPriorityFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMemoryPriorityFeaturesEXT {
    type Builder = PhysicalDeviceMemoryPriorityFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMemoryPriorityFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMemoryPriorityFeaturesEXTBuilder {
    value: PhysicalDeviceMemoryPriorityFeaturesEXT,
}

impl PhysicalDeviceMemoryPriorityFeaturesEXTBuilder {
    #[inline]
    pub fn memory_priority(mut self, memory_priority: bool) -> Self {
        self.value.memory_priority = memory_priority as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMemoryPriorityFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMemoryPriorityFeaturesEXTBuilder {
    type Target = PhysicalDeviceMemoryPriorityFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMemoryPriorityFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryPriorityFeaturesEXTBuilder {
    type Target = PhysicalDeviceMemoryPriorityFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryProperties {
    type Target = PhysicalDeviceMemoryProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMemoryProperties {
    type Builder = PhysicalDeviceMemoryPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceMemoryProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMemoryPropertiesBuilder {
    value: PhysicalDeviceMemoryProperties,
}

impl PhysicalDeviceMemoryPropertiesBuilder {
    #[inline]
    pub fn memory_type_count(mut self, memory_type_count: u32) -> Self {
        self.value.memory_type_count = memory_type_count;
        self
    }

    #[inline]
    pub fn memory_types(mut self, memory_types: [MemoryType; MAX_MEMORY_TYPES]) -> Self {
        self.value.memory_types = memory_types;
        self
    }

    #[inline]
    pub fn memory_heap_count(mut self, memory_heap_count: u32) -> Self {
        self.value.memory_heap_count = memory_heap_count;
        self
    }

    #[inline]
    pub fn memory_heaps(mut self, memory_heaps: [MemoryHeap; MAX_MEMORY_HEAPS]) -> Self {
        self.value.memory_heaps = memory_heaps;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMemoryProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMemoryPropertiesBuilder {
    type Target = PhysicalDeviceMemoryProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMemoryPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMemoryPropertiesBuilder {
    type Target = PhysicalDeviceMemoryProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceMemoryProperties2`].
pub unsafe trait ExtendsPhysicalDeviceMemoryProperties2: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceMemoryProperties2 for PhysicalDeviceMemoryBudgetPropertiesEXT {}

unsafe impl Cast for PhysicalDeviceMemoryProperties2 {
    type Target = PhysicalDeviceMemoryProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceMemoryProperties2 {
    type Builder = PhysicalDeviceMemoryProperties2Builder<'b>;
}

/// A builder for a [`PhysicalDeviceMemoryProperties2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMemoryProperties2Builder<'b> {
    value: PhysicalDeviceMemoryProperties2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceMemoryProperties2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceMemoryProperties2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn memory_properties(
        mut self,
        memory_properties: impl Cast<Target = PhysicalDeviceMemoryProperties>,
    ) -> Self {
        self.value.memory_properties = memory_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMemoryProperties2 {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceMemoryProperties2Builder<'b> {
    type Target = PhysicalDeviceMemoryProperties2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceMemoryProperties2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceMemoryProperties2Builder<'b> {
    type Target = PhysicalDeviceMemoryProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMeshShaderFeaturesEXT {
    type Target = PhysicalDeviceMeshShaderFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMeshShaderFeaturesEXT {
    type Builder = PhysicalDeviceMeshShaderFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMeshShaderFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMeshShaderFeaturesEXTBuilder {
    value: PhysicalDeviceMeshShaderFeaturesEXT,
}

impl PhysicalDeviceMeshShaderFeaturesEXTBuilder {
    #[inline]
    pub fn task_shader(mut self, task_shader: bool) -> Self {
        self.value.task_shader = task_shader as Bool32;
        self
    }

    #[inline]
    pub fn mesh_shader(mut self, mesh_shader: bool) -> Self {
        self.value.mesh_shader = mesh_shader as Bool32;
        self
    }

    #[inline]
    pub fn multiview_mesh_shader(mut self, multiview_mesh_shader: bool) -> Self {
        self.value.multiview_mesh_shader = multiview_mesh_shader as Bool32;
        self
    }

    #[inline]
    pub fn primitive_fragment_shading_rate_mesh_shader(
        mut self,
        primitive_fragment_shading_rate_mesh_shader: bool,
    ) -> Self {
        self.value.primitive_fragment_shading_rate_mesh_shader =
            primitive_fragment_shading_rate_mesh_shader as Bool32;
        self
    }

    #[inline]
    pub fn mesh_shader_queries(mut self, mesh_shader_queries: bool) -> Self {
        self.value.mesh_shader_queries = mesh_shader_queries as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMeshShaderFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMeshShaderFeaturesEXTBuilder {
    type Target = PhysicalDeviceMeshShaderFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMeshShaderFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMeshShaderFeaturesEXTBuilder {
    type Target = PhysicalDeviceMeshShaderFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMeshShaderFeaturesNV {
    type Target = PhysicalDeviceMeshShaderFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMeshShaderFeaturesNV {
    type Builder = PhysicalDeviceMeshShaderFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceMeshShaderFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMeshShaderFeaturesNVBuilder {
    value: PhysicalDeviceMeshShaderFeaturesNV,
}

impl PhysicalDeviceMeshShaderFeaturesNVBuilder {
    #[inline]
    pub fn task_shader(mut self, task_shader: bool) -> Self {
        self.value.task_shader = task_shader as Bool32;
        self
    }

    #[inline]
    pub fn mesh_shader(mut self, mesh_shader: bool) -> Self {
        self.value.mesh_shader = mesh_shader as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMeshShaderFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMeshShaderFeaturesNVBuilder {
    type Target = PhysicalDeviceMeshShaderFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMeshShaderFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMeshShaderFeaturesNVBuilder {
    type Target = PhysicalDeviceMeshShaderFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMeshShaderPropertiesEXT {
    type Target = PhysicalDeviceMeshShaderPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMeshShaderPropertiesEXT {
    type Builder = PhysicalDeviceMeshShaderPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMeshShaderPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMeshShaderPropertiesEXTBuilder {
    value: PhysicalDeviceMeshShaderPropertiesEXT,
}

impl PhysicalDeviceMeshShaderPropertiesEXTBuilder {
    #[inline]
    pub fn max_task_work_group_total_count(mut self, max_task_work_group_total_count: u32) -> Self {
        self.value.max_task_work_group_total_count = max_task_work_group_total_count;
        self
    }

    #[inline]
    pub fn max_task_work_group_count(mut self, max_task_work_group_count: [u32; 3]) -> Self {
        self.value.max_task_work_group_count = max_task_work_group_count;
        self
    }

    #[inline]
    pub fn max_task_work_group_invocations(mut self, max_task_work_group_invocations: u32) -> Self {
        self.value.max_task_work_group_invocations = max_task_work_group_invocations;
        self
    }

    #[inline]
    pub fn max_task_work_group_size(mut self, max_task_work_group_size: [u32; 3]) -> Self {
        self.value.max_task_work_group_size = max_task_work_group_size;
        self
    }

    #[inline]
    pub fn max_task_payload_size(mut self, max_task_payload_size: u32) -> Self {
        self.value.max_task_payload_size = max_task_payload_size;
        self
    }

    #[inline]
    pub fn max_task_shared_memory_size(mut self, max_task_shared_memory_size: u32) -> Self {
        self.value.max_task_shared_memory_size = max_task_shared_memory_size;
        self
    }

    #[inline]
    pub fn max_task_payload_and_shared_memory_size(
        mut self,
        max_task_payload_and_shared_memory_size: u32,
    ) -> Self {
        self.value.max_task_payload_and_shared_memory_size =
            max_task_payload_and_shared_memory_size;
        self
    }

    #[inline]
    pub fn max_mesh_work_group_total_count(mut self, max_mesh_work_group_total_count: u32) -> Self {
        self.value.max_mesh_work_group_total_count = max_mesh_work_group_total_count;
        self
    }

    #[inline]
    pub fn max_mesh_work_group_count(mut self, max_mesh_work_group_count: [u32; 3]) -> Self {
        self.value.max_mesh_work_group_count = max_mesh_work_group_count;
        self
    }

    #[inline]
    pub fn max_mesh_work_group_invocations(mut self, max_mesh_work_group_invocations: u32) -> Self {
        self.value.max_mesh_work_group_invocations = max_mesh_work_group_invocations;
        self
    }

    #[inline]
    pub fn max_mesh_work_group_size(mut self, max_mesh_work_group_size: [u32; 3]) -> Self {
        self.value.max_mesh_work_group_size = max_mesh_work_group_size;
        self
    }

    #[inline]
    pub fn max_mesh_shared_memory_size(mut self, max_mesh_shared_memory_size: u32) -> Self {
        self.value.max_mesh_shared_memory_size = max_mesh_shared_memory_size;
        self
    }

    #[inline]
    pub fn max_mesh_payload_and_shared_memory_size(
        mut self,
        max_mesh_payload_and_shared_memory_size: u32,
    ) -> Self {
        self.value.max_mesh_payload_and_shared_memory_size =
            max_mesh_payload_and_shared_memory_size;
        self
    }

    #[inline]
    pub fn max_mesh_output_memory_size(mut self, max_mesh_output_memory_size: u32) -> Self {
        self.value.max_mesh_output_memory_size = max_mesh_output_memory_size;
        self
    }

    #[inline]
    pub fn max_mesh_payload_and_output_memory_size(
        mut self,
        max_mesh_payload_and_output_memory_size: u32,
    ) -> Self {
        self.value.max_mesh_payload_and_output_memory_size =
            max_mesh_payload_and_output_memory_size;
        self
    }

    #[inline]
    pub fn max_mesh_output_components(mut self, max_mesh_output_components: u32) -> Self {
        self.value.max_mesh_output_components = max_mesh_output_components;
        self
    }

    #[inline]
    pub fn max_mesh_output_vertices(mut self, max_mesh_output_vertices: u32) -> Self {
        self.value.max_mesh_output_vertices = max_mesh_output_vertices;
        self
    }

    #[inline]
    pub fn max_mesh_output_primitives(mut self, max_mesh_output_primitives: u32) -> Self {
        self.value.max_mesh_output_primitives = max_mesh_output_primitives;
        self
    }

    #[inline]
    pub fn max_mesh_output_layers(mut self, max_mesh_output_layers: u32) -> Self {
        self.value.max_mesh_output_layers = max_mesh_output_layers;
        self
    }

    #[inline]
    pub fn max_mesh_multiview_view_count(mut self, max_mesh_multiview_view_count: u32) -> Self {
        self.value.max_mesh_multiview_view_count = max_mesh_multiview_view_count;
        self
    }

    #[inline]
    pub fn mesh_output_per_vertex_granularity(
        mut self,
        mesh_output_per_vertex_granularity: u32,
    ) -> Self {
        self.value.mesh_output_per_vertex_granularity = mesh_output_per_vertex_granularity;
        self
    }

    #[inline]
    pub fn mesh_output_per_primitive_granularity(
        mut self,
        mesh_output_per_primitive_granularity: u32,
    ) -> Self {
        self.value.mesh_output_per_primitive_granularity = mesh_output_per_primitive_granularity;
        self
    }

    #[inline]
    pub fn max_preferred_task_work_group_invocations(
        mut self,
        max_preferred_task_work_group_invocations: u32,
    ) -> Self {
        self.value.max_preferred_task_work_group_invocations =
            max_preferred_task_work_group_invocations;
        self
    }

    #[inline]
    pub fn max_preferred_mesh_work_group_invocations(
        mut self,
        max_preferred_mesh_work_group_invocations: u32,
    ) -> Self {
        self.value.max_preferred_mesh_work_group_invocations =
            max_preferred_mesh_work_group_invocations;
        self
    }

    #[inline]
    pub fn prefers_local_invocation_vertex_output(
        mut self,
        prefers_local_invocation_vertex_output: bool,
    ) -> Self {
        self.value.prefers_local_invocation_vertex_output =
            prefers_local_invocation_vertex_output as Bool32;
        self
    }

    #[inline]
    pub fn prefers_local_invocation_primitive_output(
        mut self,
        prefers_local_invocation_primitive_output: bool,
    ) -> Self {
        self.value.prefers_local_invocation_primitive_output =
            prefers_local_invocation_primitive_output as Bool32;
        self
    }

    #[inline]
    pub fn prefers_compact_vertex_output(mut self, prefers_compact_vertex_output: bool) -> Self {
        self.value.prefers_compact_vertex_output = prefers_compact_vertex_output as Bool32;
        self
    }

    #[inline]
    pub fn prefers_compact_primitive_output(
        mut self,
        prefers_compact_primitive_output: bool,
    ) -> Self {
        self.value.prefers_compact_primitive_output = prefers_compact_primitive_output as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMeshShaderPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMeshShaderPropertiesEXTBuilder {
    type Target = PhysicalDeviceMeshShaderPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMeshShaderPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMeshShaderPropertiesEXTBuilder {
    type Target = PhysicalDeviceMeshShaderPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMeshShaderPropertiesNV {
    type Target = PhysicalDeviceMeshShaderPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMeshShaderPropertiesNV {
    type Builder = PhysicalDeviceMeshShaderPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceMeshShaderPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMeshShaderPropertiesNVBuilder {
    value: PhysicalDeviceMeshShaderPropertiesNV,
}

impl PhysicalDeviceMeshShaderPropertiesNVBuilder {
    #[inline]
    pub fn max_draw_mesh_tasks_count(mut self, max_draw_mesh_tasks_count: u32) -> Self {
        self.value.max_draw_mesh_tasks_count = max_draw_mesh_tasks_count;
        self
    }

    #[inline]
    pub fn max_task_work_group_invocations(mut self, max_task_work_group_invocations: u32) -> Self {
        self.value.max_task_work_group_invocations = max_task_work_group_invocations;
        self
    }

    #[inline]
    pub fn max_task_work_group_size(mut self, max_task_work_group_size: [u32; 3]) -> Self {
        self.value.max_task_work_group_size = max_task_work_group_size;
        self
    }

    #[inline]
    pub fn max_task_total_memory_size(mut self, max_task_total_memory_size: u32) -> Self {
        self.value.max_task_total_memory_size = max_task_total_memory_size;
        self
    }

    #[inline]
    pub fn max_task_output_count(mut self, max_task_output_count: u32) -> Self {
        self.value.max_task_output_count = max_task_output_count;
        self
    }

    #[inline]
    pub fn max_mesh_work_group_invocations(mut self, max_mesh_work_group_invocations: u32) -> Self {
        self.value.max_mesh_work_group_invocations = max_mesh_work_group_invocations;
        self
    }

    #[inline]
    pub fn max_mesh_work_group_size(mut self, max_mesh_work_group_size: [u32; 3]) -> Self {
        self.value.max_mesh_work_group_size = max_mesh_work_group_size;
        self
    }

    #[inline]
    pub fn max_mesh_total_memory_size(mut self, max_mesh_total_memory_size: u32) -> Self {
        self.value.max_mesh_total_memory_size = max_mesh_total_memory_size;
        self
    }

    #[inline]
    pub fn max_mesh_output_vertices(mut self, max_mesh_output_vertices: u32) -> Self {
        self.value.max_mesh_output_vertices = max_mesh_output_vertices;
        self
    }

    #[inline]
    pub fn max_mesh_output_primitives(mut self, max_mesh_output_primitives: u32) -> Self {
        self.value.max_mesh_output_primitives = max_mesh_output_primitives;
        self
    }

    #[inline]
    pub fn max_mesh_multiview_view_count(mut self, max_mesh_multiview_view_count: u32) -> Self {
        self.value.max_mesh_multiview_view_count = max_mesh_multiview_view_count;
        self
    }

    #[inline]
    pub fn mesh_output_per_vertex_granularity(
        mut self,
        mesh_output_per_vertex_granularity: u32,
    ) -> Self {
        self.value.mesh_output_per_vertex_granularity = mesh_output_per_vertex_granularity;
        self
    }

    #[inline]
    pub fn mesh_output_per_primitive_granularity(
        mut self,
        mesh_output_per_primitive_granularity: u32,
    ) -> Self {
        self.value.mesh_output_per_primitive_granularity = mesh_output_per_primitive_granularity;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMeshShaderPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMeshShaderPropertiesNVBuilder {
    type Target = PhysicalDeviceMeshShaderPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMeshShaderPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMeshShaderPropertiesNVBuilder {
    type Target = PhysicalDeviceMeshShaderPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiDrawFeaturesEXT {
    type Target = PhysicalDeviceMultiDrawFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMultiDrawFeaturesEXT {
    type Builder = PhysicalDeviceMultiDrawFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMultiDrawFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMultiDrawFeaturesEXTBuilder {
    value: PhysicalDeviceMultiDrawFeaturesEXT,
}

impl PhysicalDeviceMultiDrawFeaturesEXTBuilder {
    #[inline]
    pub fn multi_draw(mut self, multi_draw: bool) -> Self {
        self.value.multi_draw = multi_draw as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMultiDrawFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMultiDrawFeaturesEXTBuilder {
    type Target = PhysicalDeviceMultiDrawFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMultiDrawFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiDrawFeaturesEXTBuilder {
    type Target = PhysicalDeviceMultiDrawFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiDrawPropertiesEXT {
    type Target = PhysicalDeviceMultiDrawPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMultiDrawPropertiesEXT {
    type Builder = PhysicalDeviceMultiDrawPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMultiDrawPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMultiDrawPropertiesEXTBuilder {
    value: PhysicalDeviceMultiDrawPropertiesEXT,
}

impl PhysicalDeviceMultiDrawPropertiesEXTBuilder {
    #[inline]
    pub fn max_multi_draw_count(mut self, max_multi_draw_count: u32) -> Self {
        self.value.max_multi_draw_count = max_multi_draw_count;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMultiDrawPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMultiDrawPropertiesEXTBuilder {
    type Target = PhysicalDeviceMultiDrawPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMultiDrawPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiDrawPropertiesEXTBuilder {
    type Target = PhysicalDeviceMultiDrawPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    type Target = PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    type Builder = PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTBuilder {
    value: PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT,
}

impl PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTBuilder {
    #[inline]
    pub fn multisampled_render_to_single_sampled(
        mut self,
        multisampled_render_to_single_sampled: bool,
    ) -> Self {
        self.value.multisampled_render_to_single_sampled =
            multisampled_render_to_single_sampled as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTBuilder {
    type Target = PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTBuilder {
    type Target = PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewFeatures {
    type Target = PhysicalDeviceMultiviewFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMultiviewFeatures {
    type Builder = PhysicalDeviceMultiviewFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceMultiviewFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMultiviewFeaturesBuilder {
    value: PhysicalDeviceMultiviewFeatures,
}

impl PhysicalDeviceMultiviewFeaturesBuilder {
    #[inline]
    pub fn multiview(mut self, multiview: bool) -> Self {
        self.value.multiview = multiview as Bool32;
        self
    }

    #[inline]
    pub fn multiview_geometry_shader(mut self, multiview_geometry_shader: bool) -> Self {
        self.value.multiview_geometry_shader = multiview_geometry_shader as Bool32;
        self
    }

    #[inline]
    pub fn multiview_tessellation_shader(mut self, multiview_tessellation_shader: bool) -> Self {
        self.value.multiview_tessellation_shader = multiview_tessellation_shader as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMultiviewFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMultiviewFeaturesBuilder {
    type Target = PhysicalDeviceMultiviewFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMultiviewFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewFeaturesBuilder {
    type Target = PhysicalDeviceMultiviewFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    type Target = PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    type Builder = PhysicalDeviceMultiviewPerViewAttributesPropertiesNVXBuilder;
}

/// A builder for a [`PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNVXBuilder {
    value: PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
}

impl PhysicalDeviceMultiviewPerViewAttributesPropertiesNVXBuilder {
    #[inline]
    pub fn per_view_position_all_components(
        mut self,
        per_view_position_all_components: bool,
    ) -> Self {
        self.value.per_view_position_all_components = per_view_position_all_components as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMultiviewPerViewAttributesPropertiesNVXBuilder {
    type Target = PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMultiviewPerViewAttributesPropertiesNVXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewPerViewAttributesPropertiesNVXBuilder {
    type Target = PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    type Target = PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    type Builder = PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMBuilder {
    value: PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
}

impl PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMBuilder {
    #[inline]
    pub fn multiview_per_view_render_areas(
        mut self,
        multiview_per_view_render_areas: bool,
    ) -> Self {
        self.value.multiview_per_view_render_areas = multiview_per_view_render_areas as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMBuilder {
    type Target = PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMBuilder {
    type Target = PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    type Target = PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    type Builder = PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMBuilder {
    value: PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM,
}

impl PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMBuilder {
    #[inline]
    pub fn multiview_per_view_viewports(mut self, multiview_per_view_viewports: bool) -> Self {
        self.value.multiview_per_view_viewports = multiview_per_view_viewports as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMBuilder {
    type Target = PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMBuilder {
    type Target = PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewProperties {
    type Target = PhysicalDeviceMultiviewProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMultiviewProperties {
    type Builder = PhysicalDeviceMultiviewPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceMultiviewProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMultiviewPropertiesBuilder {
    value: PhysicalDeviceMultiviewProperties,
}

impl PhysicalDeviceMultiviewPropertiesBuilder {
    #[inline]
    pub fn max_multiview_view_count(mut self, max_multiview_view_count: u32) -> Self {
        self.value.max_multiview_view_count = max_multiview_view_count;
        self
    }

    #[inline]
    pub fn max_multiview_instance_index(mut self, max_multiview_instance_index: u32) -> Self {
        self.value.max_multiview_instance_index = max_multiview_instance_index;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMultiviewProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMultiviewPropertiesBuilder {
    type Target = PhysicalDeviceMultiviewProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMultiviewPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMultiviewPropertiesBuilder {
    type Target = PhysicalDeviceMultiviewProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    type Target = PhysicalDeviceMutableDescriptorTypeFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    type Builder = PhysicalDeviceMutableDescriptorTypeFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceMutableDescriptorTypeFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceMutableDescriptorTypeFeaturesEXTBuilder {
    value: PhysicalDeviceMutableDescriptorTypeFeaturesEXT,
}

impl PhysicalDeviceMutableDescriptorTypeFeaturesEXTBuilder {
    #[inline]
    pub fn mutable_descriptor_type(mut self, mutable_descriptor_type: bool) -> Self {
        self.value.mutable_descriptor_type = mutable_descriptor_type as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceMutableDescriptorTypeFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceMutableDescriptorTypeFeaturesEXTBuilder {
    type Target = PhysicalDeviceMutableDescriptorTypeFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceMutableDescriptorTypeFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceMutableDescriptorTypeFeaturesEXTBuilder {
    type Target = PhysicalDeviceMutableDescriptorTypeFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceNestedCommandBufferFeaturesEXT {
    type Target = PhysicalDeviceNestedCommandBufferFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceNestedCommandBufferFeaturesEXT {
    type Builder = PhysicalDeviceNestedCommandBufferFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceNestedCommandBufferFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceNestedCommandBufferFeaturesEXTBuilder {
    value: PhysicalDeviceNestedCommandBufferFeaturesEXT,
}

impl PhysicalDeviceNestedCommandBufferFeaturesEXTBuilder {
    #[inline]
    pub fn nested_command_buffer(mut self, nested_command_buffer: bool) -> Self {
        self.value.nested_command_buffer = nested_command_buffer as Bool32;
        self
    }

    #[inline]
    pub fn nested_command_buffer_rendering(
        mut self,
        nested_command_buffer_rendering: bool,
    ) -> Self {
        self.value.nested_command_buffer_rendering = nested_command_buffer_rendering as Bool32;
        self
    }

    #[inline]
    pub fn nested_command_buffer_simultaneous_use(
        mut self,
        nested_command_buffer_simultaneous_use: bool,
    ) -> Self {
        self.value.nested_command_buffer_simultaneous_use =
            nested_command_buffer_simultaneous_use as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceNestedCommandBufferFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceNestedCommandBufferFeaturesEXTBuilder {
    type Target = PhysicalDeviceNestedCommandBufferFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceNestedCommandBufferFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceNestedCommandBufferFeaturesEXTBuilder {
    type Target = PhysicalDeviceNestedCommandBufferFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceNestedCommandBufferPropertiesEXT {
    type Target = PhysicalDeviceNestedCommandBufferPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceNestedCommandBufferPropertiesEXT {
    type Builder = PhysicalDeviceNestedCommandBufferPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceNestedCommandBufferPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceNestedCommandBufferPropertiesEXTBuilder {
    value: PhysicalDeviceNestedCommandBufferPropertiesEXT,
}

impl PhysicalDeviceNestedCommandBufferPropertiesEXTBuilder {
    #[inline]
    pub fn max_command_buffer_nesting_level(
        mut self,
        max_command_buffer_nesting_level: u32,
    ) -> Self {
        self.value.max_command_buffer_nesting_level = max_command_buffer_nesting_level;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceNestedCommandBufferPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceNestedCommandBufferPropertiesEXTBuilder {
    type Target = PhysicalDeviceNestedCommandBufferPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceNestedCommandBufferPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceNestedCommandBufferPropertiesEXTBuilder {
    type Target = PhysicalDeviceNestedCommandBufferPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    type Target = PhysicalDeviceNonSeamlessCubeMapFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    type Builder = PhysicalDeviceNonSeamlessCubeMapFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceNonSeamlessCubeMapFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceNonSeamlessCubeMapFeaturesEXTBuilder {
    value: PhysicalDeviceNonSeamlessCubeMapFeaturesEXT,
}

impl PhysicalDeviceNonSeamlessCubeMapFeaturesEXTBuilder {
    #[inline]
    pub fn non_seamless_cube_map(mut self, non_seamless_cube_map: bool) -> Self {
        self.value.non_seamless_cube_map = non_seamless_cube_map as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceNonSeamlessCubeMapFeaturesEXTBuilder {
    type Target = PhysicalDeviceNonSeamlessCubeMapFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceNonSeamlessCubeMapFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceNonSeamlessCubeMapFeaturesEXTBuilder {
    type Target = PhysicalDeviceNonSeamlessCubeMapFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceOpacityMicromapFeaturesEXT {
    type Target = PhysicalDeviceOpacityMicromapFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceOpacityMicromapFeaturesEXT {
    type Builder = PhysicalDeviceOpacityMicromapFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceOpacityMicromapFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceOpacityMicromapFeaturesEXTBuilder {
    value: PhysicalDeviceOpacityMicromapFeaturesEXT,
}

impl PhysicalDeviceOpacityMicromapFeaturesEXTBuilder {
    #[inline]
    pub fn micromap(mut self, micromap: bool) -> Self {
        self.value.micromap = micromap as Bool32;
        self
    }

    #[inline]
    pub fn micromap_capture_replay(mut self, micromap_capture_replay: bool) -> Self {
        self.value.micromap_capture_replay = micromap_capture_replay as Bool32;
        self
    }

    #[inline]
    pub fn micromap_host_commands(mut self, micromap_host_commands: bool) -> Self {
        self.value.micromap_host_commands = micromap_host_commands as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceOpacityMicromapFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceOpacityMicromapFeaturesEXTBuilder {
    type Target = PhysicalDeviceOpacityMicromapFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceOpacityMicromapFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceOpacityMicromapFeaturesEXTBuilder {
    type Target = PhysicalDeviceOpacityMicromapFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceOpacityMicromapPropertiesEXT {
    type Target = PhysicalDeviceOpacityMicromapPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceOpacityMicromapPropertiesEXT {
    type Builder = PhysicalDeviceOpacityMicromapPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceOpacityMicromapPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceOpacityMicromapPropertiesEXTBuilder {
    value: PhysicalDeviceOpacityMicromapPropertiesEXT,
}

impl PhysicalDeviceOpacityMicromapPropertiesEXTBuilder {
    #[inline]
    pub fn max_opacity2_state_subdivision_level(
        mut self,
        max_opacity2_state_subdivision_level: u32,
    ) -> Self {
        self.value.max_opacity2_state_subdivision_level = max_opacity2_state_subdivision_level;
        self
    }

    #[inline]
    pub fn max_opacity4_state_subdivision_level(
        mut self,
        max_opacity4_state_subdivision_level: u32,
    ) -> Self {
        self.value.max_opacity4_state_subdivision_level = max_opacity4_state_subdivision_level;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceOpacityMicromapPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceOpacityMicromapPropertiesEXTBuilder {
    type Target = PhysicalDeviceOpacityMicromapPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceOpacityMicromapPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceOpacityMicromapPropertiesEXTBuilder {
    type Target = PhysicalDeviceOpacityMicromapPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceOpticalFlowFeaturesNV {
    type Target = PhysicalDeviceOpticalFlowFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceOpticalFlowFeaturesNV {
    type Builder = PhysicalDeviceOpticalFlowFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceOpticalFlowFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceOpticalFlowFeaturesNVBuilder {
    value: PhysicalDeviceOpticalFlowFeaturesNV,
}

impl PhysicalDeviceOpticalFlowFeaturesNVBuilder {
    #[inline]
    pub fn optical_flow(mut self, optical_flow: bool) -> Self {
        self.value.optical_flow = optical_flow as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceOpticalFlowFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceOpticalFlowFeaturesNVBuilder {
    type Target = PhysicalDeviceOpticalFlowFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceOpticalFlowFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceOpticalFlowFeaturesNVBuilder {
    type Target = PhysicalDeviceOpticalFlowFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceOpticalFlowPropertiesNV {
    type Target = PhysicalDeviceOpticalFlowPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceOpticalFlowPropertiesNV {
    type Builder = PhysicalDeviceOpticalFlowPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceOpticalFlowPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceOpticalFlowPropertiesNVBuilder {
    value: PhysicalDeviceOpticalFlowPropertiesNV,
}

impl PhysicalDeviceOpticalFlowPropertiesNVBuilder {
    #[inline]
    pub fn supported_output_grid_sizes(
        mut self,
        supported_output_grid_sizes: OpticalFlowGridSizeFlagsNV,
    ) -> Self {
        self.value.supported_output_grid_sizes = supported_output_grid_sizes;
        self
    }

    #[inline]
    pub fn supported_hint_grid_sizes(
        mut self,
        supported_hint_grid_sizes: OpticalFlowGridSizeFlagsNV,
    ) -> Self {
        self.value.supported_hint_grid_sizes = supported_hint_grid_sizes;
        self
    }

    #[inline]
    pub fn hint_supported(mut self, hint_supported: bool) -> Self {
        self.value.hint_supported = hint_supported as Bool32;
        self
    }

    #[inline]
    pub fn cost_supported(mut self, cost_supported: bool) -> Self {
        self.value.cost_supported = cost_supported as Bool32;
        self
    }

    #[inline]
    pub fn bidirectional_flow_supported(mut self, bidirectional_flow_supported: bool) -> Self {
        self.value.bidirectional_flow_supported = bidirectional_flow_supported as Bool32;
        self
    }

    #[inline]
    pub fn global_flow_supported(mut self, global_flow_supported: bool) -> Self {
        self.value.global_flow_supported = global_flow_supported as Bool32;
        self
    }

    #[inline]
    pub fn min_width(mut self, min_width: u32) -> Self {
        self.value.min_width = min_width;
        self
    }

    #[inline]
    pub fn min_height(mut self, min_height: u32) -> Self {
        self.value.min_height = min_height;
        self
    }

    #[inline]
    pub fn max_width(mut self, max_width: u32) -> Self {
        self.value.max_width = max_width;
        self
    }

    #[inline]
    pub fn max_height(mut self, max_height: u32) -> Self {
        self.value.max_height = max_height;
        self
    }

    #[inline]
    pub fn max_num_regions_of_interest(mut self, max_num_regions_of_interest: u32) -> Self {
        self.value.max_num_regions_of_interest = max_num_regions_of_interest;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceOpticalFlowPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceOpticalFlowPropertiesNVBuilder {
    type Target = PhysicalDeviceOpticalFlowPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceOpticalFlowPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceOpticalFlowPropertiesNVBuilder {
    type Target = PhysicalDeviceOpticalFlowPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePCIBusInfoPropertiesEXT {
    type Target = PhysicalDevicePCIBusInfoPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePCIBusInfoPropertiesEXT {
    type Builder = PhysicalDevicePCIBusInfoPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePCIBusInfoPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePCIBusInfoPropertiesEXTBuilder {
    value: PhysicalDevicePCIBusInfoPropertiesEXT,
}

impl PhysicalDevicePCIBusInfoPropertiesEXTBuilder {
    #[inline]
    pub fn pci_domain(mut self, pci_domain: u32) -> Self {
        self.value.pci_domain = pci_domain;
        self
    }

    #[inline]
    pub fn pci_bus(mut self, pci_bus: u32) -> Self {
        self.value.pci_bus = pci_bus;
        self
    }

    #[inline]
    pub fn pci_device(mut self, pci_device: u32) -> Self {
        self.value.pci_device = pci_device;
        self
    }

    #[inline]
    pub fn pci_function(mut self, pci_function: u32) -> Self {
        self.value.pci_function = pci_function;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePCIBusInfoPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePCIBusInfoPropertiesEXTBuilder {
    type Target = PhysicalDevicePCIBusInfoPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePCIBusInfoPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePCIBusInfoPropertiesEXTBuilder {
    type Target = PhysicalDevicePCIBusInfoPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    type Target = PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    type Builder = PhysicalDevicePageableDeviceLocalMemoryFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePageableDeviceLocalMemoryFeaturesEXTBuilder {
    value: PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT,
}

impl PhysicalDevicePageableDeviceLocalMemoryFeaturesEXTBuilder {
    #[inline]
    pub fn pageable_device_local_memory(mut self, pageable_device_local_memory: bool) -> Self {
        self.value.pageable_device_local_memory = pageable_device_local_memory as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePageableDeviceLocalMemoryFeaturesEXTBuilder {
    type Target = PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePageableDeviceLocalMemoryFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePageableDeviceLocalMemoryFeaturesEXTBuilder {
    type Target = PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePerStageDescriptorSetFeaturesNV {
    type Target = PhysicalDevicePerStageDescriptorSetFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePerStageDescriptorSetFeaturesNV {
    type Builder = PhysicalDevicePerStageDescriptorSetFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDevicePerStageDescriptorSetFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePerStageDescriptorSetFeaturesNVBuilder {
    value: PhysicalDevicePerStageDescriptorSetFeaturesNV,
}

impl PhysicalDevicePerStageDescriptorSetFeaturesNVBuilder {
    #[inline]
    pub fn per_stage_descriptor_set(mut self, per_stage_descriptor_set: bool) -> Self {
        self.value.per_stage_descriptor_set = per_stage_descriptor_set as Bool32;
        self
    }

    #[inline]
    pub fn dynamic_pipeline_layout(mut self, dynamic_pipeline_layout: bool) -> Self {
        self.value.dynamic_pipeline_layout = dynamic_pipeline_layout as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePerStageDescriptorSetFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePerStageDescriptorSetFeaturesNVBuilder {
    type Target = PhysicalDevicePerStageDescriptorSetFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePerStageDescriptorSetFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePerStageDescriptorSetFeaturesNVBuilder {
    type Target = PhysicalDevicePerStageDescriptorSetFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePerformanceQueryFeaturesKHR {
    type Target = PhysicalDevicePerformanceQueryFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePerformanceQueryFeaturesKHR {
    type Builder = PhysicalDevicePerformanceQueryFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePerformanceQueryFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePerformanceQueryFeaturesKHRBuilder {
    value: PhysicalDevicePerformanceQueryFeaturesKHR,
}

impl PhysicalDevicePerformanceQueryFeaturesKHRBuilder {
    #[inline]
    pub fn performance_counter_query_pools(
        mut self,
        performance_counter_query_pools: bool,
    ) -> Self {
        self.value.performance_counter_query_pools = performance_counter_query_pools as Bool32;
        self
    }

    #[inline]
    pub fn performance_counter_multiple_query_pools(
        mut self,
        performance_counter_multiple_query_pools: bool,
    ) -> Self {
        self.value.performance_counter_multiple_query_pools =
            performance_counter_multiple_query_pools as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePerformanceQueryFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePerformanceQueryFeaturesKHRBuilder {
    type Target = PhysicalDevicePerformanceQueryFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePerformanceQueryFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePerformanceQueryFeaturesKHRBuilder {
    type Target = PhysicalDevicePerformanceQueryFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePerformanceQueryPropertiesKHR {
    type Target = PhysicalDevicePerformanceQueryPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePerformanceQueryPropertiesKHR {
    type Builder = PhysicalDevicePerformanceQueryPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePerformanceQueryPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePerformanceQueryPropertiesKHRBuilder {
    value: PhysicalDevicePerformanceQueryPropertiesKHR,
}

impl PhysicalDevicePerformanceQueryPropertiesKHRBuilder {
    #[inline]
    pub fn allow_command_buffer_query_copies(
        mut self,
        allow_command_buffer_query_copies: bool,
    ) -> Self {
        self.value.allow_command_buffer_query_copies = allow_command_buffer_query_copies as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePerformanceQueryPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePerformanceQueryPropertiesKHRBuilder {
    type Target = PhysicalDevicePerformanceQueryPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePerformanceQueryPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePerformanceQueryPropertiesKHRBuilder {
    type Target = PhysicalDevicePerformanceQueryPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineBinaryFeaturesKHR {
    type Target = PhysicalDevicePipelineBinaryFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelineBinaryFeaturesKHR {
    type Builder = PhysicalDevicePipelineBinaryFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePipelineBinaryFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelineBinaryFeaturesKHRBuilder {
    value: PhysicalDevicePipelineBinaryFeaturesKHR,
}

impl PhysicalDevicePipelineBinaryFeaturesKHRBuilder {
    #[inline]
    pub fn pipeline_binaries(mut self, pipeline_binaries: bool) -> Self {
        self.value.pipeline_binaries = pipeline_binaries as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelineBinaryFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelineBinaryFeaturesKHRBuilder {
    type Target = PhysicalDevicePipelineBinaryFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelineBinaryFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineBinaryFeaturesKHRBuilder {
    type Target = PhysicalDevicePipelineBinaryFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineBinaryPropertiesKHR {
    type Target = PhysicalDevicePipelineBinaryPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelineBinaryPropertiesKHR {
    type Builder = PhysicalDevicePipelineBinaryPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePipelineBinaryPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelineBinaryPropertiesKHRBuilder {
    value: PhysicalDevicePipelineBinaryPropertiesKHR,
}

impl PhysicalDevicePipelineBinaryPropertiesKHRBuilder {
    #[inline]
    pub fn pipeline_binary_internal_cache(mut self, pipeline_binary_internal_cache: bool) -> Self {
        self.value.pipeline_binary_internal_cache = pipeline_binary_internal_cache as Bool32;
        self
    }

    #[inline]
    pub fn pipeline_binary_internal_cache_control(
        mut self,
        pipeline_binary_internal_cache_control: bool,
    ) -> Self {
        self.value.pipeline_binary_internal_cache_control =
            pipeline_binary_internal_cache_control as Bool32;
        self
    }

    #[inline]
    pub fn pipeline_binary_prefers_internal_cache(
        mut self,
        pipeline_binary_prefers_internal_cache: bool,
    ) -> Self {
        self.value.pipeline_binary_prefers_internal_cache =
            pipeline_binary_prefers_internal_cache as Bool32;
        self
    }

    #[inline]
    pub fn pipeline_binary_precompiled_internal_cache(
        mut self,
        pipeline_binary_precompiled_internal_cache: bool,
    ) -> Self {
        self.value.pipeline_binary_precompiled_internal_cache =
            pipeline_binary_precompiled_internal_cache as Bool32;
        self
    }

    #[inline]
    pub fn pipeline_binary_compressed_data(
        mut self,
        pipeline_binary_compressed_data: bool,
    ) -> Self {
        self.value.pipeline_binary_compressed_data = pipeline_binary_compressed_data as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelineBinaryPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelineBinaryPropertiesKHRBuilder {
    type Target = PhysicalDevicePipelineBinaryPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelineBinaryPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineBinaryPropertiesKHRBuilder {
    type Target = PhysicalDevicePipelineBinaryPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineCreationCacheControlFeatures {
    type Target = PhysicalDevicePipelineCreationCacheControlFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelineCreationCacheControlFeatures {
    type Builder = PhysicalDevicePipelineCreationCacheControlFeaturesBuilder;
}

/// A builder for a [`PhysicalDevicePipelineCreationCacheControlFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelineCreationCacheControlFeaturesBuilder {
    value: PhysicalDevicePipelineCreationCacheControlFeatures,
}

impl PhysicalDevicePipelineCreationCacheControlFeaturesBuilder {
    #[inline]
    pub fn pipeline_creation_cache_control(
        mut self,
        pipeline_creation_cache_control: bool,
    ) -> Self {
        self.value.pipeline_creation_cache_control = pipeline_creation_cache_control as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelineCreationCacheControlFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelineCreationCacheControlFeaturesBuilder {
    type Target = PhysicalDevicePipelineCreationCacheControlFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelineCreationCacheControlFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineCreationCacheControlFeaturesBuilder {
    type Target = PhysicalDevicePipelineCreationCacheControlFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    type Target = PhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    type Builder = PhysicalDevicePipelineExecutablePropertiesFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePipelineExecutablePropertiesFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelineExecutablePropertiesFeaturesKHRBuilder {
    value: PhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
}

impl PhysicalDevicePipelineExecutablePropertiesFeaturesKHRBuilder {
    #[inline]
    pub fn pipeline_executable_info(mut self, pipeline_executable_info: bool) -> Self {
        self.value.pipeline_executable_info = pipeline_executable_info as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelineExecutablePropertiesFeaturesKHRBuilder {
    type Target = PhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelineExecutablePropertiesFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineExecutablePropertiesFeaturesKHRBuilder {
    type Target = PhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    type Target = PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    type Builder = PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTBuilder {
    value: PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT,
}

impl PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTBuilder {
    #[inline]
    pub fn pipeline_library_group_handles(mut self, pipeline_library_group_handles: bool) -> Self {
        self.value.pipeline_library_group_handles = pipeline_library_group_handles as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTBuilder {
    type Target = PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTBuilder {
    type Target = PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelinePropertiesFeaturesEXT {
    type Target = PhysicalDevicePipelinePropertiesFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelinePropertiesFeaturesEXT {
    type Builder = PhysicalDevicePipelinePropertiesFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePipelinePropertiesFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelinePropertiesFeaturesEXTBuilder {
    value: PhysicalDevicePipelinePropertiesFeaturesEXT,
}

impl PhysicalDevicePipelinePropertiesFeaturesEXTBuilder {
    #[inline]
    pub fn pipeline_properties_identifier(mut self, pipeline_properties_identifier: bool) -> Self {
        self.value.pipeline_properties_identifier = pipeline_properties_identifier as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelinePropertiesFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelinePropertiesFeaturesEXTBuilder {
    type Target = PhysicalDevicePipelinePropertiesFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelinePropertiesFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelinePropertiesFeaturesEXTBuilder {
    type Target = PhysicalDevicePipelinePropertiesFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineProtectedAccessFeaturesEXT {
    type Target = PhysicalDevicePipelineProtectedAccessFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelineProtectedAccessFeaturesEXT {
    type Builder = PhysicalDevicePipelineProtectedAccessFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePipelineProtectedAccessFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelineProtectedAccessFeaturesEXTBuilder {
    value: PhysicalDevicePipelineProtectedAccessFeaturesEXT,
}

impl PhysicalDevicePipelineProtectedAccessFeaturesEXTBuilder {
    #[inline]
    pub fn pipeline_protected_access(mut self, pipeline_protected_access: bool) -> Self {
        self.value.pipeline_protected_access = pipeline_protected_access as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelineProtectedAccessFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelineProtectedAccessFeaturesEXTBuilder {
    type Target = PhysicalDevicePipelineProtectedAccessFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelineProtectedAccessFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineProtectedAccessFeaturesEXTBuilder {
    type Target = PhysicalDevicePipelineProtectedAccessFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineRobustnessFeaturesEXT {
    type Target = PhysicalDevicePipelineRobustnessFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelineRobustnessFeaturesEXT {
    type Builder = PhysicalDevicePipelineRobustnessFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePipelineRobustnessFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelineRobustnessFeaturesEXTBuilder {
    value: PhysicalDevicePipelineRobustnessFeaturesEXT,
}

impl PhysicalDevicePipelineRobustnessFeaturesEXTBuilder {
    #[inline]
    pub fn pipeline_robustness(mut self, pipeline_robustness: bool) -> Self {
        self.value.pipeline_robustness = pipeline_robustness as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelineRobustnessFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelineRobustnessFeaturesEXTBuilder {
    type Target = PhysicalDevicePipelineRobustnessFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelineRobustnessFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineRobustnessFeaturesEXTBuilder {
    type Target = PhysicalDevicePipelineRobustnessFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineRobustnessPropertiesEXT {
    type Target = PhysicalDevicePipelineRobustnessPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePipelineRobustnessPropertiesEXT {
    type Builder = PhysicalDevicePipelineRobustnessPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePipelineRobustnessPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePipelineRobustnessPropertiesEXTBuilder {
    value: PhysicalDevicePipelineRobustnessPropertiesEXT,
}

impl PhysicalDevicePipelineRobustnessPropertiesEXTBuilder {
    #[inline]
    pub fn default_robustness_storage_buffers(
        mut self,
        default_robustness_storage_buffers: PipelineRobustnessBufferBehaviorEXT,
    ) -> Self {
        self.value.default_robustness_storage_buffers = default_robustness_storage_buffers;
        self
    }

    #[inline]
    pub fn default_robustness_uniform_buffers(
        mut self,
        default_robustness_uniform_buffers: PipelineRobustnessBufferBehaviorEXT,
    ) -> Self {
        self.value.default_robustness_uniform_buffers = default_robustness_uniform_buffers;
        self
    }

    #[inline]
    pub fn default_robustness_vertex_inputs(
        mut self,
        default_robustness_vertex_inputs: PipelineRobustnessBufferBehaviorEXT,
    ) -> Self {
        self.value.default_robustness_vertex_inputs = default_robustness_vertex_inputs;
        self
    }

    #[inline]
    pub fn default_robustness_images(
        mut self,
        default_robustness_images: PipelineRobustnessImageBehaviorEXT,
    ) -> Self {
        self.value.default_robustness_images = default_robustness_images;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePipelineRobustnessPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePipelineRobustnessPropertiesEXTBuilder {
    type Target = PhysicalDevicePipelineRobustnessPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePipelineRobustnessPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePipelineRobustnessPropertiesEXTBuilder {
    type Target = PhysicalDevicePipelineRobustnessPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePointClippingProperties {
    type Target = PhysicalDevicePointClippingProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePointClippingProperties {
    type Builder = PhysicalDevicePointClippingPropertiesBuilder;
}

/// A builder for a [`PhysicalDevicePointClippingProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePointClippingPropertiesBuilder {
    value: PhysicalDevicePointClippingProperties,
}

impl PhysicalDevicePointClippingPropertiesBuilder {
    #[inline]
    pub fn point_clipping_behavior(
        mut self,
        point_clipping_behavior: PointClippingBehavior,
    ) -> Self {
        self.value.point_clipping_behavior = point_clipping_behavior;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePointClippingProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePointClippingPropertiesBuilder {
    type Target = PhysicalDevicePointClippingProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePointClippingPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePointClippingPropertiesBuilder {
    type Target = PhysicalDevicePointClippingProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePortabilitySubsetFeaturesKHR {
    type Target = PhysicalDevicePortabilitySubsetFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePortabilitySubsetFeaturesKHR {
    type Builder = PhysicalDevicePortabilitySubsetFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePortabilitySubsetFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePortabilitySubsetFeaturesKHRBuilder {
    value: PhysicalDevicePortabilitySubsetFeaturesKHR,
}

impl PhysicalDevicePortabilitySubsetFeaturesKHRBuilder {
    #[inline]
    pub fn constant_alpha_color_blend_factors(
        mut self,
        constant_alpha_color_blend_factors: bool,
    ) -> Self {
        self.value.constant_alpha_color_blend_factors =
            constant_alpha_color_blend_factors as Bool32;
        self
    }

    #[inline]
    pub fn events(mut self, events: bool) -> Self {
        self.value.events = events as Bool32;
        self
    }

    #[inline]
    pub fn image_view_format_reinterpretation(
        mut self,
        image_view_format_reinterpretation: bool,
    ) -> Self {
        self.value.image_view_format_reinterpretation =
            image_view_format_reinterpretation as Bool32;
        self
    }

    #[inline]
    pub fn image_view_format_swizzle(mut self, image_view_format_swizzle: bool) -> Self {
        self.value.image_view_format_swizzle = image_view_format_swizzle as Bool32;
        self
    }

    #[inline]
    pub fn image_view_2d_on_3d_image(mut self, image_view_2d_on_3d_image: bool) -> Self {
        self.value.image_view_2d_on_3d_image = image_view_2d_on_3d_image as Bool32;
        self
    }

    #[inline]
    pub fn multisample_array_image(mut self, multisample_array_image: bool) -> Self {
        self.value.multisample_array_image = multisample_array_image as Bool32;
        self
    }

    #[inline]
    pub fn mutable_comparison_samplers(mut self, mutable_comparison_samplers: bool) -> Self {
        self.value.mutable_comparison_samplers = mutable_comparison_samplers as Bool32;
        self
    }

    #[inline]
    pub fn point_polygons(mut self, point_polygons: bool) -> Self {
        self.value.point_polygons = point_polygons as Bool32;
        self
    }

    #[inline]
    pub fn sampler_mip_lod_bias(mut self, sampler_mip_lod_bias: bool) -> Self {
        self.value.sampler_mip_lod_bias = sampler_mip_lod_bias as Bool32;
        self
    }

    #[inline]
    pub fn separate_stencil_mask_ref(mut self, separate_stencil_mask_ref: bool) -> Self {
        self.value.separate_stencil_mask_ref = separate_stencil_mask_ref as Bool32;
        self
    }

    #[inline]
    pub fn shader_sample_rate_interpolation_functions(
        mut self,
        shader_sample_rate_interpolation_functions: bool,
    ) -> Self {
        self.value.shader_sample_rate_interpolation_functions =
            shader_sample_rate_interpolation_functions as Bool32;
        self
    }

    #[inline]
    pub fn tessellation_isolines(mut self, tessellation_isolines: bool) -> Self {
        self.value.tessellation_isolines = tessellation_isolines as Bool32;
        self
    }

    #[inline]
    pub fn tessellation_point_mode(mut self, tessellation_point_mode: bool) -> Self {
        self.value.tessellation_point_mode = tessellation_point_mode as Bool32;
        self
    }

    #[inline]
    pub fn triangle_fans(mut self, triangle_fans: bool) -> Self {
        self.value.triangle_fans = triangle_fans as Bool32;
        self
    }

    #[inline]
    pub fn vertex_attribute_access_beyond_stride(
        mut self,
        vertex_attribute_access_beyond_stride: bool,
    ) -> Self {
        self.value.vertex_attribute_access_beyond_stride =
            vertex_attribute_access_beyond_stride as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePortabilitySubsetFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePortabilitySubsetFeaturesKHRBuilder {
    type Target = PhysicalDevicePortabilitySubsetFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePortabilitySubsetFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePortabilitySubsetFeaturesKHRBuilder {
    type Target = PhysicalDevicePortabilitySubsetFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePortabilitySubsetPropertiesKHR {
    type Target = PhysicalDevicePortabilitySubsetPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePortabilitySubsetPropertiesKHR {
    type Builder = PhysicalDevicePortabilitySubsetPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePortabilitySubsetPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePortabilitySubsetPropertiesKHRBuilder {
    value: PhysicalDevicePortabilitySubsetPropertiesKHR,
}

impl PhysicalDevicePortabilitySubsetPropertiesKHRBuilder {
    #[inline]
    pub fn min_vertex_input_binding_stride_alignment(
        mut self,
        min_vertex_input_binding_stride_alignment: u32,
    ) -> Self {
        self.value.min_vertex_input_binding_stride_alignment =
            min_vertex_input_binding_stride_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePortabilitySubsetPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePortabilitySubsetPropertiesKHRBuilder {
    type Target = PhysicalDevicePortabilitySubsetPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePortabilitySubsetPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePortabilitySubsetPropertiesKHRBuilder {
    type Target = PhysicalDevicePortabilitySubsetPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePresentBarrierFeaturesNV {
    type Target = PhysicalDevicePresentBarrierFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePresentBarrierFeaturesNV {
    type Builder = PhysicalDevicePresentBarrierFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDevicePresentBarrierFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePresentBarrierFeaturesNVBuilder {
    value: PhysicalDevicePresentBarrierFeaturesNV,
}

impl PhysicalDevicePresentBarrierFeaturesNVBuilder {
    #[inline]
    pub fn present_barrier(mut self, present_barrier: bool) -> Self {
        self.value.present_barrier = present_barrier as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePresentBarrierFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePresentBarrierFeaturesNVBuilder {
    type Target = PhysicalDevicePresentBarrierFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePresentBarrierFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePresentBarrierFeaturesNVBuilder {
    type Target = PhysicalDevicePresentBarrierFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePresentIdFeaturesKHR {
    type Target = PhysicalDevicePresentIdFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePresentIdFeaturesKHR {
    type Builder = PhysicalDevicePresentIdFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePresentIdFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePresentIdFeaturesKHRBuilder {
    value: PhysicalDevicePresentIdFeaturesKHR,
}

impl PhysicalDevicePresentIdFeaturesKHRBuilder {
    #[inline]
    pub fn present_id(mut self, present_id: bool) -> Self {
        self.value.present_id = present_id as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePresentIdFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePresentIdFeaturesKHRBuilder {
    type Target = PhysicalDevicePresentIdFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePresentIdFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePresentIdFeaturesKHRBuilder {
    type Target = PhysicalDevicePresentIdFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePresentWaitFeaturesKHR {
    type Target = PhysicalDevicePresentWaitFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePresentWaitFeaturesKHR {
    type Builder = PhysicalDevicePresentWaitFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePresentWaitFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePresentWaitFeaturesKHRBuilder {
    value: PhysicalDevicePresentWaitFeaturesKHR,
}

impl PhysicalDevicePresentWaitFeaturesKHRBuilder {
    #[inline]
    pub fn present_wait(mut self, present_wait: bool) -> Self {
        self.value.present_wait = present_wait as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePresentWaitFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePresentWaitFeaturesKHRBuilder {
    type Target = PhysicalDevicePresentWaitFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePresentWaitFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePresentWaitFeaturesKHRBuilder {
    type Target = PhysicalDevicePresentWaitFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    type Target = PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    type Builder = PhysicalDevicePrimitiveTopologyListRestartFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePrimitiveTopologyListRestartFeaturesEXTBuilder {
    value: PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
}

impl PhysicalDevicePrimitiveTopologyListRestartFeaturesEXTBuilder {
    #[inline]
    pub fn primitive_topology_list_restart(
        mut self,
        primitive_topology_list_restart: bool,
    ) -> Self {
        self.value.primitive_topology_list_restart = primitive_topology_list_restart as Bool32;
        self
    }

    #[inline]
    pub fn primitive_topology_patch_list_restart(
        mut self,
        primitive_topology_patch_list_restart: bool,
    ) -> Self {
        self.value.primitive_topology_patch_list_restart =
            primitive_topology_patch_list_restart as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePrimitiveTopologyListRestartFeaturesEXTBuilder {
    type Target = PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePrimitiveTopologyListRestartFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePrimitiveTopologyListRestartFeaturesEXTBuilder {
    type Target = PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    type Target = PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    type Builder = PhysicalDevicePrimitivesGeneratedQueryFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePrimitivesGeneratedQueryFeaturesEXTBuilder {
    value: PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT,
}

impl PhysicalDevicePrimitivesGeneratedQueryFeaturesEXTBuilder {
    #[inline]
    pub fn primitives_generated_query(mut self, primitives_generated_query: bool) -> Self {
        self.value.primitives_generated_query = primitives_generated_query as Bool32;
        self
    }

    #[inline]
    pub fn primitives_generated_query_with_rasterizer_discard(
        mut self,
        primitives_generated_query_with_rasterizer_discard: bool,
    ) -> Self {
        self.value
            .primitives_generated_query_with_rasterizer_discard =
            primitives_generated_query_with_rasterizer_discard as Bool32;
        self
    }

    #[inline]
    pub fn primitives_generated_query_with_non_zero_streams(
        mut self,
        primitives_generated_query_with_non_zero_streams: bool,
    ) -> Self {
        self.value.primitives_generated_query_with_non_zero_streams =
            primitives_generated_query_with_non_zero_streams as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePrimitivesGeneratedQueryFeaturesEXTBuilder {
    type Target = PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePrimitivesGeneratedQueryFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePrimitivesGeneratedQueryFeaturesEXTBuilder {
    type Target = PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePrivateDataFeatures {
    type Target = PhysicalDevicePrivateDataFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePrivateDataFeatures {
    type Builder = PhysicalDevicePrivateDataFeaturesBuilder;
}

/// A builder for a [`PhysicalDevicePrivateDataFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePrivateDataFeaturesBuilder {
    value: PhysicalDevicePrivateDataFeatures,
}

impl PhysicalDevicePrivateDataFeaturesBuilder {
    #[inline]
    pub fn private_data(mut self, private_data: bool) -> Self {
        self.value.private_data = private_data as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePrivateDataFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePrivateDataFeaturesBuilder {
    type Target = PhysicalDevicePrivateDataFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePrivateDataFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePrivateDataFeaturesBuilder {
    type Target = PhysicalDevicePrivateDataFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceProperties {
    type Target = PhysicalDeviceProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceProperties {
    type Builder = PhysicalDevicePropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePropertiesBuilder {
    value: PhysicalDeviceProperties,
}

impl PhysicalDevicePropertiesBuilder {
    #[inline]
    pub fn api_version(mut self, api_version: u32) -> Self {
        self.value.api_version = api_version;
        self
    }

    #[inline]
    pub fn driver_version(mut self, driver_version: u32) -> Self {
        self.value.driver_version = driver_version;
        self
    }

    #[inline]
    pub fn vendor_id(mut self, vendor_id: u32) -> Self {
        self.value.vendor_id = vendor_id;
        self
    }

    #[inline]
    pub fn device_id(mut self, device_id: u32) -> Self {
        self.value.device_id = device_id;
        self
    }

    #[inline]
    pub fn device_type(mut self, device_type: PhysicalDeviceType) -> Self {
        self.value.device_type = device_type;
        self
    }

    #[inline]
    pub fn device_name(
        mut self,
        device_name: impl Into<StringArray<MAX_PHYSICAL_DEVICE_NAME_SIZE>>,
    ) -> Self {
        self.value.device_name = device_name.into();
        self
    }

    #[inline]
    pub fn pipeline_cache_uuid(
        mut self,
        pipeline_cache_uuid: impl Into<ByteArray<UUID_SIZE>>,
    ) -> Self {
        self.value.pipeline_cache_uuid = pipeline_cache_uuid.into();
        self
    }

    #[inline]
    pub fn limits(mut self, limits: impl Cast<Target = PhysicalDeviceLimits>) -> Self {
        self.value.limits = limits.into();
        self
    }

    #[inline]
    pub fn sparse_properties(
        mut self,
        sparse_properties: impl Cast<Target = PhysicalDeviceSparseProperties>,
    ) -> Self {
        self.value.sparse_properties = sparse_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePropertiesBuilder {
    type Target = PhysicalDeviceProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePropertiesBuilder {
    type Target = PhysicalDeviceProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceProperties2`].
pub unsafe trait ExtendsPhysicalDeviceProperties2: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceAccelerationStructurePropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceBlendOperationAdvancedPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceClusterCullingShaderPropertiesHUAWEI
{
}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceComputeShaderDerivativesPropertiesKHR
{
}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceConservativeRasterizationPropertiesEXT
{
}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceCooperativeMatrixPropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceCooperativeMatrixPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceCopyMemoryIndirectPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceCudaKernelLaunchPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceCustomBorderColorPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceDepthStencilResolveProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT
{
}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceDescriptorBufferPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceDescriptorIndexingProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceDiscardRectanglePropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceDisplacementMicromapPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceDriverProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceDrmPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceExtendedDynamicState3PropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceExtendedSparseAddressSpacePropertiesNV
{
}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceExternalFormatResolvePropertiesANDROID
{
}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceExternalMemoryHostPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceFloatControlsProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceFragmentDensityMap2PropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
{
}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceFragmentDensityMapPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceFragmentShaderBarycentricPropertiesKHR
{
}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceFragmentShadingRateEnumsPropertiesNV
{
}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceFragmentShadingRatePropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT
{
}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceHostImageCopyPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceIDProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceImageAlignmentControlPropertiesMESA {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceImageProcessing2PropertiesQCOM {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceImageProcessingPropertiesQCOM {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceInlineUniformBlockProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceLayeredApiPropertiesListKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceLayeredDriverPropertiesMSFT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceLegacyVertexAttributesPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceLineRasterizationPropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMaintenance3Properties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMaintenance4Properties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMaintenance5PropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMaintenance6PropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMaintenance7PropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMapMemoryPlacedPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMemoryDecompressionPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMeshShaderPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMeshShaderPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMultiDrawPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
{
}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceMultiviewProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceNestedCommandBufferPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceOpacityMicromapPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceOpticalFlowPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDevicePCIBusInfoPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDevicePerformanceQueryPropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDevicePipelineBinaryPropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDevicePipelineRobustnessPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDevicePointClippingProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDevicePortabilitySubsetPropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceProtectedMemoryProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceProvokingVertexPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDevicePushDescriptorPropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2
    for PhysicalDeviceRayTracingInvocationReorderPropertiesNV
{
}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceRayTracingPipelinePropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceRayTracingPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceRenderPassStripedPropertiesARM {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceRobustness2PropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceSampleLocationsPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceSamplerFilterMinmaxProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceSchedulingControlsPropertiesARM {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderCoreBuiltinsPropertiesARM {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderCoreProperties2AMD {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderCorePropertiesAMD {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderCorePropertiesARM {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderEnqueuePropertiesAMDX {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderIntegerDotProductProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderModuleIdentifierPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderObjectPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderSMBuiltinsPropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShaderTileImagePropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceShadingRateImagePropertiesNV {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceSubgroupProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceSubgroupSizeControlProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceSubpassShadingPropertiesHUAWEI {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceTexelBufferAlignmentProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceTimelineSemaphoreProperties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceTransformFeedbackPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceVertexAttributeDivisorPropertiesEXT {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceVertexAttributeDivisorPropertiesKHR {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceVulkan11Properties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceVulkan12Properties {}
unsafe impl ExtendsPhysicalDeviceProperties2 for PhysicalDeviceVulkan13Properties {}

unsafe impl Cast for PhysicalDeviceProperties2 {
    type Target = PhysicalDeviceProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceProperties2 {
    type Builder = PhysicalDeviceProperties2Builder<'b>;
}

/// A builder for a [`PhysicalDeviceProperties2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceProperties2Builder<'b> {
    value: PhysicalDeviceProperties2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceProperties2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceProperties2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn properties(mut self, properties: impl Cast<Target = PhysicalDeviceProperties>) -> Self {
        self.value.properties = properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceProperties2 {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceProperties2Builder<'b> {
    type Target = PhysicalDeviceProperties2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceProperties2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceProperties2Builder<'b> {
    type Target = PhysicalDeviceProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceProtectedMemoryFeatures {
    type Target = PhysicalDeviceProtectedMemoryFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceProtectedMemoryFeatures {
    type Builder = PhysicalDeviceProtectedMemoryFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceProtectedMemoryFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceProtectedMemoryFeaturesBuilder {
    value: PhysicalDeviceProtectedMemoryFeatures,
}

impl PhysicalDeviceProtectedMemoryFeaturesBuilder {
    #[inline]
    pub fn protected_memory(mut self, protected_memory: bool) -> Self {
        self.value.protected_memory = protected_memory as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceProtectedMemoryFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceProtectedMemoryFeaturesBuilder {
    type Target = PhysicalDeviceProtectedMemoryFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceProtectedMemoryFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceProtectedMemoryFeaturesBuilder {
    type Target = PhysicalDeviceProtectedMemoryFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceProtectedMemoryProperties {
    type Target = PhysicalDeviceProtectedMemoryProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceProtectedMemoryProperties {
    type Builder = PhysicalDeviceProtectedMemoryPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceProtectedMemoryProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceProtectedMemoryPropertiesBuilder {
    value: PhysicalDeviceProtectedMemoryProperties,
}

impl PhysicalDeviceProtectedMemoryPropertiesBuilder {
    #[inline]
    pub fn protected_no_fault(mut self, protected_no_fault: bool) -> Self {
        self.value.protected_no_fault = protected_no_fault as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceProtectedMemoryProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceProtectedMemoryPropertiesBuilder {
    type Target = PhysicalDeviceProtectedMemoryProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceProtectedMemoryPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceProtectedMemoryPropertiesBuilder {
    type Target = PhysicalDeviceProtectedMemoryProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceProvokingVertexFeaturesEXT {
    type Target = PhysicalDeviceProvokingVertexFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceProvokingVertexFeaturesEXT {
    type Builder = PhysicalDeviceProvokingVertexFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceProvokingVertexFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceProvokingVertexFeaturesEXTBuilder {
    value: PhysicalDeviceProvokingVertexFeaturesEXT,
}

impl PhysicalDeviceProvokingVertexFeaturesEXTBuilder {
    #[inline]
    pub fn provoking_vertex_last(mut self, provoking_vertex_last: bool) -> Self {
        self.value.provoking_vertex_last = provoking_vertex_last as Bool32;
        self
    }

    #[inline]
    pub fn transform_feedback_preserves_provoking_vertex(
        mut self,
        transform_feedback_preserves_provoking_vertex: bool,
    ) -> Self {
        self.value.transform_feedback_preserves_provoking_vertex =
            transform_feedback_preserves_provoking_vertex as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceProvokingVertexFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceProvokingVertexFeaturesEXTBuilder {
    type Target = PhysicalDeviceProvokingVertexFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceProvokingVertexFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceProvokingVertexFeaturesEXTBuilder {
    type Target = PhysicalDeviceProvokingVertexFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceProvokingVertexPropertiesEXT {
    type Target = PhysicalDeviceProvokingVertexPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceProvokingVertexPropertiesEXT {
    type Builder = PhysicalDeviceProvokingVertexPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceProvokingVertexPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceProvokingVertexPropertiesEXTBuilder {
    value: PhysicalDeviceProvokingVertexPropertiesEXT,
}

impl PhysicalDeviceProvokingVertexPropertiesEXTBuilder {
    #[inline]
    pub fn provoking_vertex_mode_per_pipeline(
        mut self,
        provoking_vertex_mode_per_pipeline: bool,
    ) -> Self {
        self.value.provoking_vertex_mode_per_pipeline =
            provoking_vertex_mode_per_pipeline as Bool32;
        self
    }

    #[inline]
    pub fn transform_feedback_preserves_triangle_fan_provoking_vertex(
        mut self,
        transform_feedback_preserves_triangle_fan_provoking_vertex: bool,
    ) -> Self {
        self.value
            .transform_feedback_preserves_triangle_fan_provoking_vertex =
            transform_feedback_preserves_triangle_fan_provoking_vertex as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceProvokingVertexPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceProvokingVertexPropertiesEXTBuilder {
    type Target = PhysicalDeviceProvokingVertexPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceProvokingVertexPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceProvokingVertexPropertiesEXTBuilder {
    type Target = PhysicalDeviceProvokingVertexPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDevicePushDescriptorPropertiesKHR {
    type Target = PhysicalDevicePushDescriptorPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDevicePushDescriptorPropertiesKHR {
    type Builder = PhysicalDevicePushDescriptorPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDevicePushDescriptorPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDevicePushDescriptorPropertiesKHRBuilder {
    value: PhysicalDevicePushDescriptorPropertiesKHR,
}

impl PhysicalDevicePushDescriptorPropertiesKHRBuilder {
    #[inline]
    pub fn max_push_descriptors(mut self, max_push_descriptors: u32) -> Self {
        self.value.max_push_descriptors = max_push_descriptors;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDevicePushDescriptorPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDevicePushDescriptorPropertiesKHRBuilder {
    type Target = PhysicalDevicePushDescriptorPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDevicePushDescriptorPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDevicePushDescriptorPropertiesKHRBuilder {
    type Target = PhysicalDevicePushDescriptorPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    type Target = PhysicalDeviceRGBA10X6FormatsFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    type Builder = PhysicalDeviceRGBA10X6FormatsFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceRGBA10X6FormatsFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRGBA10X6FormatsFeaturesEXTBuilder {
    value: PhysicalDeviceRGBA10X6FormatsFeaturesEXT,
}

impl PhysicalDeviceRGBA10X6FormatsFeaturesEXTBuilder {
    #[inline]
    pub fn format_rgba10x6_without_y_cb_cr_sampler(
        mut self,
        format_rgba10x6_without_y_cb_cr_sampler: bool,
    ) -> Self {
        self.value.format_rgba10x6_without_y_cb_cr_sampler =
            format_rgba10x6_without_y_cb_cr_sampler as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRGBA10X6FormatsFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRGBA10X6FormatsFeaturesEXTBuilder {
    type Target = PhysicalDeviceRGBA10X6FormatsFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRGBA10X6FormatsFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRGBA10X6FormatsFeaturesEXTBuilder {
    type Target = PhysicalDeviceRGBA10X6FormatsFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    type Target = PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    type Builder = PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTBuilder {
    value: PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT,
}

impl PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTBuilder {
    #[inline]
    pub fn rasterization_order_color_attachment_access(
        mut self,
        rasterization_order_color_attachment_access: bool,
    ) -> Self {
        self.value.rasterization_order_color_attachment_access =
            rasterization_order_color_attachment_access as Bool32;
        self
    }

    #[inline]
    pub fn rasterization_order_depth_attachment_access(
        mut self,
        rasterization_order_depth_attachment_access: bool,
    ) -> Self {
        self.value.rasterization_order_depth_attachment_access =
            rasterization_order_depth_attachment_access as Bool32;
        self
    }

    #[inline]
    pub fn rasterization_order_stencil_attachment_access(
        mut self,
        rasterization_order_stencil_attachment_access: bool,
    ) -> Self {
        self.value.rasterization_order_stencil_attachment_access =
            rasterization_order_stencil_attachment_access as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTBuilder {
    type Target = PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTBuilder {
    type Target = PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRawAccessChainsFeaturesNV {
    type Target = PhysicalDeviceRawAccessChainsFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRawAccessChainsFeaturesNV {
    type Builder = PhysicalDeviceRawAccessChainsFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceRawAccessChainsFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRawAccessChainsFeaturesNVBuilder {
    value: PhysicalDeviceRawAccessChainsFeaturesNV,
}

impl PhysicalDeviceRawAccessChainsFeaturesNVBuilder {
    #[inline]
    pub fn shader_raw_access_chains(mut self, shader_raw_access_chains: bool) -> Self {
        self.value.shader_raw_access_chains = shader_raw_access_chains as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRawAccessChainsFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRawAccessChainsFeaturesNVBuilder {
    type Target = PhysicalDeviceRawAccessChainsFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRawAccessChainsFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRawAccessChainsFeaturesNVBuilder {
    type Target = PhysicalDeviceRawAccessChainsFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayQueryFeaturesKHR {
    type Target = PhysicalDeviceRayQueryFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayQueryFeaturesKHR {
    type Builder = PhysicalDeviceRayQueryFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceRayQueryFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayQueryFeaturesKHRBuilder {
    value: PhysicalDeviceRayQueryFeaturesKHR,
}

impl PhysicalDeviceRayQueryFeaturesKHRBuilder {
    #[inline]
    pub fn ray_query(mut self, ray_query: bool) -> Self {
        self.value.ray_query = ray_query as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayQueryFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayQueryFeaturesKHRBuilder {
    type Target = PhysicalDeviceRayQueryFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayQueryFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayQueryFeaturesKHRBuilder {
    type Target = PhysicalDeviceRayQueryFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    type Target = PhysicalDeviceRayTracingInvocationReorderFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    type Builder = PhysicalDeviceRayTracingInvocationReorderFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingInvocationReorderFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingInvocationReorderFeaturesNVBuilder {
    value: PhysicalDeviceRayTracingInvocationReorderFeaturesNV,
}

impl PhysicalDeviceRayTracingInvocationReorderFeaturesNVBuilder {
    #[inline]
    pub fn ray_tracing_invocation_reorder(mut self, ray_tracing_invocation_reorder: bool) -> Self {
        self.value.ray_tracing_invocation_reorder = ray_tracing_invocation_reorder as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingInvocationReorderFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingInvocationReorderFeaturesNVBuilder {
    type Target = PhysicalDeviceRayTracingInvocationReorderFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingInvocationReorderFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingInvocationReorderFeaturesNVBuilder {
    type Target = PhysicalDeviceRayTracingInvocationReorderFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    type Target = PhysicalDeviceRayTracingInvocationReorderPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    type Builder = PhysicalDeviceRayTracingInvocationReorderPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingInvocationReorderPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingInvocationReorderPropertiesNVBuilder {
    value: PhysicalDeviceRayTracingInvocationReorderPropertiesNV,
}

impl PhysicalDeviceRayTracingInvocationReorderPropertiesNVBuilder {
    #[inline]
    pub fn ray_tracing_invocation_reorder_reordering_hint(
        mut self,
        ray_tracing_invocation_reorder_reordering_hint: RayTracingInvocationReorderModeNV,
    ) -> Self {
        self.value.ray_tracing_invocation_reorder_reordering_hint =
            ray_tracing_invocation_reorder_reordering_hint;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingInvocationReorderPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingInvocationReorderPropertiesNVBuilder {
    type Target = PhysicalDeviceRayTracingInvocationReorderPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingInvocationReorderPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingInvocationReorderPropertiesNVBuilder {
    type Target = PhysicalDeviceRayTracingInvocationReorderPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    type Target = PhysicalDeviceRayTracingMaintenance1FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    type Builder = PhysicalDeviceRayTracingMaintenance1FeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingMaintenance1FeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingMaintenance1FeaturesKHRBuilder {
    value: PhysicalDeviceRayTracingMaintenance1FeaturesKHR,
}

impl PhysicalDeviceRayTracingMaintenance1FeaturesKHRBuilder {
    #[inline]
    pub fn ray_tracing_maintenance1(mut self, ray_tracing_maintenance1: bool) -> Self {
        self.value.ray_tracing_maintenance1 = ray_tracing_maintenance1 as Bool32;
        self
    }

    #[inline]
    pub fn ray_tracing_pipeline_trace_rays_indirect2(
        mut self,
        ray_tracing_pipeline_trace_rays_indirect2: bool,
    ) -> Self {
        self.value.ray_tracing_pipeline_trace_rays_indirect2 =
            ray_tracing_pipeline_trace_rays_indirect2 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingMaintenance1FeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingMaintenance1FeaturesKHRBuilder {
    type Target = PhysicalDeviceRayTracingMaintenance1FeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingMaintenance1FeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingMaintenance1FeaturesKHRBuilder {
    type Target = PhysicalDeviceRayTracingMaintenance1FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingMotionBlurFeaturesNV {
    type Target = PhysicalDeviceRayTracingMotionBlurFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingMotionBlurFeaturesNV {
    type Builder = PhysicalDeviceRayTracingMotionBlurFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingMotionBlurFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingMotionBlurFeaturesNVBuilder {
    value: PhysicalDeviceRayTracingMotionBlurFeaturesNV,
}

impl PhysicalDeviceRayTracingMotionBlurFeaturesNVBuilder {
    #[inline]
    pub fn ray_tracing_motion_blur(mut self, ray_tracing_motion_blur: bool) -> Self {
        self.value.ray_tracing_motion_blur = ray_tracing_motion_blur as Bool32;
        self
    }

    #[inline]
    pub fn ray_tracing_motion_blur_pipeline_trace_rays_indirect(
        mut self,
        ray_tracing_motion_blur_pipeline_trace_rays_indirect: bool,
    ) -> Self {
        self.value
            .ray_tracing_motion_blur_pipeline_trace_rays_indirect =
            ray_tracing_motion_blur_pipeline_trace_rays_indirect as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingMotionBlurFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingMotionBlurFeaturesNVBuilder {
    type Target = PhysicalDeviceRayTracingMotionBlurFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingMotionBlurFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingMotionBlurFeaturesNVBuilder {
    type Target = PhysicalDeviceRayTracingMotionBlurFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingPipelineFeaturesKHR {
    type Target = PhysicalDeviceRayTracingPipelineFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingPipelineFeaturesKHR {
    type Builder = PhysicalDeviceRayTracingPipelineFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingPipelineFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingPipelineFeaturesKHRBuilder {
    value: PhysicalDeviceRayTracingPipelineFeaturesKHR,
}

impl PhysicalDeviceRayTracingPipelineFeaturesKHRBuilder {
    #[inline]
    pub fn ray_tracing_pipeline(mut self, ray_tracing_pipeline: bool) -> Self {
        self.value.ray_tracing_pipeline = ray_tracing_pipeline as Bool32;
        self
    }

    #[inline]
    pub fn ray_tracing_pipeline_shader_group_handle_capture_replay(
        mut self,
        ray_tracing_pipeline_shader_group_handle_capture_replay: bool,
    ) -> Self {
        self.value
            .ray_tracing_pipeline_shader_group_handle_capture_replay =
            ray_tracing_pipeline_shader_group_handle_capture_replay as Bool32;
        self
    }

    #[inline]
    pub fn ray_tracing_pipeline_shader_group_handle_capture_replay_mixed(
        mut self,
        ray_tracing_pipeline_shader_group_handle_capture_replay_mixed: bool,
    ) -> Self {
        self.value
            .ray_tracing_pipeline_shader_group_handle_capture_replay_mixed =
            ray_tracing_pipeline_shader_group_handle_capture_replay_mixed as Bool32;
        self
    }

    #[inline]
    pub fn ray_tracing_pipeline_trace_rays_indirect(
        mut self,
        ray_tracing_pipeline_trace_rays_indirect: bool,
    ) -> Self {
        self.value.ray_tracing_pipeline_trace_rays_indirect =
            ray_tracing_pipeline_trace_rays_indirect as Bool32;
        self
    }

    #[inline]
    pub fn ray_traversal_primitive_culling(
        mut self,
        ray_traversal_primitive_culling: bool,
    ) -> Self {
        self.value.ray_traversal_primitive_culling = ray_traversal_primitive_culling as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingPipelineFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingPipelineFeaturesKHRBuilder {
    type Target = PhysicalDeviceRayTracingPipelineFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingPipelineFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingPipelineFeaturesKHRBuilder {
    type Target = PhysicalDeviceRayTracingPipelineFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingPipelinePropertiesKHR {
    type Target = PhysicalDeviceRayTracingPipelinePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingPipelinePropertiesKHR {
    type Builder = PhysicalDeviceRayTracingPipelinePropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingPipelinePropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingPipelinePropertiesKHRBuilder {
    value: PhysicalDeviceRayTracingPipelinePropertiesKHR,
}

impl PhysicalDeviceRayTracingPipelinePropertiesKHRBuilder {
    #[inline]
    pub fn shader_group_handle_size(mut self, shader_group_handle_size: u32) -> Self {
        self.value.shader_group_handle_size = shader_group_handle_size;
        self
    }

    #[inline]
    pub fn max_ray_recursion_depth(mut self, max_ray_recursion_depth: u32) -> Self {
        self.value.max_ray_recursion_depth = max_ray_recursion_depth;
        self
    }

    #[inline]
    pub fn max_shader_group_stride(mut self, max_shader_group_stride: u32) -> Self {
        self.value.max_shader_group_stride = max_shader_group_stride;
        self
    }

    #[inline]
    pub fn shader_group_base_alignment(mut self, shader_group_base_alignment: u32) -> Self {
        self.value.shader_group_base_alignment = shader_group_base_alignment;
        self
    }

    #[inline]
    pub fn shader_group_handle_capture_replay_size(
        mut self,
        shader_group_handle_capture_replay_size: u32,
    ) -> Self {
        self.value.shader_group_handle_capture_replay_size =
            shader_group_handle_capture_replay_size;
        self
    }

    #[inline]
    pub fn max_ray_dispatch_invocation_count(
        mut self,
        max_ray_dispatch_invocation_count: u32,
    ) -> Self {
        self.value.max_ray_dispatch_invocation_count = max_ray_dispatch_invocation_count;
        self
    }

    #[inline]
    pub fn shader_group_handle_alignment(mut self, shader_group_handle_alignment: u32) -> Self {
        self.value.shader_group_handle_alignment = shader_group_handle_alignment;
        self
    }

    #[inline]
    pub fn max_ray_hit_attribute_size(mut self, max_ray_hit_attribute_size: u32) -> Self {
        self.value.max_ray_hit_attribute_size = max_ray_hit_attribute_size;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingPipelinePropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingPipelinePropertiesKHRBuilder {
    type Target = PhysicalDeviceRayTracingPipelinePropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingPipelinePropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingPipelinePropertiesKHRBuilder {
    type Target = PhysicalDeviceRayTracingPipelinePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingPositionFetchFeaturesKHR {
    type Target = PhysicalDeviceRayTracingPositionFetchFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingPositionFetchFeaturesKHR {
    type Builder = PhysicalDeviceRayTracingPositionFetchFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingPositionFetchFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingPositionFetchFeaturesKHRBuilder {
    value: PhysicalDeviceRayTracingPositionFetchFeaturesKHR,
}

impl PhysicalDeviceRayTracingPositionFetchFeaturesKHRBuilder {
    #[inline]
    pub fn ray_tracing_position_fetch(mut self, ray_tracing_position_fetch: bool) -> Self {
        self.value.ray_tracing_position_fetch = ray_tracing_position_fetch as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingPositionFetchFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingPositionFetchFeaturesKHRBuilder {
    type Target = PhysicalDeviceRayTracingPositionFetchFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingPositionFetchFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingPositionFetchFeaturesKHRBuilder {
    type Target = PhysicalDeviceRayTracingPositionFetchFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingPropertiesNV {
    type Target = PhysicalDeviceRayTracingPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingPropertiesNV {
    type Builder = PhysicalDeviceRayTracingPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingPropertiesNVBuilder {
    value: PhysicalDeviceRayTracingPropertiesNV,
}

impl PhysicalDeviceRayTracingPropertiesNVBuilder {
    #[inline]
    pub fn shader_group_handle_size(mut self, shader_group_handle_size: u32) -> Self {
        self.value.shader_group_handle_size = shader_group_handle_size;
        self
    }

    #[inline]
    pub fn max_recursion_depth(mut self, max_recursion_depth: u32) -> Self {
        self.value.max_recursion_depth = max_recursion_depth;
        self
    }

    #[inline]
    pub fn max_shader_group_stride(mut self, max_shader_group_stride: u32) -> Self {
        self.value.max_shader_group_stride = max_shader_group_stride;
        self
    }

    #[inline]
    pub fn shader_group_base_alignment(mut self, shader_group_base_alignment: u32) -> Self {
        self.value.shader_group_base_alignment = shader_group_base_alignment;
        self
    }

    #[inline]
    pub fn max_geometry_count(mut self, max_geometry_count: u64) -> Self {
        self.value.max_geometry_count = max_geometry_count;
        self
    }

    #[inline]
    pub fn max_instance_count(mut self, max_instance_count: u64) -> Self {
        self.value.max_instance_count = max_instance_count;
        self
    }

    #[inline]
    pub fn max_triangle_count(mut self, max_triangle_count: u64) -> Self {
        self.value.max_triangle_count = max_triangle_count;
        self
    }

    #[inline]
    pub fn max_descriptor_set_acceleration_structures(
        mut self,
        max_descriptor_set_acceleration_structures: u32,
    ) -> Self {
        self.value.max_descriptor_set_acceleration_structures =
            max_descriptor_set_acceleration_structures;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingPropertiesNVBuilder {
    type Target = PhysicalDeviceRayTracingPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingPropertiesNVBuilder {
    type Target = PhysicalDeviceRayTracingPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingValidationFeaturesNV {
    type Target = PhysicalDeviceRayTracingValidationFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRayTracingValidationFeaturesNV {
    type Builder = PhysicalDeviceRayTracingValidationFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceRayTracingValidationFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRayTracingValidationFeaturesNVBuilder {
    value: PhysicalDeviceRayTracingValidationFeaturesNV,
}

impl PhysicalDeviceRayTracingValidationFeaturesNVBuilder {
    #[inline]
    pub fn ray_tracing_validation(mut self, ray_tracing_validation: bool) -> Self {
        self.value.ray_tracing_validation = ray_tracing_validation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRayTracingValidationFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRayTracingValidationFeaturesNVBuilder {
    type Target = PhysicalDeviceRayTracingValidationFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRayTracingValidationFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRayTracingValidationFeaturesNVBuilder {
    type Target = PhysicalDeviceRayTracingValidationFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
    type Target = PhysicalDeviceRelaxedLineRasterizationFeaturesIMG;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
    type Builder = PhysicalDeviceRelaxedLineRasterizationFeaturesIMGBuilder;
}

/// A builder for a [`PhysicalDeviceRelaxedLineRasterizationFeaturesIMG`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRelaxedLineRasterizationFeaturesIMGBuilder {
    value: PhysicalDeviceRelaxedLineRasterizationFeaturesIMG,
}

impl PhysicalDeviceRelaxedLineRasterizationFeaturesIMGBuilder {
    #[inline]
    pub fn relaxed_line_rasterization(mut self, relaxed_line_rasterization: bool) -> Self {
        self.value.relaxed_line_rasterization = relaxed_line_rasterization as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRelaxedLineRasterizationFeaturesIMGBuilder {
    type Target = PhysicalDeviceRelaxedLineRasterizationFeaturesIMG;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRelaxedLineRasterizationFeaturesIMGBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRelaxedLineRasterizationFeaturesIMGBuilder {
    type Target = PhysicalDeviceRelaxedLineRasterizationFeaturesIMG;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRenderPassStripedFeaturesARM {
    type Target = PhysicalDeviceRenderPassStripedFeaturesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRenderPassStripedFeaturesARM {
    type Builder = PhysicalDeviceRenderPassStripedFeaturesARMBuilder;
}

/// A builder for a [`PhysicalDeviceRenderPassStripedFeaturesARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRenderPassStripedFeaturesARMBuilder {
    value: PhysicalDeviceRenderPassStripedFeaturesARM,
}

impl PhysicalDeviceRenderPassStripedFeaturesARMBuilder {
    #[inline]
    pub fn render_pass_striped(mut self, render_pass_striped: bool) -> Self {
        self.value.render_pass_striped = render_pass_striped as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRenderPassStripedFeaturesARM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRenderPassStripedFeaturesARMBuilder {
    type Target = PhysicalDeviceRenderPassStripedFeaturesARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRenderPassStripedFeaturesARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRenderPassStripedFeaturesARMBuilder {
    type Target = PhysicalDeviceRenderPassStripedFeaturesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRenderPassStripedPropertiesARM {
    type Target = PhysicalDeviceRenderPassStripedPropertiesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRenderPassStripedPropertiesARM {
    type Builder = PhysicalDeviceRenderPassStripedPropertiesARMBuilder;
}

/// A builder for a [`PhysicalDeviceRenderPassStripedPropertiesARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRenderPassStripedPropertiesARMBuilder {
    value: PhysicalDeviceRenderPassStripedPropertiesARM,
}

impl PhysicalDeviceRenderPassStripedPropertiesARMBuilder {
    #[inline]
    pub fn render_pass_stripe_granularity(
        mut self,
        render_pass_stripe_granularity: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.render_pass_stripe_granularity = render_pass_stripe_granularity.into();
        self
    }

    #[inline]
    pub fn max_render_pass_stripes(mut self, max_render_pass_stripes: u32) -> Self {
        self.value.max_render_pass_stripes = max_render_pass_stripes;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRenderPassStripedPropertiesARM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRenderPassStripedPropertiesARMBuilder {
    type Target = PhysicalDeviceRenderPassStripedPropertiesARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRenderPassStripedPropertiesARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRenderPassStripedPropertiesARMBuilder {
    type Target = PhysicalDeviceRenderPassStripedPropertiesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    type Target = PhysicalDeviceRepresentativeFragmentTestFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    type Builder = PhysicalDeviceRepresentativeFragmentTestFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceRepresentativeFragmentTestFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRepresentativeFragmentTestFeaturesNVBuilder {
    value: PhysicalDeviceRepresentativeFragmentTestFeaturesNV,
}

impl PhysicalDeviceRepresentativeFragmentTestFeaturesNVBuilder {
    #[inline]
    pub fn representative_fragment_test(mut self, representative_fragment_test: bool) -> Self {
        self.value.representative_fragment_test = representative_fragment_test as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRepresentativeFragmentTestFeaturesNVBuilder {
    type Target = PhysicalDeviceRepresentativeFragmentTestFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRepresentativeFragmentTestFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRepresentativeFragmentTestFeaturesNVBuilder {
    type Target = PhysicalDeviceRepresentativeFragmentTestFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRobustness2FeaturesEXT {
    type Target = PhysicalDeviceRobustness2FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRobustness2FeaturesEXT {
    type Builder = PhysicalDeviceRobustness2FeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceRobustness2FeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRobustness2FeaturesEXTBuilder {
    value: PhysicalDeviceRobustness2FeaturesEXT,
}

impl PhysicalDeviceRobustness2FeaturesEXTBuilder {
    #[inline]
    pub fn robust_buffer_access2(mut self, robust_buffer_access2: bool) -> Self {
        self.value.robust_buffer_access2 = robust_buffer_access2 as Bool32;
        self
    }

    #[inline]
    pub fn robust_image_access2(mut self, robust_image_access2: bool) -> Self {
        self.value.robust_image_access2 = robust_image_access2 as Bool32;
        self
    }

    #[inline]
    pub fn null_descriptor(mut self, null_descriptor: bool) -> Self {
        self.value.null_descriptor = null_descriptor as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRobustness2FeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRobustness2FeaturesEXTBuilder {
    type Target = PhysicalDeviceRobustness2FeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRobustness2FeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRobustness2FeaturesEXTBuilder {
    type Target = PhysicalDeviceRobustness2FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceRobustness2PropertiesEXT {
    type Target = PhysicalDeviceRobustness2PropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceRobustness2PropertiesEXT {
    type Builder = PhysicalDeviceRobustness2PropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceRobustness2PropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceRobustness2PropertiesEXTBuilder {
    value: PhysicalDeviceRobustness2PropertiesEXT,
}

impl PhysicalDeviceRobustness2PropertiesEXTBuilder {
    #[inline]
    pub fn robust_storage_buffer_access_size_alignment(
        mut self,
        robust_storage_buffer_access_size_alignment: DeviceSize,
    ) -> Self {
        self.value.robust_storage_buffer_access_size_alignment =
            robust_storage_buffer_access_size_alignment;
        self
    }

    #[inline]
    pub fn robust_uniform_buffer_access_size_alignment(
        mut self,
        robust_uniform_buffer_access_size_alignment: DeviceSize,
    ) -> Self {
        self.value.robust_uniform_buffer_access_size_alignment =
            robust_uniform_buffer_access_size_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceRobustness2PropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceRobustness2PropertiesEXTBuilder {
    type Target = PhysicalDeviceRobustness2PropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceRobustness2PropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceRobustness2PropertiesEXTBuilder {
    type Target = PhysicalDeviceRobustness2PropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSampleLocationsPropertiesEXT {
    type Target = PhysicalDeviceSampleLocationsPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSampleLocationsPropertiesEXT {
    type Builder = PhysicalDeviceSampleLocationsPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceSampleLocationsPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSampleLocationsPropertiesEXTBuilder {
    value: PhysicalDeviceSampleLocationsPropertiesEXT,
}

impl PhysicalDeviceSampleLocationsPropertiesEXTBuilder {
    #[inline]
    pub fn sample_location_sample_counts(
        mut self,
        sample_location_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.sample_location_sample_counts = sample_location_sample_counts;
        self
    }

    #[inline]
    pub fn max_sample_location_grid_size(
        mut self,
        max_sample_location_grid_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_sample_location_grid_size = max_sample_location_grid_size.into();
        self
    }

    #[inline]
    pub fn sample_location_coordinate_range(
        mut self,
        sample_location_coordinate_range: [f32; 2],
    ) -> Self {
        self.value.sample_location_coordinate_range = sample_location_coordinate_range;
        self
    }

    #[inline]
    pub fn sample_location_sub_pixel_bits(mut self, sample_location_sub_pixel_bits: u32) -> Self {
        self.value.sample_location_sub_pixel_bits = sample_location_sub_pixel_bits;
        self
    }

    #[inline]
    pub fn variable_sample_locations(mut self, variable_sample_locations: bool) -> Self {
        self.value.variable_sample_locations = variable_sample_locations as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSampleLocationsPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSampleLocationsPropertiesEXTBuilder {
    type Target = PhysicalDeviceSampleLocationsPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSampleLocationsPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSampleLocationsPropertiesEXTBuilder {
    type Target = PhysicalDeviceSampleLocationsPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSamplerFilterMinmaxProperties {
    type Target = PhysicalDeviceSamplerFilterMinmaxProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSamplerFilterMinmaxProperties {
    type Builder = PhysicalDeviceSamplerFilterMinmaxPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceSamplerFilterMinmaxProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSamplerFilterMinmaxPropertiesBuilder {
    value: PhysicalDeviceSamplerFilterMinmaxProperties,
}

impl PhysicalDeviceSamplerFilterMinmaxPropertiesBuilder {
    #[inline]
    pub fn filter_minmax_single_component_formats(
        mut self,
        filter_minmax_single_component_formats: bool,
    ) -> Self {
        self.value.filter_minmax_single_component_formats =
            filter_minmax_single_component_formats as Bool32;
        self
    }

    #[inline]
    pub fn filter_minmax_image_component_mapping(
        mut self,
        filter_minmax_image_component_mapping: bool,
    ) -> Self {
        self.value.filter_minmax_image_component_mapping =
            filter_minmax_image_component_mapping as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSamplerFilterMinmaxProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSamplerFilterMinmaxPropertiesBuilder {
    type Target = PhysicalDeviceSamplerFilterMinmaxProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSamplerFilterMinmaxPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSamplerFilterMinmaxPropertiesBuilder {
    type Target = PhysicalDeviceSamplerFilterMinmaxProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSamplerYcbcrConversionFeatures {
    type Target = PhysicalDeviceSamplerYcbcrConversionFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSamplerYcbcrConversionFeatures {
    type Builder = PhysicalDeviceSamplerYcbcrConversionFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceSamplerYcbcrConversionFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSamplerYcbcrConversionFeaturesBuilder {
    value: PhysicalDeviceSamplerYcbcrConversionFeatures,
}

impl PhysicalDeviceSamplerYcbcrConversionFeaturesBuilder {
    #[inline]
    pub fn sampler_ycbcr_conversion(mut self, sampler_ycbcr_conversion: bool) -> Self {
        self.value.sampler_ycbcr_conversion = sampler_ycbcr_conversion as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSamplerYcbcrConversionFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSamplerYcbcrConversionFeaturesBuilder {
    type Target = PhysicalDeviceSamplerYcbcrConversionFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSamplerYcbcrConversionFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSamplerYcbcrConversionFeaturesBuilder {
    type Target = PhysicalDeviceSamplerYcbcrConversionFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceScalarBlockLayoutFeatures {
    type Target = PhysicalDeviceScalarBlockLayoutFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceScalarBlockLayoutFeatures {
    type Builder = PhysicalDeviceScalarBlockLayoutFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceScalarBlockLayoutFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceScalarBlockLayoutFeaturesBuilder {
    value: PhysicalDeviceScalarBlockLayoutFeatures,
}

impl PhysicalDeviceScalarBlockLayoutFeaturesBuilder {
    #[inline]
    pub fn scalar_block_layout(mut self, scalar_block_layout: bool) -> Self {
        self.value.scalar_block_layout = scalar_block_layout as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceScalarBlockLayoutFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceScalarBlockLayoutFeaturesBuilder {
    type Target = PhysicalDeviceScalarBlockLayoutFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceScalarBlockLayoutFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceScalarBlockLayoutFeaturesBuilder {
    type Target = PhysicalDeviceScalarBlockLayoutFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSchedulingControlsFeaturesARM {
    type Target = PhysicalDeviceSchedulingControlsFeaturesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSchedulingControlsFeaturesARM {
    type Builder = PhysicalDeviceSchedulingControlsFeaturesARMBuilder;
}

/// A builder for a [`PhysicalDeviceSchedulingControlsFeaturesARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSchedulingControlsFeaturesARMBuilder {
    value: PhysicalDeviceSchedulingControlsFeaturesARM,
}

impl PhysicalDeviceSchedulingControlsFeaturesARMBuilder {
    #[inline]
    pub fn scheduling_controls(mut self, scheduling_controls: bool) -> Self {
        self.value.scheduling_controls = scheduling_controls as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSchedulingControlsFeaturesARM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSchedulingControlsFeaturesARMBuilder {
    type Target = PhysicalDeviceSchedulingControlsFeaturesARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSchedulingControlsFeaturesARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSchedulingControlsFeaturesARMBuilder {
    type Target = PhysicalDeviceSchedulingControlsFeaturesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSchedulingControlsPropertiesARM {
    type Target = PhysicalDeviceSchedulingControlsPropertiesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSchedulingControlsPropertiesARM {
    type Builder = PhysicalDeviceSchedulingControlsPropertiesARMBuilder;
}

/// A builder for a [`PhysicalDeviceSchedulingControlsPropertiesARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSchedulingControlsPropertiesARMBuilder {
    value: PhysicalDeviceSchedulingControlsPropertiesARM,
}

impl PhysicalDeviceSchedulingControlsPropertiesARMBuilder {
    #[inline]
    pub fn scheduling_controls_flags(
        mut self,
        scheduling_controls_flags: PhysicalDeviceSchedulingControlsFlagsARM,
    ) -> Self {
        self.value.scheduling_controls_flags = scheduling_controls_flags;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSchedulingControlsPropertiesARM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSchedulingControlsPropertiesARMBuilder {
    type Target = PhysicalDeviceSchedulingControlsPropertiesARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSchedulingControlsPropertiesARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSchedulingControlsPropertiesARMBuilder {
    type Target = PhysicalDeviceSchedulingControlsPropertiesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    type Target = PhysicalDeviceSeparateDepthStencilLayoutsFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    type Builder = PhysicalDeviceSeparateDepthStencilLayoutsFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceSeparateDepthStencilLayoutsFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSeparateDepthStencilLayoutsFeaturesBuilder {
    value: PhysicalDeviceSeparateDepthStencilLayoutsFeatures,
}

impl PhysicalDeviceSeparateDepthStencilLayoutsFeaturesBuilder {
    #[inline]
    pub fn separate_depth_stencil_layouts(mut self, separate_depth_stencil_layouts: bool) -> Self {
        self.value.separate_depth_stencil_layouts = separate_depth_stencil_layouts as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSeparateDepthStencilLayoutsFeaturesBuilder {
    type Target = PhysicalDeviceSeparateDepthStencilLayoutsFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSeparateDepthStencilLayoutsFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSeparateDepthStencilLayoutsFeaturesBuilder {
    type Target = PhysicalDeviceSeparateDepthStencilLayoutsFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
    type Target = PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
    type Builder = PhysicalDeviceShaderAtomicFloat16VectorFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderAtomicFloat16VectorFeaturesNVBuilder {
    value: PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV,
}

impl PhysicalDeviceShaderAtomicFloat16VectorFeaturesNVBuilder {
    #[inline]
    pub fn shader_float16_vector_atomics(mut self, shader_float16_vector_atomics: bool) -> Self {
        self.value.shader_float16_vector_atomics = shader_float16_vector_atomics as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderAtomicFloat16VectorFeaturesNVBuilder {
    type Target = PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderAtomicFloat16VectorFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderAtomicFloat16VectorFeaturesNVBuilder {
    type Target = PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    type Target = PhysicalDeviceShaderAtomicFloat2FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    type Builder = PhysicalDeviceShaderAtomicFloat2FeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderAtomicFloat2FeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderAtomicFloat2FeaturesEXTBuilder {
    value: PhysicalDeviceShaderAtomicFloat2FeaturesEXT,
}

impl PhysicalDeviceShaderAtomicFloat2FeaturesEXTBuilder {
    #[inline]
    pub fn shader_buffer_float16_atomics(mut self, shader_buffer_float16_atomics: bool) -> Self {
        self.value.shader_buffer_float16_atomics = shader_buffer_float16_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_buffer_float16_atomic_add(
        mut self,
        shader_buffer_float16_atomic_add: bool,
    ) -> Self {
        self.value.shader_buffer_float16_atomic_add = shader_buffer_float16_atomic_add as Bool32;
        self
    }

    #[inline]
    pub fn shader_buffer_float16_atomic_min_max(
        mut self,
        shader_buffer_float16_atomic_min_max: bool,
    ) -> Self {
        self.value.shader_buffer_float16_atomic_min_max =
            shader_buffer_float16_atomic_min_max as Bool32;
        self
    }

    #[inline]
    pub fn shader_buffer_float32_atomic_min_max(
        mut self,
        shader_buffer_float32_atomic_min_max: bool,
    ) -> Self {
        self.value.shader_buffer_float32_atomic_min_max =
            shader_buffer_float32_atomic_min_max as Bool32;
        self
    }

    #[inline]
    pub fn shader_buffer_float64_atomic_min_max(
        mut self,
        shader_buffer_float64_atomic_min_max: bool,
    ) -> Self {
        self.value.shader_buffer_float64_atomic_min_max =
            shader_buffer_float64_atomic_min_max as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float16_atomics(mut self, shader_shared_float16_atomics: bool) -> Self {
        self.value.shader_shared_float16_atomics = shader_shared_float16_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float16_atomic_add(
        mut self,
        shader_shared_float16_atomic_add: bool,
    ) -> Self {
        self.value.shader_shared_float16_atomic_add = shader_shared_float16_atomic_add as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float16_atomic_min_max(
        mut self,
        shader_shared_float16_atomic_min_max: bool,
    ) -> Self {
        self.value.shader_shared_float16_atomic_min_max =
            shader_shared_float16_atomic_min_max as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float32_atomic_min_max(
        mut self,
        shader_shared_float32_atomic_min_max: bool,
    ) -> Self {
        self.value.shader_shared_float32_atomic_min_max =
            shader_shared_float32_atomic_min_max as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float64_atomic_min_max(
        mut self,
        shader_shared_float64_atomic_min_max: bool,
    ) -> Self {
        self.value.shader_shared_float64_atomic_min_max =
            shader_shared_float64_atomic_min_max as Bool32;
        self
    }

    #[inline]
    pub fn shader_image_float32_atomic_min_max(
        mut self,
        shader_image_float32_atomic_min_max: bool,
    ) -> Self {
        self.value.shader_image_float32_atomic_min_max =
            shader_image_float32_atomic_min_max as Bool32;
        self
    }

    #[inline]
    pub fn sparse_image_float32_atomic_min_max(
        mut self,
        sparse_image_float32_atomic_min_max: bool,
    ) -> Self {
        self.value.sparse_image_float32_atomic_min_max =
            sparse_image_float32_atomic_min_max as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderAtomicFloat2FeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderAtomicFloat2FeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderAtomicFloat2FeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderAtomicFloat2FeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderAtomicFloat2FeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderAtomicFloat2FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderAtomicFloatFeaturesEXT {
    type Target = PhysicalDeviceShaderAtomicFloatFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderAtomicFloatFeaturesEXT {
    type Builder = PhysicalDeviceShaderAtomicFloatFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderAtomicFloatFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderAtomicFloatFeaturesEXTBuilder {
    value: PhysicalDeviceShaderAtomicFloatFeaturesEXT,
}

impl PhysicalDeviceShaderAtomicFloatFeaturesEXTBuilder {
    #[inline]
    pub fn shader_buffer_float32_atomics(mut self, shader_buffer_float32_atomics: bool) -> Self {
        self.value.shader_buffer_float32_atomics = shader_buffer_float32_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_buffer_float32_atomic_add(
        mut self,
        shader_buffer_float32_atomic_add: bool,
    ) -> Self {
        self.value.shader_buffer_float32_atomic_add = shader_buffer_float32_atomic_add as Bool32;
        self
    }

    #[inline]
    pub fn shader_buffer_float64_atomics(mut self, shader_buffer_float64_atomics: bool) -> Self {
        self.value.shader_buffer_float64_atomics = shader_buffer_float64_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_buffer_float64_atomic_add(
        mut self,
        shader_buffer_float64_atomic_add: bool,
    ) -> Self {
        self.value.shader_buffer_float64_atomic_add = shader_buffer_float64_atomic_add as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float32_atomics(mut self, shader_shared_float32_atomics: bool) -> Self {
        self.value.shader_shared_float32_atomics = shader_shared_float32_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float32_atomic_add(
        mut self,
        shader_shared_float32_atomic_add: bool,
    ) -> Self {
        self.value.shader_shared_float32_atomic_add = shader_shared_float32_atomic_add as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float64_atomics(mut self, shader_shared_float64_atomics: bool) -> Self {
        self.value.shader_shared_float64_atomics = shader_shared_float64_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_float64_atomic_add(
        mut self,
        shader_shared_float64_atomic_add: bool,
    ) -> Self {
        self.value.shader_shared_float64_atomic_add = shader_shared_float64_atomic_add as Bool32;
        self
    }

    #[inline]
    pub fn shader_image_float32_atomics(mut self, shader_image_float32_atomics: bool) -> Self {
        self.value.shader_image_float32_atomics = shader_image_float32_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_image_float32_atomic_add(
        mut self,
        shader_image_float32_atomic_add: bool,
    ) -> Self {
        self.value.shader_image_float32_atomic_add = shader_image_float32_atomic_add as Bool32;
        self
    }

    #[inline]
    pub fn sparse_image_float32_atomics(mut self, sparse_image_float32_atomics: bool) -> Self {
        self.value.sparse_image_float32_atomics = sparse_image_float32_atomics as Bool32;
        self
    }

    #[inline]
    pub fn sparse_image_float32_atomic_add(
        mut self,
        sparse_image_float32_atomic_add: bool,
    ) -> Self {
        self.value.sparse_image_float32_atomic_add = sparse_image_float32_atomic_add as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderAtomicFloatFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderAtomicFloatFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderAtomicFloatFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderAtomicFloatFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderAtomicFloatFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderAtomicFloatFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderAtomicInt64Features {
    type Target = PhysicalDeviceShaderAtomicInt64Features;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderAtomicInt64Features {
    type Builder = PhysicalDeviceShaderAtomicInt64FeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceShaderAtomicInt64Features`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderAtomicInt64FeaturesBuilder {
    value: PhysicalDeviceShaderAtomicInt64Features,
}

impl PhysicalDeviceShaderAtomicInt64FeaturesBuilder {
    #[inline]
    pub fn shader_buffer_int64_atomics(mut self, shader_buffer_int64_atomics: bool) -> Self {
        self.value.shader_buffer_int64_atomics = shader_buffer_int64_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_int64_atomics(mut self, shader_shared_int64_atomics: bool) -> Self {
        self.value.shader_shared_int64_atomics = shader_shared_int64_atomics as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderAtomicInt64Features {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderAtomicInt64FeaturesBuilder {
    type Target = PhysicalDeviceShaderAtomicInt64Features;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderAtomicInt64FeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderAtomicInt64FeaturesBuilder {
    type Target = PhysicalDeviceShaderAtomicInt64Features;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderClockFeaturesKHR {
    type Target = PhysicalDeviceShaderClockFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderClockFeaturesKHR {
    type Builder = PhysicalDeviceShaderClockFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceShaderClockFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderClockFeaturesKHRBuilder {
    value: PhysicalDeviceShaderClockFeaturesKHR,
}

impl PhysicalDeviceShaderClockFeaturesKHRBuilder {
    #[inline]
    pub fn shader_subgroup_clock(mut self, shader_subgroup_clock: bool) -> Self {
        self.value.shader_subgroup_clock = shader_subgroup_clock as Bool32;
        self
    }

    #[inline]
    pub fn shader_device_clock(mut self, shader_device_clock: bool) -> Self {
        self.value.shader_device_clock = shader_device_clock as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderClockFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderClockFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderClockFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderClockFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderClockFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderClockFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    type Target = PhysicalDeviceShaderCoreBuiltinsFeaturesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    type Builder = PhysicalDeviceShaderCoreBuiltinsFeaturesARMBuilder;
}

/// A builder for a [`PhysicalDeviceShaderCoreBuiltinsFeaturesARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderCoreBuiltinsFeaturesARMBuilder {
    value: PhysicalDeviceShaderCoreBuiltinsFeaturesARM,
}

impl PhysicalDeviceShaderCoreBuiltinsFeaturesARMBuilder {
    #[inline]
    pub fn shader_core_builtins(mut self, shader_core_builtins: bool) -> Self {
        self.value.shader_core_builtins = shader_core_builtins as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderCoreBuiltinsFeaturesARM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderCoreBuiltinsFeaturesARMBuilder {
    type Target = PhysicalDeviceShaderCoreBuiltinsFeaturesARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderCoreBuiltinsFeaturesARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCoreBuiltinsFeaturesARMBuilder {
    type Target = PhysicalDeviceShaderCoreBuiltinsFeaturesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    type Target = PhysicalDeviceShaderCoreBuiltinsPropertiesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    type Builder = PhysicalDeviceShaderCoreBuiltinsPropertiesARMBuilder;
}

/// A builder for a [`PhysicalDeviceShaderCoreBuiltinsPropertiesARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderCoreBuiltinsPropertiesARMBuilder {
    value: PhysicalDeviceShaderCoreBuiltinsPropertiesARM,
}

impl PhysicalDeviceShaderCoreBuiltinsPropertiesARMBuilder {
    #[inline]
    pub fn shader_core_mask(mut self, shader_core_mask: u64) -> Self {
        self.value.shader_core_mask = shader_core_mask;
        self
    }

    #[inline]
    pub fn shader_core_count(mut self, shader_core_count: u32) -> Self {
        self.value.shader_core_count = shader_core_count;
        self
    }

    #[inline]
    pub fn shader_warps_per_core(mut self, shader_warps_per_core: u32) -> Self {
        self.value.shader_warps_per_core = shader_warps_per_core;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderCoreBuiltinsPropertiesARM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderCoreBuiltinsPropertiesARMBuilder {
    type Target = PhysicalDeviceShaderCoreBuiltinsPropertiesARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderCoreBuiltinsPropertiesARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCoreBuiltinsPropertiesARMBuilder {
    type Target = PhysicalDeviceShaderCoreBuiltinsPropertiesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCoreProperties2AMD {
    type Target = PhysicalDeviceShaderCoreProperties2AMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderCoreProperties2AMD {
    type Builder = PhysicalDeviceShaderCoreProperties2AMDBuilder;
}

/// A builder for a [`PhysicalDeviceShaderCoreProperties2AMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderCoreProperties2AMDBuilder {
    value: PhysicalDeviceShaderCoreProperties2AMD,
}

impl PhysicalDeviceShaderCoreProperties2AMDBuilder {
    #[inline]
    pub fn shader_core_features(
        mut self,
        shader_core_features: ShaderCorePropertiesFlagsAMD,
    ) -> Self {
        self.value.shader_core_features = shader_core_features;
        self
    }

    #[inline]
    pub fn active_compute_unit_count(mut self, active_compute_unit_count: u32) -> Self {
        self.value.active_compute_unit_count = active_compute_unit_count;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderCoreProperties2AMD {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderCoreProperties2AMDBuilder {
    type Target = PhysicalDeviceShaderCoreProperties2AMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderCoreProperties2AMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCoreProperties2AMDBuilder {
    type Target = PhysicalDeviceShaderCoreProperties2AMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCorePropertiesAMD {
    type Target = PhysicalDeviceShaderCorePropertiesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderCorePropertiesAMD {
    type Builder = PhysicalDeviceShaderCorePropertiesAMDBuilder;
}

/// A builder for a [`PhysicalDeviceShaderCorePropertiesAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderCorePropertiesAMDBuilder {
    value: PhysicalDeviceShaderCorePropertiesAMD,
}

impl PhysicalDeviceShaderCorePropertiesAMDBuilder {
    #[inline]
    pub fn shader_engine_count(mut self, shader_engine_count: u32) -> Self {
        self.value.shader_engine_count = shader_engine_count;
        self
    }

    #[inline]
    pub fn shader_arrays_per_engine_count(mut self, shader_arrays_per_engine_count: u32) -> Self {
        self.value.shader_arrays_per_engine_count = shader_arrays_per_engine_count;
        self
    }

    #[inline]
    pub fn compute_units_per_shader_array(mut self, compute_units_per_shader_array: u32) -> Self {
        self.value.compute_units_per_shader_array = compute_units_per_shader_array;
        self
    }

    #[inline]
    pub fn simd_per_compute_unit(mut self, simd_per_compute_unit: u32) -> Self {
        self.value.simd_per_compute_unit = simd_per_compute_unit;
        self
    }

    #[inline]
    pub fn wavefronts_per_simd(mut self, wavefronts_per_simd: u32) -> Self {
        self.value.wavefronts_per_simd = wavefronts_per_simd;
        self
    }

    #[inline]
    pub fn wavefront_size(mut self, wavefront_size: u32) -> Self {
        self.value.wavefront_size = wavefront_size;
        self
    }

    #[inline]
    pub fn sgprs_per_simd(mut self, sgprs_per_simd: u32) -> Self {
        self.value.sgprs_per_simd = sgprs_per_simd;
        self
    }

    #[inline]
    pub fn min_sgpr_allocation(mut self, min_sgpr_allocation: u32) -> Self {
        self.value.min_sgpr_allocation = min_sgpr_allocation;
        self
    }

    #[inline]
    pub fn max_sgpr_allocation(mut self, max_sgpr_allocation: u32) -> Self {
        self.value.max_sgpr_allocation = max_sgpr_allocation;
        self
    }

    #[inline]
    pub fn sgpr_allocation_granularity(mut self, sgpr_allocation_granularity: u32) -> Self {
        self.value.sgpr_allocation_granularity = sgpr_allocation_granularity;
        self
    }

    #[inline]
    pub fn vgprs_per_simd(mut self, vgprs_per_simd: u32) -> Self {
        self.value.vgprs_per_simd = vgprs_per_simd;
        self
    }

    #[inline]
    pub fn min_vgpr_allocation(mut self, min_vgpr_allocation: u32) -> Self {
        self.value.min_vgpr_allocation = min_vgpr_allocation;
        self
    }

    #[inline]
    pub fn max_vgpr_allocation(mut self, max_vgpr_allocation: u32) -> Self {
        self.value.max_vgpr_allocation = max_vgpr_allocation;
        self
    }

    #[inline]
    pub fn vgpr_allocation_granularity(mut self, vgpr_allocation_granularity: u32) -> Self {
        self.value.vgpr_allocation_granularity = vgpr_allocation_granularity;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderCorePropertiesAMD {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderCorePropertiesAMDBuilder {
    type Target = PhysicalDeviceShaderCorePropertiesAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderCorePropertiesAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCorePropertiesAMDBuilder {
    type Target = PhysicalDeviceShaderCorePropertiesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCorePropertiesARM {
    type Target = PhysicalDeviceShaderCorePropertiesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderCorePropertiesARM {
    type Builder = PhysicalDeviceShaderCorePropertiesARMBuilder;
}

/// A builder for a [`PhysicalDeviceShaderCorePropertiesARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderCorePropertiesARMBuilder {
    value: PhysicalDeviceShaderCorePropertiesARM,
}

impl PhysicalDeviceShaderCorePropertiesARMBuilder {
    #[inline]
    pub fn pixel_rate(mut self, pixel_rate: u32) -> Self {
        self.value.pixel_rate = pixel_rate;
        self
    }

    #[inline]
    pub fn texel_rate(mut self, texel_rate: u32) -> Self {
        self.value.texel_rate = texel_rate;
        self
    }

    #[inline]
    pub fn fma_rate(mut self, fma_rate: u32) -> Self {
        self.value.fma_rate = fma_rate;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderCorePropertiesARM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderCorePropertiesARMBuilder {
    type Target = PhysicalDeviceShaderCorePropertiesARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderCorePropertiesARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderCorePropertiesARMBuilder {
    type Target = PhysicalDeviceShaderCorePropertiesARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    type Target = PhysicalDeviceShaderDemoteToHelperInvocationFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    type Builder = PhysicalDeviceShaderDemoteToHelperInvocationFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceShaderDemoteToHelperInvocationFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderDemoteToHelperInvocationFeaturesBuilder {
    value: PhysicalDeviceShaderDemoteToHelperInvocationFeatures,
}

impl PhysicalDeviceShaderDemoteToHelperInvocationFeaturesBuilder {
    #[inline]
    pub fn shader_demote_to_helper_invocation(
        mut self,
        shader_demote_to_helper_invocation: bool,
    ) -> Self {
        self.value.shader_demote_to_helper_invocation =
            shader_demote_to_helper_invocation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderDemoteToHelperInvocationFeaturesBuilder {
    type Target = PhysicalDeviceShaderDemoteToHelperInvocationFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderDemoteToHelperInvocationFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderDemoteToHelperInvocationFeaturesBuilder {
    type Target = PhysicalDeviceShaderDemoteToHelperInvocationFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderDrawParametersFeatures {
    type Target = PhysicalDeviceShaderDrawParametersFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderDrawParametersFeatures {
    type Builder = PhysicalDeviceShaderDrawParametersFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceShaderDrawParametersFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderDrawParametersFeaturesBuilder {
    value: PhysicalDeviceShaderDrawParametersFeatures,
}

impl PhysicalDeviceShaderDrawParametersFeaturesBuilder {
    #[inline]
    pub fn shader_draw_parameters(mut self, shader_draw_parameters: bool) -> Self {
        self.value.shader_draw_parameters = shader_draw_parameters as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderDrawParametersFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderDrawParametersFeaturesBuilder {
    type Target = PhysicalDeviceShaderDrawParametersFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderDrawParametersFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderDrawParametersFeaturesBuilder {
    type Target = PhysicalDeviceShaderDrawParametersFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    type Target = PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    type Builder = PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDBuilder;
}

/// A builder for a [`PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDBuilder {
    value: PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
}

impl PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDBuilder {
    #[inline]
    pub fn shader_early_and_late_fragment_tests(
        mut self,
        shader_early_and_late_fragment_tests: bool,
    ) -> Self {
        self.value.shader_early_and_late_fragment_tests =
            shader_early_and_late_fragment_tests as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDBuilder {
    type Target = PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDBuilder {
    type Target = PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderEnqueueFeaturesAMDX {
    type Target = PhysicalDeviceShaderEnqueueFeaturesAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderEnqueueFeaturesAMDX {
    type Builder = PhysicalDeviceShaderEnqueueFeaturesAMDXBuilder;
}

/// A builder for a [`PhysicalDeviceShaderEnqueueFeaturesAMDX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderEnqueueFeaturesAMDXBuilder {
    value: PhysicalDeviceShaderEnqueueFeaturesAMDX,
}

impl PhysicalDeviceShaderEnqueueFeaturesAMDXBuilder {
    #[inline]
    pub fn shader_enqueue(mut self, shader_enqueue: bool) -> Self {
        self.value.shader_enqueue = shader_enqueue as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderEnqueueFeaturesAMDX {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderEnqueueFeaturesAMDXBuilder {
    type Target = PhysicalDeviceShaderEnqueueFeaturesAMDX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderEnqueueFeaturesAMDXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderEnqueueFeaturesAMDXBuilder {
    type Target = PhysicalDeviceShaderEnqueueFeaturesAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderEnqueuePropertiesAMDX {
    type Target = PhysicalDeviceShaderEnqueuePropertiesAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderEnqueuePropertiesAMDX {
    type Builder = PhysicalDeviceShaderEnqueuePropertiesAMDXBuilder;
}

/// A builder for a [`PhysicalDeviceShaderEnqueuePropertiesAMDX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderEnqueuePropertiesAMDXBuilder {
    value: PhysicalDeviceShaderEnqueuePropertiesAMDX,
}

impl PhysicalDeviceShaderEnqueuePropertiesAMDXBuilder {
    #[inline]
    pub fn max_execution_graph_depth(mut self, max_execution_graph_depth: u32) -> Self {
        self.value.max_execution_graph_depth = max_execution_graph_depth;
        self
    }

    #[inline]
    pub fn max_execution_graph_shader_output_nodes(
        mut self,
        max_execution_graph_shader_output_nodes: u32,
    ) -> Self {
        self.value.max_execution_graph_shader_output_nodes =
            max_execution_graph_shader_output_nodes;
        self
    }

    #[inline]
    pub fn max_execution_graph_shader_payload_size(
        mut self,
        max_execution_graph_shader_payload_size: u32,
    ) -> Self {
        self.value.max_execution_graph_shader_payload_size =
            max_execution_graph_shader_payload_size;
        self
    }

    #[inline]
    pub fn max_execution_graph_shader_payload_count(
        mut self,
        max_execution_graph_shader_payload_count: u32,
    ) -> Self {
        self.value.max_execution_graph_shader_payload_count =
            max_execution_graph_shader_payload_count;
        self
    }

    #[inline]
    pub fn execution_graph_dispatch_address_alignment(
        mut self,
        execution_graph_dispatch_address_alignment: u32,
    ) -> Self {
        self.value.execution_graph_dispatch_address_alignment =
            execution_graph_dispatch_address_alignment;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderEnqueuePropertiesAMDX {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderEnqueuePropertiesAMDXBuilder {
    type Target = PhysicalDeviceShaderEnqueuePropertiesAMDX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderEnqueuePropertiesAMDXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderEnqueuePropertiesAMDXBuilder {
    type Target = PhysicalDeviceShaderEnqueuePropertiesAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderExpectAssumeFeaturesKHR {
    type Target = PhysicalDeviceShaderExpectAssumeFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderExpectAssumeFeaturesKHR {
    type Builder = PhysicalDeviceShaderExpectAssumeFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceShaderExpectAssumeFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderExpectAssumeFeaturesKHRBuilder {
    value: PhysicalDeviceShaderExpectAssumeFeaturesKHR,
}

impl PhysicalDeviceShaderExpectAssumeFeaturesKHRBuilder {
    #[inline]
    pub fn shader_expect_assume(mut self, shader_expect_assume: bool) -> Self {
        self.value.shader_expect_assume = shader_expect_assume as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderExpectAssumeFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderExpectAssumeFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderExpectAssumeFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderExpectAssumeFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderExpectAssumeFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderExpectAssumeFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderFloat16Int8Features {
    type Target = PhysicalDeviceShaderFloat16Int8Features;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderFloat16Int8Features {
    type Builder = PhysicalDeviceShaderFloat16Int8FeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceShaderFloat16Int8Features`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderFloat16Int8FeaturesBuilder {
    value: PhysicalDeviceShaderFloat16Int8Features,
}

impl PhysicalDeviceShaderFloat16Int8FeaturesBuilder {
    #[inline]
    pub fn shader_float16(mut self, shader_float16: bool) -> Self {
        self.value.shader_float16 = shader_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_int8(mut self, shader_int8: bool) -> Self {
        self.value.shader_int8 = shader_int8 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderFloat16Int8Features {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderFloat16Int8FeaturesBuilder {
    type Target = PhysicalDeviceShaderFloat16Int8Features;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderFloat16Int8FeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderFloat16Int8FeaturesBuilder {
    type Target = PhysicalDeviceShaderFloat16Int8Features;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderFloatControls2FeaturesKHR {
    type Target = PhysicalDeviceShaderFloatControls2FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderFloatControls2FeaturesKHR {
    type Builder = PhysicalDeviceShaderFloatControls2FeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceShaderFloatControls2FeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderFloatControls2FeaturesKHRBuilder {
    value: PhysicalDeviceShaderFloatControls2FeaturesKHR,
}

impl PhysicalDeviceShaderFloatControls2FeaturesKHRBuilder {
    #[inline]
    pub fn shader_float_controls2(mut self, shader_float_controls2: bool) -> Self {
        self.value.shader_float_controls2 = shader_float_controls2 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderFloatControls2FeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderFloatControls2FeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderFloatControls2FeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderFloatControls2FeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderFloatControls2FeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderFloatControls2FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    type Target = PhysicalDeviceShaderImageAtomicInt64FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    type Builder = PhysicalDeviceShaderImageAtomicInt64FeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderImageAtomicInt64FeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderImageAtomicInt64FeaturesEXTBuilder {
    value: PhysicalDeviceShaderImageAtomicInt64FeaturesEXT,
}

impl PhysicalDeviceShaderImageAtomicInt64FeaturesEXTBuilder {
    #[inline]
    pub fn shader_image_int64_atomics(mut self, shader_image_int64_atomics: bool) -> Self {
        self.value.shader_image_int64_atomics = shader_image_int64_atomics as Bool32;
        self
    }

    #[inline]
    pub fn sparse_image_int64_atomics(mut self, sparse_image_int64_atomics: bool) -> Self {
        self.value.sparse_image_int64_atomics = sparse_image_int64_atomics as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderImageAtomicInt64FeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderImageAtomicInt64FeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderImageAtomicInt64FeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderImageAtomicInt64FeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderImageAtomicInt64FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderImageFootprintFeaturesNV {
    type Target = PhysicalDeviceShaderImageFootprintFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderImageFootprintFeaturesNV {
    type Builder = PhysicalDeviceShaderImageFootprintFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceShaderImageFootprintFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderImageFootprintFeaturesNVBuilder {
    value: PhysicalDeviceShaderImageFootprintFeaturesNV,
}

impl PhysicalDeviceShaderImageFootprintFeaturesNVBuilder {
    #[inline]
    pub fn image_footprint(mut self, image_footprint: bool) -> Self {
        self.value.image_footprint = image_footprint as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderImageFootprintFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderImageFootprintFeaturesNVBuilder {
    type Target = PhysicalDeviceShaderImageFootprintFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderImageFootprintFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderImageFootprintFeaturesNVBuilder {
    type Target = PhysicalDeviceShaderImageFootprintFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderIntegerDotProductFeatures {
    type Target = PhysicalDeviceShaderIntegerDotProductFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderIntegerDotProductFeatures {
    type Builder = PhysicalDeviceShaderIntegerDotProductFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceShaderIntegerDotProductFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderIntegerDotProductFeaturesBuilder {
    value: PhysicalDeviceShaderIntegerDotProductFeatures,
}

impl PhysicalDeviceShaderIntegerDotProductFeaturesBuilder {
    #[inline]
    pub fn shader_integer_dot_product(mut self, shader_integer_dot_product: bool) -> Self {
        self.value.shader_integer_dot_product = shader_integer_dot_product as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderIntegerDotProductFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderIntegerDotProductFeaturesBuilder {
    type Target = PhysicalDeviceShaderIntegerDotProductFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderIntegerDotProductFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderIntegerDotProductFeaturesBuilder {
    type Target = PhysicalDeviceShaderIntegerDotProductFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderIntegerDotProductProperties {
    type Target = PhysicalDeviceShaderIntegerDotProductProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderIntegerDotProductProperties {
    type Builder = PhysicalDeviceShaderIntegerDotProductPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceShaderIntegerDotProductProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderIntegerDotProductPropertiesBuilder {
    value: PhysicalDeviceShaderIntegerDotProductProperties,
}

impl PhysicalDeviceShaderIntegerDotProductPropertiesBuilder {
    #[inline]
    pub fn integer_dot_product_8bit_unsigned_accelerated(
        mut self,
        integer_dot_product_8bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_8bit_unsigned_accelerated =
            integer_dot_product_8bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_8bit_signed_accelerated(
        mut self,
        integer_dot_product_8bit_signed_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_8bit_signed_accelerated =
            integer_dot_product_8bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_8bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_8bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_8bit_mixed_signedness_accelerated =
            integer_dot_product_8bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product4x_8bit_packed_unsigned_accelerated(
        mut self,
        integer_dot_product4x_8bit_packed_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product4x_8bit_packed_unsigned_accelerated =
            integer_dot_product4x_8bit_packed_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product4x_8bit_packed_signed_accelerated(
        mut self,
        integer_dot_product4x_8bit_packed_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product4x_8bit_packed_signed_accelerated =
            integer_dot_product4x_8bit_packed_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product4x_8bit_packed_mixed_signedness_accelerated(
        mut self,
        integer_dot_product4x_8bit_packed_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product4x_8bit_packed_mixed_signedness_accelerated =
            integer_dot_product4x_8bit_packed_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_16bit_unsigned_accelerated(
        mut self,
        integer_dot_product_16bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_16bit_unsigned_accelerated =
            integer_dot_product_16bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_16bit_signed_accelerated(
        mut self,
        integer_dot_product_16bit_signed_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_16bit_signed_accelerated =
            integer_dot_product_16bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_16bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_16bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_16bit_mixed_signedness_accelerated =
            integer_dot_product_16bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_32bit_unsigned_accelerated(
        mut self,
        integer_dot_product_32bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_32bit_unsigned_accelerated =
            integer_dot_product_32bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_32bit_signed_accelerated(
        mut self,
        integer_dot_product_32bit_signed_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_32bit_signed_accelerated =
            integer_dot_product_32bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_32bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_32bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_32bit_mixed_signedness_accelerated =
            integer_dot_product_32bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_64bit_unsigned_accelerated(
        mut self,
        integer_dot_product_64bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_64bit_unsigned_accelerated =
            integer_dot_product_64bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_64bit_signed_accelerated(
        mut self,
        integer_dot_product_64bit_signed_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_64bit_signed_accelerated =
            integer_dot_product_64bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_64bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_64bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_64bit_mixed_signedness_accelerated =
            integer_dot_product_64bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_8bit_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_8bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_8bit_unsigned_accelerated =
            integer_dot_product_accumulating_saturating_8bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_8bit_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_8bit_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_8bit_signed_accelerated =
            integer_dot_product_accumulating_saturating_8bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_8bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_8bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_8bit_mixed_signedness_accelerated =
            integer_dot_product_accumulating_saturating_8bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating4x_8bit_packed_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating4x_8bit_packed_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating4x_8bit_packed_unsigned_accelerated =
            integer_dot_product_accumulating_saturating4x_8bit_packed_unsigned_accelerated
                as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating4x_8bit_packed_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating4x_8bit_packed_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating4x_8bit_packed_signed_accelerated =
            integer_dot_product_accumulating_saturating4x_8bit_packed_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating4x_8bit_packed_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating4x_8bit_packed_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_accumulating_saturating4x_8bit_packed_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating4x_8bit_packed_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_16bit_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_16bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_16bit_unsigned_accelerated =
            integer_dot_product_accumulating_saturating_16bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_16bit_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_16bit_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_16bit_signed_accelerated =
            integer_dot_product_accumulating_saturating_16bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_16bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_16bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_16bit_mixed_signedness_accelerated =
            integer_dot_product_accumulating_saturating_16bit_mixed_signedness_accelerated
                as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_32bit_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_32bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_32bit_unsigned_accelerated =
            integer_dot_product_accumulating_saturating_32bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_32bit_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_32bit_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_32bit_signed_accelerated =
            integer_dot_product_accumulating_saturating_32bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_32bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_32bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_32bit_mixed_signedness_accelerated =
            integer_dot_product_accumulating_saturating_32bit_mixed_signedness_accelerated
                as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_64bit_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_64bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_64bit_unsigned_accelerated =
            integer_dot_product_accumulating_saturating_64bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_64bit_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_64bit_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_64bit_signed_accelerated =
            integer_dot_product_accumulating_saturating_64bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_64bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_64bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_64bit_mixed_signedness_accelerated =
            integer_dot_product_accumulating_saturating_64bit_mixed_signedness_accelerated
                as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderIntegerDotProductProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderIntegerDotProductPropertiesBuilder {
    type Target = PhysicalDeviceShaderIntegerDotProductProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderIntegerDotProductPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderIntegerDotProductPropertiesBuilder {
    type Target = PhysicalDeviceShaderIntegerDotProductProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    type Target = PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    type Builder = PhysicalDeviceShaderIntegerFunctions2FeaturesINTELBuilder;
}

/// A builder for a [`PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderIntegerFunctions2FeaturesINTELBuilder {
    value: PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL,
}

impl PhysicalDeviceShaderIntegerFunctions2FeaturesINTELBuilder {
    #[inline]
    pub fn shader_integer_functions2(mut self, shader_integer_functions2: bool) -> Self {
        self.value.shader_integer_functions2 = shader_integer_functions2 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderIntegerFunctions2FeaturesINTELBuilder {
    type Target = PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderIntegerFunctions2FeaturesINTELBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderIntegerFunctions2FeaturesINTELBuilder {
    type Target = PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
    type Target = PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
    type Builder = PhysicalDeviceShaderMaximalReconvergenceFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderMaximalReconvergenceFeaturesKHRBuilder {
    value: PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR,
}

impl PhysicalDeviceShaderMaximalReconvergenceFeaturesKHRBuilder {
    #[inline]
    pub fn shader_maximal_reconvergence(mut self, shader_maximal_reconvergence: bool) -> Self {
        self.value.shader_maximal_reconvergence = shader_maximal_reconvergence as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderMaximalReconvergenceFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderMaximalReconvergenceFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderMaximalReconvergenceFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    type Target = PhysicalDeviceShaderModuleIdentifierFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    type Builder = PhysicalDeviceShaderModuleIdentifierFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderModuleIdentifierFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderModuleIdentifierFeaturesEXTBuilder {
    value: PhysicalDeviceShaderModuleIdentifierFeaturesEXT,
}

impl PhysicalDeviceShaderModuleIdentifierFeaturesEXTBuilder {
    #[inline]
    pub fn shader_module_identifier(mut self, shader_module_identifier: bool) -> Self {
        self.value.shader_module_identifier = shader_module_identifier as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderModuleIdentifierFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderModuleIdentifierFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderModuleIdentifierFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderModuleIdentifierFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderModuleIdentifierFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderModuleIdentifierFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    type Target = PhysicalDeviceShaderModuleIdentifierPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    type Builder = PhysicalDeviceShaderModuleIdentifierPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderModuleIdentifierPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderModuleIdentifierPropertiesEXTBuilder {
    value: PhysicalDeviceShaderModuleIdentifierPropertiesEXT,
}

impl PhysicalDeviceShaderModuleIdentifierPropertiesEXTBuilder {
    #[inline]
    pub fn shader_module_identifier_algorithm_uuid(
        mut self,
        shader_module_identifier_algorithm_uuid: impl Into<ByteArray<UUID_SIZE>>,
    ) -> Self {
        self.value.shader_module_identifier_algorithm_uuid =
            shader_module_identifier_algorithm_uuid.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderModuleIdentifierPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderModuleIdentifierPropertiesEXTBuilder {
    type Target = PhysicalDeviceShaderModuleIdentifierPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderModuleIdentifierPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderModuleIdentifierPropertiesEXTBuilder {
    type Target = PhysicalDeviceShaderModuleIdentifierPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderObjectFeaturesEXT {
    type Target = PhysicalDeviceShaderObjectFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderObjectFeaturesEXT {
    type Builder = PhysicalDeviceShaderObjectFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderObjectFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderObjectFeaturesEXTBuilder {
    value: PhysicalDeviceShaderObjectFeaturesEXT,
}

impl PhysicalDeviceShaderObjectFeaturesEXTBuilder {
    #[inline]
    pub fn shader_object(mut self, shader_object: bool) -> Self {
        self.value.shader_object = shader_object as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderObjectFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderObjectFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderObjectFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderObjectFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderObjectFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderObjectFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderObjectPropertiesEXT {
    type Target = PhysicalDeviceShaderObjectPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderObjectPropertiesEXT {
    type Builder = PhysicalDeviceShaderObjectPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderObjectPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderObjectPropertiesEXTBuilder {
    value: PhysicalDeviceShaderObjectPropertiesEXT,
}

impl PhysicalDeviceShaderObjectPropertiesEXTBuilder {
    #[inline]
    pub fn shader_binary_uuid(
        mut self,
        shader_binary_uuid: impl Into<ByteArray<UUID_SIZE>>,
    ) -> Self {
        self.value.shader_binary_uuid = shader_binary_uuid.into();
        self
    }

    #[inline]
    pub fn shader_binary_version(mut self, shader_binary_version: u32) -> Self {
        self.value.shader_binary_version = shader_binary_version;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderObjectPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderObjectPropertiesEXTBuilder {
    type Target = PhysicalDeviceShaderObjectPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderObjectPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderObjectPropertiesEXTBuilder {
    type Target = PhysicalDeviceShaderObjectPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderQuadControlFeaturesKHR {
    type Target = PhysicalDeviceShaderQuadControlFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderQuadControlFeaturesKHR {
    type Builder = PhysicalDeviceShaderQuadControlFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceShaderQuadControlFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderQuadControlFeaturesKHRBuilder {
    value: PhysicalDeviceShaderQuadControlFeaturesKHR,
}

impl PhysicalDeviceShaderQuadControlFeaturesKHRBuilder {
    #[inline]
    pub fn shader_quad_control(mut self, shader_quad_control: bool) -> Self {
        self.value.shader_quad_control = shader_quad_control as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderQuadControlFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderQuadControlFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderQuadControlFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderQuadControlFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderQuadControlFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderQuadControlFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
    type Target = PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
    type Builder = PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRBuilder {
    value: PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR,
}

impl PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRBuilder {
    #[inline]
    pub fn shader_relaxed_extended_instruction(
        mut self,
        shader_relaxed_extended_instruction: bool,
    ) -> Self {
        self.value.shader_relaxed_extended_instruction =
            shader_relaxed_extended_instruction as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
    type Target = PhysicalDeviceShaderReplicatedCompositesFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
    type Builder = PhysicalDeviceShaderReplicatedCompositesFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderReplicatedCompositesFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderReplicatedCompositesFeaturesEXTBuilder {
    value: PhysicalDeviceShaderReplicatedCompositesFeaturesEXT,
}

impl PhysicalDeviceShaderReplicatedCompositesFeaturesEXTBuilder {
    #[inline]
    pub fn shader_replicated_composites(mut self, shader_replicated_composites: bool) -> Self {
        self.value.shader_replicated_composites = shader_replicated_composites as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderReplicatedCompositesFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderReplicatedCompositesFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderReplicatedCompositesFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderReplicatedCompositesFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderReplicatedCompositesFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSMBuiltinsFeaturesNV {
    type Target = PhysicalDeviceShaderSMBuiltinsFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderSMBuiltinsFeaturesNV {
    type Builder = PhysicalDeviceShaderSMBuiltinsFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceShaderSMBuiltinsFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderSMBuiltinsFeaturesNVBuilder {
    value: PhysicalDeviceShaderSMBuiltinsFeaturesNV,
}

impl PhysicalDeviceShaderSMBuiltinsFeaturesNVBuilder {
    #[inline]
    pub fn shader_sm_builtins(mut self, shader_sm_builtins: bool) -> Self {
        self.value.shader_sm_builtins = shader_sm_builtins as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderSMBuiltinsFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderSMBuiltinsFeaturesNVBuilder {
    type Target = PhysicalDeviceShaderSMBuiltinsFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderSMBuiltinsFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSMBuiltinsFeaturesNVBuilder {
    type Target = PhysicalDeviceShaderSMBuiltinsFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSMBuiltinsPropertiesNV {
    type Target = PhysicalDeviceShaderSMBuiltinsPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderSMBuiltinsPropertiesNV {
    type Builder = PhysicalDeviceShaderSMBuiltinsPropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceShaderSMBuiltinsPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderSMBuiltinsPropertiesNVBuilder {
    value: PhysicalDeviceShaderSMBuiltinsPropertiesNV,
}

impl PhysicalDeviceShaderSMBuiltinsPropertiesNVBuilder {
    #[inline]
    pub fn shader_sm_count(mut self, shader_sm_count: u32) -> Self {
        self.value.shader_sm_count = shader_sm_count;
        self
    }

    #[inline]
    pub fn shader_warps_per_sm(mut self, shader_warps_per_sm: u32) -> Self {
        self.value.shader_warps_per_sm = shader_warps_per_sm;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderSMBuiltinsPropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderSMBuiltinsPropertiesNVBuilder {
    type Target = PhysicalDeviceShaderSMBuiltinsPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderSMBuiltinsPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSMBuiltinsPropertiesNVBuilder {
    type Target = PhysicalDeviceShaderSMBuiltinsPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    type Target = PhysicalDeviceShaderSubgroupExtendedTypesFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    type Builder = PhysicalDeviceShaderSubgroupExtendedTypesFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceShaderSubgroupExtendedTypesFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderSubgroupExtendedTypesFeaturesBuilder {
    value: PhysicalDeviceShaderSubgroupExtendedTypesFeatures,
}

impl PhysicalDeviceShaderSubgroupExtendedTypesFeaturesBuilder {
    #[inline]
    pub fn shader_subgroup_extended_types(mut self, shader_subgroup_extended_types: bool) -> Self {
        self.value.shader_subgroup_extended_types = shader_subgroup_extended_types as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderSubgroupExtendedTypesFeaturesBuilder {
    type Target = PhysicalDeviceShaderSubgroupExtendedTypesFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderSubgroupExtendedTypesFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSubgroupExtendedTypesFeaturesBuilder {
    type Target = PhysicalDeviceShaderSubgroupExtendedTypesFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSubgroupRotateFeaturesKHR {
    type Target = PhysicalDeviceShaderSubgroupRotateFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderSubgroupRotateFeaturesKHR {
    type Builder = PhysicalDeviceShaderSubgroupRotateFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceShaderSubgroupRotateFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderSubgroupRotateFeaturesKHRBuilder {
    value: PhysicalDeviceShaderSubgroupRotateFeaturesKHR,
}

impl PhysicalDeviceShaderSubgroupRotateFeaturesKHRBuilder {
    #[inline]
    pub fn shader_subgroup_rotate(mut self, shader_subgroup_rotate: bool) -> Self {
        self.value.shader_subgroup_rotate = shader_subgroup_rotate as Bool32;
        self
    }

    #[inline]
    pub fn shader_subgroup_rotate_clustered(
        mut self,
        shader_subgroup_rotate_clustered: bool,
    ) -> Self {
        self.value.shader_subgroup_rotate_clustered = shader_subgroup_rotate_clustered as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderSubgroupRotateFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderSubgroupRotateFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderSubgroupRotateFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderSubgroupRotateFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSubgroupRotateFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderSubgroupRotateFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    type Target = PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    type Builder = PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRBuilder {
    value: PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
}

impl PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRBuilder {
    #[inline]
    pub fn shader_subgroup_uniform_control_flow(
        mut self,
        shader_subgroup_uniform_control_flow: bool,
    ) -> Self {
        self.value.shader_subgroup_uniform_control_flow =
            shader_subgroup_uniform_control_flow as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRBuilder {
    type Target = PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderTerminateInvocationFeatures {
    type Target = PhysicalDeviceShaderTerminateInvocationFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderTerminateInvocationFeatures {
    type Builder = PhysicalDeviceShaderTerminateInvocationFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceShaderTerminateInvocationFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderTerminateInvocationFeaturesBuilder {
    value: PhysicalDeviceShaderTerminateInvocationFeatures,
}

impl PhysicalDeviceShaderTerminateInvocationFeaturesBuilder {
    #[inline]
    pub fn shader_terminate_invocation(mut self, shader_terminate_invocation: bool) -> Self {
        self.value.shader_terminate_invocation = shader_terminate_invocation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderTerminateInvocationFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderTerminateInvocationFeaturesBuilder {
    type Target = PhysicalDeviceShaderTerminateInvocationFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderTerminateInvocationFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderTerminateInvocationFeaturesBuilder {
    type Target = PhysicalDeviceShaderTerminateInvocationFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderTileImageFeaturesEXT {
    type Target = PhysicalDeviceShaderTileImageFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderTileImageFeaturesEXT {
    type Builder = PhysicalDeviceShaderTileImageFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderTileImageFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderTileImageFeaturesEXTBuilder {
    value: PhysicalDeviceShaderTileImageFeaturesEXT,
}

impl PhysicalDeviceShaderTileImageFeaturesEXTBuilder {
    #[inline]
    pub fn shader_tile_image_color_read_access(
        mut self,
        shader_tile_image_color_read_access: bool,
    ) -> Self {
        self.value.shader_tile_image_color_read_access =
            shader_tile_image_color_read_access as Bool32;
        self
    }

    #[inline]
    pub fn shader_tile_image_depth_read_access(
        mut self,
        shader_tile_image_depth_read_access: bool,
    ) -> Self {
        self.value.shader_tile_image_depth_read_access =
            shader_tile_image_depth_read_access as Bool32;
        self
    }

    #[inline]
    pub fn shader_tile_image_stencil_read_access(
        mut self,
        shader_tile_image_stencil_read_access: bool,
    ) -> Self {
        self.value.shader_tile_image_stencil_read_access =
            shader_tile_image_stencil_read_access as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderTileImageFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderTileImageFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderTileImageFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderTileImageFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderTileImageFeaturesEXTBuilder {
    type Target = PhysicalDeviceShaderTileImageFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderTileImagePropertiesEXT {
    type Target = PhysicalDeviceShaderTileImagePropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShaderTileImagePropertiesEXT {
    type Builder = PhysicalDeviceShaderTileImagePropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceShaderTileImagePropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShaderTileImagePropertiesEXTBuilder {
    value: PhysicalDeviceShaderTileImagePropertiesEXT,
}

impl PhysicalDeviceShaderTileImagePropertiesEXTBuilder {
    #[inline]
    pub fn shader_tile_image_coherent_read_accelerated(
        mut self,
        shader_tile_image_coherent_read_accelerated: bool,
    ) -> Self {
        self.value.shader_tile_image_coherent_read_accelerated =
            shader_tile_image_coherent_read_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn shader_tile_image_read_sample_from_pixel_rate_invocation(
        mut self,
        shader_tile_image_read_sample_from_pixel_rate_invocation: bool,
    ) -> Self {
        self.value
            .shader_tile_image_read_sample_from_pixel_rate_invocation =
            shader_tile_image_read_sample_from_pixel_rate_invocation as Bool32;
        self
    }

    #[inline]
    pub fn shader_tile_image_read_from_helper_invocation(
        mut self,
        shader_tile_image_read_from_helper_invocation: bool,
    ) -> Self {
        self.value.shader_tile_image_read_from_helper_invocation =
            shader_tile_image_read_from_helper_invocation as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShaderTileImagePropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShaderTileImagePropertiesEXTBuilder {
    type Target = PhysicalDeviceShaderTileImagePropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShaderTileImagePropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShaderTileImagePropertiesEXTBuilder {
    type Target = PhysicalDeviceShaderTileImagePropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShadingRateImageFeaturesNV {
    type Target = PhysicalDeviceShadingRateImageFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShadingRateImageFeaturesNV {
    type Builder = PhysicalDeviceShadingRateImageFeaturesNVBuilder;
}

/// A builder for a [`PhysicalDeviceShadingRateImageFeaturesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShadingRateImageFeaturesNVBuilder {
    value: PhysicalDeviceShadingRateImageFeaturesNV,
}

impl PhysicalDeviceShadingRateImageFeaturesNVBuilder {
    #[inline]
    pub fn shading_rate_image(mut self, shading_rate_image: bool) -> Self {
        self.value.shading_rate_image = shading_rate_image as Bool32;
        self
    }

    #[inline]
    pub fn shading_rate_coarse_sample_order(
        mut self,
        shading_rate_coarse_sample_order: bool,
    ) -> Self {
        self.value.shading_rate_coarse_sample_order = shading_rate_coarse_sample_order as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShadingRateImageFeaturesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShadingRateImageFeaturesNVBuilder {
    type Target = PhysicalDeviceShadingRateImageFeaturesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShadingRateImageFeaturesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShadingRateImageFeaturesNVBuilder {
    type Target = PhysicalDeviceShadingRateImageFeaturesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceShadingRateImagePropertiesNV {
    type Target = PhysicalDeviceShadingRateImagePropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceShadingRateImagePropertiesNV {
    type Builder = PhysicalDeviceShadingRateImagePropertiesNVBuilder;
}

/// A builder for a [`PhysicalDeviceShadingRateImagePropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceShadingRateImagePropertiesNVBuilder {
    value: PhysicalDeviceShadingRateImagePropertiesNV,
}

impl PhysicalDeviceShadingRateImagePropertiesNVBuilder {
    #[inline]
    pub fn shading_rate_texel_size(
        mut self,
        shading_rate_texel_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.shading_rate_texel_size = shading_rate_texel_size.into();
        self
    }

    #[inline]
    pub fn shading_rate_palette_size(mut self, shading_rate_palette_size: u32) -> Self {
        self.value.shading_rate_palette_size = shading_rate_palette_size;
        self
    }

    #[inline]
    pub fn shading_rate_max_coarse_samples(mut self, shading_rate_max_coarse_samples: u32) -> Self {
        self.value.shading_rate_max_coarse_samples = shading_rate_max_coarse_samples;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceShadingRateImagePropertiesNV {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceShadingRateImagePropertiesNVBuilder {
    type Target = PhysicalDeviceShadingRateImagePropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceShadingRateImagePropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceShadingRateImagePropertiesNVBuilder {
    type Target = PhysicalDeviceShadingRateImagePropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSparseImageFormatInfo2 {
    type Target = PhysicalDeviceSparseImageFormatInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSparseImageFormatInfo2 {
    type Builder = PhysicalDeviceSparseImageFormatInfo2Builder;
}

/// A builder for a [`PhysicalDeviceSparseImageFormatInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSparseImageFormatInfo2Builder {
    value: PhysicalDeviceSparseImageFormatInfo2,
}

impl PhysicalDeviceSparseImageFormatInfo2Builder {
    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn type_(mut self, type_: ImageType) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn samples(mut self, samples: SampleCountFlags) -> Self {
        self.value.samples = samples;
        self
    }

    #[inline]
    pub fn usage(mut self, usage: ImageUsageFlags) -> Self {
        self.value.usage = usage;
        self
    }

    #[inline]
    pub fn tiling(mut self, tiling: ImageTiling) -> Self {
        self.value.tiling = tiling;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSparseImageFormatInfo2 {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSparseImageFormatInfo2Builder {
    type Target = PhysicalDeviceSparseImageFormatInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSparseImageFormatInfo2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSparseImageFormatInfo2Builder {
    type Target = PhysicalDeviceSparseImageFormatInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSparseProperties {
    type Target = PhysicalDeviceSparseProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSparseProperties {
    type Builder = PhysicalDeviceSparsePropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceSparseProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSparsePropertiesBuilder {
    value: PhysicalDeviceSparseProperties,
}

impl PhysicalDeviceSparsePropertiesBuilder {
    #[inline]
    pub fn residency_standard_2d_block_shape(
        mut self,
        residency_standard_2d_block_shape: bool,
    ) -> Self {
        self.value.residency_standard_2d_block_shape = residency_standard_2d_block_shape as Bool32;
        self
    }

    #[inline]
    pub fn residency_standard_2d_multisample_block_shape(
        mut self,
        residency_standard_2d_multisample_block_shape: bool,
    ) -> Self {
        self.value.residency_standard_2d_multisample_block_shape =
            residency_standard_2d_multisample_block_shape as Bool32;
        self
    }

    #[inline]
    pub fn residency_standard_3d_block_shape(
        mut self,
        residency_standard_3d_block_shape: bool,
    ) -> Self {
        self.value.residency_standard_3d_block_shape = residency_standard_3d_block_shape as Bool32;
        self
    }

    #[inline]
    pub fn residency_aligned_mip_size(mut self, residency_aligned_mip_size: bool) -> Self {
        self.value.residency_aligned_mip_size = residency_aligned_mip_size as Bool32;
        self
    }

    #[inline]
    pub fn residency_non_resident_strict(mut self, residency_non_resident_strict: bool) -> Self {
        self.value.residency_non_resident_strict = residency_non_resident_strict as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSparseProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSparsePropertiesBuilder {
    type Target = PhysicalDeviceSparseProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSparsePropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSparsePropertiesBuilder {
    type Target = PhysicalDeviceSparseProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubgroupProperties {
    type Target = PhysicalDeviceSubgroupProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSubgroupProperties {
    type Builder = PhysicalDeviceSubgroupPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceSubgroupProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSubgroupPropertiesBuilder {
    value: PhysicalDeviceSubgroupProperties,
}

impl PhysicalDeviceSubgroupPropertiesBuilder {
    #[inline]
    pub fn subgroup_size(mut self, subgroup_size: u32) -> Self {
        self.value.subgroup_size = subgroup_size;
        self
    }

    #[inline]
    pub fn supported_stages(mut self, supported_stages: ShaderStageFlags) -> Self {
        self.value.supported_stages = supported_stages;
        self
    }

    #[inline]
    pub fn supported_operations(mut self, supported_operations: SubgroupFeatureFlags) -> Self {
        self.value.supported_operations = supported_operations;
        self
    }

    #[inline]
    pub fn quad_operations_in_all_stages(mut self, quad_operations_in_all_stages: bool) -> Self {
        self.value.quad_operations_in_all_stages = quad_operations_in_all_stages as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSubgroupProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSubgroupPropertiesBuilder {
    type Target = PhysicalDeviceSubgroupProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSubgroupPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubgroupPropertiesBuilder {
    type Target = PhysicalDeviceSubgroupProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubgroupSizeControlFeatures {
    type Target = PhysicalDeviceSubgroupSizeControlFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSubgroupSizeControlFeatures {
    type Builder = PhysicalDeviceSubgroupSizeControlFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceSubgroupSizeControlFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSubgroupSizeControlFeaturesBuilder {
    value: PhysicalDeviceSubgroupSizeControlFeatures,
}

impl PhysicalDeviceSubgroupSizeControlFeaturesBuilder {
    #[inline]
    pub fn subgroup_size_control(mut self, subgroup_size_control: bool) -> Self {
        self.value.subgroup_size_control = subgroup_size_control as Bool32;
        self
    }

    #[inline]
    pub fn compute_full_subgroups(mut self, compute_full_subgroups: bool) -> Self {
        self.value.compute_full_subgroups = compute_full_subgroups as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSubgroupSizeControlFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSubgroupSizeControlFeaturesBuilder {
    type Target = PhysicalDeviceSubgroupSizeControlFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSubgroupSizeControlFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubgroupSizeControlFeaturesBuilder {
    type Target = PhysicalDeviceSubgroupSizeControlFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubgroupSizeControlProperties {
    type Target = PhysicalDeviceSubgroupSizeControlProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSubgroupSizeControlProperties {
    type Builder = PhysicalDeviceSubgroupSizeControlPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceSubgroupSizeControlProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSubgroupSizeControlPropertiesBuilder {
    value: PhysicalDeviceSubgroupSizeControlProperties,
}

impl PhysicalDeviceSubgroupSizeControlPropertiesBuilder {
    #[inline]
    pub fn min_subgroup_size(mut self, min_subgroup_size: u32) -> Self {
        self.value.min_subgroup_size = min_subgroup_size;
        self
    }

    #[inline]
    pub fn max_subgroup_size(mut self, max_subgroup_size: u32) -> Self {
        self.value.max_subgroup_size = max_subgroup_size;
        self
    }

    #[inline]
    pub fn max_compute_workgroup_subgroups(mut self, max_compute_workgroup_subgroups: u32) -> Self {
        self.value.max_compute_workgroup_subgroups = max_compute_workgroup_subgroups;
        self
    }

    #[inline]
    pub fn required_subgroup_size_stages(
        mut self,
        required_subgroup_size_stages: ShaderStageFlags,
    ) -> Self {
        self.value.required_subgroup_size_stages = required_subgroup_size_stages;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSubgroupSizeControlProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSubgroupSizeControlPropertiesBuilder {
    type Target = PhysicalDeviceSubgroupSizeControlProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSubgroupSizeControlPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubgroupSizeControlPropertiesBuilder {
    type Target = PhysicalDeviceSubgroupSizeControlProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    type Target = PhysicalDeviceSubpassMergeFeedbackFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    type Builder = PhysicalDeviceSubpassMergeFeedbackFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceSubpassMergeFeedbackFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSubpassMergeFeedbackFeaturesEXTBuilder {
    value: PhysicalDeviceSubpassMergeFeedbackFeaturesEXT,
}

impl PhysicalDeviceSubpassMergeFeedbackFeaturesEXTBuilder {
    #[inline]
    pub fn subpass_merge_feedback(mut self, subpass_merge_feedback: bool) -> Self {
        self.value.subpass_merge_feedback = subpass_merge_feedback as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSubpassMergeFeedbackFeaturesEXTBuilder {
    type Target = PhysicalDeviceSubpassMergeFeedbackFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSubpassMergeFeedbackFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubpassMergeFeedbackFeaturesEXTBuilder {
    type Target = PhysicalDeviceSubpassMergeFeedbackFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubpassShadingFeaturesHUAWEI {
    type Target = PhysicalDeviceSubpassShadingFeaturesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSubpassShadingFeaturesHUAWEI {
    type Builder = PhysicalDeviceSubpassShadingFeaturesHUAWEIBuilder;
}

/// A builder for a [`PhysicalDeviceSubpassShadingFeaturesHUAWEI`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSubpassShadingFeaturesHUAWEIBuilder {
    value: PhysicalDeviceSubpassShadingFeaturesHUAWEI,
}

impl PhysicalDeviceSubpassShadingFeaturesHUAWEIBuilder {
    #[inline]
    pub fn subpass_shading(mut self, subpass_shading: bool) -> Self {
        self.value.subpass_shading = subpass_shading as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSubpassShadingFeaturesHUAWEI {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSubpassShadingFeaturesHUAWEIBuilder {
    type Target = PhysicalDeviceSubpassShadingFeaturesHUAWEI;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSubpassShadingFeaturesHUAWEIBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubpassShadingFeaturesHUAWEIBuilder {
    type Target = PhysicalDeviceSubpassShadingFeaturesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubpassShadingPropertiesHUAWEI {
    type Target = PhysicalDeviceSubpassShadingPropertiesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSubpassShadingPropertiesHUAWEI {
    type Builder = PhysicalDeviceSubpassShadingPropertiesHUAWEIBuilder;
}

/// A builder for a [`PhysicalDeviceSubpassShadingPropertiesHUAWEI`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSubpassShadingPropertiesHUAWEIBuilder {
    value: PhysicalDeviceSubpassShadingPropertiesHUAWEI,
}

impl PhysicalDeviceSubpassShadingPropertiesHUAWEIBuilder {
    #[inline]
    pub fn max_subpass_shading_workgroup_size_aspect_ratio(
        mut self,
        max_subpass_shading_workgroup_size_aspect_ratio: u32,
    ) -> Self {
        self.value.max_subpass_shading_workgroup_size_aspect_ratio =
            max_subpass_shading_workgroup_size_aspect_ratio;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSubpassShadingPropertiesHUAWEI {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSubpassShadingPropertiesHUAWEIBuilder {
    type Target = PhysicalDeviceSubpassShadingPropertiesHUAWEI;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSubpassShadingPropertiesHUAWEIBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSubpassShadingPropertiesHUAWEIBuilder {
    type Target = PhysicalDeviceSubpassShadingPropertiesHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceSurfaceInfo2KHR`].
pub unsafe trait ExtendsPhysicalDeviceSurfaceInfo2KHR: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceSurfaceInfo2KHR for SurfaceFullScreenExclusiveInfoEXT {}
unsafe impl ExtendsPhysicalDeviceSurfaceInfo2KHR for SurfaceFullScreenExclusiveWin32InfoEXT {}
unsafe impl ExtendsPhysicalDeviceSurfaceInfo2KHR for SurfacePresentModeEXT {}

unsafe impl Cast for PhysicalDeviceSurfaceInfo2KHR {
    type Target = PhysicalDeviceSurfaceInfo2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceSurfaceInfo2KHR {
    type Builder = PhysicalDeviceSurfaceInfo2KHRBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceSurfaceInfo2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSurfaceInfo2KHRBuilder<'b> {
    value: PhysicalDeviceSurfaceInfo2KHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceSurfaceInfo2KHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceSurfaceInfo2KHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn surface(mut self, surface: SurfaceKHR) -> Self {
        self.value.surface = surface;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSurfaceInfo2KHR {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceSurfaceInfo2KHRBuilder<'b> {
    type Target = PhysicalDeviceSurfaceInfo2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceSurfaceInfo2KHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceSurfaceInfo2KHRBuilder<'b> {
    type Target = PhysicalDeviceSurfaceInfo2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    type Target = PhysicalDeviceSwapchainMaintenance1FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    type Builder = PhysicalDeviceSwapchainMaintenance1FeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceSwapchainMaintenance1FeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSwapchainMaintenance1FeaturesEXTBuilder {
    value: PhysicalDeviceSwapchainMaintenance1FeaturesEXT,
}

impl PhysicalDeviceSwapchainMaintenance1FeaturesEXTBuilder {
    #[inline]
    pub fn swapchain_maintenance1(mut self, swapchain_maintenance1: bool) -> Self {
        self.value.swapchain_maintenance1 = swapchain_maintenance1 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSwapchainMaintenance1FeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSwapchainMaintenance1FeaturesEXTBuilder {
    type Target = PhysicalDeviceSwapchainMaintenance1FeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSwapchainMaintenance1FeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSwapchainMaintenance1FeaturesEXTBuilder {
    type Target = PhysicalDeviceSwapchainMaintenance1FeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceSynchronization2Features {
    type Target = PhysicalDeviceSynchronization2Features;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceSynchronization2Features {
    type Builder = PhysicalDeviceSynchronization2FeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceSynchronization2Features`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceSynchronization2FeaturesBuilder {
    value: PhysicalDeviceSynchronization2Features,
}

impl PhysicalDeviceSynchronization2FeaturesBuilder {
    #[inline]
    pub fn synchronization2(mut self, synchronization2: bool) -> Self {
        self.value.synchronization2 = synchronization2 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceSynchronization2Features {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceSynchronization2FeaturesBuilder {
    type Target = PhysicalDeviceSynchronization2Features;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceSynchronization2FeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceSynchronization2FeaturesBuilder {
    type Target = PhysicalDeviceSynchronization2Features;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    type Target = PhysicalDeviceTexelBufferAlignmentFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    type Builder = PhysicalDeviceTexelBufferAlignmentFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceTexelBufferAlignmentFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceTexelBufferAlignmentFeaturesEXTBuilder {
    value: PhysicalDeviceTexelBufferAlignmentFeaturesEXT,
}

impl PhysicalDeviceTexelBufferAlignmentFeaturesEXTBuilder {
    #[inline]
    pub fn texel_buffer_alignment(mut self, texel_buffer_alignment: bool) -> Self {
        self.value.texel_buffer_alignment = texel_buffer_alignment as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceTexelBufferAlignmentFeaturesEXTBuilder {
    type Target = PhysicalDeviceTexelBufferAlignmentFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceTexelBufferAlignmentFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceTexelBufferAlignmentFeaturesEXTBuilder {
    type Target = PhysicalDeviceTexelBufferAlignmentFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceTexelBufferAlignmentProperties {
    type Target = PhysicalDeviceTexelBufferAlignmentProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceTexelBufferAlignmentProperties {
    type Builder = PhysicalDeviceTexelBufferAlignmentPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceTexelBufferAlignmentProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceTexelBufferAlignmentPropertiesBuilder {
    value: PhysicalDeviceTexelBufferAlignmentProperties,
}

impl PhysicalDeviceTexelBufferAlignmentPropertiesBuilder {
    #[inline]
    pub fn storage_texel_buffer_offset_alignment_bytes(
        mut self,
        storage_texel_buffer_offset_alignment_bytes: DeviceSize,
    ) -> Self {
        self.value.storage_texel_buffer_offset_alignment_bytes =
            storage_texel_buffer_offset_alignment_bytes;
        self
    }

    #[inline]
    pub fn storage_texel_buffer_offset_single_texel_alignment(
        mut self,
        storage_texel_buffer_offset_single_texel_alignment: bool,
    ) -> Self {
        self.value
            .storage_texel_buffer_offset_single_texel_alignment =
            storage_texel_buffer_offset_single_texel_alignment as Bool32;
        self
    }

    #[inline]
    pub fn uniform_texel_buffer_offset_alignment_bytes(
        mut self,
        uniform_texel_buffer_offset_alignment_bytes: DeviceSize,
    ) -> Self {
        self.value.uniform_texel_buffer_offset_alignment_bytes =
            uniform_texel_buffer_offset_alignment_bytes;
        self
    }

    #[inline]
    pub fn uniform_texel_buffer_offset_single_texel_alignment(
        mut self,
        uniform_texel_buffer_offset_single_texel_alignment: bool,
    ) -> Self {
        self.value
            .uniform_texel_buffer_offset_single_texel_alignment =
            uniform_texel_buffer_offset_single_texel_alignment as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceTexelBufferAlignmentProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceTexelBufferAlignmentPropertiesBuilder {
    type Target = PhysicalDeviceTexelBufferAlignmentProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceTexelBufferAlignmentPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceTexelBufferAlignmentPropertiesBuilder {
    type Target = PhysicalDeviceTexelBufferAlignmentProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceTextureCompressionASTCHDRFeatures {
    type Target = PhysicalDeviceTextureCompressionASTCHDRFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceTextureCompressionASTCHDRFeatures {
    type Builder = PhysicalDeviceTextureCompressionASTCHDRFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceTextureCompressionASTCHDRFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceTextureCompressionASTCHDRFeaturesBuilder {
    value: PhysicalDeviceTextureCompressionASTCHDRFeatures,
}

impl PhysicalDeviceTextureCompressionASTCHDRFeaturesBuilder {
    #[inline]
    pub fn texture_compression_astc_hdr(mut self, texture_compression_astc_hdr: bool) -> Self {
        self.value.texture_compression_astc_hdr = texture_compression_astc_hdr as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceTextureCompressionASTCHDRFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceTextureCompressionASTCHDRFeaturesBuilder {
    type Target = PhysicalDeviceTextureCompressionASTCHDRFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceTextureCompressionASTCHDRFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceTextureCompressionASTCHDRFeaturesBuilder {
    type Target = PhysicalDeviceTextureCompressionASTCHDRFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceTilePropertiesFeaturesQCOM {
    type Target = PhysicalDeviceTilePropertiesFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceTilePropertiesFeaturesQCOM {
    type Builder = PhysicalDeviceTilePropertiesFeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceTilePropertiesFeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceTilePropertiesFeaturesQCOMBuilder {
    value: PhysicalDeviceTilePropertiesFeaturesQCOM,
}

impl PhysicalDeviceTilePropertiesFeaturesQCOMBuilder {
    #[inline]
    pub fn tile_properties(mut self, tile_properties: bool) -> Self {
        self.value.tile_properties = tile_properties as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceTilePropertiesFeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceTilePropertiesFeaturesQCOMBuilder {
    type Target = PhysicalDeviceTilePropertiesFeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceTilePropertiesFeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceTilePropertiesFeaturesQCOMBuilder {
    type Target = PhysicalDeviceTilePropertiesFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceTimelineSemaphoreFeatures {
    type Target = PhysicalDeviceTimelineSemaphoreFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceTimelineSemaphoreFeatures {
    type Builder = PhysicalDeviceTimelineSemaphoreFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceTimelineSemaphoreFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceTimelineSemaphoreFeaturesBuilder {
    value: PhysicalDeviceTimelineSemaphoreFeatures,
}

impl PhysicalDeviceTimelineSemaphoreFeaturesBuilder {
    #[inline]
    pub fn timeline_semaphore(mut self, timeline_semaphore: bool) -> Self {
        self.value.timeline_semaphore = timeline_semaphore as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceTimelineSemaphoreFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceTimelineSemaphoreFeaturesBuilder {
    type Target = PhysicalDeviceTimelineSemaphoreFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceTimelineSemaphoreFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceTimelineSemaphoreFeaturesBuilder {
    type Target = PhysicalDeviceTimelineSemaphoreFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceTimelineSemaphoreProperties {
    type Target = PhysicalDeviceTimelineSemaphoreProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceTimelineSemaphoreProperties {
    type Builder = PhysicalDeviceTimelineSemaphorePropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceTimelineSemaphoreProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceTimelineSemaphorePropertiesBuilder {
    value: PhysicalDeviceTimelineSemaphoreProperties,
}

impl PhysicalDeviceTimelineSemaphorePropertiesBuilder {
    #[inline]
    pub fn max_timeline_semaphore_value_difference(
        mut self,
        max_timeline_semaphore_value_difference: u64,
    ) -> Self {
        self.value.max_timeline_semaphore_value_difference =
            max_timeline_semaphore_value_difference;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceTimelineSemaphoreProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceTimelineSemaphorePropertiesBuilder {
    type Target = PhysicalDeviceTimelineSemaphoreProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceTimelineSemaphorePropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceTimelineSemaphorePropertiesBuilder {
    type Target = PhysicalDeviceTimelineSemaphoreProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceToolProperties {
    type Target = PhysicalDeviceToolProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceToolProperties {
    type Builder = PhysicalDeviceToolPropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceToolProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceToolPropertiesBuilder {
    value: PhysicalDeviceToolProperties,
}

impl PhysicalDeviceToolPropertiesBuilder {
    #[inline]
    pub fn name(mut self, name: impl Into<StringArray<MAX_EXTENSION_NAME_SIZE>>) -> Self {
        self.value.name = name.into();
        self
    }

    #[inline]
    pub fn version(mut self, version: impl Into<StringArray<MAX_EXTENSION_NAME_SIZE>>) -> Self {
        self.value.version = version.into();
        self
    }

    #[inline]
    pub fn purposes(mut self, purposes: ToolPurposeFlags) -> Self {
        self.value.purposes = purposes;
        self
    }

    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn layer(mut self, layer: impl Into<StringArray<MAX_EXTENSION_NAME_SIZE>>) -> Self {
        self.value.layer = layer.into();
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceToolProperties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceToolPropertiesBuilder {
    type Target = PhysicalDeviceToolProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceToolPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceToolPropertiesBuilder {
    type Target = PhysicalDeviceToolProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceTransformFeedbackFeaturesEXT {
    type Target = PhysicalDeviceTransformFeedbackFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceTransformFeedbackFeaturesEXT {
    type Builder = PhysicalDeviceTransformFeedbackFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceTransformFeedbackFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceTransformFeedbackFeaturesEXTBuilder {
    value: PhysicalDeviceTransformFeedbackFeaturesEXT,
}

impl PhysicalDeviceTransformFeedbackFeaturesEXTBuilder {
    #[inline]
    pub fn transform_feedback(mut self, transform_feedback: bool) -> Self {
        self.value.transform_feedback = transform_feedback as Bool32;
        self
    }

    #[inline]
    pub fn geometry_streams(mut self, geometry_streams: bool) -> Self {
        self.value.geometry_streams = geometry_streams as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceTransformFeedbackFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceTransformFeedbackFeaturesEXTBuilder {
    type Target = PhysicalDeviceTransformFeedbackFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceTransformFeedbackFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceTransformFeedbackFeaturesEXTBuilder {
    type Target = PhysicalDeviceTransformFeedbackFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceTransformFeedbackPropertiesEXT {
    type Target = PhysicalDeviceTransformFeedbackPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceTransformFeedbackPropertiesEXT {
    type Builder = PhysicalDeviceTransformFeedbackPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceTransformFeedbackPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceTransformFeedbackPropertiesEXTBuilder {
    value: PhysicalDeviceTransformFeedbackPropertiesEXT,
}

impl PhysicalDeviceTransformFeedbackPropertiesEXTBuilder {
    #[inline]
    pub fn max_transform_feedback_streams(mut self, max_transform_feedback_streams: u32) -> Self {
        self.value.max_transform_feedback_streams = max_transform_feedback_streams;
        self
    }

    #[inline]
    pub fn max_transform_feedback_buffers(mut self, max_transform_feedback_buffers: u32) -> Self {
        self.value.max_transform_feedback_buffers = max_transform_feedback_buffers;
        self
    }

    #[inline]
    pub fn max_transform_feedback_buffer_size(
        mut self,
        max_transform_feedback_buffer_size: DeviceSize,
    ) -> Self {
        self.value.max_transform_feedback_buffer_size = max_transform_feedback_buffer_size;
        self
    }

    #[inline]
    pub fn max_transform_feedback_stream_data_size(
        mut self,
        max_transform_feedback_stream_data_size: u32,
    ) -> Self {
        self.value.max_transform_feedback_stream_data_size =
            max_transform_feedback_stream_data_size;
        self
    }

    #[inline]
    pub fn max_transform_feedback_buffer_data_size(
        mut self,
        max_transform_feedback_buffer_data_size: u32,
    ) -> Self {
        self.value.max_transform_feedback_buffer_data_size =
            max_transform_feedback_buffer_data_size;
        self
    }

    #[inline]
    pub fn max_transform_feedback_buffer_data_stride(
        mut self,
        max_transform_feedback_buffer_data_stride: u32,
    ) -> Self {
        self.value.max_transform_feedback_buffer_data_stride =
            max_transform_feedback_buffer_data_stride;
        self
    }

    #[inline]
    pub fn transform_feedback_queries(mut self, transform_feedback_queries: bool) -> Self {
        self.value.transform_feedback_queries = transform_feedback_queries as Bool32;
        self
    }

    #[inline]
    pub fn transform_feedback_streams_lines_triangles(
        mut self,
        transform_feedback_streams_lines_triangles: bool,
    ) -> Self {
        self.value.transform_feedback_streams_lines_triangles =
            transform_feedback_streams_lines_triangles as Bool32;
        self
    }

    #[inline]
    pub fn transform_feedback_rasterization_stream_select(
        mut self,
        transform_feedback_rasterization_stream_select: bool,
    ) -> Self {
        self.value.transform_feedback_rasterization_stream_select =
            transform_feedback_rasterization_stream_select as Bool32;
        self
    }

    #[inline]
    pub fn transform_feedback_draw(mut self, transform_feedback_draw: bool) -> Self {
        self.value.transform_feedback_draw = transform_feedback_draw as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceTransformFeedbackPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceTransformFeedbackPropertiesEXTBuilder {
    type Target = PhysicalDeviceTransformFeedbackPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceTransformFeedbackPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceTransformFeedbackPropertiesEXTBuilder {
    type Target = PhysicalDeviceTransformFeedbackPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceUniformBufferStandardLayoutFeatures {
    type Target = PhysicalDeviceUniformBufferStandardLayoutFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceUniformBufferStandardLayoutFeatures {
    type Builder = PhysicalDeviceUniformBufferStandardLayoutFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceUniformBufferStandardLayoutFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceUniformBufferStandardLayoutFeaturesBuilder {
    value: PhysicalDeviceUniformBufferStandardLayoutFeatures,
}

impl PhysicalDeviceUniformBufferStandardLayoutFeaturesBuilder {
    #[inline]
    pub fn uniform_buffer_standard_layout(mut self, uniform_buffer_standard_layout: bool) -> Self {
        self.value.uniform_buffer_standard_layout = uniform_buffer_standard_layout as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceUniformBufferStandardLayoutFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceUniformBufferStandardLayoutFeaturesBuilder {
    type Target = PhysicalDeviceUniformBufferStandardLayoutFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceUniformBufferStandardLayoutFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceUniformBufferStandardLayoutFeaturesBuilder {
    type Target = PhysicalDeviceUniformBufferStandardLayoutFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVariablePointersFeatures {
    type Target = PhysicalDeviceVariablePointersFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVariablePointersFeatures {
    type Builder = PhysicalDeviceVariablePointersFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceVariablePointersFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVariablePointersFeaturesBuilder {
    value: PhysicalDeviceVariablePointersFeatures,
}

impl PhysicalDeviceVariablePointersFeaturesBuilder {
    #[inline]
    pub fn variable_pointers_storage_buffer(
        mut self,
        variable_pointers_storage_buffer: bool,
    ) -> Self {
        self.value.variable_pointers_storage_buffer = variable_pointers_storage_buffer as Bool32;
        self
    }

    #[inline]
    pub fn variable_pointers(mut self, variable_pointers: bool) -> Self {
        self.value.variable_pointers = variable_pointers as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVariablePointersFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVariablePointersFeaturesBuilder {
    type Target = PhysicalDeviceVariablePointersFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVariablePointersFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVariablePointersFeaturesBuilder {
    type Target = PhysicalDeviceVariablePointersFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVertexAttributeDivisorFeaturesKHR {
    type Target = PhysicalDeviceVertexAttributeDivisorFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVertexAttributeDivisorFeaturesKHR {
    type Builder = PhysicalDeviceVertexAttributeDivisorFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceVertexAttributeDivisorFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVertexAttributeDivisorFeaturesKHRBuilder {
    value: PhysicalDeviceVertexAttributeDivisorFeaturesKHR,
}

impl PhysicalDeviceVertexAttributeDivisorFeaturesKHRBuilder {
    #[inline]
    pub fn vertex_attribute_instance_rate_divisor(
        mut self,
        vertex_attribute_instance_rate_divisor: bool,
    ) -> Self {
        self.value.vertex_attribute_instance_rate_divisor =
            vertex_attribute_instance_rate_divisor as Bool32;
        self
    }

    #[inline]
    pub fn vertex_attribute_instance_rate_zero_divisor(
        mut self,
        vertex_attribute_instance_rate_zero_divisor: bool,
    ) -> Self {
        self.value.vertex_attribute_instance_rate_zero_divisor =
            vertex_attribute_instance_rate_zero_divisor as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVertexAttributeDivisorFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVertexAttributeDivisorFeaturesKHRBuilder {
    type Target = PhysicalDeviceVertexAttributeDivisorFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVertexAttributeDivisorFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVertexAttributeDivisorFeaturesKHRBuilder {
    type Target = PhysicalDeviceVertexAttributeDivisorFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    type Target = PhysicalDeviceVertexAttributeDivisorPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    type Builder = PhysicalDeviceVertexAttributeDivisorPropertiesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceVertexAttributeDivisorPropertiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVertexAttributeDivisorPropertiesEXTBuilder {
    value: PhysicalDeviceVertexAttributeDivisorPropertiesEXT,
}

impl PhysicalDeviceVertexAttributeDivisorPropertiesEXTBuilder {
    #[inline]
    pub fn max_vertex_attrib_divisor(mut self, max_vertex_attrib_divisor: u32) -> Self {
        self.value.max_vertex_attrib_divisor = max_vertex_attrib_divisor;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVertexAttributeDivisorPropertiesEXTBuilder {
    type Target = PhysicalDeviceVertexAttributeDivisorPropertiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVertexAttributeDivisorPropertiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVertexAttributeDivisorPropertiesEXTBuilder {
    type Target = PhysicalDeviceVertexAttributeDivisorPropertiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVertexAttributeDivisorPropertiesKHR {
    type Target = PhysicalDeviceVertexAttributeDivisorPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVertexAttributeDivisorPropertiesKHR {
    type Builder = PhysicalDeviceVertexAttributeDivisorPropertiesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceVertexAttributeDivisorPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVertexAttributeDivisorPropertiesKHRBuilder {
    value: PhysicalDeviceVertexAttributeDivisorPropertiesKHR,
}

impl PhysicalDeviceVertexAttributeDivisorPropertiesKHRBuilder {
    #[inline]
    pub fn max_vertex_attrib_divisor(mut self, max_vertex_attrib_divisor: u32) -> Self {
        self.value.max_vertex_attrib_divisor = max_vertex_attrib_divisor;
        self
    }

    #[inline]
    pub fn supports_non_zero_first_instance(
        mut self,
        supports_non_zero_first_instance: bool,
    ) -> Self {
        self.value.supports_non_zero_first_instance = supports_non_zero_first_instance as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVertexAttributeDivisorPropertiesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVertexAttributeDivisorPropertiesKHRBuilder {
    type Target = PhysicalDeviceVertexAttributeDivisorPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVertexAttributeDivisorPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVertexAttributeDivisorPropertiesKHRBuilder {
    type Target = PhysicalDeviceVertexAttributeDivisorPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    type Target = PhysicalDeviceVertexInputDynamicStateFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    type Builder = PhysicalDeviceVertexInputDynamicStateFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceVertexInputDynamicStateFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVertexInputDynamicStateFeaturesEXTBuilder {
    value: PhysicalDeviceVertexInputDynamicStateFeaturesEXT,
}

impl PhysicalDeviceVertexInputDynamicStateFeaturesEXTBuilder {
    #[inline]
    pub fn vertex_input_dynamic_state(mut self, vertex_input_dynamic_state: bool) -> Self {
        self.value.vertex_input_dynamic_state = vertex_input_dynamic_state as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVertexInputDynamicStateFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVertexInputDynamicStateFeaturesEXTBuilder {
    type Target = PhysicalDeviceVertexInputDynamicStateFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVertexInputDynamicStateFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVertexInputDynamicStateFeaturesEXTBuilder {
    type Target = PhysicalDeviceVertexInputDynamicStateFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVideoEncodeQualityLevelInfoKHR {
    type Target = PhysicalDeviceVideoEncodeQualityLevelInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceVideoEncodeQualityLevelInfoKHR {
    type Builder = PhysicalDeviceVideoEncodeQualityLevelInfoKHRBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceVideoEncodeQualityLevelInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVideoEncodeQualityLevelInfoKHRBuilder<'b> {
    value: PhysicalDeviceVideoEncodeQualityLevelInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceVideoEncodeQualityLevelInfoKHRBuilder<'b> {
    #[inline]
    pub fn video_profile(
        mut self,
        video_profile: &'b impl Cast<Target = VideoProfileInfoKHR>,
    ) -> Self {
        self.value.video_profile = video_profile.as_ref();
        self
    }

    #[inline]
    pub fn quality_level(mut self, quality_level: u32) -> Self {
        self.value.quality_level = quality_level;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVideoEncodeQualityLevelInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceVideoEncodeQualityLevelInfoKHRBuilder<'b> {
    type Target = PhysicalDeviceVideoEncodeQualityLevelInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceVideoEncodeQualityLevelInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceVideoEncodeQualityLevelInfoKHRBuilder<'b> {
    type Target = PhysicalDeviceVideoEncodeQualityLevelInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PhysicalDeviceVideoFormatInfoKHR`].
pub unsafe trait ExtendsPhysicalDeviceVideoFormatInfoKHR: fmt::Debug {}
unsafe impl ExtendsPhysicalDeviceVideoFormatInfoKHR for VideoProfileListInfoKHR {}

unsafe impl Cast for PhysicalDeviceVideoFormatInfoKHR {
    type Target = PhysicalDeviceVideoFormatInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PhysicalDeviceVideoFormatInfoKHR {
    type Builder = PhysicalDeviceVideoFormatInfoKHRBuilder<'b>;
}

/// A builder for a [`PhysicalDeviceVideoFormatInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVideoFormatInfoKHRBuilder<'b> {
    value: PhysicalDeviceVideoFormatInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PhysicalDeviceVideoFormatInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPhysicalDeviceVideoFormatInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn image_usage(mut self, image_usage: ImageUsageFlags) -> Self {
        self.value.image_usage = image_usage;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVideoFormatInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PhysicalDeviceVideoFormatInfoKHRBuilder<'b> {
    type Target = PhysicalDeviceVideoFormatInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PhysicalDeviceVideoFormatInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PhysicalDeviceVideoFormatInfoKHRBuilder<'b> {
    type Target = PhysicalDeviceVideoFormatInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVideoMaintenance1FeaturesKHR {
    type Target = PhysicalDeviceVideoMaintenance1FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVideoMaintenance1FeaturesKHR {
    type Builder = PhysicalDeviceVideoMaintenance1FeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceVideoMaintenance1FeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVideoMaintenance1FeaturesKHRBuilder {
    value: PhysicalDeviceVideoMaintenance1FeaturesKHR,
}

impl PhysicalDeviceVideoMaintenance1FeaturesKHRBuilder {
    #[inline]
    pub fn video_maintenance1(mut self, video_maintenance1: bool) -> Self {
        self.value.video_maintenance1 = video_maintenance1 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVideoMaintenance1FeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVideoMaintenance1FeaturesKHRBuilder {
    type Target = PhysicalDeviceVideoMaintenance1FeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVideoMaintenance1FeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVideoMaintenance1FeaturesKHRBuilder {
    type Target = PhysicalDeviceVideoMaintenance1FeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan11Features {
    type Target = PhysicalDeviceVulkan11Features;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVulkan11Features {
    type Builder = PhysicalDeviceVulkan11FeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceVulkan11Features`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVulkan11FeaturesBuilder {
    value: PhysicalDeviceVulkan11Features,
}

impl PhysicalDeviceVulkan11FeaturesBuilder {
    #[inline]
    pub fn storage_buffer_16bit_access(mut self, storage_buffer_16bit_access: bool) -> Self {
        self.value.storage_buffer_16bit_access = storage_buffer_16bit_access as Bool32;
        self
    }

    #[inline]
    pub fn uniform_and_storage_buffer_16bit_access(
        mut self,
        uniform_and_storage_buffer_16bit_access: bool,
    ) -> Self {
        self.value.uniform_and_storage_buffer_16bit_access =
            uniform_and_storage_buffer_16bit_access as Bool32;
        self
    }

    #[inline]
    pub fn storage_push_constant16(mut self, storage_push_constant16: bool) -> Self {
        self.value.storage_push_constant16 = storage_push_constant16 as Bool32;
        self
    }

    #[inline]
    pub fn storage_input_output16(mut self, storage_input_output16: bool) -> Self {
        self.value.storage_input_output16 = storage_input_output16 as Bool32;
        self
    }

    #[inline]
    pub fn multiview(mut self, multiview: bool) -> Self {
        self.value.multiview = multiview as Bool32;
        self
    }

    #[inline]
    pub fn multiview_geometry_shader(mut self, multiview_geometry_shader: bool) -> Self {
        self.value.multiview_geometry_shader = multiview_geometry_shader as Bool32;
        self
    }

    #[inline]
    pub fn multiview_tessellation_shader(mut self, multiview_tessellation_shader: bool) -> Self {
        self.value.multiview_tessellation_shader = multiview_tessellation_shader as Bool32;
        self
    }

    #[inline]
    pub fn variable_pointers_storage_buffer(
        mut self,
        variable_pointers_storage_buffer: bool,
    ) -> Self {
        self.value.variable_pointers_storage_buffer = variable_pointers_storage_buffer as Bool32;
        self
    }

    #[inline]
    pub fn variable_pointers(mut self, variable_pointers: bool) -> Self {
        self.value.variable_pointers = variable_pointers as Bool32;
        self
    }

    #[inline]
    pub fn protected_memory(mut self, protected_memory: bool) -> Self {
        self.value.protected_memory = protected_memory as Bool32;
        self
    }

    #[inline]
    pub fn sampler_ycbcr_conversion(mut self, sampler_ycbcr_conversion: bool) -> Self {
        self.value.sampler_ycbcr_conversion = sampler_ycbcr_conversion as Bool32;
        self
    }

    #[inline]
    pub fn shader_draw_parameters(mut self, shader_draw_parameters: bool) -> Self {
        self.value.shader_draw_parameters = shader_draw_parameters as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVulkan11Features {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVulkan11FeaturesBuilder {
    type Target = PhysicalDeviceVulkan11Features;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVulkan11FeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan11FeaturesBuilder {
    type Target = PhysicalDeviceVulkan11Features;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan11Properties {
    type Target = PhysicalDeviceVulkan11Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVulkan11Properties {
    type Builder = PhysicalDeviceVulkan11PropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceVulkan11Properties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVulkan11PropertiesBuilder {
    value: PhysicalDeviceVulkan11Properties,
}

impl PhysicalDeviceVulkan11PropertiesBuilder {
    #[inline]
    pub fn device_uuid(mut self, device_uuid: impl Into<ByteArray<UUID_SIZE>>) -> Self {
        self.value.device_uuid = device_uuid.into();
        self
    }

    #[inline]
    pub fn driver_uuid(mut self, driver_uuid: impl Into<ByteArray<UUID_SIZE>>) -> Self {
        self.value.driver_uuid = driver_uuid.into();
        self
    }

    #[inline]
    pub fn device_luid(mut self, device_luid: impl Into<ByteArray<LUID_SIZE>>) -> Self {
        self.value.device_luid = device_luid.into();
        self
    }

    #[inline]
    pub fn device_node_mask(mut self, device_node_mask: u32) -> Self {
        self.value.device_node_mask = device_node_mask;
        self
    }

    #[inline]
    pub fn device_luid_valid(mut self, device_luid_valid: bool) -> Self {
        self.value.device_luid_valid = device_luid_valid as Bool32;
        self
    }

    #[inline]
    pub fn subgroup_size(mut self, subgroup_size: u32) -> Self {
        self.value.subgroup_size = subgroup_size;
        self
    }

    #[inline]
    pub fn subgroup_supported_stages(
        mut self,
        subgroup_supported_stages: ShaderStageFlags,
    ) -> Self {
        self.value.subgroup_supported_stages = subgroup_supported_stages;
        self
    }

    #[inline]
    pub fn subgroup_supported_operations(
        mut self,
        subgroup_supported_operations: SubgroupFeatureFlags,
    ) -> Self {
        self.value.subgroup_supported_operations = subgroup_supported_operations;
        self
    }

    #[inline]
    pub fn subgroup_quad_operations_in_all_stages(
        mut self,
        subgroup_quad_operations_in_all_stages: bool,
    ) -> Self {
        self.value.subgroup_quad_operations_in_all_stages =
            subgroup_quad_operations_in_all_stages as Bool32;
        self
    }

    #[inline]
    pub fn point_clipping_behavior(
        mut self,
        point_clipping_behavior: PointClippingBehavior,
    ) -> Self {
        self.value.point_clipping_behavior = point_clipping_behavior;
        self
    }

    #[inline]
    pub fn max_multiview_view_count(mut self, max_multiview_view_count: u32) -> Self {
        self.value.max_multiview_view_count = max_multiview_view_count;
        self
    }

    #[inline]
    pub fn max_multiview_instance_index(mut self, max_multiview_instance_index: u32) -> Self {
        self.value.max_multiview_instance_index = max_multiview_instance_index;
        self
    }

    #[inline]
    pub fn protected_no_fault(mut self, protected_no_fault: bool) -> Self {
        self.value.protected_no_fault = protected_no_fault as Bool32;
        self
    }

    #[inline]
    pub fn max_per_set_descriptors(mut self, max_per_set_descriptors: u32) -> Self {
        self.value.max_per_set_descriptors = max_per_set_descriptors;
        self
    }

    #[inline]
    pub fn max_memory_allocation_size(mut self, max_memory_allocation_size: DeviceSize) -> Self {
        self.value.max_memory_allocation_size = max_memory_allocation_size;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVulkan11Properties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVulkan11PropertiesBuilder {
    type Target = PhysicalDeviceVulkan11Properties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVulkan11PropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan11PropertiesBuilder {
    type Target = PhysicalDeviceVulkan11Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan12Features {
    type Target = PhysicalDeviceVulkan12Features;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVulkan12Features {
    type Builder = PhysicalDeviceVulkan12FeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceVulkan12Features`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVulkan12FeaturesBuilder {
    value: PhysicalDeviceVulkan12Features,
}

impl PhysicalDeviceVulkan12FeaturesBuilder {
    #[inline]
    pub fn sampler_mirror_clamp_to_edge(mut self, sampler_mirror_clamp_to_edge: bool) -> Self {
        self.value.sampler_mirror_clamp_to_edge = sampler_mirror_clamp_to_edge as Bool32;
        self
    }

    #[inline]
    pub fn draw_indirect_count(mut self, draw_indirect_count: bool) -> Self {
        self.value.draw_indirect_count = draw_indirect_count as Bool32;
        self
    }

    #[inline]
    pub fn storage_buffer_8bit_access(mut self, storage_buffer_8bit_access: bool) -> Self {
        self.value.storage_buffer_8bit_access = storage_buffer_8bit_access as Bool32;
        self
    }

    #[inline]
    pub fn uniform_and_storage_buffer_8bit_access(
        mut self,
        uniform_and_storage_buffer_8bit_access: bool,
    ) -> Self {
        self.value.uniform_and_storage_buffer_8bit_access =
            uniform_and_storage_buffer_8bit_access as Bool32;
        self
    }

    #[inline]
    pub fn storage_push_constant8(mut self, storage_push_constant8: bool) -> Self {
        self.value.storage_push_constant8 = storage_push_constant8 as Bool32;
        self
    }

    #[inline]
    pub fn shader_buffer_int64_atomics(mut self, shader_buffer_int64_atomics: bool) -> Self {
        self.value.shader_buffer_int64_atomics = shader_buffer_int64_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_shared_int64_atomics(mut self, shader_shared_int64_atomics: bool) -> Self {
        self.value.shader_shared_int64_atomics = shader_shared_int64_atomics as Bool32;
        self
    }

    #[inline]
    pub fn shader_float16(mut self, shader_float16: bool) -> Self {
        self.value.shader_float16 = shader_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_int8(mut self, shader_int8: bool) -> Self {
        self.value.shader_int8 = shader_int8 as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_indexing(mut self, descriptor_indexing: bool) -> Self {
        self.value.descriptor_indexing = descriptor_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_input_attachment_array_dynamic_indexing(
        mut self,
        shader_input_attachment_array_dynamic_indexing: bool,
    ) -> Self {
        self.value.shader_input_attachment_array_dynamic_indexing =
            shader_input_attachment_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_uniform_texel_buffer_array_dynamic_indexing(
        mut self,
        shader_uniform_texel_buffer_array_dynamic_indexing: bool,
    ) -> Self {
        self.value
            .shader_uniform_texel_buffer_array_dynamic_indexing =
            shader_uniform_texel_buffer_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_texel_buffer_array_dynamic_indexing(
        mut self,
        shader_storage_texel_buffer_array_dynamic_indexing: bool,
    ) -> Self {
        self.value
            .shader_storage_texel_buffer_array_dynamic_indexing =
            shader_storage_texel_buffer_array_dynamic_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_uniform_buffer_array_non_uniform_indexing(
        mut self,
        shader_uniform_buffer_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value.shader_uniform_buffer_array_non_uniform_indexing =
            shader_uniform_buffer_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_sampled_image_array_non_uniform_indexing(
        mut self,
        shader_sampled_image_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value.shader_sampled_image_array_non_uniform_indexing =
            shader_sampled_image_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_buffer_array_non_uniform_indexing(
        mut self,
        shader_storage_buffer_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value.shader_storage_buffer_array_non_uniform_indexing =
            shader_storage_buffer_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_array_non_uniform_indexing(
        mut self,
        shader_storage_image_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value.shader_storage_image_array_non_uniform_indexing =
            shader_storage_image_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_input_attachment_array_non_uniform_indexing(
        mut self,
        shader_input_attachment_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value
            .shader_input_attachment_array_non_uniform_indexing =
            shader_input_attachment_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_uniform_texel_buffer_array_non_uniform_indexing(
        mut self,
        shader_uniform_texel_buffer_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value
            .shader_uniform_texel_buffer_array_non_uniform_indexing =
            shader_uniform_texel_buffer_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_texel_buffer_array_non_uniform_indexing(
        mut self,
        shader_storage_texel_buffer_array_non_uniform_indexing: bool,
    ) -> Self {
        self.value
            .shader_storage_texel_buffer_array_non_uniform_indexing =
            shader_storage_texel_buffer_array_non_uniform_indexing as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_uniform_buffer_update_after_bind(
        mut self,
        descriptor_binding_uniform_buffer_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_uniform_buffer_update_after_bind =
            descriptor_binding_uniform_buffer_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_sampled_image_update_after_bind(
        mut self,
        descriptor_binding_sampled_image_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_sampled_image_update_after_bind =
            descriptor_binding_sampled_image_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_storage_image_update_after_bind(
        mut self,
        descriptor_binding_storage_image_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_storage_image_update_after_bind =
            descriptor_binding_storage_image_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_storage_buffer_update_after_bind(
        mut self,
        descriptor_binding_storage_buffer_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_storage_buffer_update_after_bind =
            descriptor_binding_storage_buffer_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_uniform_texel_buffer_update_after_bind(
        mut self,
        descriptor_binding_uniform_texel_buffer_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_uniform_texel_buffer_update_after_bind =
            descriptor_binding_uniform_texel_buffer_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_storage_texel_buffer_update_after_bind(
        mut self,
        descriptor_binding_storage_texel_buffer_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_storage_texel_buffer_update_after_bind =
            descriptor_binding_storage_texel_buffer_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_update_unused_while_pending(
        mut self,
        descriptor_binding_update_unused_while_pending: bool,
    ) -> Self {
        self.value.descriptor_binding_update_unused_while_pending =
            descriptor_binding_update_unused_while_pending as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_partially_bound(
        mut self,
        descriptor_binding_partially_bound: bool,
    ) -> Self {
        self.value.descriptor_binding_partially_bound =
            descriptor_binding_partially_bound as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_variable_descriptor_count(
        mut self,
        descriptor_binding_variable_descriptor_count: bool,
    ) -> Self {
        self.value.descriptor_binding_variable_descriptor_count =
            descriptor_binding_variable_descriptor_count as Bool32;
        self
    }

    #[inline]
    pub fn runtime_descriptor_array(mut self, runtime_descriptor_array: bool) -> Self {
        self.value.runtime_descriptor_array = runtime_descriptor_array as Bool32;
        self
    }

    #[inline]
    pub fn sampler_filter_minmax(mut self, sampler_filter_minmax: bool) -> Self {
        self.value.sampler_filter_minmax = sampler_filter_minmax as Bool32;
        self
    }

    #[inline]
    pub fn scalar_block_layout(mut self, scalar_block_layout: bool) -> Self {
        self.value.scalar_block_layout = scalar_block_layout as Bool32;
        self
    }

    #[inline]
    pub fn imageless_framebuffer(mut self, imageless_framebuffer: bool) -> Self {
        self.value.imageless_framebuffer = imageless_framebuffer as Bool32;
        self
    }

    #[inline]
    pub fn uniform_buffer_standard_layout(mut self, uniform_buffer_standard_layout: bool) -> Self {
        self.value.uniform_buffer_standard_layout = uniform_buffer_standard_layout as Bool32;
        self
    }

    #[inline]
    pub fn shader_subgroup_extended_types(mut self, shader_subgroup_extended_types: bool) -> Self {
        self.value.shader_subgroup_extended_types = shader_subgroup_extended_types as Bool32;
        self
    }

    #[inline]
    pub fn separate_depth_stencil_layouts(mut self, separate_depth_stencil_layouts: bool) -> Self {
        self.value.separate_depth_stencil_layouts = separate_depth_stencil_layouts as Bool32;
        self
    }

    #[inline]
    pub fn host_query_reset(mut self, host_query_reset: bool) -> Self {
        self.value.host_query_reset = host_query_reset as Bool32;
        self
    }

    #[inline]
    pub fn timeline_semaphore(mut self, timeline_semaphore: bool) -> Self {
        self.value.timeline_semaphore = timeline_semaphore as Bool32;
        self
    }

    #[inline]
    pub fn buffer_device_address(mut self, buffer_device_address: bool) -> Self {
        self.value.buffer_device_address = buffer_device_address as Bool32;
        self
    }

    #[inline]
    pub fn buffer_device_address_capture_replay(
        mut self,
        buffer_device_address_capture_replay: bool,
    ) -> Self {
        self.value.buffer_device_address_capture_replay =
            buffer_device_address_capture_replay as Bool32;
        self
    }

    #[inline]
    pub fn buffer_device_address_multi_device(
        mut self,
        buffer_device_address_multi_device: bool,
    ) -> Self {
        self.value.buffer_device_address_multi_device =
            buffer_device_address_multi_device as Bool32;
        self
    }

    #[inline]
    pub fn vulkan_memory_model(mut self, vulkan_memory_model: bool) -> Self {
        self.value.vulkan_memory_model = vulkan_memory_model as Bool32;
        self
    }

    #[inline]
    pub fn vulkan_memory_model_device_scope(
        mut self,
        vulkan_memory_model_device_scope: bool,
    ) -> Self {
        self.value.vulkan_memory_model_device_scope = vulkan_memory_model_device_scope as Bool32;
        self
    }

    #[inline]
    pub fn vulkan_memory_model_availability_visibility_chains(
        mut self,
        vulkan_memory_model_availability_visibility_chains: bool,
    ) -> Self {
        self.value
            .vulkan_memory_model_availability_visibility_chains =
            vulkan_memory_model_availability_visibility_chains as Bool32;
        self
    }

    #[inline]
    pub fn shader_output_viewport_index(mut self, shader_output_viewport_index: bool) -> Self {
        self.value.shader_output_viewport_index = shader_output_viewport_index as Bool32;
        self
    }

    #[inline]
    pub fn shader_output_layer(mut self, shader_output_layer: bool) -> Self {
        self.value.shader_output_layer = shader_output_layer as Bool32;
        self
    }

    #[inline]
    pub fn subgroup_broadcast_dynamic_id(mut self, subgroup_broadcast_dynamic_id: bool) -> Self {
        self.value.subgroup_broadcast_dynamic_id = subgroup_broadcast_dynamic_id as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVulkan12Features {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVulkan12FeaturesBuilder {
    type Target = PhysicalDeviceVulkan12Features;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVulkan12FeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan12FeaturesBuilder {
    type Target = PhysicalDeviceVulkan12Features;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan12Properties {
    type Target = PhysicalDeviceVulkan12Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVulkan12Properties {
    type Builder = PhysicalDeviceVulkan12PropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceVulkan12Properties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVulkan12PropertiesBuilder {
    value: PhysicalDeviceVulkan12Properties,
}

impl PhysicalDeviceVulkan12PropertiesBuilder {
    #[inline]
    pub fn driver_id(mut self, driver_id: DriverId) -> Self {
        self.value.driver_id = driver_id;
        self
    }

    #[inline]
    pub fn driver_name(
        mut self,
        driver_name: impl Into<StringArray<MAX_DRIVER_NAME_SIZE>>,
    ) -> Self {
        self.value.driver_name = driver_name.into();
        self
    }

    #[inline]
    pub fn driver_info(
        mut self,
        driver_info: impl Into<StringArray<MAX_DRIVER_INFO_SIZE>>,
    ) -> Self {
        self.value.driver_info = driver_info.into();
        self
    }

    #[inline]
    pub fn conformance_version(
        mut self,
        conformance_version: impl Cast<Target = ConformanceVersion>,
    ) -> Self {
        self.value.conformance_version = conformance_version.into();
        self
    }

    #[inline]
    pub fn denorm_behavior_independence(
        mut self,
        denorm_behavior_independence: ShaderFloatControlsIndependence,
    ) -> Self {
        self.value.denorm_behavior_independence = denorm_behavior_independence;
        self
    }

    #[inline]
    pub fn rounding_mode_independence(
        mut self,
        rounding_mode_independence: ShaderFloatControlsIndependence,
    ) -> Self {
        self.value.rounding_mode_independence = rounding_mode_independence;
        self
    }

    #[inline]
    pub fn shader_signed_zero_inf_nan_preserve_float16(
        mut self,
        shader_signed_zero_inf_nan_preserve_float16: bool,
    ) -> Self {
        self.value.shader_signed_zero_inf_nan_preserve_float16 =
            shader_signed_zero_inf_nan_preserve_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_signed_zero_inf_nan_preserve_float32(
        mut self,
        shader_signed_zero_inf_nan_preserve_float32: bool,
    ) -> Self {
        self.value.shader_signed_zero_inf_nan_preserve_float32 =
            shader_signed_zero_inf_nan_preserve_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_signed_zero_inf_nan_preserve_float64(
        mut self,
        shader_signed_zero_inf_nan_preserve_float64: bool,
    ) -> Self {
        self.value.shader_signed_zero_inf_nan_preserve_float64 =
            shader_signed_zero_inf_nan_preserve_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_preserve_float16(mut self, shader_denorm_preserve_float16: bool) -> Self {
        self.value.shader_denorm_preserve_float16 = shader_denorm_preserve_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_preserve_float32(mut self, shader_denorm_preserve_float32: bool) -> Self {
        self.value.shader_denorm_preserve_float32 = shader_denorm_preserve_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_preserve_float64(mut self, shader_denorm_preserve_float64: bool) -> Self {
        self.value.shader_denorm_preserve_float64 = shader_denorm_preserve_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_flush_to_zero_float16(
        mut self,
        shader_denorm_flush_to_zero_float16: bool,
    ) -> Self {
        self.value.shader_denorm_flush_to_zero_float16 =
            shader_denorm_flush_to_zero_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_flush_to_zero_float32(
        mut self,
        shader_denorm_flush_to_zero_float32: bool,
    ) -> Self {
        self.value.shader_denorm_flush_to_zero_float32 =
            shader_denorm_flush_to_zero_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_denorm_flush_to_zero_float64(
        mut self,
        shader_denorm_flush_to_zero_float64: bool,
    ) -> Self {
        self.value.shader_denorm_flush_to_zero_float64 =
            shader_denorm_flush_to_zero_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rte_float16(
        mut self,
        shader_rounding_mode_rte_float16: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rte_float16 = shader_rounding_mode_rte_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rte_float32(
        mut self,
        shader_rounding_mode_rte_float32: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rte_float32 = shader_rounding_mode_rte_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rte_float64(
        mut self,
        shader_rounding_mode_rte_float64: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rte_float64 = shader_rounding_mode_rte_float64 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rtz_float16(
        mut self,
        shader_rounding_mode_rtz_float16: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rtz_float16 = shader_rounding_mode_rtz_float16 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rtz_float32(
        mut self,
        shader_rounding_mode_rtz_float32: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rtz_float32 = shader_rounding_mode_rtz_float32 as Bool32;
        self
    }

    #[inline]
    pub fn shader_rounding_mode_rtz_float64(
        mut self,
        shader_rounding_mode_rtz_float64: bool,
    ) -> Self {
        self.value.shader_rounding_mode_rtz_float64 = shader_rounding_mode_rtz_float64 as Bool32;
        self
    }

    #[inline]
    pub fn max_update_after_bind_descriptors_in_all_pools(
        mut self,
        max_update_after_bind_descriptors_in_all_pools: u32,
    ) -> Self {
        self.value.max_update_after_bind_descriptors_in_all_pools =
            max_update_after_bind_descriptors_in_all_pools;
        self
    }

    #[inline]
    pub fn shader_uniform_buffer_array_non_uniform_indexing_native(
        mut self,
        shader_uniform_buffer_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_uniform_buffer_array_non_uniform_indexing_native =
            shader_uniform_buffer_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn shader_sampled_image_array_non_uniform_indexing_native(
        mut self,
        shader_sampled_image_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_sampled_image_array_non_uniform_indexing_native =
            shader_sampled_image_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_buffer_array_non_uniform_indexing_native(
        mut self,
        shader_storage_buffer_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_storage_buffer_array_non_uniform_indexing_native =
            shader_storage_buffer_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn shader_storage_image_array_non_uniform_indexing_native(
        mut self,
        shader_storage_image_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_storage_image_array_non_uniform_indexing_native =
            shader_storage_image_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn shader_input_attachment_array_non_uniform_indexing_native(
        mut self,
        shader_input_attachment_array_non_uniform_indexing_native: bool,
    ) -> Self {
        self.value
            .shader_input_attachment_array_non_uniform_indexing_native =
            shader_input_attachment_array_non_uniform_indexing_native as Bool32;
        self
    }

    #[inline]
    pub fn robust_buffer_access_update_after_bind(
        mut self,
        robust_buffer_access_update_after_bind: bool,
    ) -> Self {
        self.value.robust_buffer_access_update_after_bind =
            robust_buffer_access_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn quad_divergent_implicit_lod(mut self, quad_divergent_implicit_lod: bool) -> Self {
        self.value.quad_divergent_implicit_lod = quad_divergent_implicit_lod as Bool32;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_samplers(
        mut self,
        max_per_stage_descriptor_update_after_bind_samplers: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_samplers =
            max_per_stage_descriptor_update_after_bind_samplers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_uniform_buffers(
        mut self,
        max_per_stage_descriptor_update_after_bind_uniform_buffers: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_uniform_buffers =
            max_per_stage_descriptor_update_after_bind_uniform_buffers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_storage_buffers(
        mut self,
        max_per_stage_descriptor_update_after_bind_storage_buffers: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_storage_buffers =
            max_per_stage_descriptor_update_after_bind_storage_buffers;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_sampled_images(
        mut self,
        max_per_stage_descriptor_update_after_bind_sampled_images: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_sampled_images =
            max_per_stage_descriptor_update_after_bind_sampled_images;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_storage_images(
        mut self,
        max_per_stage_descriptor_update_after_bind_storage_images: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_storage_images =
            max_per_stage_descriptor_update_after_bind_storage_images;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_input_attachments(
        mut self,
        max_per_stage_descriptor_update_after_bind_input_attachments: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_input_attachments =
            max_per_stage_descriptor_update_after_bind_input_attachments;
        self
    }

    #[inline]
    pub fn max_per_stage_update_after_bind_resources(
        mut self,
        max_per_stage_update_after_bind_resources: u32,
    ) -> Self {
        self.value.max_per_stage_update_after_bind_resources =
            max_per_stage_update_after_bind_resources;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_samplers(
        mut self,
        max_descriptor_set_update_after_bind_samplers: u32,
    ) -> Self {
        self.value.max_descriptor_set_update_after_bind_samplers =
            max_descriptor_set_update_after_bind_samplers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_uniform_buffers(
        mut self,
        max_descriptor_set_update_after_bind_uniform_buffers: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_uniform_buffers =
            max_descriptor_set_update_after_bind_uniform_buffers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_uniform_buffers_dynamic(
        mut self,
        max_descriptor_set_update_after_bind_uniform_buffers_dynamic: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_uniform_buffers_dynamic =
            max_descriptor_set_update_after_bind_uniform_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_storage_buffers(
        mut self,
        max_descriptor_set_update_after_bind_storage_buffers: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_storage_buffers =
            max_descriptor_set_update_after_bind_storage_buffers;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_storage_buffers_dynamic(
        mut self,
        max_descriptor_set_update_after_bind_storage_buffers_dynamic: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_storage_buffers_dynamic =
            max_descriptor_set_update_after_bind_storage_buffers_dynamic;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_sampled_images(
        mut self,
        max_descriptor_set_update_after_bind_sampled_images: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_sampled_images =
            max_descriptor_set_update_after_bind_sampled_images;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_storage_images(
        mut self,
        max_descriptor_set_update_after_bind_storage_images: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_storage_images =
            max_descriptor_set_update_after_bind_storage_images;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_input_attachments(
        mut self,
        max_descriptor_set_update_after_bind_input_attachments: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_input_attachments =
            max_descriptor_set_update_after_bind_input_attachments;
        self
    }

    #[inline]
    pub fn supported_depth_resolve_modes(
        mut self,
        supported_depth_resolve_modes: ResolveModeFlags,
    ) -> Self {
        self.value.supported_depth_resolve_modes = supported_depth_resolve_modes;
        self
    }

    #[inline]
    pub fn supported_stencil_resolve_modes(
        mut self,
        supported_stencil_resolve_modes: ResolveModeFlags,
    ) -> Self {
        self.value.supported_stencil_resolve_modes = supported_stencil_resolve_modes;
        self
    }

    #[inline]
    pub fn independent_resolve_none(mut self, independent_resolve_none: bool) -> Self {
        self.value.independent_resolve_none = independent_resolve_none as Bool32;
        self
    }

    #[inline]
    pub fn independent_resolve(mut self, independent_resolve: bool) -> Self {
        self.value.independent_resolve = independent_resolve as Bool32;
        self
    }

    #[inline]
    pub fn filter_minmax_single_component_formats(
        mut self,
        filter_minmax_single_component_formats: bool,
    ) -> Self {
        self.value.filter_minmax_single_component_formats =
            filter_minmax_single_component_formats as Bool32;
        self
    }

    #[inline]
    pub fn filter_minmax_image_component_mapping(
        mut self,
        filter_minmax_image_component_mapping: bool,
    ) -> Self {
        self.value.filter_minmax_image_component_mapping =
            filter_minmax_image_component_mapping as Bool32;
        self
    }

    #[inline]
    pub fn max_timeline_semaphore_value_difference(
        mut self,
        max_timeline_semaphore_value_difference: u64,
    ) -> Self {
        self.value.max_timeline_semaphore_value_difference =
            max_timeline_semaphore_value_difference;
        self
    }

    #[inline]
    pub fn framebuffer_integer_color_sample_counts(
        mut self,
        framebuffer_integer_color_sample_counts: SampleCountFlags,
    ) -> Self {
        self.value.framebuffer_integer_color_sample_counts =
            framebuffer_integer_color_sample_counts;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVulkan12Properties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVulkan12PropertiesBuilder {
    type Target = PhysicalDeviceVulkan12Properties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVulkan12PropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan12PropertiesBuilder {
    type Target = PhysicalDeviceVulkan12Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan13Features {
    type Target = PhysicalDeviceVulkan13Features;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVulkan13Features {
    type Builder = PhysicalDeviceVulkan13FeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceVulkan13Features`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVulkan13FeaturesBuilder {
    value: PhysicalDeviceVulkan13Features,
}

impl PhysicalDeviceVulkan13FeaturesBuilder {
    #[inline]
    pub fn robust_image_access(mut self, robust_image_access: bool) -> Self {
        self.value.robust_image_access = robust_image_access as Bool32;
        self
    }

    #[inline]
    pub fn inline_uniform_block(mut self, inline_uniform_block: bool) -> Self {
        self.value.inline_uniform_block = inline_uniform_block as Bool32;
        self
    }

    #[inline]
    pub fn descriptor_binding_inline_uniform_block_update_after_bind(
        mut self,
        descriptor_binding_inline_uniform_block_update_after_bind: bool,
    ) -> Self {
        self.value
            .descriptor_binding_inline_uniform_block_update_after_bind =
            descriptor_binding_inline_uniform_block_update_after_bind as Bool32;
        self
    }

    #[inline]
    pub fn pipeline_creation_cache_control(
        mut self,
        pipeline_creation_cache_control: bool,
    ) -> Self {
        self.value.pipeline_creation_cache_control = pipeline_creation_cache_control as Bool32;
        self
    }

    #[inline]
    pub fn private_data(mut self, private_data: bool) -> Self {
        self.value.private_data = private_data as Bool32;
        self
    }

    #[inline]
    pub fn shader_demote_to_helper_invocation(
        mut self,
        shader_demote_to_helper_invocation: bool,
    ) -> Self {
        self.value.shader_demote_to_helper_invocation =
            shader_demote_to_helper_invocation as Bool32;
        self
    }

    #[inline]
    pub fn shader_terminate_invocation(mut self, shader_terminate_invocation: bool) -> Self {
        self.value.shader_terminate_invocation = shader_terminate_invocation as Bool32;
        self
    }

    #[inline]
    pub fn subgroup_size_control(mut self, subgroup_size_control: bool) -> Self {
        self.value.subgroup_size_control = subgroup_size_control as Bool32;
        self
    }

    #[inline]
    pub fn compute_full_subgroups(mut self, compute_full_subgroups: bool) -> Self {
        self.value.compute_full_subgroups = compute_full_subgroups as Bool32;
        self
    }

    #[inline]
    pub fn synchronization2(mut self, synchronization2: bool) -> Self {
        self.value.synchronization2 = synchronization2 as Bool32;
        self
    }

    #[inline]
    pub fn texture_compression_astc_hdr(mut self, texture_compression_astc_hdr: bool) -> Self {
        self.value.texture_compression_astc_hdr = texture_compression_astc_hdr as Bool32;
        self
    }

    #[inline]
    pub fn shader_zero_initialize_workgroup_memory(
        mut self,
        shader_zero_initialize_workgroup_memory: bool,
    ) -> Self {
        self.value.shader_zero_initialize_workgroup_memory =
            shader_zero_initialize_workgroup_memory as Bool32;
        self
    }

    #[inline]
    pub fn dynamic_rendering(mut self, dynamic_rendering: bool) -> Self {
        self.value.dynamic_rendering = dynamic_rendering as Bool32;
        self
    }

    #[inline]
    pub fn shader_integer_dot_product(mut self, shader_integer_dot_product: bool) -> Self {
        self.value.shader_integer_dot_product = shader_integer_dot_product as Bool32;
        self
    }

    #[inline]
    pub fn maintenance4(mut self, maintenance4: bool) -> Self {
        self.value.maintenance4 = maintenance4 as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVulkan13Features {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVulkan13FeaturesBuilder {
    type Target = PhysicalDeviceVulkan13Features;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVulkan13FeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan13FeaturesBuilder {
    type Target = PhysicalDeviceVulkan13Features;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan13Properties {
    type Target = PhysicalDeviceVulkan13Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVulkan13Properties {
    type Builder = PhysicalDeviceVulkan13PropertiesBuilder;
}

/// A builder for a [`PhysicalDeviceVulkan13Properties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVulkan13PropertiesBuilder {
    value: PhysicalDeviceVulkan13Properties,
}

impl PhysicalDeviceVulkan13PropertiesBuilder {
    #[inline]
    pub fn min_subgroup_size(mut self, min_subgroup_size: u32) -> Self {
        self.value.min_subgroup_size = min_subgroup_size;
        self
    }

    #[inline]
    pub fn max_subgroup_size(mut self, max_subgroup_size: u32) -> Self {
        self.value.max_subgroup_size = max_subgroup_size;
        self
    }

    #[inline]
    pub fn max_compute_workgroup_subgroups(mut self, max_compute_workgroup_subgroups: u32) -> Self {
        self.value.max_compute_workgroup_subgroups = max_compute_workgroup_subgroups;
        self
    }

    #[inline]
    pub fn required_subgroup_size_stages(
        mut self,
        required_subgroup_size_stages: ShaderStageFlags,
    ) -> Self {
        self.value.required_subgroup_size_stages = required_subgroup_size_stages;
        self
    }

    #[inline]
    pub fn max_inline_uniform_block_size(mut self, max_inline_uniform_block_size: u32) -> Self {
        self.value.max_inline_uniform_block_size = max_inline_uniform_block_size;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_inline_uniform_blocks(
        mut self,
        max_per_stage_descriptor_inline_uniform_blocks: u32,
    ) -> Self {
        self.value.max_per_stage_descriptor_inline_uniform_blocks =
            max_per_stage_descriptor_inline_uniform_blocks;
        self
    }

    #[inline]
    pub fn max_per_stage_descriptor_update_after_bind_inline_uniform_blocks(
        mut self,
        max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: u32,
    ) -> Self {
        self.value
            .max_per_stage_descriptor_update_after_bind_inline_uniform_blocks =
            max_per_stage_descriptor_update_after_bind_inline_uniform_blocks;
        self
    }

    #[inline]
    pub fn max_descriptor_set_inline_uniform_blocks(
        mut self,
        max_descriptor_set_inline_uniform_blocks: u32,
    ) -> Self {
        self.value.max_descriptor_set_inline_uniform_blocks =
            max_descriptor_set_inline_uniform_blocks;
        self
    }

    #[inline]
    pub fn max_descriptor_set_update_after_bind_inline_uniform_blocks(
        mut self,
        max_descriptor_set_update_after_bind_inline_uniform_blocks: u32,
    ) -> Self {
        self.value
            .max_descriptor_set_update_after_bind_inline_uniform_blocks =
            max_descriptor_set_update_after_bind_inline_uniform_blocks;
        self
    }

    #[inline]
    pub fn max_inline_uniform_total_size(mut self, max_inline_uniform_total_size: u32) -> Self {
        self.value.max_inline_uniform_total_size = max_inline_uniform_total_size;
        self
    }

    #[inline]
    pub fn integer_dot_product_8bit_unsigned_accelerated(
        mut self,
        integer_dot_product_8bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_8bit_unsigned_accelerated =
            integer_dot_product_8bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_8bit_signed_accelerated(
        mut self,
        integer_dot_product_8bit_signed_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_8bit_signed_accelerated =
            integer_dot_product_8bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_8bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_8bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_8bit_mixed_signedness_accelerated =
            integer_dot_product_8bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product4x_8bit_packed_unsigned_accelerated(
        mut self,
        integer_dot_product4x_8bit_packed_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product4x_8bit_packed_unsigned_accelerated =
            integer_dot_product4x_8bit_packed_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product4x_8bit_packed_signed_accelerated(
        mut self,
        integer_dot_product4x_8bit_packed_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product4x_8bit_packed_signed_accelerated =
            integer_dot_product4x_8bit_packed_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product4x_8bit_packed_mixed_signedness_accelerated(
        mut self,
        integer_dot_product4x_8bit_packed_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product4x_8bit_packed_mixed_signedness_accelerated =
            integer_dot_product4x_8bit_packed_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_16bit_unsigned_accelerated(
        mut self,
        integer_dot_product_16bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_16bit_unsigned_accelerated =
            integer_dot_product_16bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_16bit_signed_accelerated(
        mut self,
        integer_dot_product_16bit_signed_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_16bit_signed_accelerated =
            integer_dot_product_16bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_16bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_16bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_16bit_mixed_signedness_accelerated =
            integer_dot_product_16bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_32bit_unsigned_accelerated(
        mut self,
        integer_dot_product_32bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_32bit_unsigned_accelerated =
            integer_dot_product_32bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_32bit_signed_accelerated(
        mut self,
        integer_dot_product_32bit_signed_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_32bit_signed_accelerated =
            integer_dot_product_32bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_32bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_32bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_32bit_mixed_signedness_accelerated =
            integer_dot_product_32bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_64bit_unsigned_accelerated(
        mut self,
        integer_dot_product_64bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_64bit_unsigned_accelerated =
            integer_dot_product_64bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_64bit_signed_accelerated(
        mut self,
        integer_dot_product_64bit_signed_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_64bit_signed_accelerated =
            integer_dot_product_64bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_64bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_64bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_64bit_mixed_signedness_accelerated =
            integer_dot_product_64bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_8bit_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_8bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_8bit_unsigned_accelerated =
            integer_dot_product_accumulating_saturating_8bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_8bit_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_8bit_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_8bit_signed_accelerated =
            integer_dot_product_accumulating_saturating_8bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_8bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_8bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_8bit_mixed_signedness_accelerated =
            integer_dot_product_accumulating_saturating_8bit_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating4x_8bit_packed_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating4x_8bit_packed_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating4x_8bit_packed_unsigned_accelerated =
            integer_dot_product_accumulating_saturating4x_8bit_packed_unsigned_accelerated
                as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating4x_8bit_packed_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating4x_8bit_packed_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating4x_8bit_packed_signed_accelerated =
            integer_dot_product_accumulating_saturating4x_8bit_packed_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating4x_8bit_packed_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating4x_8bit_packed_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value.integer_dot_product_accumulating_saturating4x_8bit_packed_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating4x_8bit_packed_mixed_signedness_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_16bit_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_16bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_16bit_unsigned_accelerated =
            integer_dot_product_accumulating_saturating_16bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_16bit_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_16bit_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_16bit_signed_accelerated =
            integer_dot_product_accumulating_saturating_16bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_16bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_16bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_16bit_mixed_signedness_accelerated =
            integer_dot_product_accumulating_saturating_16bit_mixed_signedness_accelerated
                as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_32bit_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_32bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_32bit_unsigned_accelerated =
            integer_dot_product_accumulating_saturating_32bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_32bit_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_32bit_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_32bit_signed_accelerated =
            integer_dot_product_accumulating_saturating_32bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_32bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_32bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_32bit_mixed_signedness_accelerated =
            integer_dot_product_accumulating_saturating_32bit_mixed_signedness_accelerated
                as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_64bit_unsigned_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_64bit_unsigned_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_64bit_unsigned_accelerated =
            integer_dot_product_accumulating_saturating_64bit_unsigned_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_64bit_signed_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_64bit_signed_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_64bit_signed_accelerated =
            integer_dot_product_accumulating_saturating_64bit_signed_accelerated as Bool32;
        self
    }

    #[inline]
    pub fn integer_dot_product_accumulating_saturating_64bit_mixed_signedness_accelerated(
        mut self,
        integer_dot_product_accumulating_saturating_64bit_mixed_signedness_accelerated: bool,
    ) -> Self {
        self.value
            .integer_dot_product_accumulating_saturating_64bit_mixed_signedness_accelerated =
            integer_dot_product_accumulating_saturating_64bit_mixed_signedness_accelerated
                as Bool32;
        self
    }

    #[inline]
    pub fn storage_texel_buffer_offset_alignment_bytes(
        mut self,
        storage_texel_buffer_offset_alignment_bytes: DeviceSize,
    ) -> Self {
        self.value.storage_texel_buffer_offset_alignment_bytes =
            storage_texel_buffer_offset_alignment_bytes;
        self
    }

    #[inline]
    pub fn storage_texel_buffer_offset_single_texel_alignment(
        mut self,
        storage_texel_buffer_offset_single_texel_alignment: bool,
    ) -> Self {
        self.value
            .storage_texel_buffer_offset_single_texel_alignment =
            storage_texel_buffer_offset_single_texel_alignment as Bool32;
        self
    }

    #[inline]
    pub fn uniform_texel_buffer_offset_alignment_bytes(
        mut self,
        uniform_texel_buffer_offset_alignment_bytes: DeviceSize,
    ) -> Self {
        self.value.uniform_texel_buffer_offset_alignment_bytes =
            uniform_texel_buffer_offset_alignment_bytes;
        self
    }

    #[inline]
    pub fn uniform_texel_buffer_offset_single_texel_alignment(
        mut self,
        uniform_texel_buffer_offset_single_texel_alignment: bool,
    ) -> Self {
        self.value
            .uniform_texel_buffer_offset_single_texel_alignment =
            uniform_texel_buffer_offset_single_texel_alignment as Bool32;
        self
    }

    #[inline]
    pub fn max_buffer_size(mut self, max_buffer_size: DeviceSize) -> Self {
        self.value.max_buffer_size = max_buffer_size;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVulkan13Properties {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVulkan13PropertiesBuilder {
    type Target = PhysicalDeviceVulkan13Properties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVulkan13PropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkan13PropertiesBuilder {
    type Target = PhysicalDeviceVulkan13Properties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkanMemoryModelFeatures {
    type Target = PhysicalDeviceVulkanMemoryModelFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceVulkanMemoryModelFeatures {
    type Builder = PhysicalDeviceVulkanMemoryModelFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceVulkanMemoryModelFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceVulkanMemoryModelFeaturesBuilder {
    value: PhysicalDeviceVulkanMemoryModelFeatures,
}

impl PhysicalDeviceVulkanMemoryModelFeaturesBuilder {
    #[inline]
    pub fn vulkan_memory_model(mut self, vulkan_memory_model: bool) -> Self {
        self.value.vulkan_memory_model = vulkan_memory_model as Bool32;
        self
    }

    #[inline]
    pub fn vulkan_memory_model_device_scope(
        mut self,
        vulkan_memory_model_device_scope: bool,
    ) -> Self {
        self.value.vulkan_memory_model_device_scope = vulkan_memory_model_device_scope as Bool32;
        self
    }

    #[inline]
    pub fn vulkan_memory_model_availability_visibility_chains(
        mut self,
        vulkan_memory_model_availability_visibility_chains: bool,
    ) -> Self {
        self.value
            .vulkan_memory_model_availability_visibility_chains =
            vulkan_memory_model_availability_visibility_chains as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceVulkanMemoryModelFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceVulkanMemoryModelFeaturesBuilder {
    type Target = PhysicalDeviceVulkanMemoryModelFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceVulkanMemoryModelFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceVulkanMemoryModelFeaturesBuilder {
    type Target = PhysicalDeviceVulkanMemoryModelFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    type Target = PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    type Builder = PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRBuilder;
}

/// A builder for a [`PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRBuilder {
    value: PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
}

impl PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRBuilder {
    #[inline]
    pub fn workgroup_memory_explicit_layout(
        mut self,
        workgroup_memory_explicit_layout: bool,
    ) -> Self {
        self.value.workgroup_memory_explicit_layout = workgroup_memory_explicit_layout as Bool32;
        self
    }

    #[inline]
    pub fn workgroup_memory_explicit_layout_scalar_block_layout(
        mut self,
        workgroup_memory_explicit_layout_scalar_block_layout: bool,
    ) -> Self {
        self.value
            .workgroup_memory_explicit_layout_scalar_block_layout =
            workgroup_memory_explicit_layout_scalar_block_layout as Bool32;
        self
    }

    #[inline]
    pub fn workgroup_memory_explicit_layout_8bit_access(
        mut self,
        workgroup_memory_explicit_layout_8bit_access: bool,
    ) -> Self {
        self.value.workgroup_memory_explicit_layout_8bit_access =
            workgroup_memory_explicit_layout_8bit_access as Bool32;
        self
    }

    #[inline]
    pub fn workgroup_memory_explicit_layout_16bit_access(
        mut self,
        workgroup_memory_explicit_layout_16bit_access: bool,
    ) -> Self {
        self.value.workgroup_memory_explicit_layout_16bit_access =
            workgroup_memory_explicit_layout_16bit_access as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRBuilder {
    type Target = PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRBuilder {
    type Target = PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    type Target = PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    type Builder = PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTBuilder {
    value: PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT,
}

impl PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTBuilder {
    #[inline]
    pub fn ycbcr2plane444_formats(mut self, ycbcr2plane444_formats: bool) -> Self {
        self.value.ycbcr2plane444_formats = ycbcr2plane444_formats as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTBuilder {
    type Target = PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTBuilder {
    type Target = PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceYcbcrDegammaFeaturesQCOM {
    type Target = PhysicalDeviceYcbcrDegammaFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceYcbcrDegammaFeaturesQCOM {
    type Builder = PhysicalDeviceYcbcrDegammaFeaturesQCOMBuilder;
}

/// A builder for a [`PhysicalDeviceYcbcrDegammaFeaturesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceYcbcrDegammaFeaturesQCOMBuilder {
    value: PhysicalDeviceYcbcrDegammaFeaturesQCOM,
}

impl PhysicalDeviceYcbcrDegammaFeaturesQCOMBuilder {
    #[inline]
    pub fn ycbcr_degamma(mut self, ycbcr_degamma: bool) -> Self {
        self.value.ycbcr_degamma = ycbcr_degamma as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceYcbcrDegammaFeaturesQCOM {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceYcbcrDegammaFeaturesQCOMBuilder {
    type Target = PhysicalDeviceYcbcrDegammaFeaturesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceYcbcrDegammaFeaturesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceYcbcrDegammaFeaturesQCOMBuilder {
    type Target = PhysicalDeviceYcbcrDegammaFeaturesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceYcbcrImageArraysFeaturesEXT {
    type Target = PhysicalDeviceYcbcrImageArraysFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceYcbcrImageArraysFeaturesEXT {
    type Builder = PhysicalDeviceYcbcrImageArraysFeaturesEXTBuilder;
}

/// A builder for a [`PhysicalDeviceYcbcrImageArraysFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceYcbcrImageArraysFeaturesEXTBuilder {
    value: PhysicalDeviceYcbcrImageArraysFeaturesEXT,
}

impl PhysicalDeviceYcbcrImageArraysFeaturesEXTBuilder {
    #[inline]
    pub fn ycbcr_image_arrays(mut self, ycbcr_image_arrays: bool) -> Self {
        self.value.ycbcr_image_arrays = ycbcr_image_arrays as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceYcbcrImageArraysFeaturesEXT {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceYcbcrImageArraysFeaturesEXTBuilder {
    type Target = PhysicalDeviceYcbcrImageArraysFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceYcbcrImageArraysFeaturesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceYcbcrImageArraysFeaturesEXTBuilder {
    type Target = PhysicalDeviceYcbcrImageArraysFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    type Target = PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    type Builder = PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesBuilder;
}

/// A builder for a [`PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesBuilder {
    value: PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,
}

impl PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesBuilder {
    #[inline]
    pub fn shader_zero_initialize_workgroup_memory(
        mut self,
        shader_zero_initialize_workgroup_memory: bool,
    ) -> Self {
        self.value.shader_zero_initialize_workgroup_memory =
            shader_zero_initialize_workgroup_memory as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
        self.value
    }
}

impl ops::Deref for PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesBuilder {
    type Target = PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesBuilder {
    type Target = PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineBinaryCreateInfoKHR {
    type Target = PipelineBinaryCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineBinaryCreateInfoKHR {
    type Builder = PipelineBinaryCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`PipelineBinaryCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineBinaryCreateInfoKHRBuilder<'b> {
    value: PipelineBinaryCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineBinaryCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn keys_and_data_info(
        mut self,
        keys_and_data_info: &'b impl Cast<Target = PipelineBinaryKeysAndDataKHR>,
    ) -> Self {
        self.value.keys_and_data_info = keys_and_data_info.as_ref();
        self
    }

    #[inline]
    pub fn pipeline(mut self, pipeline: Pipeline) -> Self {
        self.value.pipeline = pipeline;
        self
    }

    #[inline]
    pub fn pipeline_create_info(
        mut self,
        pipeline_create_info: &'b impl Cast<Target = PipelineCreateInfoKHR>,
    ) -> Self {
        self.value.pipeline_create_info = pipeline_create_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineBinaryCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PipelineBinaryCreateInfoKHRBuilder<'b> {
    type Target = PipelineBinaryCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineBinaryCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineBinaryCreateInfoKHRBuilder<'b> {
    type Target = PipelineBinaryCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineBinaryDataInfoKHR {
    type Target = PipelineBinaryDataInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineBinaryDataInfoKHR {
    type Builder = PipelineBinaryDataInfoKHRBuilder;
}

/// A builder for a [`PipelineBinaryDataInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineBinaryDataInfoKHRBuilder {
    value: PipelineBinaryDataInfoKHR,
}

impl PipelineBinaryDataInfoKHRBuilder {
    #[inline]
    pub fn pipeline_binary(mut self, pipeline_binary: PipelineBinaryKHR) -> Self {
        self.value.pipeline_binary = pipeline_binary;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineBinaryDataInfoKHR {
        self.value
    }
}

impl ops::Deref for PipelineBinaryDataInfoKHRBuilder {
    type Target = PipelineBinaryDataInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineBinaryDataInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineBinaryDataInfoKHRBuilder {
    type Target = PipelineBinaryDataInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineBinaryDataKHR {
    type Target = PipelineBinaryDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineBinaryDataKHR {
    type Builder = PipelineBinaryDataKHRBuilder<'b>;
}

/// A builder for a [`PipelineBinaryDataKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineBinaryDataKHRBuilder<'b> {
    value: PipelineBinaryDataKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineBinaryDataKHRBuilder<'b> {
    #[inline]
    pub fn data(mut self, data: &'b mut [u8]) -> Self {
        self.value.data_size = data.len() as usize;
        self.value.data = data.as_mut_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineBinaryDataKHR {
        self.value
    }
}

impl<'b> ops::Deref for PipelineBinaryDataKHRBuilder<'b> {
    type Target = PipelineBinaryDataKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineBinaryDataKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineBinaryDataKHRBuilder<'b> {
    type Target = PipelineBinaryDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineBinaryHandlesInfoKHR {
    type Target = PipelineBinaryHandlesInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineBinaryHandlesInfoKHR {
    type Builder = PipelineBinaryHandlesInfoKHRBuilder<'b>;
}

/// A builder for a [`PipelineBinaryHandlesInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineBinaryHandlesInfoKHRBuilder<'b> {
    value: PipelineBinaryHandlesInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineBinaryHandlesInfoKHRBuilder<'b> {
    #[inline]
    pub fn pipeline_binary_count(mut self, pipeline_binary_count: u32) -> Self {
        self.value.pipeline_binary_count = pipeline_binary_count;
        self
    }

    #[inline]
    pub fn pipeline_binaries(mut self, pipeline_binaries: &'b mut [PipelineBinaryKHR]) -> Self {
        self.value.pipeline_binary_count = pipeline_binaries.len() as u32;
        self.value.pipeline_binaries = pipeline_binaries.as_mut_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineBinaryHandlesInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PipelineBinaryHandlesInfoKHRBuilder<'b> {
    type Target = PipelineBinaryHandlesInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineBinaryHandlesInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineBinaryHandlesInfoKHRBuilder<'b> {
    type Target = PipelineBinaryHandlesInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineBinaryInfoKHR {
    type Target = PipelineBinaryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineBinaryInfoKHR {
    type Builder = PipelineBinaryInfoKHRBuilder<'b>;
}

/// A builder for a [`PipelineBinaryInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineBinaryInfoKHRBuilder<'b> {
    value: PipelineBinaryInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineBinaryInfoKHRBuilder<'b> {
    #[inline]
    pub fn pipeline_binaries(mut self, pipeline_binaries: &'b [PipelineBinaryKHR]) -> Self {
        self.value.binary_count = pipeline_binaries.len() as u32;
        self.value.pipeline_binaries = pipeline_binaries.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineBinaryInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PipelineBinaryInfoKHRBuilder<'b> {
    type Target = PipelineBinaryInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineBinaryInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineBinaryInfoKHRBuilder<'b> {
    type Target = PipelineBinaryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineBinaryKeyKHR {
    type Target = PipelineBinaryKeyKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineBinaryKeyKHR {
    type Builder = PipelineBinaryKeyKHRBuilder;
}

/// A builder for a [`PipelineBinaryKeyKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineBinaryKeyKHRBuilder {
    value: PipelineBinaryKeyKHR,
}

impl PipelineBinaryKeyKHRBuilder {
    #[inline]
    pub fn key_size(mut self, key_size: u32) -> Self {
        self.value.key_size = key_size;
        self
    }

    #[inline]
    pub fn key(mut self, key: impl Into<ByteArray<MAX_PIPELINE_BINARY_KEY_SIZE_KHR>>) -> Self {
        self.value.key = key.into();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineBinaryKeyKHR {
        self.value
    }
}

impl ops::Deref for PipelineBinaryKeyKHRBuilder {
    type Target = PipelineBinaryKeyKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineBinaryKeyKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineBinaryKeyKHRBuilder {
    type Target = PipelineBinaryKeyKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineBinaryKeysAndDataKHR {
    type Target = PipelineBinaryKeysAndDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineBinaryKeysAndDataKHR {
    type Builder = PipelineBinaryKeysAndDataKHRBuilder<'b>;
}

/// A builder for a [`PipelineBinaryKeysAndDataKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineBinaryKeysAndDataKHRBuilder<'b> {
    value: PipelineBinaryKeysAndDataKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineBinaryKeysAndDataKHRBuilder<'b> {
    #[inline]
    pub fn pipeline_binary_keys(
        mut self,
        pipeline_binary_keys: &'b [impl Cast<Target = PipelineBinaryKeyKHR>],
    ) -> Self {
        self.value.binary_count = pipeline_binary_keys.len() as u32;
        self.value.pipeline_binary_keys = pipeline_binary_keys.as_ptr().cast();
        self
    }

    #[inline]
    pub fn pipeline_binary_data(
        mut self,
        pipeline_binary_data: &'b [impl Cast<Target = PipelineBinaryDataKHR>],
    ) -> Self {
        self.value.binary_count = pipeline_binary_data.len() as u32;
        self.value.pipeline_binary_data = pipeline_binary_data.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineBinaryKeysAndDataKHR {
        self.value
    }
}

impl<'b> ops::Deref for PipelineBinaryKeysAndDataKHRBuilder<'b> {
    type Target = PipelineBinaryKeysAndDataKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineBinaryKeysAndDataKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineBinaryKeysAndDataKHRBuilder<'b> {
    type Target = PipelineBinaryKeysAndDataKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCacheCreateInfo {
    type Target = PipelineCacheCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineCacheCreateInfo {
    type Builder = PipelineCacheCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineCacheCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCacheCreateInfoBuilder<'b> {
    value: PipelineCacheCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineCacheCreateInfoBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: PipelineCacheCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn initial_data(mut self, initial_data: &'b [u8]) -> Self {
        self.value.initial_data_size = initial_data.len() as usize;
        self.value.initial_data = initial_data.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCacheCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineCacheCreateInfoBuilder<'b> {
    type Target = PipelineCacheCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineCacheCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineCacheCreateInfoBuilder<'b> {
    type Target = PipelineCacheCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCacheHeaderVersionOne {
    type Target = PipelineCacheHeaderVersionOne;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineCacheHeaderVersionOne {
    type Builder = PipelineCacheHeaderVersionOneBuilder;
}

/// A builder for a [`PipelineCacheHeaderVersionOne`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCacheHeaderVersionOneBuilder {
    value: PipelineCacheHeaderVersionOne,
}

impl PipelineCacheHeaderVersionOneBuilder {
    #[inline]
    pub fn header_size(mut self, header_size: u32) -> Self {
        self.value.header_size = header_size;
        self
    }

    #[inline]
    pub fn header_version(mut self, header_version: PipelineCacheHeaderVersion) -> Self {
        self.value.header_version = header_version;
        self
    }

    #[inline]
    pub fn vendor_id(mut self, vendor_id: u32) -> Self {
        self.value.vendor_id = vendor_id;
        self
    }

    #[inline]
    pub fn device_id(mut self, device_id: u32) -> Self {
        self.value.device_id = device_id;
        self
    }

    #[inline]
    pub fn pipeline_cache_uuid(
        mut self,
        pipeline_cache_uuid: impl Into<ByteArray<UUID_SIZE>>,
    ) -> Self {
        self.value.pipeline_cache_uuid = pipeline_cache_uuid.into();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCacheHeaderVersionOne {
        self.value
    }
}

impl ops::Deref for PipelineCacheHeaderVersionOneBuilder {
    type Target = PipelineCacheHeaderVersionOne;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineCacheHeaderVersionOneBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineCacheHeaderVersionOneBuilder {
    type Target = PipelineCacheHeaderVersionOne;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineColorBlendAdvancedStateCreateInfoEXT {
    type Target = PipelineColorBlendAdvancedStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineColorBlendAdvancedStateCreateInfoEXT {
    type Builder = PipelineColorBlendAdvancedStateCreateInfoEXTBuilder;
}

/// A builder for a [`PipelineColorBlendAdvancedStateCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineColorBlendAdvancedStateCreateInfoEXTBuilder {
    value: PipelineColorBlendAdvancedStateCreateInfoEXT,
}

impl PipelineColorBlendAdvancedStateCreateInfoEXTBuilder {
    #[inline]
    pub fn src_premultiplied(mut self, src_premultiplied: bool) -> Self {
        self.value.src_premultiplied = src_premultiplied as Bool32;
        self
    }

    #[inline]
    pub fn dst_premultiplied(mut self, dst_premultiplied: bool) -> Self {
        self.value.dst_premultiplied = dst_premultiplied as Bool32;
        self
    }

    #[inline]
    pub fn blend_overlap(mut self, blend_overlap: BlendOverlapEXT) -> Self {
        self.value.blend_overlap = blend_overlap;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineColorBlendAdvancedStateCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for PipelineColorBlendAdvancedStateCreateInfoEXTBuilder {
    type Target = PipelineColorBlendAdvancedStateCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineColorBlendAdvancedStateCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineColorBlendAdvancedStateCreateInfoEXTBuilder {
    type Target = PipelineColorBlendAdvancedStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineColorBlendAttachmentState {
    type Target = PipelineColorBlendAttachmentState;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineColorBlendAttachmentState {
    type Builder = PipelineColorBlendAttachmentStateBuilder;
}

/// A builder for a [`PipelineColorBlendAttachmentState`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineColorBlendAttachmentStateBuilder {
    value: PipelineColorBlendAttachmentState,
}

impl PipelineColorBlendAttachmentStateBuilder {
    #[inline]
    pub fn blend_enable(mut self, blend_enable: bool) -> Self {
        self.value.blend_enable = blend_enable as Bool32;
        self
    }

    #[inline]
    pub fn src_color_blend_factor(mut self, src_color_blend_factor: BlendFactor) -> Self {
        self.value.src_color_blend_factor = src_color_blend_factor;
        self
    }

    #[inline]
    pub fn dst_color_blend_factor(mut self, dst_color_blend_factor: BlendFactor) -> Self {
        self.value.dst_color_blend_factor = dst_color_blend_factor;
        self
    }

    #[inline]
    pub fn color_blend_op(mut self, color_blend_op: BlendOp) -> Self {
        self.value.color_blend_op = color_blend_op;
        self
    }

    #[inline]
    pub fn src_alpha_blend_factor(mut self, src_alpha_blend_factor: BlendFactor) -> Self {
        self.value.src_alpha_blend_factor = src_alpha_blend_factor;
        self
    }

    #[inline]
    pub fn dst_alpha_blend_factor(mut self, dst_alpha_blend_factor: BlendFactor) -> Self {
        self.value.dst_alpha_blend_factor = dst_alpha_blend_factor;
        self
    }

    #[inline]
    pub fn alpha_blend_op(mut self, alpha_blend_op: BlendOp) -> Self {
        self.value.alpha_blend_op = alpha_blend_op;
        self
    }

    #[inline]
    pub fn color_write_mask(mut self, color_write_mask: ColorComponentFlags) -> Self {
        self.value.color_write_mask = color_write_mask;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineColorBlendAttachmentState {
        self.value
    }
}

impl ops::Deref for PipelineColorBlendAttachmentStateBuilder {
    type Target = PipelineColorBlendAttachmentState;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineColorBlendAttachmentStateBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineColorBlendAttachmentStateBuilder {
    type Target = PipelineColorBlendAttachmentState;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PipelineColorBlendStateCreateInfo`].
pub unsafe trait ExtendsPipelineColorBlendStateCreateInfo: fmt::Debug {}
unsafe impl ExtendsPipelineColorBlendStateCreateInfo
    for PipelineColorBlendAdvancedStateCreateInfoEXT
{
}
unsafe impl ExtendsPipelineColorBlendStateCreateInfo for PipelineColorWriteCreateInfoEXT {}

unsafe impl Cast for PipelineColorBlendStateCreateInfo {
    type Target = PipelineColorBlendStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineColorBlendStateCreateInfo {
    type Builder = PipelineColorBlendStateCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineColorBlendStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineColorBlendStateCreateInfoBuilder<'b> {
    value: PipelineColorBlendStateCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineColorBlendStateCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPipelineColorBlendStateCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineColorBlendStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn logic_op_enable(mut self, logic_op_enable: bool) -> Self {
        self.value.logic_op_enable = logic_op_enable as Bool32;
        self
    }

    #[inline]
    pub fn logic_op(mut self, logic_op: LogicOp) -> Self {
        self.value.logic_op = logic_op;
        self
    }

    #[inline]
    pub fn attachment_count(mut self, attachment_count: u32) -> Self {
        self.value.attachment_count = attachment_count;
        self
    }

    #[inline]
    pub fn attachments(
        mut self,
        attachments: &'b [impl Cast<Target = PipelineColorBlendAttachmentState>],
    ) -> Self {
        self.value.attachment_count = attachments.len() as u32;
        self.value.attachments = attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn blend_constants(mut self, blend_constants: [f32; 4]) -> Self {
        self.value.blend_constants = blend_constants;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineColorBlendStateCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineColorBlendStateCreateInfoBuilder<'b> {
    type Target = PipelineColorBlendStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineColorBlendStateCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineColorBlendStateCreateInfoBuilder<'b> {
    type Target = PipelineColorBlendStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineColorWriteCreateInfoEXT {
    type Target = PipelineColorWriteCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineColorWriteCreateInfoEXT {
    type Builder = PipelineColorWriteCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`PipelineColorWriteCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineColorWriteCreateInfoEXTBuilder<'b> {
    value: PipelineColorWriteCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineColorWriteCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn color_write_enables(mut self, color_write_enables: &'b [Bool32]) -> Self {
        self.value.attachment_count = color_write_enables.len() as u32;
        self.value.color_write_enables = color_write_enables.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineColorWriteCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for PipelineColorWriteCreateInfoEXTBuilder<'b> {
    type Target = PipelineColorWriteCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineColorWriteCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineColorWriteCreateInfoEXTBuilder<'b> {
    type Target = PipelineColorWriteCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCompilerControlCreateInfoAMD {
    type Target = PipelineCompilerControlCreateInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineCompilerControlCreateInfoAMD {
    type Builder = PipelineCompilerControlCreateInfoAMDBuilder;
}

/// A builder for a [`PipelineCompilerControlCreateInfoAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCompilerControlCreateInfoAMDBuilder {
    value: PipelineCompilerControlCreateInfoAMD,
}

impl PipelineCompilerControlCreateInfoAMDBuilder {
    #[inline]
    pub fn compiler_control_flags(
        mut self,
        compiler_control_flags: PipelineCompilerControlFlagsAMD,
    ) -> Self {
        self.value.compiler_control_flags = compiler_control_flags;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCompilerControlCreateInfoAMD {
        self.value
    }
}

impl ops::Deref for PipelineCompilerControlCreateInfoAMDBuilder {
    type Target = PipelineCompilerControlCreateInfoAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineCompilerControlCreateInfoAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineCompilerControlCreateInfoAMDBuilder {
    type Target = PipelineCompilerControlCreateInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCoverageModulationStateCreateInfoNV {
    type Target = PipelineCoverageModulationStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineCoverageModulationStateCreateInfoNV {
    type Builder = PipelineCoverageModulationStateCreateInfoNVBuilder<'b>;
}

/// A builder for a [`PipelineCoverageModulationStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCoverageModulationStateCreateInfoNVBuilder<'b> {
    value: PipelineCoverageModulationStateCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineCoverageModulationStateCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: PipelineCoverageModulationStateCreateFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn coverage_modulation_mode(
        mut self,
        coverage_modulation_mode: CoverageModulationModeNV,
    ) -> Self {
        self.value.coverage_modulation_mode = coverage_modulation_mode;
        self
    }

    #[inline]
    pub fn coverage_modulation_table_enable(
        mut self,
        coverage_modulation_table_enable: bool,
    ) -> Self {
        self.value.coverage_modulation_table_enable = coverage_modulation_table_enable as Bool32;
        self
    }

    #[inline]
    pub fn coverage_modulation_table_count(mut self, coverage_modulation_table_count: u32) -> Self {
        self.value.coverage_modulation_table_count = coverage_modulation_table_count;
        self
    }

    #[inline]
    pub fn coverage_modulation_table(mut self, coverage_modulation_table: &'b [f32]) -> Self {
        self.value.coverage_modulation_table_count = coverage_modulation_table.len() as u32;
        self.value.coverage_modulation_table = coverage_modulation_table.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCoverageModulationStateCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for PipelineCoverageModulationStateCreateInfoNVBuilder<'b> {
    type Target = PipelineCoverageModulationStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineCoverageModulationStateCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineCoverageModulationStateCreateInfoNVBuilder<'b> {
    type Target = PipelineCoverageModulationStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCoverageReductionStateCreateInfoNV {
    type Target = PipelineCoverageReductionStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineCoverageReductionStateCreateInfoNV {
    type Builder = PipelineCoverageReductionStateCreateInfoNVBuilder;
}

/// A builder for a [`PipelineCoverageReductionStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCoverageReductionStateCreateInfoNVBuilder {
    value: PipelineCoverageReductionStateCreateInfoNV,
}

impl PipelineCoverageReductionStateCreateInfoNVBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineCoverageReductionStateCreateFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn coverage_reduction_mode(
        mut self,
        coverage_reduction_mode: CoverageReductionModeNV,
    ) -> Self {
        self.value.coverage_reduction_mode = coverage_reduction_mode;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCoverageReductionStateCreateInfoNV {
        self.value
    }
}

impl ops::Deref for PipelineCoverageReductionStateCreateInfoNVBuilder {
    type Target = PipelineCoverageReductionStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineCoverageReductionStateCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineCoverageReductionStateCreateInfoNVBuilder {
    type Target = PipelineCoverageReductionStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCoverageToColorStateCreateInfoNV {
    type Target = PipelineCoverageToColorStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineCoverageToColorStateCreateInfoNV {
    type Builder = PipelineCoverageToColorStateCreateInfoNVBuilder;
}

/// A builder for a [`PipelineCoverageToColorStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCoverageToColorStateCreateInfoNVBuilder {
    value: PipelineCoverageToColorStateCreateInfoNV,
}

impl PipelineCoverageToColorStateCreateInfoNVBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineCoverageToColorStateCreateFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn coverage_to_color_enable(mut self, coverage_to_color_enable: bool) -> Self {
        self.value.coverage_to_color_enable = coverage_to_color_enable as Bool32;
        self
    }

    #[inline]
    pub fn coverage_to_color_location(mut self, coverage_to_color_location: u32) -> Self {
        self.value.coverage_to_color_location = coverage_to_color_location;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCoverageToColorStateCreateInfoNV {
        self.value
    }
}

impl ops::Deref for PipelineCoverageToColorStateCreateInfoNVBuilder {
    type Target = PipelineCoverageToColorStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineCoverageToColorStateCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineCoverageToColorStateCreateInfoNVBuilder {
    type Target = PipelineCoverageToColorStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCreateFlags2CreateInfoKHR {
    type Target = PipelineCreateFlags2CreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineCreateFlags2CreateInfoKHR {
    type Builder = PipelineCreateFlags2CreateInfoKHRBuilder;
}

/// A builder for a [`PipelineCreateFlags2CreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCreateFlags2CreateInfoKHRBuilder {
    value: PipelineCreateFlags2CreateInfoKHR,
}

impl PipelineCreateFlags2CreateInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineCreateFlags2KHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCreateFlags2CreateInfoKHR {
        self.value
    }
}

impl ops::Deref for PipelineCreateFlags2CreateInfoKHRBuilder {
    type Target = PipelineCreateFlags2CreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineCreateFlags2CreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineCreateFlags2CreateInfoKHRBuilder {
    type Target = PipelineCreateFlags2CreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCreateInfoKHR {
    type Target = PipelineCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineCreateInfoKHR {
    type Builder = PipelineCreateInfoKHRBuilder;
}

/// A builder for a [`PipelineCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCreateInfoKHRBuilder {
    value: PipelineCreateInfoKHR,
}

impl PipelineCreateInfoKHRBuilder {
    #[inline]
    pub fn build(self) -> PipelineCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for PipelineCreateInfoKHRBuilder {
    type Target = PipelineCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineCreateInfoKHRBuilder {
    type Target = PipelineCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCreationFeedback {
    type Target = PipelineCreationFeedback;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineCreationFeedback {
    type Builder = PipelineCreationFeedbackBuilder;
}

/// A builder for a [`PipelineCreationFeedback`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCreationFeedbackBuilder {
    value: PipelineCreationFeedback,
}

impl PipelineCreationFeedbackBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineCreationFeedbackFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn duration(mut self, duration: u64) -> Self {
        self.value.duration = duration;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCreationFeedback {
        self.value
    }
}

impl ops::Deref for PipelineCreationFeedbackBuilder {
    type Target = PipelineCreationFeedback;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineCreationFeedbackBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineCreationFeedbackBuilder {
    type Target = PipelineCreationFeedback;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineCreationFeedbackCreateInfo {
    type Target = PipelineCreationFeedbackCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineCreationFeedbackCreateInfo {
    type Builder = PipelineCreationFeedbackCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineCreationFeedbackCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineCreationFeedbackCreateInfoBuilder<'b> {
    value: PipelineCreationFeedbackCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineCreationFeedbackCreateInfoBuilder<'b> {
    #[inline]
    pub fn pipeline_creation_feedback(
        mut self,
        pipeline_creation_feedback: &'b mut impl Cast<Target = PipelineCreationFeedback>,
    ) -> Self {
        self.value.pipeline_creation_feedback = pipeline_creation_feedback.as_mut();
        self
    }

    #[inline]
    pub fn pipeline_stage_creation_feedbacks(
        mut self,
        pipeline_stage_creation_feedbacks: &'b mut [impl Cast<Target = PipelineCreationFeedback>],
    ) -> Self {
        self.value.pipeline_stage_creation_feedback_count =
            pipeline_stage_creation_feedbacks.len() as u32;
        self.value.pipeline_stage_creation_feedbacks =
            pipeline_stage_creation_feedbacks.as_mut_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineCreationFeedbackCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineCreationFeedbackCreateInfoBuilder<'b> {
    type Target = PipelineCreationFeedbackCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineCreationFeedbackCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineCreationFeedbackCreateInfoBuilder<'b> {
    type Target = PipelineCreationFeedbackCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineDepthStencilStateCreateInfo {
    type Target = PipelineDepthStencilStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineDepthStencilStateCreateInfo {
    type Builder = PipelineDepthStencilStateCreateInfoBuilder;
}

/// A builder for a [`PipelineDepthStencilStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineDepthStencilStateCreateInfoBuilder {
    value: PipelineDepthStencilStateCreateInfo,
}

impl PipelineDepthStencilStateCreateInfoBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineDepthStencilStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn depth_test_enable(mut self, depth_test_enable: bool) -> Self {
        self.value.depth_test_enable = depth_test_enable as Bool32;
        self
    }

    #[inline]
    pub fn depth_write_enable(mut self, depth_write_enable: bool) -> Self {
        self.value.depth_write_enable = depth_write_enable as Bool32;
        self
    }

    #[inline]
    pub fn depth_compare_op(mut self, depth_compare_op: CompareOp) -> Self {
        self.value.depth_compare_op = depth_compare_op;
        self
    }

    #[inline]
    pub fn depth_bounds_test_enable(mut self, depth_bounds_test_enable: bool) -> Self {
        self.value.depth_bounds_test_enable = depth_bounds_test_enable as Bool32;
        self
    }

    #[inline]
    pub fn stencil_test_enable(mut self, stencil_test_enable: bool) -> Self {
        self.value.stencil_test_enable = stencil_test_enable as Bool32;
        self
    }

    #[inline]
    pub fn front(mut self, front: impl Cast<Target = StencilOpState>) -> Self {
        self.value.front = front.into();
        self
    }

    #[inline]
    pub fn back(mut self, back: impl Cast<Target = StencilOpState>) -> Self {
        self.value.back = back.into();
        self
    }

    #[inline]
    pub fn min_depth_bounds(mut self, min_depth_bounds: f32) -> Self {
        self.value.min_depth_bounds = min_depth_bounds;
        self
    }

    #[inline]
    pub fn max_depth_bounds(mut self, max_depth_bounds: f32) -> Self {
        self.value.max_depth_bounds = max_depth_bounds;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineDepthStencilStateCreateInfo {
        self.value
    }
}

impl ops::Deref for PipelineDepthStencilStateCreateInfoBuilder {
    type Target = PipelineDepthStencilStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineDepthStencilStateCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineDepthStencilStateCreateInfoBuilder {
    type Target = PipelineDepthStencilStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineDiscardRectangleStateCreateInfoEXT {
    type Target = PipelineDiscardRectangleStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineDiscardRectangleStateCreateInfoEXT {
    type Builder = PipelineDiscardRectangleStateCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`PipelineDiscardRectangleStateCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineDiscardRectangleStateCreateInfoEXTBuilder<'b> {
    value: PipelineDiscardRectangleStateCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineDiscardRectangleStateCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: PipelineDiscardRectangleStateCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn discard_rectangle_mode(
        mut self,
        discard_rectangle_mode: DiscardRectangleModeEXT,
    ) -> Self {
        self.value.discard_rectangle_mode = discard_rectangle_mode;
        self
    }

    #[inline]
    pub fn discard_rectangles(
        mut self,
        discard_rectangles: &'b [impl Cast<Target = Rect2D>],
    ) -> Self {
        self.value.discard_rectangle_count = discard_rectangles.len() as u32;
        self.value.discard_rectangles = discard_rectangles.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineDiscardRectangleStateCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for PipelineDiscardRectangleStateCreateInfoEXTBuilder<'b> {
    type Target = PipelineDiscardRectangleStateCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineDiscardRectangleStateCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineDiscardRectangleStateCreateInfoEXTBuilder<'b> {
    type Target = PipelineDiscardRectangleStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineDynamicStateCreateInfo {
    type Target = PipelineDynamicStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineDynamicStateCreateInfo {
    type Builder = PipelineDynamicStateCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineDynamicStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineDynamicStateCreateInfoBuilder<'b> {
    value: PipelineDynamicStateCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineDynamicStateCreateInfoBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: PipelineDynamicStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn dynamic_states(mut self, dynamic_states: &'b [DynamicState]) -> Self {
        self.value.dynamic_state_count = dynamic_states.len() as u32;
        self.value.dynamic_states = dynamic_states.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineDynamicStateCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineDynamicStateCreateInfoBuilder<'b> {
    type Target = PipelineDynamicStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineDynamicStateCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineDynamicStateCreateInfoBuilder<'b> {
    type Target = PipelineDynamicStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineExecutableInfoKHR {
    type Target = PipelineExecutableInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineExecutableInfoKHR {
    type Builder = PipelineExecutableInfoKHRBuilder;
}

/// A builder for a [`PipelineExecutableInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineExecutableInfoKHRBuilder {
    value: PipelineExecutableInfoKHR,
}

impl PipelineExecutableInfoKHRBuilder {
    #[inline]
    pub fn pipeline(mut self, pipeline: Pipeline) -> Self {
        self.value.pipeline = pipeline;
        self
    }

    #[inline]
    pub fn executable_index(mut self, executable_index: u32) -> Self {
        self.value.executable_index = executable_index;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineExecutableInfoKHR {
        self.value
    }
}

impl ops::Deref for PipelineExecutableInfoKHRBuilder {
    type Target = PipelineExecutableInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineExecutableInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineExecutableInfoKHRBuilder {
    type Target = PipelineExecutableInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineExecutableInternalRepresentationKHR {
    type Target = PipelineExecutableInternalRepresentationKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineExecutableInternalRepresentationKHR {
    type Builder = PipelineExecutableInternalRepresentationKHRBuilder<'b>;
}

/// A builder for a [`PipelineExecutableInternalRepresentationKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineExecutableInternalRepresentationKHRBuilder<'b> {
    value: PipelineExecutableInternalRepresentationKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineExecutableInternalRepresentationKHRBuilder<'b> {
    #[inline]
    pub fn name(mut self, name: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>) -> Self {
        self.value.name = name.into();
        self
    }

    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn is_text(mut self, is_text: bool) -> Self {
        self.value.is_text = is_text as Bool32;
        self
    }

    #[inline]
    pub fn data_size(mut self, data_size: usize) -> Self {
        self.value.data_size = data_size;
        self
    }

    #[inline]
    pub fn data(mut self, data: &'b mut [u8]) -> Self {
        self.value.data_size = data.len() as usize;
        self.value.data = data.as_mut_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineExecutableInternalRepresentationKHR {
        self.value
    }
}

impl<'b> ops::Deref for PipelineExecutableInternalRepresentationKHRBuilder<'b> {
    type Target = PipelineExecutableInternalRepresentationKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineExecutableInternalRepresentationKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineExecutableInternalRepresentationKHRBuilder<'b> {
    type Target = PipelineExecutableInternalRepresentationKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineExecutablePropertiesKHR {
    type Target = PipelineExecutablePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineExecutablePropertiesKHR {
    type Builder = PipelineExecutablePropertiesKHRBuilder;
}

/// A builder for a [`PipelineExecutablePropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineExecutablePropertiesKHRBuilder {
    value: PipelineExecutablePropertiesKHR,
}

impl PipelineExecutablePropertiesKHRBuilder {
    #[inline]
    pub fn stages(mut self, stages: ShaderStageFlags) -> Self {
        self.value.stages = stages;
        self
    }

    #[inline]
    pub fn name(mut self, name: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>) -> Self {
        self.value.name = name.into();
        self
    }

    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn subgroup_size(mut self, subgroup_size: u32) -> Self {
        self.value.subgroup_size = subgroup_size;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineExecutablePropertiesKHR {
        self.value
    }
}

impl ops::Deref for PipelineExecutablePropertiesKHRBuilder {
    type Target = PipelineExecutablePropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineExecutablePropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineExecutablePropertiesKHRBuilder {
    type Target = PipelineExecutablePropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineExecutableStatisticKHR {
    type Target = PipelineExecutableStatisticKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineExecutableStatisticKHR {
    type Builder = PipelineExecutableStatisticKHRBuilder;
}

/// A builder for a [`PipelineExecutableStatisticKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineExecutableStatisticKHRBuilder {
    value: PipelineExecutableStatisticKHR,
}

impl PipelineExecutableStatisticKHRBuilder {
    #[inline]
    pub fn name(mut self, name: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>) -> Self {
        self.value.name = name.into();
        self
    }

    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn format(mut self, format: PipelineExecutableStatisticFormatKHR) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn value(mut self, value: PipelineExecutableStatisticValueKHR) -> Self {
        self.value.value = value;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineExecutableStatisticKHR {
        self.value
    }
}

impl ops::Deref for PipelineExecutableStatisticKHRBuilder {
    type Target = PipelineExecutableStatisticKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineExecutableStatisticKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineExecutableStatisticKHRBuilder {
    type Target = PipelineExecutableStatisticKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineFragmentShadingRateEnumStateCreateInfoNV {
    type Target = PipelineFragmentShadingRateEnumStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineFragmentShadingRateEnumStateCreateInfoNV {
    type Builder = PipelineFragmentShadingRateEnumStateCreateInfoNVBuilder;
}

/// A builder for a [`PipelineFragmentShadingRateEnumStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineFragmentShadingRateEnumStateCreateInfoNVBuilder {
    value: PipelineFragmentShadingRateEnumStateCreateInfoNV,
}

impl PipelineFragmentShadingRateEnumStateCreateInfoNVBuilder {
    #[inline]
    pub fn shading_rate_type(mut self, shading_rate_type: FragmentShadingRateTypeNV) -> Self {
        self.value.shading_rate_type = shading_rate_type;
        self
    }

    #[inline]
    pub fn shading_rate(mut self, shading_rate: FragmentShadingRateNV) -> Self {
        self.value.shading_rate = shading_rate;
        self
    }

    #[inline]
    pub fn combiner_ops(mut self, combiner_ops: [FragmentShadingRateCombinerOpKHR; 2]) -> Self {
        self.value.combiner_ops = combiner_ops;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineFragmentShadingRateEnumStateCreateInfoNV {
        self.value
    }
}

impl ops::Deref for PipelineFragmentShadingRateEnumStateCreateInfoNVBuilder {
    type Target = PipelineFragmentShadingRateEnumStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineFragmentShadingRateEnumStateCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineFragmentShadingRateEnumStateCreateInfoNVBuilder {
    type Target = PipelineFragmentShadingRateEnumStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineFragmentShadingRateStateCreateInfoKHR {
    type Target = PipelineFragmentShadingRateStateCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineFragmentShadingRateStateCreateInfoKHR {
    type Builder = PipelineFragmentShadingRateStateCreateInfoKHRBuilder;
}

/// A builder for a [`PipelineFragmentShadingRateStateCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineFragmentShadingRateStateCreateInfoKHRBuilder {
    value: PipelineFragmentShadingRateStateCreateInfoKHR,
}

impl PipelineFragmentShadingRateStateCreateInfoKHRBuilder {
    #[inline]
    pub fn fragment_size(mut self, fragment_size: impl Cast<Target = Extent2D>) -> Self {
        self.value.fragment_size = fragment_size.into();
        self
    }

    #[inline]
    pub fn combiner_ops(mut self, combiner_ops: [FragmentShadingRateCombinerOpKHR; 2]) -> Self {
        self.value.combiner_ops = combiner_ops;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineFragmentShadingRateStateCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for PipelineFragmentShadingRateStateCreateInfoKHRBuilder {
    type Target = PipelineFragmentShadingRateStateCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineFragmentShadingRateStateCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineFragmentShadingRateStateCreateInfoKHRBuilder {
    type Target = PipelineFragmentShadingRateStateCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineIndirectDeviceAddressInfoNV {
    type Target = PipelineIndirectDeviceAddressInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineIndirectDeviceAddressInfoNV {
    type Builder = PipelineIndirectDeviceAddressInfoNVBuilder;
}

/// A builder for a [`PipelineIndirectDeviceAddressInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineIndirectDeviceAddressInfoNVBuilder {
    value: PipelineIndirectDeviceAddressInfoNV,
}

impl PipelineIndirectDeviceAddressInfoNVBuilder {
    #[inline]
    pub fn pipeline_bind_point(mut self, pipeline_bind_point: PipelineBindPoint) -> Self {
        self.value.pipeline_bind_point = pipeline_bind_point;
        self
    }

    #[inline]
    pub fn pipeline(mut self, pipeline: Pipeline) -> Self {
        self.value.pipeline = pipeline;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineIndirectDeviceAddressInfoNV {
        self.value
    }
}

impl ops::Deref for PipelineIndirectDeviceAddressInfoNVBuilder {
    type Target = PipelineIndirectDeviceAddressInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineIndirectDeviceAddressInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineIndirectDeviceAddressInfoNVBuilder {
    type Target = PipelineIndirectDeviceAddressInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineInfoKHR {
    type Target = PipelineInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineInfoKHR {
    type Builder = PipelineInfoKHRBuilder;
}

/// A builder for a [`PipelineInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineInfoKHRBuilder {
    value: PipelineInfoKHR,
}

impl PipelineInfoKHRBuilder {
    #[inline]
    pub fn pipeline(mut self, pipeline: Pipeline) -> Self {
        self.value.pipeline = pipeline;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineInfoKHR {
        self.value
    }
}

impl ops::Deref for PipelineInfoKHRBuilder {
    type Target = PipelineInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineInfoKHRBuilder {
    type Target = PipelineInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineInputAssemblyStateCreateInfo {
    type Target = PipelineInputAssemblyStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineInputAssemblyStateCreateInfo {
    type Builder = PipelineInputAssemblyStateCreateInfoBuilder;
}

/// A builder for a [`PipelineInputAssemblyStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineInputAssemblyStateCreateInfoBuilder {
    value: PipelineInputAssemblyStateCreateInfo,
}

impl PipelineInputAssemblyStateCreateInfoBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineInputAssemblyStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn topology(mut self, topology: PrimitiveTopology) -> Self {
        self.value.topology = topology;
        self
    }

    #[inline]
    pub fn primitive_restart_enable(mut self, primitive_restart_enable: bool) -> Self {
        self.value.primitive_restart_enable = primitive_restart_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineInputAssemblyStateCreateInfo {
        self.value
    }
}

impl ops::Deref for PipelineInputAssemblyStateCreateInfoBuilder {
    type Target = PipelineInputAssemblyStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineInputAssemblyStateCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineInputAssemblyStateCreateInfoBuilder {
    type Target = PipelineInputAssemblyStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineLayoutCreateInfo {
    type Target = PipelineLayoutCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineLayoutCreateInfo {
    type Builder = PipelineLayoutCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineLayoutCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineLayoutCreateInfoBuilder<'b> {
    value: PipelineLayoutCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineLayoutCreateInfoBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: PipelineLayoutCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn set_layouts(mut self, set_layouts: &'b [DescriptorSetLayout]) -> Self {
        self.value.set_layout_count = set_layouts.len() as u32;
        self.value.set_layouts = set_layouts.as_ptr();
        self
    }

    #[inline]
    pub fn push_constant_ranges(
        mut self,
        push_constant_ranges: &'b [impl Cast<Target = PushConstantRange>],
    ) -> Self {
        self.value.push_constant_range_count = push_constant_ranges.len() as u32;
        self.value.push_constant_ranges = push_constant_ranges.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineLayoutCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineLayoutCreateInfoBuilder<'b> {
    type Target = PipelineLayoutCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineLayoutCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineLayoutCreateInfoBuilder<'b> {
    type Target = PipelineLayoutCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineLibraryCreateInfoKHR {
    type Target = PipelineLibraryCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineLibraryCreateInfoKHR {
    type Builder = PipelineLibraryCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`PipelineLibraryCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineLibraryCreateInfoKHRBuilder<'b> {
    value: PipelineLibraryCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineLibraryCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn libraries(mut self, libraries: &'b [Pipeline]) -> Self {
        self.value.library_count = libraries.len() as u32;
        self.value.libraries = libraries.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineLibraryCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PipelineLibraryCreateInfoKHRBuilder<'b> {
    type Target = PipelineLibraryCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineLibraryCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineLibraryCreateInfoKHRBuilder<'b> {
    type Target = PipelineLibraryCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PipelineMultisampleStateCreateInfo`].
pub unsafe trait ExtendsPipelineMultisampleStateCreateInfo: fmt::Debug {}
unsafe impl ExtendsPipelineMultisampleStateCreateInfo
    for PipelineCoverageModulationStateCreateInfoNV
{
}
unsafe impl ExtendsPipelineMultisampleStateCreateInfo
    for PipelineCoverageReductionStateCreateInfoNV
{
}
unsafe impl ExtendsPipelineMultisampleStateCreateInfo for PipelineCoverageToColorStateCreateInfoNV {}
unsafe impl ExtendsPipelineMultisampleStateCreateInfo
    for PipelineSampleLocationsStateCreateInfoEXT
{
}

unsafe impl Cast for PipelineMultisampleStateCreateInfo {
    type Target = PipelineMultisampleStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineMultisampleStateCreateInfo {
    type Builder = PipelineMultisampleStateCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineMultisampleStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineMultisampleStateCreateInfoBuilder<'b> {
    value: PipelineMultisampleStateCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineMultisampleStateCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPipelineMultisampleStateCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineMultisampleStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn rasterization_samples(mut self, rasterization_samples: SampleCountFlags) -> Self {
        self.value.rasterization_samples = rasterization_samples;
        self
    }

    #[inline]
    pub fn sample_shading_enable(mut self, sample_shading_enable: bool) -> Self {
        self.value.sample_shading_enable = sample_shading_enable as Bool32;
        self
    }

    #[inline]
    pub fn min_sample_shading(mut self, min_sample_shading: f32) -> Self {
        self.value.min_sample_shading = min_sample_shading;
        self
    }

    #[inline]
    pub fn sample_mask(mut self, sample_mask: &'b [SampleMask]) -> Self {
        self.value.sample_mask = sample_mask.as_ptr();
        self
    }

    #[inline]
    pub fn alpha_to_coverage_enable(mut self, alpha_to_coverage_enable: bool) -> Self {
        self.value.alpha_to_coverage_enable = alpha_to_coverage_enable as Bool32;
        self
    }

    #[inline]
    pub fn alpha_to_one_enable(mut self, alpha_to_one_enable: bool) -> Self {
        self.value.alpha_to_one_enable = alpha_to_one_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineMultisampleStateCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineMultisampleStateCreateInfoBuilder<'b> {
    type Target = PipelineMultisampleStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineMultisampleStateCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineMultisampleStateCreateInfoBuilder<'b> {
    type Target = PipelineMultisampleStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelinePropertiesIdentifierEXT {
    type Target = PipelinePropertiesIdentifierEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelinePropertiesIdentifierEXT {
    type Builder = PipelinePropertiesIdentifierEXTBuilder;
}

/// A builder for a [`PipelinePropertiesIdentifierEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelinePropertiesIdentifierEXTBuilder {
    value: PipelinePropertiesIdentifierEXT,
}

impl PipelinePropertiesIdentifierEXTBuilder {
    #[inline]
    pub fn pipeline_identifier(
        mut self,
        pipeline_identifier: impl Into<ByteArray<UUID_SIZE>>,
    ) -> Self {
        self.value.pipeline_identifier = pipeline_identifier.into();
        self
    }

    #[inline]
    pub fn build(self) -> PipelinePropertiesIdentifierEXT {
        self.value
    }
}

impl ops::Deref for PipelinePropertiesIdentifierEXTBuilder {
    type Target = PipelinePropertiesIdentifierEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelinePropertiesIdentifierEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelinePropertiesIdentifierEXTBuilder {
    type Target = PipelinePropertiesIdentifierEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRasterizationConservativeStateCreateInfoEXT {
    type Target = PipelineRasterizationConservativeStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineRasterizationConservativeStateCreateInfoEXT {
    type Builder = PipelineRasterizationConservativeStateCreateInfoEXTBuilder;
}

/// A builder for a [`PipelineRasterizationConservativeStateCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRasterizationConservativeStateCreateInfoEXTBuilder {
    value: PipelineRasterizationConservativeStateCreateInfoEXT,
}

impl PipelineRasterizationConservativeStateCreateInfoEXTBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineRasterizationConservativeStateCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn conservative_rasterization_mode(
        mut self,
        conservative_rasterization_mode: ConservativeRasterizationModeEXT,
    ) -> Self {
        self.value.conservative_rasterization_mode = conservative_rasterization_mode;
        self
    }

    #[inline]
    pub fn extra_primitive_overestimation_size(
        mut self,
        extra_primitive_overestimation_size: f32,
    ) -> Self {
        self.value.extra_primitive_overestimation_size = extra_primitive_overestimation_size;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRasterizationConservativeStateCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for PipelineRasterizationConservativeStateCreateInfoEXTBuilder {
    type Target = PipelineRasterizationConservativeStateCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineRasterizationConservativeStateCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineRasterizationConservativeStateCreateInfoEXTBuilder {
    type Target = PipelineRasterizationConservativeStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRasterizationDepthClipStateCreateInfoEXT {
    type Target = PipelineRasterizationDepthClipStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineRasterizationDepthClipStateCreateInfoEXT {
    type Builder = PipelineRasterizationDepthClipStateCreateInfoEXTBuilder;
}

/// A builder for a [`PipelineRasterizationDepthClipStateCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRasterizationDepthClipStateCreateInfoEXTBuilder {
    value: PipelineRasterizationDepthClipStateCreateInfoEXT,
}

impl PipelineRasterizationDepthClipStateCreateInfoEXTBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineRasterizationDepthClipStateCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn depth_clip_enable(mut self, depth_clip_enable: bool) -> Self {
        self.value.depth_clip_enable = depth_clip_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRasterizationDepthClipStateCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for PipelineRasterizationDepthClipStateCreateInfoEXTBuilder {
    type Target = PipelineRasterizationDepthClipStateCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineRasterizationDepthClipStateCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineRasterizationDepthClipStateCreateInfoEXTBuilder {
    type Target = PipelineRasterizationDepthClipStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRasterizationLineStateCreateInfoKHR {
    type Target = PipelineRasterizationLineStateCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineRasterizationLineStateCreateInfoKHR {
    type Builder = PipelineRasterizationLineStateCreateInfoKHRBuilder;
}

/// A builder for a [`PipelineRasterizationLineStateCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRasterizationLineStateCreateInfoKHRBuilder {
    value: PipelineRasterizationLineStateCreateInfoKHR,
}

impl PipelineRasterizationLineStateCreateInfoKHRBuilder {
    #[inline]
    pub fn line_rasterization_mode(
        mut self,
        line_rasterization_mode: LineRasterizationModeKHR,
    ) -> Self {
        self.value.line_rasterization_mode = line_rasterization_mode;
        self
    }

    #[inline]
    pub fn stippled_line_enable(mut self, stippled_line_enable: bool) -> Self {
        self.value.stippled_line_enable = stippled_line_enable as Bool32;
        self
    }

    #[inline]
    pub fn line_stipple_factor(mut self, line_stipple_factor: u32) -> Self {
        self.value.line_stipple_factor = line_stipple_factor;
        self
    }

    #[inline]
    pub fn line_stipple_pattern(mut self, line_stipple_pattern: u16) -> Self {
        self.value.line_stipple_pattern = line_stipple_pattern;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRasterizationLineStateCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for PipelineRasterizationLineStateCreateInfoKHRBuilder {
    type Target = PipelineRasterizationLineStateCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineRasterizationLineStateCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineRasterizationLineStateCreateInfoKHRBuilder {
    type Target = PipelineRasterizationLineStateCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRasterizationProvokingVertexStateCreateInfoEXT {
    type Target = PipelineRasterizationProvokingVertexStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineRasterizationProvokingVertexStateCreateInfoEXT {
    type Builder = PipelineRasterizationProvokingVertexStateCreateInfoEXTBuilder;
}

/// A builder for a [`PipelineRasterizationProvokingVertexStateCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRasterizationProvokingVertexStateCreateInfoEXTBuilder {
    value: PipelineRasterizationProvokingVertexStateCreateInfoEXT,
}

impl PipelineRasterizationProvokingVertexStateCreateInfoEXTBuilder {
    #[inline]
    pub fn provoking_vertex_mode(mut self, provoking_vertex_mode: ProvokingVertexModeEXT) -> Self {
        self.value.provoking_vertex_mode = provoking_vertex_mode;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRasterizationProvokingVertexStateCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for PipelineRasterizationProvokingVertexStateCreateInfoEXTBuilder {
    type Target = PipelineRasterizationProvokingVertexStateCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineRasterizationProvokingVertexStateCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineRasterizationProvokingVertexStateCreateInfoEXTBuilder {
    type Target = PipelineRasterizationProvokingVertexStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PipelineRasterizationStateCreateInfo`].
pub unsafe trait ExtendsPipelineRasterizationStateCreateInfo: fmt::Debug {}
unsafe impl ExtendsPipelineRasterizationStateCreateInfo for DepthBiasRepresentationInfoEXT {}
unsafe impl ExtendsPipelineRasterizationStateCreateInfo
    for PipelineRasterizationConservativeStateCreateInfoEXT
{
}
unsafe impl ExtendsPipelineRasterizationStateCreateInfo
    for PipelineRasterizationDepthClipStateCreateInfoEXT
{
}
unsafe impl ExtendsPipelineRasterizationStateCreateInfo
    for PipelineRasterizationLineStateCreateInfoKHR
{
}
unsafe impl ExtendsPipelineRasterizationStateCreateInfo
    for PipelineRasterizationProvokingVertexStateCreateInfoEXT
{
}
unsafe impl ExtendsPipelineRasterizationStateCreateInfo
    for PipelineRasterizationStateRasterizationOrderAMD
{
}
unsafe impl ExtendsPipelineRasterizationStateCreateInfo
    for PipelineRasterizationStateStreamCreateInfoEXT
{
}

unsafe impl Cast for PipelineRasterizationStateCreateInfo {
    type Target = PipelineRasterizationStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineRasterizationStateCreateInfo {
    type Builder = PipelineRasterizationStateCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineRasterizationStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRasterizationStateCreateInfoBuilder<'b> {
    value: PipelineRasterizationStateCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineRasterizationStateCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPipelineRasterizationStateCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineRasterizationStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn depth_clamp_enable(mut self, depth_clamp_enable: bool) -> Self {
        self.value.depth_clamp_enable = depth_clamp_enable as Bool32;
        self
    }

    #[inline]
    pub fn rasterizer_discard_enable(mut self, rasterizer_discard_enable: bool) -> Self {
        self.value.rasterizer_discard_enable = rasterizer_discard_enable as Bool32;
        self
    }

    #[inline]
    pub fn polygon_mode(mut self, polygon_mode: PolygonMode) -> Self {
        self.value.polygon_mode = polygon_mode;
        self
    }

    #[inline]
    pub fn cull_mode(mut self, cull_mode: CullModeFlags) -> Self {
        self.value.cull_mode = cull_mode;
        self
    }

    #[inline]
    pub fn front_face(mut self, front_face: FrontFace) -> Self {
        self.value.front_face = front_face;
        self
    }

    #[inline]
    pub fn depth_bias_enable(mut self, depth_bias_enable: bool) -> Self {
        self.value.depth_bias_enable = depth_bias_enable as Bool32;
        self
    }

    #[inline]
    pub fn depth_bias_constant_factor(mut self, depth_bias_constant_factor: f32) -> Self {
        self.value.depth_bias_constant_factor = depth_bias_constant_factor;
        self
    }

    #[inline]
    pub fn depth_bias_clamp(mut self, depth_bias_clamp: f32) -> Self {
        self.value.depth_bias_clamp = depth_bias_clamp;
        self
    }

    #[inline]
    pub fn depth_bias_slope_factor(mut self, depth_bias_slope_factor: f32) -> Self {
        self.value.depth_bias_slope_factor = depth_bias_slope_factor;
        self
    }

    #[inline]
    pub fn line_width(mut self, line_width: f32) -> Self {
        self.value.line_width = line_width;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRasterizationStateCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineRasterizationStateCreateInfoBuilder<'b> {
    type Target = PipelineRasterizationStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineRasterizationStateCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineRasterizationStateCreateInfoBuilder<'b> {
    type Target = PipelineRasterizationStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRasterizationStateRasterizationOrderAMD {
    type Target = PipelineRasterizationStateRasterizationOrderAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineRasterizationStateRasterizationOrderAMD {
    type Builder = PipelineRasterizationStateRasterizationOrderAMDBuilder;
}

/// A builder for a [`PipelineRasterizationStateRasterizationOrderAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRasterizationStateRasterizationOrderAMDBuilder {
    value: PipelineRasterizationStateRasterizationOrderAMD,
}

impl PipelineRasterizationStateRasterizationOrderAMDBuilder {
    #[inline]
    pub fn rasterization_order(mut self, rasterization_order: RasterizationOrderAMD) -> Self {
        self.value.rasterization_order = rasterization_order;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRasterizationStateRasterizationOrderAMD {
        self.value
    }
}

impl ops::Deref for PipelineRasterizationStateRasterizationOrderAMDBuilder {
    type Target = PipelineRasterizationStateRasterizationOrderAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineRasterizationStateRasterizationOrderAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineRasterizationStateRasterizationOrderAMDBuilder {
    type Target = PipelineRasterizationStateRasterizationOrderAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRasterizationStateStreamCreateInfoEXT {
    type Target = PipelineRasterizationStateStreamCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineRasterizationStateStreamCreateInfoEXT {
    type Builder = PipelineRasterizationStateStreamCreateInfoEXTBuilder;
}

/// A builder for a [`PipelineRasterizationStateStreamCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRasterizationStateStreamCreateInfoEXTBuilder {
    value: PipelineRasterizationStateStreamCreateInfoEXT,
}

impl PipelineRasterizationStateStreamCreateInfoEXTBuilder {
    #[inline]
    pub fn flags(mut self, flags: PipelineRasterizationStateStreamCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn rasterization_stream(mut self, rasterization_stream: u32) -> Self {
        self.value.rasterization_stream = rasterization_stream;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRasterizationStateStreamCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for PipelineRasterizationStateStreamCreateInfoEXTBuilder {
    type Target = PipelineRasterizationStateStreamCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineRasterizationStateStreamCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineRasterizationStateStreamCreateInfoEXTBuilder {
    type Target = PipelineRasterizationStateStreamCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRenderingCreateInfo {
    type Target = PipelineRenderingCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineRenderingCreateInfo {
    type Builder = PipelineRenderingCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineRenderingCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRenderingCreateInfoBuilder<'b> {
    value: PipelineRenderingCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineRenderingCreateInfoBuilder<'b> {
    #[inline]
    pub fn view_mask(mut self, view_mask: u32) -> Self {
        self.value.view_mask = view_mask;
        self
    }

    #[inline]
    pub fn color_attachment_formats(mut self, color_attachment_formats: &'b [Format]) -> Self {
        self.value.color_attachment_count = color_attachment_formats.len() as u32;
        self.value.color_attachment_formats = color_attachment_formats.as_ptr();
        self
    }

    #[inline]
    pub fn depth_attachment_format(mut self, depth_attachment_format: Format) -> Self {
        self.value.depth_attachment_format = depth_attachment_format;
        self
    }

    #[inline]
    pub fn stencil_attachment_format(mut self, stencil_attachment_format: Format) -> Self {
        self.value.stencil_attachment_format = stencil_attachment_format;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRenderingCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineRenderingCreateInfoBuilder<'b> {
    type Target = PipelineRenderingCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineRenderingCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineRenderingCreateInfoBuilder<'b> {
    type Target = PipelineRenderingCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRepresentativeFragmentTestStateCreateInfoNV {
    type Target = PipelineRepresentativeFragmentTestStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineRepresentativeFragmentTestStateCreateInfoNV {
    type Builder = PipelineRepresentativeFragmentTestStateCreateInfoNVBuilder;
}

/// A builder for a [`PipelineRepresentativeFragmentTestStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRepresentativeFragmentTestStateCreateInfoNVBuilder {
    value: PipelineRepresentativeFragmentTestStateCreateInfoNV,
}

impl PipelineRepresentativeFragmentTestStateCreateInfoNVBuilder {
    #[inline]
    pub fn representative_fragment_test_enable(
        mut self,
        representative_fragment_test_enable: bool,
    ) -> Self {
        self.value.representative_fragment_test_enable =
            representative_fragment_test_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRepresentativeFragmentTestStateCreateInfoNV {
        self.value
    }
}

impl ops::Deref for PipelineRepresentativeFragmentTestStateCreateInfoNVBuilder {
    type Target = PipelineRepresentativeFragmentTestStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineRepresentativeFragmentTestStateCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineRepresentativeFragmentTestStateCreateInfoNVBuilder {
    type Target = PipelineRepresentativeFragmentTestStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineRobustnessCreateInfoEXT {
    type Target = PipelineRobustnessCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineRobustnessCreateInfoEXT {
    type Builder = PipelineRobustnessCreateInfoEXTBuilder;
}

/// A builder for a [`PipelineRobustnessCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineRobustnessCreateInfoEXTBuilder {
    value: PipelineRobustnessCreateInfoEXT,
}

impl PipelineRobustnessCreateInfoEXTBuilder {
    #[inline]
    pub fn storage_buffers(mut self, storage_buffers: PipelineRobustnessBufferBehaviorEXT) -> Self {
        self.value.storage_buffers = storage_buffers;
        self
    }

    #[inline]
    pub fn uniform_buffers(mut self, uniform_buffers: PipelineRobustnessBufferBehaviorEXT) -> Self {
        self.value.uniform_buffers = uniform_buffers;
        self
    }

    #[inline]
    pub fn vertex_inputs(mut self, vertex_inputs: PipelineRobustnessBufferBehaviorEXT) -> Self {
        self.value.vertex_inputs = vertex_inputs;
        self
    }

    #[inline]
    pub fn images(mut self, images: PipelineRobustnessImageBehaviorEXT) -> Self {
        self.value.images = images;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineRobustnessCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for PipelineRobustnessCreateInfoEXTBuilder {
    type Target = PipelineRobustnessCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineRobustnessCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineRobustnessCreateInfoEXTBuilder {
    type Target = PipelineRobustnessCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineSampleLocationsStateCreateInfoEXT {
    type Target = PipelineSampleLocationsStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineSampleLocationsStateCreateInfoEXT {
    type Builder = PipelineSampleLocationsStateCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`PipelineSampleLocationsStateCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineSampleLocationsStateCreateInfoEXTBuilder<'b> {
    value: PipelineSampleLocationsStateCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineSampleLocationsStateCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn sample_locations_enable(mut self, sample_locations_enable: bool) -> Self {
        self.value.sample_locations_enable = sample_locations_enable as Bool32;
        self
    }

    #[inline]
    pub fn sample_locations_info(
        mut self,
        sample_locations_info: impl Cast<Target = SampleLocationsInfoEXT>,
    ) -> Self {
        self.value.sample_locations_info = sample_locations_info.into();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineSampleLocationsStateCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for PipelineSampleLocationsStateCreateInfoEXTBuilder<'b> {
    type Target = PipelineSampleLocationsStateCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineSampleLocationsStateCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineSampleLocationsStateCreateInfoEXTBuilder<'b> {
    type Target = PipelineSampleLocationsStateCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PipelineShaderStageCreateInfo`].
pub unsafe trait ExtendsPipelineShaderStageCreateInfo: fmt::Debug {}
unsafe impl ExtendsPipelineShaderStageCreateInfo for DebugUtilsObjectNameInfoEXT {}
unsafe impl ExtendsPipelineShaderStageCreateInfo for PipelineRobustnessCreateInfoEXT {}
unsafe impl ExtendsPipelineShaderStageCreateInfo
    for PipelineShaderStageModuleIdentifierCreateInfoEXT
{
}
unsafe impl ExtendsPipelineShaderStageCreateInfo for PipelineShaderStageNodeCreateInfoAMDX {}
unsafe impl ExtendsPipelineShaderStageCreateInfo
    for PipelineShaderStageRequiredSubgroupSizeCreateInfo
{
}
unsafe impl ExtendsPipelineShaderStageCreateInfo for ShaderModuleCreateInfo {}
unsafe impl ExtendsPipelineShaderStageCreateInfo for ShaderModuleValidationCacheCreateInfoEXT {}

unsafe impl Cast for PipelineShaderStageCreateInfo {
    type Target = PipelineShaderStageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineShaderStageCreateInfo {
    type Builder = PipelineShaderStageCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineShaderStageCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineShaderStageCreateInfoBuilder<'b> {
    value: PipelineShaderStageCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineShaderStageCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPipelineShaderStageCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineShaderStageCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn stage(mut self, stage: ShaderStageFlags) -> Self {
        self.value.stage = stage;
        self
    }

    #[inline]
    pub fn module(mut self, module: ShaderModule) -> Self {
        self.value.module = module;
        self
    }

    #[inline]
    pub fn name(mut self, name: &'b [u8]) -> Self {
        self.value.name = name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn specialization_info(
        mut self,
        specialization_info: &'b impl Cast<Target = SpecializationInfo>,
    ) -> Self {
        self.value.specialization_info = specialization_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineShaderStageCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineShaderStageCreateInfoBuilder<'b> {
    type Target = PipelineShaderStageCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineShaderStageCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineShaderStageCreateInfoBuilder<'b> {
    type Target = PipelineShaderStageCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineShaderStageModuleIdentifierCreateInfoEXT {
    type Target = PipelineShaderStageModuleIdentifierCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineShaderStageModuleIdentifierCreateInfoEXT {
    type Builder = PipelineShaderStageModuleIdentifierCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`PipelineShaderStageModuleIdentifierCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineShaderStageModuleIdentifierCreateInfoEXTBuilder<'b> {
    value: PipelineShaderStageModuleIdentifierCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineShaderStageModuleIdentifierCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn identifier(mut self, identifier: &'b [u8]) -> Self {
        self.value.identifier_size = identifier.len() as u32;
        self.value.identifier = identifier.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineShaderStageModuleIdentifierCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for PipelineShaderStageModuleIdentifierCreateInfoEXTBuilder<'b> {
    type Target = PipelineShaderStageModuleIdentifierCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineShaderStageModuleIdentifierCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineShaderStageModuleIdentifierCreateInfoEXTBuilder<'b> {
    type Target = PipelineShaderStageModuleIdentifierCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineShaderStageNodeCreateInfoAMDX {
    type Target = PipelineShaderStageNodeCreateInfoAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineShaderStageNodeCreateInfoAMDX {
    type Builder = PipelineShaderStageNodeCreateInfoAMDXBuilder<'b>;
}

/// A builder for a [`PipelineShaderStageNodeCreateInfoAMDX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineShaderStageNodeCreateInfoAMDXBuilder<'b> {
    value: PipelineShaderStageNodeCreateInfoAMDX,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineShaderStageNodeCreateInfoAMDXBuilder<'b> {
    #[inline]
    pub fn name(mut self, name: &'b [u8]) -> Self {
        self.value.name = name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn index(mut self, index: u32) -> Self {
        self.value.index = index;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineShaderStageNodeCreateInfoAMDX {
        self.value
    }
}

impl<'b> ops::Deref for PipelineShaderStageNodeCreateInfoAMDXBuilder<'b> {
    type Target = PipelineShaderStageNodeCreateInfoAMDX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineShaderStageNodeCreateInfoAMDXBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineShaderStageNodeCreateInfoAMDXBuilder<'b> {
    type Target = PipelineShaderStageNodeCreateInfoAMDX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineShaderStageRequiredSubgroupSizeCreateInfo {
    type Target = PipelineShaderStageRequiredSubgroupSizeCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineShaderStageRequiredSubgroupSizeCreateInfo {
    type Builder = PipelineShaderStageRequiredSubgroupSizeCreateInfoBuilder;
}

/// A builder for a [`PipelineShaderStageRequiredSubgroupSizeCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineShaderStageRequiredSubgroupSizeCreateInfoBuilder {
    value: PipelineShaderStageRequiredSubgroupSizeCreateInfo,
}

impl PipelineShaderStageRequiredSubgroupSizeCreateInfoBuilder {
    #[inline]
    pub fn required_subgroup_size(mut self, required_subgroup_size: u32) -> Self {
        self.value.required_subgroup_size = required_subgroup_size;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineShaderStageRequiredSubgroupSizeCreateInfo {
        self.value
    }
}

impl ops::Deref for PipelineShaderStageRequiredSubgroupSizeCreateInfoBuilder {
    type Target = PipelineShaderStageRequiredSubgroupSizeCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineShaderStageRequiredSubgroupSizeCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineShaderStageRequiredSubgroupSizeCreateInfoBuilder {
    type Target = PipelineShaderStageRequiredSubgroupSizeCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineTessellationDomainOriginStateCreateInfo {
    type Target = PipelineTessellationDomainOriginStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineTessellationDomainOriginStateCreateInfo {
    type Builder = PipelineTessellationDomainOriginStateCreateInfoBuilder;
}

/// A builder for a [`PipelineTessellationDomainOriginStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineTessellationDomainOriginStateCreateInfoBuilder {
    value: PipelineTessellationDomainOriginStateCreateInfo,
}

impl PipelineTessellationDomainOriginStateCreateInfoBuilder {
    #[inline]
    pub fn domain_origin(mut self, domain_origin: TessellationDomainOrigin) -> Self {
        self.value.domain_origin = domain_origin;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineTessellationDomainOriginStateCreateInfo {
        self.value
    }
}

impl ops::Deref for PipelineTessellationDomainOriginStateCreateInfoBuilder {
    type Target = PipelineTessellationDomainOriginStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineTessellationDomainOriginStateCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineTessellationDomainOriginStateCreateInfoBuilder {
    type Target = PipelineTessellationDomainOriginStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PipelineTessellationStateCreateInfo`].
pub unsafe trait ExtendsPipelineTessellationStateCreateInfo: fmt::Debug {}
unsafe impl ExtendsPipelineTessellationStateCreateInfo
    for PipelineTessellationDomainOriginStateCreateInfo
{
}

unsafe impl Cast for PipelineTessellationStateCreateInfo {
    type Target = PipelineTessellationStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineTessellationStateCreateInfo {
    type Builder = PipelineTessellationStateCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineTessellationStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineTessellationStateCreateInfoBuilder<'b> {
    value: PipelineTessellationStateCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineTessellationStateCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPipelineTessellationStateCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineTessellationStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn patch_control_points(mut self, patch_control_points: u32) -> Self {
        self.value.patch_control_points = patch_control_points;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineTessellationStateCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineTessellationStateCreateInfoBuilder<'b> {
    type Target = PipelineTessellationStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineTessellationStateCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineTessellationStateCreateInfoBuilder<'b> {
    type Target = PipelineTessellationStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineVertexInputDivisorStateCreateInfoKHR {
    type Target = PipelineVertexInputDivisorStateCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineVertexInputDivisorStateCreateInfoKHR {
    type Builder = PipelineVertexInputDivisorStateCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`PipelineVertexInputDivisorStateCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineVertexInputDivisorStateCreateInfoKHRBuilder<'b> {
    value: PipelineVertexInputDivisorStateCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineVertexInputDivisorStateCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn vertex_binding_divisors(
        mut self,
        vertex_binding_divisors: &'b [impl Cast<Target = VertexInputBindingDivisorDescriptionKHR>],
    ) -> Self {
        self.value.vertex_binding_divisor_count = vertex_binding_divisors.len() as u32;
        self.value.vertex_binding_divisors = vertex_binding_divisors.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineVertexInputDivisorStateCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PipelineVertexInputDivisorStateCreateInfoKHRBuilder<'b> {
    type Target = PipelineVertexInputDivisorStateCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineVertexInputDivisorStateCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineVertexInputDivisorStateCreateInfoKHRBuilder<'b> {
    type Target = PipelineVertexInputDivisorStateCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PipelineVertexInputStateCreateInfo`].
pub unsafe trait ExtendsPipelineVertexInputStateCreateInfo: fmt::Debug {}
unsafe impl ExtendsPipelineVertexInputStateCreateInfo
    for PipelineVertexInputDivisorStateCreateInfoKHR
{
}

unsafe impl Cast for PipelineVertexInputStateCreateInfo {
    type Target = PipelineVertexInputStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineVertexInputStateCreateInfo {
    type Builder = PipelineVertexInputStateCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineVertexInputStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineVertexInputStateCreateInfoBuilder<'b> {
    value: PipelineVertexInputStateCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineVertexInputStateCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPipelineVertexInputStateCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineVertexInputStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn vertex_binding_descriptions(
        mut self,
        vertex_binding_descriptions: &'b [impl Cast<Target = VertexInputBindingDescription>],
    ) -> Self {
        self.value.vertex_binding_description_count = vertex_binding_descriptions.len() as u32;
        self.value.vertex_binding_descriptions = vertex_binding_descriptions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn vertex_attribute_descriptions(
        mut self,
        vertex_attribute_descriptions: &'b [impl Cast<Target = VertexInputAttributeDescription>],
    ) -> Self {
        self.value.vertex_attribute_description_count = vertex_attribute_descriptions.len() as u32;
        self.value.vertex_attribute_descriptions = vertex_attribute_descriptions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineVertexInputStateCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineVertexInputStateCreateInfoBuilder<'b> {
    type Target = PipelineVertexInputStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineVertexInputStateCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineVertexInputStateCreateInfoBuilder<'b> {
    type Target = PipelineVertexInputStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineViewportCoarseSampleOrderStateCreateInfoNV {
    type Target = PipelineViewportCoarseSampleOrderStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineViewportCoarseSampleOrderStateCreateInfoNV {
    type Builder = PipelineViewportCoarseSampleOrderStateCreateInfoNVBuilder<'b>;
}

/// A builder for a [`PipelineViewportCoarseSampleOrderStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineViewportCoarseSampleOrderStateCreateInfoNVBuilder<'b> {
    value: PipelineViewportCoarseSampleOrderStateCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineViewportCoarseSampleOrderStateCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn sample_order_type(mut self, sample_order_type: CoarseSampleOrderTypeNV) -> Self {
        self.value.sample_order_type = sample_order_type;
        self
    }

    #[inline]
    pub fn custom_sample_orders(
        mut self,
        custom_sample_orders: &'b [impl Cast<Target = CoarseSampleOrderCustomNV>],
    ) -> Self {
        self.value.custom_sample_order_count = custom_sample_orders.len() as u32;
        self.value.custom_sample_orders = custom_sample_orders.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineViewportCoarseSampleOrderStateCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for PipelineViewportCoarseSampleOrderStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportCoarseSampleOrderStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineViewportCoarseSampleOrderStateCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineViewportCoarseSampleOrderStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportCoarseSampleOrderStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineViewportDepthClipControlCreateInfoEXT {
    type Target = PipelineViewportDepthClipControlCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PipelineViewportDepthClipControlCreateInfoEXT {
    type Builder = PipelineViewportDepthClipControlCreateInfoEXTBuilder;
}

/// A builder for a [`PipelineViewportDepthClipControlCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineViewportDepthClipControlCreateInfoEXTBuilder {
    value: PipelineViewportDepthClipControlCreateInfoEXT,
}

impl PipelineViewportDepthClipControlCreateInfoEXTBuilder {
    #[inline]
    pub fn negative_one_to_one(mut self, negative_one_to_one: bool) -> Self {
        self.value.negative_one_to_one = negative_one_to_one as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> PipelineViewportDepthClipControlCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for PipelineViewportDepthClipControlCreateInfoEXTBuilder {
    type Target = PipelineViewportDepthClipControlCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PipelineViewportDepthClipControlCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PipelineViewportDepthClipControlCreateInfoEXTBuilder {
    type Target = PipelineViewportDepthClipControlCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineViewportExclusiveScissorStateCreateInfoNV {
    type Target = PipelineViewportExclusiveScissorStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineViewportExclusiveScissorStateCreateInfoNV {
    type Builder = PipelineViewportExclusiveScissorStateCreateInfoNVBuilder<'b>;
}

/// A builder for a [`PipelineViewportExclusiveScissorStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineViewportExclusiveScissorStateCreateInfoNVBuilder<'b> {
    value: PipelineViewportExclusiveScissorStateCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineViewportExclusiveScissorStateCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn exclusive_scissors(
        mut self,
        exclusive_scissors: &'b [impl Cast<Target = Rect2D>],
    ) -> Self {
        self.value.exclusive_scissor_count = exclusive_scissors.len() as u32;
        self.value.exclusive_scissors = exclusive_scissors.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineViewportExclusiveScissorStateCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for PipelineViewportExclusiveScissorStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportExclusiveScissorStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineViewportExclusiveScissorStateCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineViewportExclusiveScissorStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportExclusiveScissorStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineViewportShadingRateImageStateCreateInfoNV {
    type Target = PipelineViewportShadingRateImageStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineViewportShadingRateImageStateCreateInfoNV {
    type Builder = PipelineViewportShadingRateImageStateCreateInfoNVBuilder<'b>;
}

/// A builder for a [`PipelineViewportShadingRateImageStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineViewportShadingRateImageStateCreateInfoNVBuilder<'b> {
    value: PipelineViewportShadingRateImageStateCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineViewportShadingRateImageStateCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn shading_rate_image_enable(mut self, shading_rate_image_enable: bool) -> Self {
        self.value.shading_rate_image_enable = shading_rate_image_enable as Bool32;
        self
    }

    #[inline]
    pub fn shading_rate_palettes(
        mut self,
        shading_rate_palettes: &'b [impl Cast<Target = ShadingRatePaletteNV>],
    ) -> Self {
        self.value.viewport_count = shading_rate_palettes.len() as u32;
        self.value.shading_rate_palettes = shading_rate_palettes.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineViewportShadingRateImageStateCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for PipelineViewportShadingRateImageStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportShadingRateImageStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineViewportShadingRateImageStateCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineViewportShadingRateImageStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportShadingRateImageStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PipelineViewportStateCreateInfo`].
pub unsafe trait ExtendsPipelineViewportStateCreateInfo: fmt::Debug {}
unsafe impl ExtendsPipelineViewportStateCreateInfo
    for PipelineViewportCoarseSampleOrderStateCreateInfoNV
{
}
unsafe impl ExtendsPipelineViewportStateCreateInfo
    for PipelineViewportDepthClipControlCreateInfoEXT
{
}
unsafe impl ExtendsPipelineViewportStateCreateInfo
    for PipelineViewportExclusiveScissorStateCreateInfoNV
{
}
unsafe impl ExtendsPipelineViewportStateCreateInfo
    for PipelineViewportShadingRateImageStateCreateInfoNV
{
}
unsafe impl ExtendsPipelineViewportStateCreateInfo for PipelineViewportSwizzleStateCreateInfoNV {}
unsafe impl ExtendsPipelineViewportStateCreateInfo for PipelineViewportWScalingStateCreateInfoNV {}

unsafe impl Cast for PipelineViewportStateCreateInfo {
    type Target = PipelineViewportStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineViewportStateCreateInfo {
    type Builder = PipelineViewportStateCreateInfoBuilder<'b>;
}

/// A builder for a [`PipelineViewportStateCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineViewportStateCreateInfoBuilder<'b> {
    value: PipelineViewportStateCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineViewportStateCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPipelineViewportStateCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineViewportStateCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn viewport_count(mut self, viewport_count: u32) -> Self {
        self.value.viewport_count = viewport_count;
        self
    }

    #[inline]
    pub fn viewports(mut self, viewports: &'b [impl Cast<Target = Viewport>]) -> Self {
        self.value.viewport_count = viewports.len() as u32;
        self.value.viewports = viewports.as_ptr().cast();
        self
    }

    #[inline]
    pub fn scissor_count(mut self, scissor_count: u32) -> Self {
        self.value.scissor_count = scissor_count;
        self
    }

    #[inline]
    pub fn scissors(mut self, scissors: &'b [impl Cast<Target = Rect2D>]) -> Self {
        self.value.scissor_count = scissors.len() as u32;
        self.value.scissors = scissors.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineViewportStateCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for PipelineViewportStateCreateInfoBuilder<'b> {
    type Target = PipelineViewportStateCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineViewportStateCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineViewportStateCreateInfoBuilder<'b> {
    type Target = PipelineViewportStateCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineViewportSwizzleStateCreateInfoNV {
    type Target = PipelineViewportSwizzleStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineViewportSwizzleStateCreateInfoNV {
    type Builder = PipelineViewportSwizzleStateCreateInfoNVBuilder<'b>;
}

/// A builder for a [`PipelineViewportSwizzleStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineViewportSwizzleStateCreateInfoNVBuilder<'b> {
    value: PipelineViewportSwizzleStateCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineViewportSwizzleStateCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: PipelineViewportSwizzleStateCreateFlagsNV) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn viewport_swizzles(
        mut self,
        viewport_swizzles: &'b [impl Cast<Target = ViewportSwizzleNV>],
    ) -> Self {
        self.value.viewport_count = viewport_swizzles.len() as u32;
        self.value.viewport_swizzles = viewport_swizzles.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineViewportSwizzleStateCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for PipelineViewportSwizzleStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportSwizzleStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineViewportSwizzleStateCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineViewportSwizzleStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportSwizzleStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PipelineViewportWScalingStateCreateInfoNV {
    type Target = PipelineViewportWScalingStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PipelineViewportWScalingStateCreateInfoNV {
    type Builder = PipelineViewportWScalingStateCreateInfoNVBuilder<'b>;
}

/// A builder for a [`PipelineViewportWScalingStateCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PipelineViewportWScalingStateCreateInfoNVBuilder<'b> {
    value: PipelineViewportWScalingStateCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PipelineViewportWScalingStateCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn viewport_w_scaling_enable(mut self, viewport_w_scaling_enable: bool) -> Self {
        self.value.viewport_w_scaling_enable = viewport_w_scaling_enable as Bool32;
        self
    }

    #[inline]
    pub fn viewport_count(mut self, viewport_count: u32) -> Self {
        self.value.viewport_count = viewport_count;
        self
    }

    #[inline]
    pub fn viewport_w_scalings(
        mut self,
        viewport_w_scalings: &'b [impl Cast<Target = ViewportWScalingNV>],
    ) -> Self {
        self.value.viewport_count = viewport_w_scalings.len() as u32;
        self.value.viewport_w_scalings = viewport_w_scalings.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PipelineViewportWScalingStateCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for PipelineViewportWScalingStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportWScalingStateCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PipelineViewportWScalingStateCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PipelineViewportWScalingStateCreateInfoNVBuilder<'b> {
    type Target = PipelineViewportWScalingStateCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PresentFrameTokenGGP {
    type Target = PresentFrameTokenGGP;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PresentFrameTokenGGP {
    type Builder = PresentFrameTokenGGPBuilder;
}

/// A builder for a [`PresentFrameTokenGGP`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PresentFrameTokenGGPBuilder {
    value: PresentFrameTokenGGP,
}

impl PresentFrameTokenGGPBuilder {
    #[inline]
    pub fn frame_token(mut self, frame_token: GgpFrameToken) -> Self {
        self.value.frame_token = frame_token;
        self
    }

    #[inline]
    pub fn build(self) -> PresentFrameTokenGGP {
        self.value
    }
}

impl ops::Deref for PresentFrameTokenGGPBuilder {
    type Target = PresentFrameTokenGGP;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PresentFrameTokenGGPBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PresentFrameTokenGGPBuilder {
    type Target = PresentFrameTokenGGP;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PresentIdKHR {
    type Target = PresentIdKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PresentIdKHR {
    type Builder = PresentIdKHRBuilder<'b>;
}

/// A builder for a [`PresentIdKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PresentIdKHRBuilder<'b> {
    value: PresentIdKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PresentIdKHRBuilder<'b> {
    #[inline]
    pub fn swapchain_count(mut self, swapchain_count: u32) -> Self {
        self.value.swapchain_count = swapchain_count;
        self
    }

    #[inline]
    pub fn present_ids(mut self, present_ids: &'b [u64]) -> Self {
        self.value.swapchain_count = present_ids.len() as u32;
        self.value.present_ids = present_ids.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PresentIdKHR {
        self.value
    }
}

impl<'b> ops::Deref for PresentIdKHRBuilder<'b> {
    type Target = PresentIdKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PresentIdKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PresentIdKHRBuilder<'b> {
    type Target = PresentIdKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PresentInfoKHR`].
pub unsafe trait ExtendsPresentInfoKHR: fmt::Debug {}
unsafe impl ExtendsPresentInfoKHR for DeviceGroupPresentInfoKHR {}
unsafe impl ExtendsPresentInfoKHR for DisplayPresentInfoKHR {}
unsafe impl ExtendsPresentInfoKHR for FrameBoundaryEXT {}
unsafe impl ExtendsPresentInfoKHR for PresentFrameTokenGGP {}
unsafe impl ExtendsPresentInfoKHR for PresentIdKHR {}
unsafe impl ExtendsPresentInfoKHR for PresentRegionsKHR {}
unsafe impl ExtendsPresentInfoKHR for PresentTimesInfoGOOGLE {}
unsafe impl ExtendsPresentInfoKHR for SwapchainPresentFenceInfoEXT {}
unsafe impl ExtendsPresentInfoKHR for SwapchainPresentModeInfoEXT {}

unsafe impl Cast for PresentInfoKHR {
    type Target = PresentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PresentInfoKHR {
    type Builder = PresentInfoKHRBuilder<'b>;
}

/// A builder for a [`PresentInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PresentInfoKHRBuilder<'b> {
    value: PresentInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PresentInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPresentInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn wait_semaphores(mut self, wait_semaphores: &'b [Semaphore]) -> Self {
        self.value.wait_semaphore_count = wait_semaphores.len() as u32;
        self.value.wait_semaphores = wait_semaphores.as_ptr();
        self
    }

    #[inline]
    pub fn swapchain_count(mut self, swapchain_count: u32) -> Self {
        self.value.swapchain_count = swapchain_count;
        self
    }

    #[inline]
    pub fn swapchains(mut self, swapchains: &'b [SwapchainKHR]) -> Self {
        self.value.swapchain_count = swapchains.len() as u32;
        self.value.swapchains = swapchains.as_ptr();
        self
    }

    #[inline]
    pub fn image_indices(mut self, image_indices: &'b [u32]) -> Self {
        self.value.swapchain_count = image_indices.len() as u32;
        self.value.image_indices = image_indices.as_ptr();
        self
    }

    #[inline]
    pub fn results(mut self, results: &'b mut [Result]) -> Self {
        self.value.swapchain_count = results.len() as u32;
        self.value.results = results.as_mut_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> PresentInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PresentInfoKHRBuilder<'b> {
    type Target = PresentInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PresentInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PresentInfoKHRBuilder<'b> {
    type Target = PresentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PresentRegionKHR {
    type Target = PresentRegionKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PresentRegionKHR {
    type Builder = PresentRegionKHRBuilder<'b>;
}

/// A builder for a [`PresentRegionKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PresentRegionKHRBuilder<'b> {
    value: PresentRegionKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PresentRegionKHRBuilder<'b> {
    #[inline]
    pub fn rectangle_count(mut self, rectangle_count: u32) -> Self {
        self.value.rectangle_count = rectangle_count;
        self
    }

    #[inline]
    pub fn rectangles(mut self, rectangles: &'b [impl Cast<Target = RectLayerKHR>]) -> Self {
        self.value.rectangle_count = rectangles.len() as u32;
        self.value.rectangles = rectangles.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PresentRegionKHR {
        self.value
    }
}

impl<'b> ops::Deref for PresentRegionKHRBuilder<'b> {
    type Target = PresentRegionKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PresentRegionKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PresentRegionKHRBuilder<'b> {
    type Target = PresentRegionKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PresentRegionsKHR {
    type Target = PresentRegionsKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PresentRegionsKHR {
    type Builder = PresentRegionsKHRBuilder<'b>;
}

/// A builder for a [`PresentRegionsKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PresentRegionsKHRBuilder<'b> {
    value: PresentRegionsKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PresentRegionsKHRBuilder<'b> {
    #[inline]
    pub fn swapchain_count(mut self, swapchain_count: u32) -> Self {
        self.value.swapchain_count = swapchain_count;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = PresentRegionKHR>]) -> Self {
        self.value.swapchain_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PresentRegionsKHR {
        self.value
    }
}

impl<'b> ops::Deref for PresentRegionsKHRBuilder<'b> {
    type Target = PresentRegionsKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PresentRegionsKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PresentRegionsKHRBuilder<'b> {
    type Target = PresentRegionsKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PresentTimeGOOGLE {
    type Target = PresentTimeGOOGLE;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PresentTimeGOOGLE {
    type Builder = PresentTimeGOOGLEBuilder;
}

/// A builder for a [`PresentTimeGOOGLE`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PresentTimeGOOGLEBuilder {
    value: PresentTimeGOOGLE,
}

impl PresentTimeGOOGLEBuilder {
    #[inline]
    pub fn present_id(mut self, present_id: u32) -> Self {
        self.value.present_id = present_id;
        self
    }

    #[inline]
    pub fn desired_present_time(mut self, desired_present_time: u64) -> Self {
        self.value.desired_present_time = desired_present_time;
        self
    }

    #[inline]
    pub fn build(self) -> PresentTimeGOOGLE {
        self.value
    }
}

impl ops::Deref for PresentTimeGOOGLEBuilder {
    type Target = PresentTimeGOOGLE;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PresentTimeGOOGLEBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PresentTimeGOOGLEBuilder {
    type Target = PresentTimeGOOGLE;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PresentTimesInfoGOOGLE {
    type Target = PresentTimesInfoGOOGLE;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PresentTimesInfoGOOGLE {
    type Builder = PresentTimesInfoGOOGLEBuilder<'b>;
}

/// A builder for a [`PresentTimesInfoGOOGLE`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PresentTimesInfoGOOGLEBuilder<'b> {
    value: PresentTimesInfoGOOGLE,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PresentTimesInfoGOOGLEBuilder<'b> {
    #[inline]
    pub fn swapchain_count(mut self, swapchain_count: u32) -> Self {
        self.value.swapchain_count = swapchain_count;
        self
    }

    #[inline]
    pub fn times(mut self, times: &'b [impl Cast<Target = PresentTimeGOOGLE>]) -> Self {
        self.value.swapchain_count = times.len() as u32;
        self.value.times = times.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PresentTimesInfoGOOGLE {
        self.value
    }
}

impl<'b> ops::Deref for PresentTimesInfoGOOGLEBuilder<'b> {
    type Target = PresentTimesInfoGOOGLE;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PresentTimesInfoGOOGLEBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PresentTimesInfoGOOGLEBuilder<'b> {
    type Target = PresentTimesInfoGOOGLE;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PrivateDataSlotCreateInfo {
    type Target = PrivateDataSlotCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PrivateDataSlotCreateInfo {
    type Builder = PrivateDataSlotCreateInfoBuilder;
}

/// A builder for a [`PrivateDataSlotCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PrivateDataSlotCreateInfoBuilder {
    value: PrivateDataSlotCreateInfo,
}

impl PrivateDataSlotCreateInfoBuilder {
    #[inline]
    pub fn flags(mut self, flags: PrivateDataSlotCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> PrivateDataSlotCreateInfo {
        self.value
    }
}

impl ops::Deref for PrivateDataSlotCreateInfoBuilder {
    type Target = PrivateDataSlotCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PrivateDataSlotCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PrivateDataSlotCreateInfoBuilder {
    type Target = PrivateDataSlotCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ProtectedSubmitInfo {
    type Target = ProtectedSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ProtectedSubmitInfo {
    type Builder = ProtectedSubmitInfoBuilder;
}

/// A builder for a [`ProtectedSubmitInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ProtectedSubmitInfoBuilder {
    value: ProtectedSubmitInfo,
}

impl ProtectedSubmitInfoBuilder {
    #[inline]
    pub fn protected_submit(mut self, protected_submit: bool) -> Self {
        self.value.protected_submit = protected_submit as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> ProtectedSubmitInfo {
        self.value
    }
}

impl ops::Deref for ProtectedSubmitInfoBuilder {
    type Target = ProtectedSubmitInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ProtectedSubmitInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ProtectedSubmitInfoBuilder {
    type Target = ProtectedSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for PushConstantRange {
    type Target = PushConstantRange;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for PushConstantRange {
    type Builder = PushConstantRangeBuilder;
}

/// A builder for a [`PushConstantRange`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PushConstantRangeBuilder {
    value: PushConstantRange,
}

impl PushConstantRangeBuilder {
    #[inline]
    pub fn stage_flags(mut self, stage_flags: ShaderStageFlags) -> Self {
        self.value.stage_flags = stage_flags;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: u32) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: u32) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> PushConstantRange {
        self.value
    }
}

impl ops::Deref for PushConstantRangeBuilder {
    type Target = PushConstantRange;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for PushConstantRangeBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for PushConstantRangeBuilder {
    type Target = PushConstantRange;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PushConstantsInfoKHR`].
pub unsafe trait ExtendsPushConstantsInfoKHR: fmt::Debug {}
unsafe impl ExtendsPushConstantsInfoKHR for PipelineLayoutCreateInfo {}

unsafe impl Cast for PushConstantsInfoKHR {
    type Target = PushConstantsInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PushConstantsInfoKHR {
    type Builder = PushConstantsInfoKHRBuilder<'b>;
}

/// A builder for a [`PushConstantsInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PushConstantsInfoKHRBuilder<'b> {
    value: PushConstantsInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PushConstantsInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPushConstantsInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn stage_flags(mut self, stage_flags: ShaderStageFlags) -> Self {
        self.value.stage_flags = stage_flags;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: u32) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn values(mut self, values: &'b [u8]) -> Self {
        self.value.size = values.len() as u32;
        self.value.values = values.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PushConstantsInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PushConstantsInfoKHRBuilder<'b> {
    type Target = PushConstantsInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PushConstantsInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PushConstantsInfoKHRBuilder<'b> {
    type Target = PushConstantsInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PushDescriptorSetInfoKHR`].
pub unsafe trait ExtendsPushDescriptorSetInfoKHR: fmt::Debug {}
unsafe impl ExtendsPushDescriptorSetInfoKHR for PipelineLayoutCreateInfo {}

unsafe impl Cast for PushDescriptorSetInfoKHR {
    type Target = PushDescriptorSetInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PushDescriptorSetInfoKHR {
    type Builder = PushDescriptorSetInfoKHRBuilder<'b>;
}

/// A builder for a [`PushDescriptorSetInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PushDescriptorSetInfoKHRBuilder<'b> {
    value: PushDescriptorSetInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PushDescriptorSetInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPushDescriptorSetInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn stage_flags(mut self, stage_flags: ShaderStageFlags) -> Self {
        self.value.stage_flags = stage_flags;
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn set(mut self, set: u32) -> Self {
        self.value.set = set;
        self
    }

    #[inline]
    pub fn descriptor_writes(
        mut self,
        descriptor_writes: &'b [impl Cast<Target = WriteDescriptorSet>],
    ) -> Self {
        self.value.descriptor_write_count = descriptor_writes.len() as u32;
        self.value.descriptor_writes = descriptor_writes.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> PushDescriptorSetInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PushDescriptorSetInfoKHRBuilder<'b> {
    type Target = PushDescriptorSetInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PushDescriptorSetInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PushDescriptorSetInfoKHRBuilder<'b> {
    type Target = PushDescriptorSetInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`PushDescriptorSetWithTemplateInfoKHR`].
pub unsafe trait ExtendsPushDescriptorSetWithTemplateInfoKHR: fmt::Debug {}
unsafe impl ExtendsPushDescriptorSetWithTemplateInfoKHR for PipelineLayoutCreateInfo {}

unsafe impl Cast for PushDescriptorSetWithTemplateInfoKHR {
    type Target = PushDescriptorSetWithTemplateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for PushDescriptorSetWithTemplateInfoKHR {
    type Builder = PushDescriptorSetWithTemplateInfoKHRBuilder<'b>;
}

/// A builder for a [`PushDescriptorSetWithTemplateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct PushDescriptorSetWithTemplateInfoKHRBuilder<'b> {
    value: PushDescriptorSetWithTemplateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> PushDescriptorSetWithTemplateInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsPushDescriptorSetWithTemplateInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn descriptor_update_template(
        mut self,
        descriptor_update_template: DescriptorUpdateTemplate,
    ) -> Self {
        self.value.descriptor_update_template = descriptor_update_template;
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn set(mut self, set: u32) -> Self {
        self.value.set = set;
        self
    }

    #[inline]
    pub fn data<T>(mut self, data: &'b T) -> Self {
        self.value.data = (data as *const T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> PushDescriptorSetWithTemplateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for PushDescriptorSetWithTemplateInfoKHRBuilder<'b> {
    type Target = PushDescriptorSetWithTemplateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for PushDescriptorSetWithTemplateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for PushDescriptorSetWithTemplateInfoKHRBuilder<'b> {
    type Target = PushDescriptorSetWithTemplateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueryLowLatencySupportNV {
    type Target = QueryLowLatencySupportNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for QueryLowLatencySupportNV {
    type Builder = QueryLowLatencySupportNVBuilder<'b>;
}

/// A builder for a [`QueryLowLatencySupportNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueryLowLatencySupportNVBuilder<'b> {
    value: QueryLowLatencySupportNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> QueryLowLatencySupportNVBuilder<'b> {
    #[inline]
    pub fn queried_low_latency_data<T>(mut self, queried_low_latency_data: &'b mut T) -> Self {
        self.value.queried_low_latency_data = (queried_low_latency_data as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> QueryLowLatencySupportNV {
        self.value
    }
}

impl<'b> ops::Deref for QueryLowLatencySupportNVBuilder<'b> {
    type Target = QueryLowLatencySupportNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for QueryLowLatencySupportNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for QueryLowLatencySupportNVBuilder<'b> {
    type Target = QueryLowLatencySupportNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`QueryPoolCreateInfo`].
pub unsafe trait ExtendsQueryPoolCreateInfo: fmt::Debug {}
unsafe impl ExtendsQueryPoolCreateInfo for QueryPoolPerformanceCreateInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for QueryPoolPerformanceQueryCreateInfoINTEL {}
unsafe impl ExtendsQueryPoolCreateInfo for QueryPoolVideoEncodeFeedbackCreateInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for VideoDecodeAV1ProfileInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for VideoDecodeH264ProfileInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for VideoDecodeH265ProfileInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for VideoDecodeUsageInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for VideoEncodeH264ProfileInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for VideoEncodeH265ProfileInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for VideoEncodeUsageInfoKHR {}
unsafe impl ExtendsQueryPoolCreateInfo for VideoProfileInfoKHR {}

unsafe impl Cast for QueryPoolCreateInfo {
    type Target = QueryPoolCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for QueryPoolCreateInfo {
    type Builder = QueryPoolCreateInfoBuilder<'b>;
}

/// A builder for a [`QueryPoolCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueryPoolCreateInfoBuilder<'b> {
    value: QueryPoolCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> QueryPoolCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsQueryPoolCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: QueryPoolCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn query_type(mut self, query_type: QueryType) -> Self {
        self.value.query_type = query_type;
        self
    }

    #[inline]
    pub fn query_count(mut self, query_count: u32) -> Self {
        self.value.query_count = query_count;
        self
    }

    #[inline]
    pub fn pipeline_statistics(mut self, pipeline_statistics: QueryPipelineStatisticFlags) -> Self {
        self.value.pipeline_statistics = pipeline_statistics;
        self
    }

    #[inline]
    pub fn build(self) -> QueryPoolCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for QueryPoolCreateInfoBuilder<'b> {
    type Target = QueryPoolCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for QueryPoolCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for QueryPoolCreateInfoBuilder<'b> {
    type Target = QueryPoolCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueryPoolPerformanceCreateInfoKHR {
    type Target = QueryPoolPerformanceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for QueryPoolPerformanceCreateInfoKHR {
    type Builder = QueryPoolPerformanceCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`QueryPoolPerformanceCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueryPoolPerformanceCreateInfoKHRBuilder<'b> {
    value: QueryPoolPerformanceCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> QueryPoolPerformanceCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn queue_family_index(mut self, queue_family_index: u32) -> Self {
        self.value.queue_family_index = queue_family_index;
        self
    }

    #[inline]
    pub fn counter_indices(mut self, counter_indices: &'b [u32]) -> Self {
        self.value.counter_index_count = counter_indices.len() as u32;
        self.value.counter_indices = counter_indices.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> QueryPoolPerformanceCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for QueryPoolPerformanceCreateInfoKHRBuilder<'b> {
    type Target = QueryPoolPerformanceCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for QueryPoolPerformanceCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for QueryPoolPerformanceCreateInfoKHRBuilder<'b> {
    type Target = QueryPoolPerformanceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueryPoolPerformanceQueryCreateInfoINTEL {
    type Target = QueryPoolPerformanceQueryCreateInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for QueryPoolPerformanceQueryCreateInfoINTEL {
    type Builder = QueryPoolPerformanceQueryCreateInfoINTELBuilder;
}

/// A builder for a [`QueryPoolPerformanceQueryCreateInfoINTEL`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueryPoolPerformanceQueryCreateInfoINTELBuilder {
    value: QueryPoolPerformanceQueryCreateInfoINTEL,
}

impl QueryPoolPerformanceQueryCreateInfoINTELBuilder {
    #[inline]
    pub fn performance_counters_sampling(
        mut self,
        performance_counters_sampling: QueryPoolSamplingModeINTEL,
    ) -> Self {
        self.value.performance_counters_sampling = performance_counters_sampling;
        self
    }

    #[inline]
    pub fn build(self) -> QueryPoolPerformanceQueryCreateInfoINTEL {
        self.value
    }
}

impl ops::Deref for QueryPoolPerformanceQueryCreateInfoINTELBuilder {
    type Target = QueryPoolPerformanceQueryCreateInfoINTEL;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for QueryPoolPerformanceQueryCreateInfoINTELBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for QueryPoolPerformanceQueryCreateInfoINTELBuilder {
    type Target = QueryPoolPerformanceQueryCreateInfoINTEL;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueryPoolVideoEncodeFeedbackCreateInfoKHR {
    type Target = QueryPoolVideoEncodeFeedbackCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for QueryPoolVideoEncodeFeedbackCreateInfoKHR {
    type Builder = QueryPoolVideoEncodeFeedbackCreateInfoKHRBuilder;
}

/// A builder for a [`QueryPoolVideoEncodeFeedbackCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueryPoolVideoEncodeFeedbackCreateInfoKHRBuilder {
    value: QueryPoolVideoEncodeFeedbackCreateInfoKHR,
}

impl QueryPoolVideoEncodeFeedbackCreateInfoKHRBuilder {
    #[inline]
    pub fn encode_feedback_flags(
        mut self,
        encode_feedback_flags: VideoEncodeFeedbackFlagsKHR,
    ) -> Self {
        self.value.encode_feedback_flags = encode_feedback_flags;
        self
    }

    #[inline]
    pub fn build(self) -> QueryPoolVideoEncodeFeedbackCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for QueryPoolVideoEncodeFeedbackCreateInfoKHRBuilder {
    type Target = QueryPoolVideoEncodeFeedbackCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for QueryPoolVideoEncodeFeedbackCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for QueryPoolVideoEncodeFeedbackCreateInfoKHRBuilder {
    type Target = QueryPoolVideoEncodeFeedbackCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueueFamilyCheckpointProperties2NV {
    type Target = QueueFamilyCheckpointProperties2NV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for QueueFamilyCheckpointProperties2NV {
    type Builder = QueueFamilyCheckpointProperties2NVBuilder;
}

/// A builder for a [`QueueFamilyCheckpointProperties2NV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueueFamilyCheckpointProperties2NVBuilder {
    value: QueueFamilyCheckpointProperties2NV,
}

impl QueueFamilyCheckpointProperties2NVBuilder {
    #[inline]
    pub fn checkpoint_execution_stage_mask(
        mut self,
        checkpoint_execution_stage_mask: PipelineStageFlags2,
    ) -> Self {
        self.value.checkpoint_execution_stage_mask = checkpoint_execution_stage_mask;
        self
    }

    #[inline]
    pub fn build(self) -> QueueFamilyCheckpointProperties2NV {
        self.value
    }
}

impl ops::Deref for QueueFamilyCheckpointProperties2NVBuilder {
    type Target = QueueFamilyCheckpointProperties2NV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for QueueFamilyCheckpointProperties2NVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for QueueFamilyCheckpointProperties2NVBuilder {
    type Target = QueueFamilyCheckpointProperties2NV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueueFamilyCheckpointPropertiesNV {
    type Target = QueueFamilyCheckpointPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for QueueFamilyCheckpointPropertiesNV {
    type Builder = QueueFamilyCheckpointPropertiesNVBuilder;
}

/// A builder for a [`QueueFamilyCheckpointPropertiesNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueueFamilyCheckpointPropertiesNVBuilder {
    value: QueueFamilyCheckpointPropertiesNV,
}

impl QueueFamilyCheckpointPropertiesNVBuilder {
    #[inline]
    pub fn checkpoint_execution_stage_mask(
        mut self,
        checkpoint_execution_stage_mask: PipelineStageFlags,
    ) -> Self {
        self.value.checkpoint_execution_stage_mask = checkpoint_execution_stage_mask;
        self
    }

    #[inline]
    pub fn build(self) -> QueueFamilyCheckpointPropertiesNV {
        self.value
    }
}

impl ops::Deref for QueueFamilyCheckpointPropertiesNVBuilder {
    type Target = QueueFamilyCheckpointPropertiesNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for QueueFamilyCheckpointPropertiesNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for QueueFamilyCheckpointPropertiesNVBuilder {
    type Target = QueueFamilyCheckpointPropertiesNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueueFamilyGlobalPriorityPropertiesKHR {
    type Target = QueueFamilyGlobalPriorityPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for QueueFamilyGlobalPriorityPropertiesKHR {
    type Builder = QueueFamilyGlobalPriorityPropertiesKHRBuilder;
}

/// A builder for a [`QueueFamilyGlobalPriorityPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueueFamilyGlobalPriorityPropertiesKHRBuilder {
    value: QueueFamilyGlobalPriorityPropertiesKHR,
}

impl QueueFamilyGlobalPriorityPropertiesKHRBuilder {
    #[inline]
    pub fn priority_count(mut self, priority_count: u32) -> Self {
        self.value.priority_count = priority_count;
        self
    }

    #[inline]
    pub fn priorities(
        mut self,
        priorities: [QueueGlobalPriorityKHR; MAX_GLOBAL_PRIORITY_SIZE_KHR],
    ) -> Self {
        self.value.priorities = priorities;
        self
    }

    #[inline]
    pub fn build(self) -> QueueFamilyGlobalPriorityPropertiesKHR {
        self.value
    }
}

impl ops::Deref for QueueFamilyGlobalPriorityPropertiesKHRBuilder {
    type Target = QueueFamilyGlobalPriorityPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for QueueFamilyGlobalPriorityPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for QueueFamilyGlobalPriorityPropertiesKHRBuilder {
    type Target = QueueFamilyGlobalPriorityPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueueFamilyProperties {
    type Target = QueueFamilyProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for QueueFamilyProperties {
    type Builder = QueueFamilyPropertiesBuilder;
}

/// A builder for a [`QueueFamilyProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueueFamilyPropertiesBuilder {
    value: QueueFamilyProperties,
}

impl QueueFamilyPropertiesBuilder {
    #[inline]
    pub fn queue_flags(mut self, queue_flags: QueueFlags) -> Self {
        self.value.queue_flags = queue_flags;
        self
    }

    #[inline]
    pub fn queue_count(mut self, queue_count: u32) -> Self {
        self.value.queue_count = queue_count;
        self
    }

    #[inline]
    pub fn timestamp_valid_bits(mut self, timestamp_valid_bits: u32) -> Self {
        self.value.timestamp_valid_bits = timestamp_valid_bits;
        self
    }

    #[inline]
    pub fn min_image_transfer_granularity(
        mut self,
        min_image_transfer_granularity: impl Cast<Target = Extent3D>,
    ) -> Self {
        self.value.min_image_transfer_granularity = min_image_transfer_granularity.into();
        self
    }

    #[inline]
    pub fn build(self) -> QueueFamilyProperties {
        self.value
    }
}

impl ops::Deref for QueueFamilyPropertiesBuilder {
    type Target = QueueFamilyProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for QueueFamilyPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for QueueFamilyPropertiesBuilder {
    type Target = QueueFamilyProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`QueueFamilyProperties2`].
pub unsafe trait ExtendsQueueFamilyProperties2: fmt::Debug {}
unsafe impl ExtendsQueueFamilyProperties2 for QueueFamilyCheckpointProperties2NV {}
unsafe impl ExtendsQueueFamilyProperties2 for QueueFamilyCheckpointPropertiesNV {}
unsafe impl ExtendsQueueFamilyProperties2 for QueueFamilyGlobalPriorityPropertiesKHR {}
unsafe impl ExtendsQueueFamilyProperties2 for QueueFamilyQueryResultStatusPropertiesKHR {}
unsafe impl ExtendsQueueFamilyProperties2 for QueueFamilyVideoPropertiesKHR {}

unsafe impl Cast for QueueFamilyProperties2 {
    type Target = QueueFamilyProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for QueueFamilyProperties2 {
    type Builder = QueueFamilyProperties2Builder<'b>;
}

/// A builder for a [`QueueFamilyProperties2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueueFamilyProperties2Builder<'b> {
    value: QueueFamilyProperties2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> QueueFamilyProperties2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsQueueFamilyProperties2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn queue_family_properties(
        mut self,
        queue_family_properties: impl Cast<Target = QueueFamilyProperties>,
    ) -> Self {
        self.value.queue_family_properties = queue_family_properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> QueueFamilyProperties2 {
        self.value
    }
}

impl<'b> ops::Deref for QueueFamilyProperties2Builder<'b> {
    type Target = QueueFamilyProperties2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for QueueFamilyProperties2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for QueueFamilyProperties2Builder<'b> {
    type Target = QueueFamilyProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueueFamilyQueryResultStatusPropertiesKHR {
    type Target = QueueFamilyQueryResultStatusPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for QueueFamilyQueryResultStatusPropertiesKHR {
    type Builder = QueueFamilyQueryResultStatusPropertiesKHRBuilder;
}

/// A builder for a [`QueueFamilyQueryResultStatusPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueueFamilyQueryResultStatusPropertiesKHRBuilder {
    value: QueueFamilyQueryResultStatusPropertiesKHR,
}

impl QueueFamilyQueryResultStatusPropertiesKHRBuilder {
    #[inline]
    pub fn query_result_status_support(mut self, query_result_status_support: bool) -> Self {
        self.value.query_result_status_support = query_result_status_support as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> QueueFamilyQueryResultStatusPropertiesKHR {
        self.value
    }
}

impl ops::Deref for QueueFamilyQueryResultStatusPropertiesKHRBuilder {
    type Target = QueueFamilyQueryResultStatusPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for QueueFamilyQueryResultStatusPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for QueueFamilyQueryResultStatusPropertiesKHRBuilder {
    type Target = QueueFamilyQueryResultStatusPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for QueueFamilyVideoPropertiesKHR {
    type Target = QueueFamilyVideoPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for QueueFamilyVideoPropertiesKHR {
    type Builder = QueueFamilyVideoPropertiesKHRBuilder;
}

/// A builder for a [`QueueFamilyVideoPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct QueueFamilyVideoPropertiesKHRBuilder {
    value: QueueFamilyVideoPropertiesKHR,
}

impl QueueFamilyVideoPropertiesKHRBuilder {
    #[inline]
    pub fn video_codec_operations(
        mut self,
        video_codec_operations: VideoCodecOperationFlagsKHR,
    ) -> Self {
        self.value.video_codec_operations = video_codec_operations;
        self
    }

    #[inline]
    pub fn build(self) -> QueueFamilyVideoPropertiesKHR {
        self.value
    }
}

impl ops::Deref for QueueFamilyVideoPropertiesKHRBuilder {
    type Target = QueueFamilyVideoPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for QueueFamilyVideoPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for QueueFamilyVideoPropertiesKHRBuilder {
    type Target = QueueFamilyVideoPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`RayTracingPipelineCreateInfoKHR`].
pub unsafe trait ExtendsRayTracingPipelineCreateInfoKHR: fmt::Debug {}
unsafe impl ExtendsRayTracingPipelineCreateInfoKHR for PipelineBinaryInfoKHR {}
unsafe impl ExtendsRayTracingPipelineCreateInfoKHR for PipelineCreateFlags2CreateInfoKHR {}
unsafe impl ExtendsRayTracingPipelineCreateInfoKHR for PipelineCreationFeedbackCreateInfo {}
unsafe impl ExtendsRayTracingPipelineCreateInfoKHR for PipelineRobustnessCreateInfoEXT {}

unsafe impl Cast for RayTracingPipelineCreateInfoKHR {
    type Target = RayTracingPipelineCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RayTracingPipelineCreateInfoKHR {
    type Builder = RayTracingPipelineCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`RayTracingPipelineCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RayTracingPipelineCreateInfoKHRBuilder<'b> {
    value: RayTracingPipelineCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RayTracingPipelineCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsRayTracingPipelineCreateInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn stages(
        mut self,
        stages: &'b [impl Cast<Target = PipelineShaderStageCreateInfo>],
    ) -> Self {
        self.value.stage_count = stages.len() as u32;
        self.value.stages = stages.as_ptr().cast();
        self
    }

    #[inline]
    pub fn groups(
        mut self,
        groups: &'b [impl Cast<Target = RayTracingShaderGroupCreateInfoKHR>],
    ) -> Self {
        self.value.group_count = groups.len() as u32;
        self.value.groups = groups.as_ptr().cast();
        self
    }

    #[inline]
    pub fn max_pipeline_ray_recursion_depth(
        mut self,
        max_pipeline_ray_recursion_depth: u32,
    ) -> Self {
        self.value.max_pipeline_ray_recursion_depth = max_pipeline_ray_recursion_depth;
        self
    }

    #[inline]
    pub fn library_info(
        mut self,
        library_info: &'b impl Cast<Target = PipelineLibraryCreateInfoKHR>,
    ) -> Self {
        self.value.library_info = library_info.as_ref();
        self
    }

    #[inline]
    pub fn library_interface(
        mut self,
        library_interface: &'b impl Cast<Target = RayTracingPipelineInterfaceCreateInfoKHR>,
    ) -> Self {
        self.value.library_interface = library_interface.as_ref();
        self
    }

    #[inline]
    pub fn dynamic_state(
        mut self,
        dynamic_state: &'b impl Cast<Target = PipelineDynamicStateCreateInfo>,
    ) -> Self {
        self.value.dynamic_state = dynamic_state.as_ref();
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn base_pipeline_handle(mut self, base_pipeline_handle: Pipeline) -> Self {
        self.value.base_pipeline_handle = base_pipeline_handle;
        self
    }

    #[inline]
    pub fn base_pipeline_index(mut self, base_pipeline_index: i32) -> Self {
        self.value.base_pipeline_index = base_pipeline_index;
        self
    }

    #[inline]
    pub fn build(self) -> RayTracingPipelineCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for RayTracingPipelineCreateInfoKHRBuilder<'b> {
    type Target = RayTracingPipelineCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RayTracingPipelineCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RayTracingPipelineCreateInfoKHRBuilder<'b> {
    type Target = RayTracingPipelineCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`RayTracingPipelineCreateInfoNV`].
pub unsafe trait ExtendsRayTracingPipelineCreateInfoNV: fmt::Debug {}
unsafe impl ExtendsRayTracingPipelineCreateInfoNV for PipelineCreateFlags2CreateInfoKHR {}
unsafe impl ExtendsRayTracingPipelineCreateInfoNV for PipelineCreationFeedbackCreateInfo {}

unsafe impl Cast for RayTracingPipelineCreateInfoNV {
    type Target = RayTracingPipelineCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RayTracingPipelineCreateInfoNV {
    type Builder = RayTracingPipelineCreateInfoNVBuilder<'b>;
}

/// A builder for a [`RayTracingPipelineCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RayTracingPipelineCreateInfoNVBuilder<'b> {
    value: RayTracingPipelineCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RayTracingPipelineCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsRayTracingPipelineCreateInfoNV,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: PipelineCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn stages(
        mut self,
        stages: &'b [impl Cast<Target = PipelineShaderStageCreateInfo>],
    ) -> Self {
        self.value.stage_count = stages.len() as u32;
        self.value.stages = stages.as_ptr().cast();
        self
    }

    #[inline]
    pub fn groups(
        mut self,
        groups: &'b [impl Cast<Target = RayTracingShaderGroupCreateInfoNV>],
    ) -> Self {
        self.value.group_count = groups.len() as u32;
        self.value.groups = groups.as_ptr().cast();
        self
    }

    #[inline]
    pub fn max_recursion_depth(mut self, max_recursion_depth: u32) -> Self {
        self.value.max_recursion_depth = max_recursion_depth;
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn base_pipeline_handle(mut self, base_pipeline_handle: Pipeline) -> Self {
        self.value.base_pipeline_handle = base_pipeline_handle;
        self
    }

    #[inline]
    pub fn base_pipeline_index(mut self, base_pipeline_index: i32) -> Self {
        self.value.base_pipeline_index = base_pipeline_index;
        self
    }

    #[inline]
    pub fn build(self) -> RayTracingPipelineCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for RayTracingPipelineCreateInfoNVBuilder<'b> {
    type Target = RayTracingPipelineCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RayTracingPipelineCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RayTracingPipelineCreateInfoNVBuilder<'b> {
    type Target = RayTracingPipelineCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RayTracingPipelineInterfaceCreateInfoKHR {
    type Target = RayTracingPipelineInterfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RayTracingPipelineInterfaceCreateInfoKHR {
    type Builder = RayTracingPipelineInterfaceCreateInfoKHRBuilder;
}

/// A builder for a [`RayTracingPipelineInterfaceCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RayTracingPipelineInterfaceCreateInfoKHRBuilder {
    value: RayTracingPipelineInterfaceCreateInfoKHR,
}

impl RayTracingPipelineInterfaceCreateInfoKHRBuilder {
    #[inline]
    pub fn max_pipeline_ray_payload_size(mut self, max_pipeline_ray_payload_size: u32) -> Self {
        self.value.max_pipeline_ray_payload_size = max_pipeline_ray_payload_size;
        self
    }

    #[inline]
    pub fn max_pipeline_ray_hit_attribute_size(
        mut self,
        max_pipeline_ray_hit_attribute_size: u32,
    ) -> Self {
        self.value.max_pipeline_ray_hit_attribute_size = max_pipeline_ray_hit_attribute_size;
        self
    }

    #[inline]
    pub fn build(self) -> RayTracingPipelineInterfaceCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for RayTracingPipelineInterfaceCreateInfoKHRBuilder {
    type Target = RayTracingPipelineInterfaceCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RayTracingPipelineInterfaceCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RayTracingPipelineInterfaceCreateInfoKHRBuilder {
    type Target = RayTracingPipelineInterfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RayTracingShaderGroupCreateInfoKHR {
    type Target = RayTracingShaderGroupCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RayTracingShaderGroupCreateInfoKHR {
    type Builder = RayTracingShaderGroupCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`RayTracingShaderGroupCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RayTracingShaderGroupCreateInfoKHRBuilder<'b> {
    value: RayTracingShaderGroupCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RayTracingShaderGroupCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn type_(mut self, type_: RayTracingShaderGroupTypeKHR) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn general_shader(mut self, general_shader: u32) -> Self {
        self.value.general_shader = general_shader;
        self
    }

    #[inline]
    pub fn closest_hit_shader(mut self, closest_hit_shader: u32) -> Self {
        self.value.closest_hit_shader = closest_hit_shader;
        self
    }

    #[inline]
    pub fn any_hit_shader(mut self, any_hit_shader: u32) -> Self {
        self.value.any_hit_shader = any_hit_shader;
        self
    }

    #[inline]
    pub fn intersection_shader(mut self, intersection_shader: u32) -> Self {
        self.value.intersection_shader = intersection_shader;
        self
    }

    #[inline]
    pub fn shader_group_capture_replay_handle<T>(
        mut self,
        shader_group_capture_replay_handle: &'b T,
    ) -> Self {
        self.value.shader_group_capture_replay_handle =
            (shader_group_capture_replay_handle as *const T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> RayTracingShaderGroupCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for RayTracingShaderGroupCreateInfoKHRBuilder<'b> {
    type Target = RayTracingShaderGroupCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RayTracingShaderGroupCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RayTracingShaderGroupCreateInfoKHRBuilder<'b> {
    type Target = RayTracingShaderGroupCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RayTracingShaderGroupCreateInfoNV {
    type Target = RayTracingShaderGroupCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RayTracingShaderGroupCreateInfoNV {
    type Builder = RayTracingShaderGroupCreateInfoNVBuilder;
}

/// A builder for a [`RayTracingShaderGroupCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RayTracingShaderGroupCreateInfoNVBuilder {
    value: RayTracingShaderGroupCreateInfoNV,
}

impl RayTracingShaderGroupCreateInfoNVBuilder {
    #[inline]
    pub fn type_(mut self, type_: RayTracingShaderGroupTypeKHR) -> Self {
        self.value.type_ = type_;
        self
    }

    #[inline]
    pub fn general_shader(mut self, general_shader: u32) -> Self {
        self.value.general_shader = general_shader;
        self
    }

    #[inline]
    pub fn closest_hit_shader(mut self, closest_hit_shader: u32) -> Self {
        self.value.closest_hit_shader = closest_hit_shader;
        self
    }

    #[inline]
    pub fn any_hit_shader(mut self, any_hit_shader: u32) -> Self {
        self.value.any_hit_shader = any_hit_shader;
        self
    }

    #[inline]
    pub fn intersection_shader(mut self, intersection_shader: u32) -> Self {
        self.value.intersection_shader = intersection_shader;
        self
    }

    #[inline]
    pub fn build(self) -> RayTracingShaderGroupCreateInfoNV {
        self.value
    }
}

impl ops::Deref for RayTracingShaderGroupCreateInfoNVBuilder {
    type Target = RayTracingShaderGroupCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RayTracingShaderGroupCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RayTracingShaderGroupCreateInfoNVBuilder {
    type Target = RayTracingShaderGroupCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Rect2D {
    type Target = Rect2D;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for Rect2D {
    type Builder = Rect2DBuilder;
}

/// A builder for a [`Rect2D`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct Rect2DBuilder {
    value: Rect2D,
}

impl Rect2DBuilder {
    #[inline]
    pub fn offset(mut self, offset: impl Cast<Target = Offset2D>) -> Self {
        self.value.offset = offset.into();
        self
    }

    #[inline]
    pub fn extent(mut self, extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.extent = extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> Rect2D {
        self.value
    }
}

impl ops::Deref for Rect2DBuilder {
    type Target = Rect2D;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for Rect2DBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for Rect2DBuilder {
    type Target = Rect2D;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RectLayerKHR {
    type Target = RectLayerKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RectLayerKHR {
    type Builder = RectLayerKHRBuilder;
}

/// A builder for a [`RectLayerKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RectLayerKHRBuilder {
    value: RectLayerKHR,
}

impl RectLayerKHRBuilder {
    #[inline]
    pub fn offset(mut self, offset: impl Cast<Target = Offset2D>) -> Self {
        self.value.offset = offset.into();
        self
    }

    #[inline]
    pub fn extent(mut self, extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.extent = extent.into();
        self
    }

    #[inline]
    pub fn layer(mut self, layer: u32) -> Self {
        self.value.layer = layer;
        self
    }

    #[inline]
    pub fn build(self) -> RectLayerKHR {
        self.value
    }
}

impl ops::Deref for RectLayerKHRBuilder {
    type Target = RectLayerKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RectLayerKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RectLayerKHRBuilder {
    type Target = RectLayerKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RefreshCycleDurationGOOGLE {
    type Target = RefreshCycleDurationGOOGLE;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RefreshCycleDurationGOOGLE {
    type Builder = RefreshCycleDurationGOOGLEBuilder;
}

/// A builder for a [`RefreshCycleDurationGOOGLE`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RefreshCycleDurationGOOGLEBuilder {
    value: RefreshCycleDurationGOOGLE,
}

impl RefreshCycleDurationGOOGLEBuilder {
    #[inline]
    pub fn refresh_duration(mut self, refresh_duration: u64) -> Self {
        self.value.refresh_duration = refresh_duration;
        self
    }

    #[inline]
    pub fn build(self) -> RefreshCycleDurationGOOGLE {
        self.value
    }
}

impl ops::Deref for RefreshCycleDurationGOOGLEBuilder {
    type Target = RefreshCycleDurationGOOGLE;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RefreshCycleDurationGOOGLEBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RefreshCycleDurationGOOGLEBuilder {
    type Target = RefreshCycleDurationGOOGLE;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RefreshObjectKHR {
    type Target = RefreshObjectKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RefreshObjectKHR {
    type Builder = RefreshObjectKHRBuilder;
}

/// A builder for a [`RefreshObjectKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RefreshObjectKHRBuilder {
    value: RefreshObjectKHR,
}

impl RefreshObjectKHRBuilder {
    #[inline]
    pub fn object_type(mut self, object_type: ObjectType) -> Self {
        self.value.object_type = object_type;
        self
    }

    #[inline]
    pub fn object_handle(mut self, object_handle: u64) -> Self {
        self.value.object_handle = object_handle;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: RefreshObjectFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> RefreshObjectKHR {
        self.value
    }
}

impl ops::Deref for RefreshObjectKHRBuilder {
    type Target = RefreshObjectKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RefreshObjectKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RefreshObjectKHRBuilder {
    type Target = RefreshObjectKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RefreshObjectListKHR {
    type Target = RefreshObjectListKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RefreshObjectListKHR {
    type Builder = RefreshObjectListKHRBuilder<'b>;
}

/// A builder for a [`RefreshObjectListKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RefreshObjectListKHRBuilder<'b> {
    value: RefreshObjectListKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RefreshObjectListKHRBuilder<'b> {
    #[inline]
    pub fn objects(mut self, objects: &'b [impl Cast<Target = RefreshObjectKHR>]) -> Self {
        self.value.object_count = objects.len() as u32;
        self.value.objects = objects.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> RefreshObjectListKHR {
        self.value
    }
}

impl<'b> ops::Deref for RefreshObjectListKHRBuilder<'b> {
    type Target = RefreshObjectListKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RefreshObjectListKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RefreshObjectListKHRBuilder<'b> {
    type Target = RefreshObjectListKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ReleaseCapturedPipelineDataInfoKHR {
    type Target = ReleaseCapturedPipelineDataInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ReleaseCapturedPipelineDataInfoKHR {
    type Builder = ReleaseCapturedPipelineDataInfoKHRBuilder;
}

/// A builder for a [`ReleaseCapturedPipelineDataInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ReleaseCapturedPipelineDataInfoKHRBuilder {
    value: ReleaseCapturedPipelineDataInfoKHR,
}

impl ReleaseCapturedPipelineDataInfoKHRBuilder {
    #[inline]
    pub fn pipeline(mut self, pipeline: Pipeline) -> Self {
        self.value.pipeline = pipeline;
        self
    }

    #[inline]
    pub fn build(self) -> ReleaseCapturedPipelineDataInfoKHR {
        self.value
    }
}

impl ops::Deref for ReleaseCapturedPipelineDataInfoKHRBuilder {
    type Target = ReleaseCapturedPipelineDataInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ReleaseCapturedPipelineDataInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ReleaseCapturedPipelineDataInfoKHRBuilder {
    type Target = ReleaseCapturedPipelineDataInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ReleaseSwapchainImagesInfoEXT {
    type Target = ReleaseSwapchainImagesInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ReleaseSwapchainImagesInfoEXT {
    type Builder = ReleaseSwapchainImagesInfoEXTBuilder<'b>;
}

/// A builder for a [`ReleaseSwapchainImagesInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ReleaseSwapchainImagesInfoEXTBuilder<'b> {
    value: ReleaseSwapchainImagesInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ReleaseSwapchainImagesInfoEXTBuilder<'b> {
    #[inline]
    pub fn swapchain(mut self, swapchain: SwapchainKHR) -> Self {
        self.value.swapchain = swapchain;
        self
    }

    #[inline]
    pub fn image_indices(mut self, image_indices: &'b [u32]) -> Self {
        self.value.image_index_count = image_indices.len() as u32;
        self.value.image_indices = image_indices.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> ReleaseSwapchainImagesInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for ReleaseSwapchainImagesInfoEXTBuilder<'b> {
    type Target = ReleaseSwapchainImagesInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ReleaseSwapchainImagesInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ReleaseSwapchainImagesInfoEXTBuilder<'b> {
    type Target = ReleaseSwapchainImagesInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassAttachmentBeginInfo {
    type Target = RenderPassAttachmentBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassAttachmentBeginInfo {
    type Builder = RenderPassAttachmentBeginInfoBuilder<'b>;
}

/// A builder for a [`RenderPassAttachmentBeginInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassAttachmentBeginInfoBuilder<'b> {
    value: RenderPassAttachmentBeginInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassAttachmentBeginInfoBuilder<'b> {
    #[inline]
    pub fn attachments(mut self, attachments: &'b [ImageView]) -> Self {
        self.value.attachment_count = attachments.len() as u32;
        self.value.attachments = attachments.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassAttachmentBeginInfo {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassAttachmentBeginInfoBuilder<'b> {
    type Target = RenderPassAttachmentBeginInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassAttachmentBeginInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassAttachmentBeginInfoBuilder<'b> {
    type Target = RenderPassAttachmentBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`RenderPassBeginInfo`].
pub unsafe trait ExtendsRenderPassBeginInfo: fmt::Debug {}
unsafe impl ExtendsRenderPassBeginInfo for DeviceGroupRenderPassBeginInfo {}
unsafe impl ExtendsRenderPassBeginInfo for MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {}
unsafe impl ExtendsRenderPassBeginInfo for RenderPassAttachmentBeginInfo {}
unsafe impl ExtendsRenderPassBeginInfo for RenderPassSampleLocationsBeginInfoEXT {}
unsafe impl ExtendsRenderPassBeginInfo for RenderPassStripeBeginInfoARM {}
unsafe impl ExtendsRenderPassBeginInfo for RenderPassTransformBeginInfoQCOM {}

unsafe impl Cast for RenderPassBeginInfo {
    type Target = RenderPassBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassBeginInfo {
    type Builder = RenderPassBeginInfoBuilder<'b>;
}

/// A builder for a [`RenderPassBeginInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassBeginInfoBuilder<'b> {
    value: RenderPassBeginInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassBeginInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsRenderPassBeginInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn render_pass(mut self, render_pass: RenderPass) -> Self {
        self.value.render_pass = render_pass;
        self
    }

    #[inline]
    pub fn framebuffer(mut self, framebuffer: Framebuffer) -> Self {
        self.value.framebuffer = framebuffer;
        self
    }

    #[inline]
    pub fn render_area(mut self, render_area: impl Cast<Target = Rect2D>) -> Self {
        self.value.render_area = render_area.into();
        self
    }

    #[inline]
    pub fn clear_values(mut self, clear_values: &'b [ClearValue]) -> Self {
        self.value.clear_value_count = clear_values.len() as u32;
        self.value.clear_values = clear_values.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassBeginInfo {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassBeginInfoBuilder<'b> {
    type Target = RenderPassBeginInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassBeginInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassBeginInfoBuilder<'b> {
    type Target = RenderPassBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`RenderPassCreateInfo`].
pub unsafe trait ExtendsRenderPassCreateInfo: fmt::Debug {}
unsafe impl ExtendsRenderPassCreateInfo for RenderPassFragmentDensityMapCreateInfoEXT {}
unsafe impl ExtendsRenderPassCreateInfo for RenderPassInputAttachmentAspectCreateInfo {}
unsafe impl ExtendsRenderPassCreateInfo for RenderPassMultiviewCreateInfo {}

unsafe impl Cast for RenderPassCreateInfo {
    type Target = RenderPassCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassCreateInfo {
    type Builder = RenderPassCreateInfoBuilder<'b>;
}

/// A builder for a [`RenderPassCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassCreateInfoBuilder<'b> {
    value: RenderPassCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsRenderPassCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: RenderPassCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn attachments(
        mut self,
        attachments: &'b [impl Cast<Target = AttachmentDescription>],
    ) -> Self {
        self.value.attachment_count = attachments.len() as u32;
        self.value.attachments = attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn subpasses(mut self, subpasses: &'b [impl Cast<Target = SubpassDescription>]) -> Self {
        self.value.subpass_count = subpasses.len() as u32;
        self.value.subpasses = subpasses.as_ptr().cast();
        self
    }

    #[inline]
    pub fn dependencies(
        mut self,
        dependencies: &'b [impl Cast<Target = SubpassDependency>],
    ) -> Self {
        self.value.dependency_count = dependencies.len() as u32;
        self.value.dependencies = dependencies.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassCreateInfoBuilder<'b> {
    type Target = RenderPassCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassCreateInfoBuilder<'b> {
    type Target = RenderPassCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`RenderPassCreateInfo2`].
pub unsafe trait ExtendsRenderPassCreateInfo2: fmt::Debug {}
unsafe impl ExtendsRenderPassCreateInfo2 for RenderPassCreationControlEXT {}
unsafe impl ExtendsRenderPassCreateInfo2 for RenderPassCreationFeedbackCreateInfoEXT {}
unsafe impl ExtendsRenderPassCreateInfo2 for RenderPassFragmentDensityMapCreateInfoEXT {}

unsafe impl Cast for RenderPassCreateInfo2 {
    type Target = RenderPassCreateInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassCreateInfo2 {
    type Builder = RenderPassCreateInfo2Builder<'b>;
}

/// A builder for a [`RenderPassCreateInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassCreateInfo2Builder<'b> {
    value: RenderPassCreateInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassCreateInfo2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsRenderPassCreateInfo2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: RenderPassCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn attachments(
        mut self,
        attachments: &'b [impl Cast<Target = AttachmentDescription2>],
    ) -> Self {
        self.value.attachment_count = attachments.len() as u32;
        self.value.attachments = attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn subpasses(mut self, subpasses: &'b [impl Cast<Target = SubpassDescription2>]) -> Self {
        self.value.subpass_count = subpasses.len() as u32;
        self.value.subpasses = subpasses.as_ptr().cast();
        self
    }

    #[inline]
    pub fn dependencies(
        mut self,
        dependencies: &'b [impl Cast<Target = SubpassDependency2>],
    ) -> Self {
        self.value.dependency_count = dependencies.len() as u32;
        self.value.dependencies = dependencies.as_ptr().cast();
        self
    }

    #[inline]
    pub fn correlated_view_masks(mut self, correlated_view_masks: &'b [u32]) -> Self {
        self.value.correlated_view_mask_count = correlated_view_masks.len() as u32;
        self.value.correlated_view_masks = correlated_view_masks.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassCreateInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassCreateInfo2Builder<'b> {
    type Target = RenderPassCreateInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassCreateInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassCreateInfo2Builder<'b> {
    type Target = RenderPassCreateInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassCreationControlEXT {
    type Target = RenderPassCreationControlEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderPassCreationControlEXT {
    type Builder = RenderPassCreationControlEXTBuilder;
}

/// A builder for a [`RenderPassCreationControlEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassCreationControlEXTBuilder {
    value: RenderPassCreationControlEXT,
}

impl RenderPassCreationControlEXTBuilder {
    #[inline]
    pub fn disallow_merging(mut self, disallow_merging: bool) -> Self {
        self.value.disallow_merging = disallow_merging as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassCreationControlEXT {
        self.value
    }
}

impl ops::Deref for RenderPassCreationControlEXTBuilder {
    type Target = RenderPassCreationControlEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderPassCreationControlEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderPassCreationControlEXTBuilder {
    type Target = RenderPassCreationControlEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassCreationFeedbackCreateInfoEXT {
    type Target = RenderPassCreationFeedbackCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassCreationFeedbackCreateInfoEXT {
    type Builder = RenderPassCreationFeedbackCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`RenderPassCreationFeedbackCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassCreationFeedbackCreateInfoEXTBuilder<'b> {
    value: RenderPassCreationFeedbackCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassCreationFeedbackCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn render_pass_feedback(
        mut self,
        render_pass_feedback: &'b mut impl Cast<Target = RenderPassCreationFeedbackInfoEXT>,
    ) -> Self {
        self.value.render_pass_feedback = render_pass_feedback.as_mut();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassCreationFeedbackCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassCreationFeedbackCreateInfoEXTBuilder<'b> {
    type Target = RenderPassCreationFeedbackCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassCreationFeedbackCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassCreationFeedbackCreateInfoEXTBuilder<'b> {
    type Target = RenderPassCreationFeedbackCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassCreationFeedbackInfoEXT {
    type Target = RenderPassCreationFeedbackInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderPassCreationFeedbackInfoEXT {
    type Builder = RenderPassCreationFeedbackInfoEXTBuilder;
}

/// A builder for a [`RenderPassCreationFeedbackInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassCreationFeedbackInfoEXTBuilder {
    value: RenderPassCreationFeedbackInfoEXT,
}

impl RenderPassCreationFeedbackInfoEXTBuilder {
    #[inline]
    pub fn post_merge_subpass_count(mut self, post_merge_subpass_count: u32) -> Self {
        self.value.post_merge_subpass_count = post_merge_subpass_count;
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassCreationFeedbackInfoEXT {
        self.value
    }
}

impl ops::Deref for RenderPassCreationFeedbackInfoEXTBuilder {
    type Target = RenderPassCreationFeedbackInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderPassCreationFeedbackInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderPassCreationFeedbackInfoEXTBuilder {
    type Target = RenderPassCreationFeedbackInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassFragmentDensityMapCreateInfoEXT {
    type Target = RenderPassFragmentDensityMapCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderPassFragmentDensityMapCreateInfoEXT {
    type Builder = RenderPassFragmentDensityMapCreateInfoEXTBuilder;
}

/// A builder for a [`RenderPassFragmentDensityMapCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassFragmentDensityMapCreateInfoEXTBuilder {
    value: RenderPassFragmentDensityMapCreateInfoEXT,
}

impl RenderPassFragmentDensityMapCreateInfoEXTBuilder {
    #[inline]
    pub fn fragment_density_map_attachment(
        mut self,
        fragment_density_map_attachment: impl Cast<Target = AttachmentReference>,
    ) -> Self {
        self.value.fragment_density_map_attachment = fragment_density_map_attachment.into();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassFragmentDensityMapCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for RenderPassFragmentDensityMapCreateInfoEXTBuilder {
    type Target = RenderPassFragmentDensityMapCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderPassFragmentDensityMapCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderPassFragmentDensityMapCreateInfoEXTBuilder {
    type Target = RenderPassFragmentDensityMapCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassInputAttachmentAspectCreateInfo {
    type Target = RenderPassInputAttachmentAspectCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassInputAttachmentAspectCreateInfo {
    type Builder = RenderPassInputAttachmentAspectCreateInfoBuilder<'b>;
}

/// A builder for a [`RenderPassInputAttachmentAspectCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassInputAttachmentAspectCreateInfoBuilder<'b> {
    value: RenderPassInputAttachmentAspectCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassInputAttachmentAspectCreateInfoBuilder<'b> {
    #[inline]
    pub fn aspect_references(
        mut self,
        aspect_references: &'b [impl Cast<Target = InputAttachmentAspectReference>],
    ) -> Self {
        self.value.aspect_reference_count = aspect_references.len() as u32;
        self.value.aspect_references = aspect_references.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassInputAttachmentAspectCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassInputAttachmentAspectCreateInfoBuilder<'b> {
    type Target = RenderPassInputAttachmentAspectCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassInputAttachmentAspectCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassInputAttachmentAspectCreateInfoBuilder<'b> {
    type Target = RenderPassInputAttachmentAspectCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassMultiviewCreateInfo {
    type Target = RenderPassMultiviewCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassMultiviewCreateInfo {
    type Builder = RenderPassMultiviewCreateInfoBuilder<'b>;
}

/// A builder for a [`RenderPassMultiviewCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassMultiviewCreateInfoBuilder<'b> {
    value: RenderPassMultiviewCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassMultiviewCreateInfoBuilder<'b> {
    #[inline]
    pub fn view_masks(mut self, view_masks: &'b [u32]) -> Self {
        self.value.subpass_count = view_masks.len() as u32;
        self.value.view_masks = view_masks.as_ptr();
        self
    }

    #[inline]
    pub fn view_offsets(mut self, view_offsets: &'b [i32]) -> Self {
        self.value.dependency_count = view_offsets.len() as u32;
        self.value.view_offsets = view_offsets.as_ptr();
        self
    }

    #[inline]
    pub fn correlation_masks(mut self, correlation_masks: &'b [u32]) -> Self {
        self.value.correlation_mask_count = correlation_masks.len() as u32;
        self.value.correlation_masks = correlation_masks.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassMultiviewCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassMultiviewCreateInfoBuilder<'b> {
    type Target = RenderPassMultiviewCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassMultiviewCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassMultiviewCreateInfoBuilder<'b> {
    type Target = RenderPassMultiviewCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassSampleLocationsBeginInfoEXT {
    type Target = RenderPassSampleLocationsBeginInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassSampleLocationsBeginInfoEXT {
    type Builder = RenderPassSampleLocationsBeginInfoEXTBuilder<'b>;
}

/// A builder for a [`RenderPassSampleLocationsBeginInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassSampleLocationsBeginInfoEXTBuilder<'b> {
    value: RenderPassSampleLocationsBeginInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassSampleLocationsBeginInfoEXTBuilder<'b> {
    #[inline]
    pub fn attachment_initial_sample_locations(
        mut self,
        attachment_initial_sample_locations: &'b [impl Cast<Target = AttachmentSampleLocationsEXT>],
    ) -> Self {
        self.value.attachment_initial_sample_locations_count =
            attachment_initial_sample_locations.len() as u32;
        self.value.attachment_initial_sample_locations =
            attachment_initial_sample_locations.as_ptr().cast();
        self
    }

    #[inline]
    pub fn post_subpass_sample_locations(
        mut self,
        post_subpass_sample_locations: &'b [impl Cast<Target = SubpassSampleLocationsEXT>],
    ) -> Self {
        self.value.post_subpass_sample_locations_count = post_subpass_sample_locations.len() as u32;
        self.value.post_subpass_sample_locations = post_subpass_sample_locations.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassSampleLocationsBeginInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassSampleLocationsBeginInfoEXTBuilder<'b> {
    type Target = RenderPassSampleLocationsBeginInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassSampleLocationsBeginInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassSampleLocationsBeginInfoEXTBuilder<'b> {
    type Target = RenderPassSampleLocationsBeginInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassStripeBeginInfoARM {
    type Target = RenderPassStripeBeginInfoARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassStripeBeginInfoARM {
    type Builder = RenderPassStripeBeginInfoARMBuilder<'b>;
}

/// A builder for a [`RenderPassStripeBeginInfoARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassStripeBeginInfoARMBuilder<'b> {
    value: RenderPassStripeBeginInfoARM,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassStripeBeginInfoARMBuilder<'b> {
    #[inline]
    pub fn stripe_infos(
        mut self,
        stripe_infos: &'b [impl Cast<Target = RenderPassStripeInfoARM>],
    ) -> Self {
        self.value.stripe_info_count = stripe_infos.len() as u32;
        self.value.stripe_infos = stripe_infos.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassStripeBeginInfoARM {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassStripeBeginInfoARMBuilder<'b> {
    type Target = RenderPassStripeBeginInfoARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassStripeBeginInfoARMBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassStripeBeginInfoARMBuilder<'b> {
    type Target = RenderPassStripeBeginInfoARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassStripeInfoARM {
    type Target = RenderPassStripeInfoARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderPassStripeInfoARM {
    type Builder = RenderPassStripeInfoARMBuilder;
}

/// A builder for a [`RenderPassStripeInfoARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassStripeInfoARMBuilder {
    value: RenderPassStripeInfoARM,
}

impl RenderPassStripeInfoARMBuilder {
    #[inline]
    pub fn stripe_area(mut self, stripe_area: impl Cast<Target = Rect2D>) -> Self {
        self.value.stripe_area = stripe_area.into();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassStripeInfoARM {
        self.value
    }
}

impl ops::Deref for RenderPassStripeInfoARMBuilder {
    type Target = RenderPassStripeInfoARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderPassStripeInfoARMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderPassStripeInfoARMBuilder {
    type Target = RenderPassStripeInfoARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassStripeSubmitInfoARM {
    type Target = RenderPassStripeSubmitInfoARM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassStripeSubmitInfoARM {
    type Builder = RenderPassStripeSubmitInfoARMBuilder<'b>;
}

/// A builder for a [`RenderPassStripeSubmitInfoARM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassStripeSubmitInfoARMBuilder<'b> {
    value: RenderPassStripeSubmitInfoARM,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassStripeSubmitInfoARMBuilder<'b> {
    #[inline]
    pub fn stripe_semaphore_infos(
        mut self,
        stripe_semaphore_infos: &'b [impl Cast<Target = SemaphoreSubmitInfo>],
    ) -> Self {
        self.value.stripe_semaphore_info_count = stripe_semaphore_infos.len() as u32;
        self.value.stripe_semaphore_infos = stripe_semaphore_infos.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassStripeSubmitInfoARM {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassStripeSubmitInfoARMBuilder<'b> {
    type Target = RenderPassStripeSubmitInfoARM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassStripeSubmitInfoARMBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassStripeSubmitInfoARMBuilder<'b> {
    type Target = RenderPassStripeSubmitInfoARM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassSubpassFeedbackCreateInfoEXT {
    type Target = RenderPassSubpassFeedbackCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderPassSubpassFeedbackCreateInfoEXT {
    type Builder = RenderPassSubpassFeedbackCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`RenderPassSubpassFeedbackCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassSubpassFeedbackCreateInfoEXTBuilder<'b> {
    value: RenderPassSubpassFeedbackCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderPassSubpassFeedbackCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn subpass_feedback(
        mut self,
        subpass_feedback: &'b mut impl Cast<Target = RenderPassSubpassFeedbackInfoEXT>,
    ) -> Self {
        self.value.subpass_feedback = subpass_feedback.as_mut();
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassSubpassFeedbackCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for RenderPassSubpassFeedbackCreateInfoEXTBuilder<'b> {
    type Target = RenderPassSubpassFeedbackCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderPassSubpassFeedbackCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderPassSubpassFeedbackCreateInfoEXTBuilder<'b> {
    type Target = RenderPassSubpassFeedbackCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassSubpassFeedbackInfoEXT {
    type Target = RenderPassSubpassFeedbackInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderPassSubpassFeedbackInfoEXT {
    type Builder = RenderPassSubpassFeedbackInfoEXTBuilder;
}

/// A builder for a [`RenderPassSubpassFeedbackInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassSubpassFeedbackInfoEXTBuilder {
    value: RenderPassSubpassFeedbackInfoEXT,
}

impl RenderPassSubpassFeedbackInfoEXTBuilder {
    #[inline]
    pub fn subpass_merge_status(mut self, subpass_merge_status: SubpassMergeStatusEXT) -> Self {
        self.value.subpass_merge_status = subpass_merge_status;
        self
    }

    #[inline]
    pub fn description(
        mut self,
        description: impl Into<StringArray<MAX_DESCRIPTION_SIZE>>,
    ) -> Self {
        self.value.description = description.into();
        self
    }

    #[inline]
    pub fn post_merge_index(mut self, post_merge_index: u32) -> Self {
        self.value.post_merge_index = post_merge_index;
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassSubpassFeedbackInfoEXT {
        self.value
    }
}

impl ops::Deref for RenderPassSubpassFeedbackInfoEXTBuilder {
    type Target = RenderPassSubpassFeedbackInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderPassSubpassFeedbackInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderPassSubpassFeedbackInfoEXTBuilder {
    type Target = RenderPassSubpassFeedbackInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderPassTransformBeginInfoQCOM {
    type Target = RenderPassTransformBeginInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderPassTransformBeginInfoQCOM {
    type Builder = RenderPassTransformBeginInfoQCOMBuilder;
}

/// A builder for a [`RenderPassTransformBeginInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderPassTransformBeginInfoQCOMBuilder {
    value: RenderPassTransformBeginInfoQCOM,
}

impl RenderPassTransformBeginInfoQCOMBuilder {
    #[inline]
    pub fn transform(mut self, transform: SurfaceTransformFlagsKHR) -> Self {
        self.value.transform = transform;
        self
    }

    #[inline]
    pub fn build(self) -> RenderPassTransformBeginInfoQCOM {
        self.value
    }
}

impl ops::Deref for RenderPassTransformBeginInfoQCOMBuilder {
    type Target = RenderPassTransformBeginInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderPassTransformBeginInfoQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderPassTransformBeginInfoQCOMBuilder {
    type Target = RenderPassTransformBeginInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderingAreaInfoKHR {
    type Target = RenderingAreaInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderingAreaInfoKHR {
    type Builder = RenderingAreaInfoKHRBuilder<'b>;
}

/// A builder for a [`RenderingAreaInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderingAreaInfoKHRBuilder<'b> {
    value: RenderingAreaInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderingAreaInfoKHRBuilder<'b> {
    #[inline]
    pub fn view_mask(mut self, view_mask: u32) -> Self {
        self.value.view_mask = view_mask;
        self
    }

    #[inline]
    pub fn color_attachment_formats(mut self, color_attachment_formats: &'b [Format]) -> Self {
        self.value.color_attachment_count = color_attachment_formats.len() as u32;
        self.value.color_attachment_formats = color_attachment_formats.as_ptr();
        self
    }

    #[inline]
    pub fn depth_attachment_format(mut self, depth_attachment_format: Format) -> Self {
        self.value.depth_attachment_format = depth_attachment_format;
        self
    }

    #[inline]
    pub fn stencil_attachment_format(mut self, stencil_attachment_format: Format) -> Self {
        self.value.stencil_attachment_format = stencil_attachment_format;
        self
    }

    #[inline]
    pub fn build(self) -> RenderingAreaInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for RenderingAreaInfoKHRBuilder<'b> {
    type Target = RenderingAreaInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderingAreaInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderingAreaInfoKHRBuilder<'b> {
    type Target = RenderingAreaInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderingAttachmentInfo {
    type Target = RenderingAttachmentInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderingAttachmentInfo {
    type Builder = RenderingAttachmentInfoBuilder;
}

/// A builder for a [`RenderingAttachmentInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderingAttachmentInfoBuilder {
    value: RenderingAttachmentInfo,
}

impl RenderingAttachmentInfoBuilder {
    #[inline]
    pub fn image_view(mut self, image_view: ImageView) -> Self {
        self.value.image_view = image_view;
        self
    }

    #[inline]
    pub fn image_layout(mut self, image_layout: ImageLayout) -> Self {
        self.value.image_layout = image_layout;
        self
    }

    #[inline]
    pub fn resolve_mode(mut self, resolve_mode: ResolveModeFlags) -> Self {
        self.value.resolve_mode = resolve_mode;
        self
    }

    #[inline]
    pub fn resolve_image_view(mut self, resolve_image_view: ImageView) -> Self {
        self.value.resolve_image_view = resolve_image_view;
        self
    }

    #[inline]
    pub fn resolve_image_layout(mut self, resolve_image_layout: ImageLayout) -> Self {
        self.value.resolve_image_layout = resolve_image_layout;
        self
    }

    #[inline]
    pub fn load_op(mut self, load_op: AttachmentLoadOp) -> Self {
        self.value.load_op = load_op;
        self
    }

    #[inline]
    pub fn store_op(mut self, store_op: AttachmentStoreOp) -> Self {
        self.value.store_op = store_op;
        self
    }

    #[inline]
    pub fn clear_value(mut self, clear_value: ClearValue) -> Self {
        self.value.clear_value = clear_value;
        self
    }

    #[inline]
    pub fn build(self) -> RenderingAttachmentInfo {
        self.value
    }
}

impl ops::Deref for RenderingAttachmentInfoBuilder {
    type Target = RenderingAttachmentInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderingAttachmentInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderingAttachmentInfoBuilder {
    type Target = RenderingAttachmentInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderingAttachmentLocationInfoKHR {
    type Target = RenderingAttachmentLocationInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderingAttachmentLocationInfoKHR {
    type Builder = RenderingAttachmentLocationInfoKHRBuilder<'b>;
}

/// A builder for a [`RenderingAttachmentLocationInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderingAttachmentLocationInfoKHRBuilder<'b> {
    value: RenderingAttachmentLocationInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderingAttachmentLocationInfoKHRBuilder<'b> {
    #[inline]
    pub fn color_attachment_locations(mut self, color_attachment_locations: &'b [u32]) -> Self {
        self.value.color_attachment_count = color_attachment_locations.len() as u32;
        self.value.color_attachment_locations = color_attachment_locations.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> RenderingAttachmentLocationInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for RenderingAttachmentLocationInfoKHRBuilder<'b> {
    type Target = RenderingAttachmentLocationInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderingAttachmentLocationInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderingAttachmentLocationInfoKHRBuilder<'b> {
    type Target = RenderingAttachmentLocationInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderingFragmentDensityMapAttachmentInfoEXT {
    type Target = RenderingFragmentDensityMapAttachmentInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderingFragmentDensityMapAttachmentInfoEXT {
    type Builder = RenderingFragmentDensityMapAttachmentInfoEXTBuilder;
}

/// A builder for a [`RenderingFragmentDensityMapAttachmentInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderingFragmentDensityMapAttachmentInfoEXTBuilder {
    value: RenderingFragmentDensityMapAttachmentInfoEXT,
}

impl RenderingFragmentDensityMapAttachmentInfoEXTBuilder {
    #[inline]
    pub fn image_view(mut self, image_view: ImageView) -> Self {
        self.value.image_view = image_view;
        self
    }

    #[inline]
    pub fn image_layout(mut self, image_layout: ImageLayout) -> Self {
        self.value.image_layout = image_layout;
        self
    }

    #[inline]
    pub fn build(self) -> RenderingFragmentDensityMapAttachmentInfoEXT {
        self.value
    }
}

impl ops::Deref for RenderingFragmentDensityMapAttachmentInfoEXTBuilder {
    type Target = RenderingFragmentDensityMapAttachmentInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderingFragmentDensityMapAttachmentInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderingFragmentDensityMapAttachmentInfoEXTBuilder {
    type Target = RenderingFragmentDensityMapAttachmentInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderingFragmentShadingRateAttachmentInfoKHR {
    type Target = RenderingFragmentShadingRateAttachmentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for RenderingFragmentShadingRateAttachmentInfoKHR {
    type Builder = RenderingFragmentShadingRateAttachmentInfoKHRBuilder;
}

/// A builder for a [`RenderingFragmentShadingRateAttachmentInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderingFragmentShadingRateAttachmentInfoKHRBuilder {
    value: RenderingFragmentShadingRateAttachmentInfoKHR,
}

impl RenderingFragmentShadingRateAttachmentInfoKHRBuilder {
    #[inline]
    pub fn image_view(mut self, image_view: ImageView) -> Self {
        self.value.image_view = image_view;
        self
    }

    #[inline]
    pub fn image_layout(mut self, image_layout: ImageLayout) -> Self {
        self.value.image_layout = image_layout;
        self
    }

    #[inline]
    pub fn shading_rate_attachment_texel_size(
        mut self,
        shading_rate_attachment_texel_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.shading_rate_attachment_texel_size = shading_rate_attachment_texel_size.into();
        self
    }

    #[inline]
    pub fn build(self) -> RenderingFragmentShadingRateAttachmentInfoKHR {
        self.value
    }
}

impl ops::Deref for RenderingFragmentShadingRateAttachmentInfoKHRBuilder {
    type Target = RenderingFragmentShadingRateAttachmentInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for RenderingFragmentShadingRateAttachmentInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for RenderingFragmentShadingRateAttachmentInfoKHRBuilder {
    type Target = RenderingFragmentShadingRateAttachmentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`RenderingInfo`].
pub unsafe trait ExtendsRenderingInfo: fmt::Debug {}
unsafe impl ExtendsRenderingInfo for DeviceGroupRenderPassBeginInfo {}
unsafe impl ExtendsRenderingInfo for MultisampledRenderToSingleSampledInfoEXT {}
unsafe impl ExtendsRenderingInfo for MultiviewPerViewAttributesInfoNVX {}
unsafe impl ExtendsRenderingInfo for MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {}
unsafe impl ExtendsRenderingInfo for RenderPassStripeBeginInfoARM {}
unsafe impl ExtendsRenderingInfo for RenderingFragmentDensityMapAttachmentInfoEXT {}
unsafe impl ExtendsRenderingInfo for RenderingFragmentShadingRateAttachmentInfoKHR {}

unsafe impl Cast for RenderingInfo {
    type Target = RenderingInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderingInfo {
    type Builder = RenderingInfoBuilder<'b>;
}

/// A builder for a [`RenderingInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderingInfoBuilder<'b> {
    value: RenderingInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderingInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsRenderingInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: RenderingFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn render_area(mut self, render_area: impl Cast<Target = Rect2D>) -> Self {
        self.value.render_area = render_area.into();
        self
    }

    #[inline]
    pub fn layer_count(mut self, layer_count: u32) -> Self {
        self.value.layer_count = layer_count;
        self
    }

    #[inline]
    pub fn view_mask(mut self, view_mask: u32) -> Self {
        self.value.view_mask = view_mask;
        self
    }

    #[inline]
    pub fn color_attachments(
        mut self,
        color_attachments: &'b [impl Cast<Target = RenderingAttachmentInfo>],
    ) -> Self {
        self.value.color_attachment_count = color_attachments.len() as u32;
        self.value.color_attachments = color_attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn depth_attachment(
        mut self,
        depth_attachment: &'b impl Cast<Target = RenderingAttachmentInfo>,
    ) -> Self {
        self.value.depth_attachment = depth_attachment.as_ref();
        self
    }

    #[inline]
    pub fn stencil_attachment(
        mut self,
        stencil_attachment: &'b impl Cast<Target = RenderingAttachmentInfo>,
    ) -> Self {
        self.value.stencil_attachment = stencil_attachment.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> RenderingInfo {
        self.value
    }
}

impl<'b> ops::Deref for RenderingInfoBuilder<'b> {
    type Target = RenderingInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderingInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderingInfoBuilder<'b> {
    type Target = RenderingInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for RenderingInputAttachmentIndexInfoKHR {
    type Target = RenderingInputAttachmentIndexInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for RenderingInputAttachmentIndexInfoKHR {
    type Builder = RenderingInputAttachmentIndexInfoKHRBuilder<'b>;
}

/// A builder for a [`RenderingInputAttachmentIndexInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct RenderingInputAttachmentIndexInfoKHRBuilder<'b> {
    value: RenderingInputAttachmentIndexInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> RenderingInputAttachmentIndexInfoKHRBuilder<'b> {
    #[inline]
    pub fn color_attachment_count(mut self, color_attachment_count: u32) -> Self {
        self.value.color_attachment_count = color_attachment_count;
        self
    }

    #[inline]
    pub fn color_attachment_input_indices(
        mut self,
        color_attachment_input_indices: &'b [u32],
    ) -> Self {
        self.value.color_attachment_count = color_attachment_input_indices.len() as u32;
        self.value.color_attachment_input_indices = color_attachment_input_indices.as_ptr();
        self
    }

    #[inline]
    pub fn depth_input_attachment_index(mut self, depth_input_attachment_index: &'b u32) -> Self {
        self.value.depth_input_attachment_index = depth_input_attachment_index as *const u32;
        self
    }

    #[inline]
    pub fn stencil_input_attachment_index(
        mut self,
        stencil_input_attachment_index: &'b u32,
    ) -> Self {
        self.value.stencil_input_attachment_index = stencil_input_attachment_index as *const u32;
        self
    }

    #[inline]
    pub fn build(self) -> RenderingInputAttachmentIndexInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for RenderingInputAttachmentIndexInfoKHRBuilder<'b> {
    type Target = RenderingInputAttachmentIndexInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for RenderingInputAttachmentIndexInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for RenderingInputAttachmentIndexInfoKHRBuilder<'b> {
    type Target = RenderingInputAttachmentIndexInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ResolveImageInfo2 {
    type Target = ResolveImageInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ResolveImageInfo2 {
    type Builder = ResolveImageInfo2Builder<'b>;
}

/// A builder for a [`ResolveImageInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ResolveImageInfo2Builder<'b> {
    value: ResolveImageInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ResolveImageInfo2Builder<'b> {
    #[inline]
    pub fn src_image(mut self, src_image: Image) -> Self {
        self.value.src_image = src_image;
        self
    }

    #[inline]
    pub fn src_image_layout(mut self, src_image_layout: ImageLayout) -> Self {
        self.value.src_image_layout = src_image_layout;
        self
    }

    #[inline]
    pub fn dst_image(mut self, dst_image: Image) -> Self {
        self.value.dst_image = dst_image;
        self
    }

    #[inline]
    pub fn dst_image_layout(mut self, dst_image_layout: ImageLayout) -> Self {
        self.value.dst_image_layout = dst_image_layout;
        self
    }

    #[inline]
    pub fn regions(mut self, regions: &'b [impl Cast<Target = ImageResolve2>]) -> Self {
        self.value.region_count = regions.len() as u32;
        self.value.regions = regions.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> ResolveImageInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for ResolveImageInfo2Builder<'b> {
    type Target = ResolveImageInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ResolveImageInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ResolveImageInfo2Builder<'b> {
    type Target = ResolveImageInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SRTDataNV {
    type Target = SRTDataNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SRTDataNV {
    type Builder = SRTDataNVBuilder;
}

/// A builder for a [`SRTDataNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SRTDataNVBuilder {
    value: SRTDataNV,
}

impl SRTDataNVBuilder {
    #[inline]
    pub fn sx(mut self, sx: f32) -> Self {
        self.value.sx = sx;
        self
    }

    #[inline]
    pub fn a(mut self, a: f32) -> Self {
        self.value.a = a;
        self
    }

    #[inline]
    pub fn b(mut self, b: f32) -> Self {
        self.value.b = b;
        self
    }

    #[inline]
    pub fn pvx(mut self, pvx: f32) -> Self {
        self.value.pvx = pvx;
        self
    }

    #[inline]
    pub fn sy(mut self, sy: f32) -> Self {
        self.value.sy = sy;
        self
    }

    #[inline]
    pub fn c(mut self, c: f32) -> Self {
        self.value.c = c;
        self
    }

    #[inline]
    pub fn pvy(mut self, pvy: f32) -> Self {
        self.value.pvy = pvy;
        self
    }

    #[inline]
    pub fn sz(mut self, sz: f32) -> Self {
        self.value.sz = sz;
        self
    }

    #[inline]
    pub fn pvz(mut self, pvz: f32) -> Self {
        self.value.pvz = pvz;
        self
    }

    #[inline]
    pub fn qx(mut self, qx: f32) -> Self {
        self.value.qx = qx;
        self
    }

    #[inline]
    pub fn qy(mut self, qy: f32) -> Self {
        self.value.qy = qy;
        self
    }

    #[inline]
    pub fn qz(mut self, qz: f32) -> Self {
        self.value.qz = qz;
        self
    }

    #[inline]
    pub fn qw(mut self, qw: f32) -> Self {
        self.value.qw = qw;
        self
    }

    #[inline]
    pub fn tx(mut self, tx: f32) -> Self {
        self.value.tx = tx;
        self
    }

    #[inline]
    pub fn ty(mut self, ty: f32) -> Self {
        self.value.ty = ty;
        self
    }

    #[inline]
    pub fn tz(mut self, tz: f32) -> Self {
        self.value.tz = tz;
        self
    }

    #[inline]
    pub fn build(self) -> SRTDataNV {
        self.value
    }
}

impl ops::Deref for SRTDataNVBuilder {
    type Target = SRTDataNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SRTDataNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SRTDataNVBuilder {
    type Target = SRTDataNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SampleLocationEXT {
    type Target = SampleLocationEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SampleLocationEXT {
    type Builder = SampleLocationEXTBuilder;
}

/// A builder for a [`SampleLocationEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SampleLocationEXTBuilder {
    value: SampleLocationEXT,
}

impl SampleLocationEXTBuilder {
    #[inline]
    pub fn x(mut self, x: f32) -> Self {
        self.value.x = x;
        self
    }

    #[inline]
    pub fn y(mut self, y: f32) -> Self {
        self.value.y = y;
        self
    }

    #[inline]
    pub fn build(self) -> SampleLocationEXT {
        self.value
    }
}

impl ops::Deref for SampleLocationEXTBuilder {
    type Target = SampleLocationEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SampleLocationEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SampleLocationEXTBuilder {
    type Target = SampleLocationEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SampleLocationsInfoEXT {
    type Target = SampleLocationsInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SampleLocationsInfoEXT {
    type Builder = SampleLocationsInfoEXTBuilder<'b>;
}

/// A builder for a [`SampleLocationsInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SampleLocationsInfoEXTBuilder<'b> {
    value: SampleLocationsInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SampleLocationsInfoEXTBuilder<'b> {
    #[inline]
    pub fn sample_locations_per_pixel(
        mut self,
        sample_locations_per_pixel: SampleCountFlags,
    ) -> Self {
        self.value.sample_locations_per_pixel = sample_locations_per_pixel;
        self
    }

    #[inline]
    pub fn sample_location_grid_size(
        mut self,
        sample_location_grid_size: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.sample_location_grid_size = sample_location_grid_size.into();
        self
    }

    #[inline]
    pub fn sample_locations(
        mut self,
        sample_locations: &'b [impl Cast<Target = SampleLocationEXT>],
    ) -> Self {
        self.value.sample_locations_count = sample_locations.len() as u32;
        self.value.sample_locations = sample_locations.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> SampleLocationsInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for SampleLocationsInfoEXTBuilder<'b> {
    type Target = SampleLocationsInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SampleLocationsInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SampleLocationsInfoEXTBuilder<'b> {
    type Target = SampleLocationsInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerBlockMatchWindowCreateInfoQCOM {
    type Target = SamplerBlockMatchWindowCreateInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerBlockMatchWindowCreateInfoQCOM {
    type Builder = SamplerBlockMatchWindowCreateInfoQCOMBuilder;
}

/// A builder for a [`SamplerBlockMatchWindowCreateInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerBlockMatchWindowCreateInfoQCOMBuilder {
    value: SamplerBlockMatchWindowCreateInfoQCOM,
}

impl SamplerBlockMatchWindowCreateInfoQCOMBuilder {
    #[inline]
    pub fn window_extent(mut self, window_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.window_extent = window_extent.into();
        self
    }

    #[inline]
    pub fn window_compare_mode(
        mut self,
        window_compare_mode: BlockMatchWindowCompareModeQCOM,
    ) -> Self {
        self.value.window_compare_mode = window_compare_mode;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerBlockMatchWindowCreateInfoQCOM {
        self.value
    }
}

impl ops::Deref for SamplerBlockMatchWindowCreateInfoQCOMBuilder {
    type Target = SamplerBlockMatchWindowCreateInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerBlockMatchWindowCreateInfoQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerBlockMatchWindowCreateInfoQCOMBuilder {
    type Target = SamplerBlockMatchWindowCreateInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerBorderColorComponentMappingCreateInfoEXT {
    type Target = SamplerBorderColorComponentMappingCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerBorderColorComponentMappingCreateInfoEXT {
    type Builder = SamplerBorderColorComponentMappingCreateInfoEXTBuilder;
}

/// A builder for a [`SamplerBorderColorComponentMappingCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerBorderColorComponentMappingCreateInfoEXTBuilder {
    value: SamplerBorderColorComponentMappingCreateInfoEXT,
}

impl SamplerBorderColorComponentMappingCreateInfoEXTBuilder {
    #[inline]
    pub fn components(mut self, components: impl Cast<Target = ComponentMapping>) -> Self {
        self.value.components = components.into();
        self
    }

    #[inline]
    pub fn srgb(mut self, srgb: bool) -> Self {
        self.value.srgb = srgb as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerBorderColorComponentMappingCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for SamplerBorderColorComponentMappingCreateInfoEXTBuilder {
    type Target = SamplerBorderColorComponentMappingCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerBorderColorComponentMappingCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerBorderColorComponentMappingCreateInfoEXTBuilder {
    type Target = SamplerBorderColorComponentMappingCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerCaptureDescriptorDataInfoEXT {
    type Target = SamplerCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerCaptureDescriptorDataInfoEXT {
    type Builder = SamplerCaptureDescriptorDataInfoEXTBuilder;
}

/// A builder for a [`SamplerCaptureDescriptorDataInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerCaptureDescriptorDataInfoEXTBuilder {
    value: SamplerCaptureDescriptorDataInfoEXT,
}

impl SamplerCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    pub fn sampler(mut self, sampler: Sampler) -> Self {
        self.value.sampler = sampler;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerCaptureDescriptorDataInfoEXT {
        self.value
    }
}

impl ops::Deref for SamplerCaptureDescriptorDataInfoEXTBuilder {
    type Target = SamplerCaptureDescriptorDataInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerCaptureDescriptorDataInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerCaptureDescriptorDataInfoEXTBuilder {
    type Target = SamplerCaptureDescriptorDataInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SamplerCreateInfo`].
pub unsafe trait ExtendsSamplerCreateInfo: fmt::Debug {}
unsafe impl ExtendsSamplerCreateInfo for OpaqueCaptureDescriptorDataCreateInfoEXT {}
unsafe impl ExtendsSamplerCreateInfo for SamplerBlockMatchWindowCreateInfoQCOM {}
unsafe impl ExtendsSamplerCreateInfo for SamplerBorderColorComponentMappingCreateInfoEXT {}
unsafe impl ExtendsSamplerCreateInfo for SamplerCubicWeightsCreateInfoQCOM {}
unsafe impl ExtendsSamplerCreateInfo for SamplerCustomBorderColorCreateInfoEXT {}
unsafe impl ExtendsSamplerCreateInfo for SamplerReductionModeCreateInfo {}
unsafe impl ExtendsSamplerCreateInfo for SamplerYcbcrConversionInfo {}

unsafe impl Cast for SamplerCreateInfo {
    type Target = SamplerCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SamplerCreateInfo {
    type Builder = SamplerCreateInfoBuilder<'b>;
}

/// A builder for a [`SamplerCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerCreateInfoBuilder<'b> {
    value: SamplerCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SamplerCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSamplerCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SamplerCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn mag_filter(mut self, mag_filter: Filter) -> Self {
        self.value.mag_filter = mag_filter;
        self
    }

    #[inline]
    pub fn min_filter(mut self, min_filter: Filter) -> Self {
        self.value.min_filter = min_filter;
        self
    }

    #[inline]
    pub fn mipmap_mode(mut self, mipmap_mode: SamplerMipmapMode) -> Self {
        self.value.mipmap_mode = mipmap_mode;
        self
    }

    #[inline]
    pub fn address_mode_u(mut self, address_mode_u: SamplerAddressMode) -> Self {
        self.value.address_mode_u = address_mode_u;
        self
    }

    #[inline]
    pub fn address_mode_v(mut self, address_mode_v: SamplerAddressMode) -> Self {
        self.value.address_mode_v = address_mode_v;
        self
    }

    #[inline]
    pub fn address_mode_w(mut self, address_mode_w: SamplerAddressMode) -> Self {
        self.value.address_mode_w = address_mode_w;
        self
    }

    #[inline]
    pub fn mip_lod_bias(mut self, mip_lod_bias: f32) -> Self {
        self.value.mip_lod_bias = mip_lod_bias;
        self
    }

    #[inline]
    pub fn anisotropy_enable(mut self, anisotropy_enable: bool) -> Self {
        self.value.anisotropy_enable = anisotropy_enable as Bool32;
        self
    }

    #[inline]
    pub fn max_anisotropy(mut self, max_anisotropy: f32) -> Self {
        self.value.max_anisotropy = max_anisotropy;
        self
    }

    #[inline]
    pub fn compare_enable(mut self, compare_enable: bool) -> Self {
        self.value.compare_enable = compare_enable as Bool32;
        self
    }

    #[inline]
    pub fn compare_op(mut self, compare_op: CompareOp) -> Self {
        self.value.compare_op = compare_op;
        self
    }

    #[inline]
    pub fn min_lod(mut self, min_lod: f32) -> Self {
        self.value.min_lod = min_lod;
        self
    }

    #[inline]
    pub fn max_lod(mut self, max_lod: f32) -> Self {
        self.value.max_lod = max_lod;
        self
    }

    #[inline]
    pub fn border_color(mut self, border_color: BorderColor) -> Self {
        self.value.border_color = border_color;
        self
    }

    #[inline]
    pub fn unnormalized_coordinates(mut self, unnormalized_coordinates: bool) -> Self {
        self.value.unnormalized_coordinates = unnormalized_coordinates as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for SamplerCreateInfoBuilder<'b> {
    type Target = SamplerCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SamplerCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SamplerCreateInfoBuilder<'b> {
    type Target = SamplerCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerCubicWeightsCreateInfoQCOM {
    type Target = SamplerCubicWeightsCreateInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerCubicWeightsCreateInfoQCOM {
    type Builder = SamplerCubicWeightsCreateInfoQCOMBuilder;
}

/// A builder for a [`SamplerCubicWeightsCreateInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerCubicWeightsCreateInfoQCOMBuilder {
    value: SamplerCubicWeightsCreateInfoQCOM,
}

impl SamplerCubicWeightsCreateInfoQCOMBuilder {
    #[inline]
    pub fn cubic_weights(mut self, cubic_weights: CubicFilterWeightsQCOM) -> Self {
        self.value.cubic_weights = cubic_weights;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerCubicWeightsCreateInfoQCOM {
        self.value
    }
}

impl ops::Deref for SamplerCubicWeightsCreateInfoQCOMBuilder {
    type Target = SamplerCubicWeightsCreateInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerCubicWeightsCreateInfoQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerCubicWeightsCreateInfoQCOMBuilder {
    type Target = SamplerCubicWeightsCreateInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerCustomBorderColorCreateInfoEXT {
    type Target = SamplerCustomBorderColorCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerCustomBorderColorCreateInfoEXT {
    type Builder = SamplerCustomBorderColorCreateInfoEXTBuilder;
}

/// A builder for a [`SamplerCustomBorderColorCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerCustomBorderColorCreateInfoEXTBuilder {
    value: SamplerCustomBorderColorCreateInfoEXT,
}

impl SamplerCustomBorderColorCreateInfoEXTBuilder {
    #[inline]
    pub fn custom_border_color(mut self, custom_border_color: ClearColorValue) -> Self {
        self.value.custom_border_color = custom_border_color;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerCustomBorderColorCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for SamplerCustomBorderColorCreateInfoEXTBuilder {
    type Target = SamplerCustomBorderColorCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerCustomBorderColorCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerCustomBorderColorCreateInfoEXTBuilder {
    type Target = SamplerCustomBorderColorCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerReductionModeCreateInfo {
    type Target = SamplerReductionModeCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerReductionModeCreateInfo {
    type Builder = SamplerReductionModeCreateInfoBuilder;
}

/// A builder for a [`SamplerReductionModeCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerReductionModeCreateInfoBuilder {
    value: SamplerReductionModeCreateInfo,
}

impl SamplerReductionModeCreateInfoBuilder {
    #[inline]
    pub fn reduction_mode(mut self, reduction_mode: SamplerReductionMode) -> Self {
        self.value.reduction_mode = reduction_mode;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerReductionModeCreateInfo {
        self.value
    }
}

impl ops::Deref for SamplerReductionModeCreateInfoBuilder {
    type Target = SamplerReductionModeCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerReductionModeCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerReductionModeCreateInfoBuilder {
    type Target = SamplerReductionModeCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SamplerYcbcrConversionCreateInfo`].
pub unsafe trait ExtendsSamplerYcbcrConversionCreateInfo: fmt::Debug {}
unsafe impl ExtendsSamplerYcbcrConversionCreateInfo for ExternalFormatANDROID {}
unsafe impl ExtendsSamplerYcbcrConversionCreateInfo for ExternalFormatQNX {}
unsafe impl ExtendsSamplerYcbcrConversionCreateInfo
    for SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM
{
}

unsafe impl Cast for SamplerYcbcrConversionCreateInfo {
    type Target = SamplerYcbcrConversionCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SamplerYcbcrConversionCreateInfo {
    type Builder = SamplerYcbcrConversionCreateInfoBuilder<'b>;
}

/// A builder for a [`SamplerYcbcrConversionCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerYcbcrConversionCreateInfoBuilder<'b> {
    value: SamplerYcbcrConversionCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SamplerYcbcrConversionCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSamplerYcbcrConversionCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn ycbcr_model(mut self, ycbcr_model: SamplerYcbcrModelConversion) -> Self {
        self.value.ycbcr_model = ycbcr_model;
        self
    }

    #[inline]
    pub fn ycbcr_range(mut self, ycbcr_range: SamplerYcbcrRange) -> Self {
        self.value.ycbcr_range = ycbcr_range;
        self
    }

    #[inline]
    pub fn components(mut self, components: impl Cast<Target = ComponentMapping>) -> Self {
        self.value.components = components.into();
        self
    }

    #[inline]
    pub fn x_chroma_offset(mut self, x_chroma_offset: ChromaLocation) -> Self {
        self.value.x_chroma_offset = x_chroma_offset;
        self
    }

    #[inline]
    pub fn y_chroma_offset(mut self, y_chroma_offset: ChromaLocation) -> Self {
        self.value.y_chroma_offset = y_chroma_offset;
        self
    }

    #[inline]
    pub fn chroma_filter(mut self, chroma_filter: Filter) -> Self {
        self.value.chroma_filter = chroma_filter;
        self
    }

    #[inline]
    pub fn force_explicit_reconstruction(mut self, force_explicit_reconstruction: bool) -> Self {
        self.value.force_explicit_reconstruction = force_explicit_reconstruction as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerYcbcrConversionCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for SamplerYcbcrConversionCreateInfoBuilder<'b> {
    type Target = SamplerYcbcrConversionCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SamplerYcbcrConversionCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SamplerYcbcrConversionCreateInfoBuilder<'b> {
    type Target = SamplerYcbcrConversionCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerYcbcrConversionImageFormatProperties {
    type Target = SamplerYcbcrConversionImageFormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerYcbcrConversionImageFormatProperties {
    type Builder = SamplerYcbcrConversionImageFormatPropertiesBuilder;
}

/// A builder for a [`SamplerYcbcrConversionImageFormatProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerYcbcrConversionImageFormatPropertiesBuilder {
    value: SamplerYcbcrConversionImageFormatProperties,
}

impl SamplerYcbcrConversionImageFormatPropertiesBuilder {
    #[inline]
    pub fn combined_image_sampler_descriptor_count(
        mut self,
        combined_image_sampler_descriptor_count: u32,
    ) -> Self {
        self.value.combined_image_sampler_descriptor_count =
            combined_image_sampler_descriptor_count;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerYcbcrConversionImageFormatProperties {
        self.value
    }
}

impl ops::Deref for SamplerYcbcrConversionImageFormatPropertiesBuilder {
    type Target = SamplerYcbcrConversionImageFormatProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerYcbcrConversionImageFormatPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerYcbcrConversionImageFormatPropertiesBuilder {
    type Target = SamplerYcbcrConversionImageFormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerYcbcrConversionInfo {
    type Target = SamplerYcbcrConversionInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerYcbcrConversionInfo {
    type Builder = SamplerYcbcrConversionInfoBuilder;
}

/// A builder for a [`SamplerYcbcrConversionInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerYcbcrConversionInfoBuilder {
    value: SamplerYcbcrConversionInfo,
}

impl SamplerYcbcrConversionInfoBuilder {
    #[inline]
    pub fn conversion(mut self, conversion: SamplerYcbcrConversion) -> Self {
        self.value.conversion = conversion;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerYcbcrConversionInfo {
        self.value
    }
}

impl ops::Deref for SamplerYcbcrConversionInfoBuilder {
    type Target = SamplerYcbcrConversionInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerYcbcrConversionInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerYcbcrConversionInfoBuilder {
    type Target = SamplerYcbcrConversionInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
    type Target = SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
    type Builder = SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMBuilder;
}

/// A builder for a [`SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMBuilder {
    value: SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
}

impl SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMBuilder {
    #[inline]
    pub fn enable_y_degamma(mut self, enable_y_degamma: bool) -> Self {
        self.value.enable_y_degamma = enable_y_degamma as Bool32;
        self
    }

    #[inline]
    pub fn enable_cb_cr_degamma(mut self, enable_cb_cr_degamma: bool) -> Self {
        self.value.enable_cb_cr_degamma = enable_cb_cr_degamma as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
        self.value
    }
}

impl ops::Deref for SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMBuilder {
    type Target = SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMBuilder {
    type Target = SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SciSyncAttributesInfoNV {
    type Target = SciSyncAttributesInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SciSyncAttributesInfoNV {
    type Builder = SciSyncAttributesInfoNVBuilder;
}

/// A builder for a [`SciSyncAttributesInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SciSyncAttributesInfoNVBuilder {
    value: SciSyncAttributesInfoNV,
}

impl SciSyncAttributesInfoNVBuilder {
    #[inline]
    pub fn client_type(mut self, client_type: SciSyncClientTypeNV) -> Self {
        self.value.client_type = client_type;
        self
    }

    #[inline]
    pub fn primitive_type(mut self, primitive_type: SciSyncPrimitiveTypeNV) -> Self {
        self.value.primitive_type = primitive_type;
        self
    }

    #[inline]
    pub fn build(self) -> SciSyncAttributesInfoNV {
        self.value
    }
}

impl ops::Deref for SciSyncAttributesInfoNVBuilder {
    type Target = SciSyncAttributesInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SciSyncAttributesInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SciSyncAttributesInfoNVBuilder {
    type Target = SciSyncAttributesInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ScreenBufferFormatPropertiesQNX {
    type Target = ScreenBufferFormatPropertiesQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ScreenBufferFormatPropertiesQNX {
    type Builder = ScreenBufferFormatPropertiesQNXBuilder;
}

/// A builder for a [`ScreenBufferFormatPropertiesQNX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ScreenBufferFormatPropertiesQNXBuilder {
    value: ScreenBufferFormatPropertiesQNX,
}

impl ScreenBufferFormatPropertiesQNXBuilder {
    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn external_format(mut self, external_format: u64) -> Self {
        self.value.external_format = external_format;
        self
    }

    #[inline]
    pub fn screen_usage(mut self, screen_usage: u64) -> Self {
        self.value.screen_usage = screen_usage;
        self
    }

    #[inline]
    pub fn format_features(mut self, format_features: FormatFeatureFlags) -> Self {
        self.value.format_features = format_features;
        self
    }

    #[inline]
    pub fn sampler_ycbcr_conversion_components(
        mut self,
        sampler_ycbcr_conversion_components: impl Cast<Target = ComponentMapping>,
    ) -> Self {
        self.value.sampler_ycbcr_conversion_components = sampler_ycbcr_conversion_components.into();
        self
    }

    #[inline]
    pub fn suggested_ycbcr_model(
        mut self,
        suggested_ycbcr_model: SamplerYcbcrModelConversion,
    ) -> Self {
        self.value.suggested_ycbcr_model = suggested_ycbcr_model;
        self
    }

    #[inline]
    pub fn suggested_ycbcr_range(mut self, suggested_ycbcr_range: SamplerYcbcrRange) -> Self {
        self.value.suggested_ycbcr_range = suggested_ycbcr_range;
        self
    }

    #[inline]
    pub fn suggested_x_chroma_offset(mut self, suggested_x_chroma_offset: ChromaLocation) -> Self {
        self.value.suggested_x_chroma_offset = suggested_x_chroma_offset;
        self
    }

    #[inline]
    pub fn suggested_y_chroma_offset(mut self, suggested_y_chroma_offset: ChromaLocation) -> Self {
        self.value.suggested_y_chroma_offset = suggested_y_chroma_offset;
        self
    }

    #[inline]
    pub fn build(self) -> ScreenBufferFormatPropertiesQNX {
        self.value
    }
}

impl ops::Deref for ScreenBufferFormatPropertiesQNXBuilder {
    type Target = ScreenBufferFormatPropertiesQNX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ScreenBufferFormatPropertiesQNXBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ScreenBufferFormatPropertiesQNXBuilder {
    type Target = ScreenBufferFormatPropertiesQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ScreenBufferPropertiesQNX`].
pub unsafe trait ExtendsScreenBufferPropertiesQNX: fmt::Debug {}
unsafe impl ExtendsScreenBufferPropertiesQNX for ScreenBufferFormatPropertiesQNX {}

unsafe impl Cast for ScreenBufferPropertiesQNX {
    type Target = ScreenBufferPropertiesQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ScreenBufferPropertiesQNX {
    type Builder = ScreenBufferPropertiesQNXBuilder<'b>;
}

/// A builder for a [`ScreenBufferPropertiesQNX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ScreenBufferPropertiesQNXBuilder<'b> {
    value: ScreenBufferPropertiesQNX,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ScreenBufferPropertiesQNXBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsScreenBufferPropertiesQNX,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn allocation_size(mut self, allocation_size: DeviceSize) -> Self {
        self.value.allocation_size = allocation_size;
        self
    }

    #[inline]
    pub fn memory_type_bits(mut self, memory_type_bits: u32) -> Self {
        self.value.memory_type_bits = memory_type_bits;
        self
    }

    #[inline]
    pub fn build(self) -> ScreenBufferPropertiesQNX {
        self.value
    }
}

impl<'b> ops::Deref for ScreenBufferPropertiesQNXBuilder<'b> {
    type Target = ScreenBufferPropertiesQNX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ScreenBufferPropertiesQNXBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ScreenBufferPropertiesQNXBuilder<'b> {
    type Target = ScreenBufferPropertiesQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ScreenSurfaceCreateInfoQNX {
    type Target = ScreenSurfaceCreateInfoQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ScreenSurfaceCreateInfoQNX {
    type Builder = ScreenSurfaceCreateInfoQNXBuilder<'b>;
}

/// A builder for a [`ScreenSurfaceCreateInfoQNX`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ScreenSurfaceCreateInfoQNXBuilder<'b> {
    value: ScreenSurfaceCreateInfoQNX,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ScreenSurfaceCreateInfoQNXBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: ScreenSurfaceCreateFlagsQNX) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn context(mut self, context: *mut _screen_context) -> Self {
        self.value.context = context;
        self
    }

    #[inline]
    pub fn window(mut self, window: *mut _screen_window) -> Self {
        self.value.window = window;
        self
    }

    #[inline]
    pub fn build(self) -> ScreenSurfaceCreateInfoQNX {
        self.value
    }
}

impl<'b> ops::Deref for ScreenSurfaceCreateInfoQNXBuilder<'b> {
    type Target = ScreenSurfaceCreateInfoQNX;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ScreenSurfaceCreateInfoQNXBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ScreenSurfaceCreateInfoQNXBuilder<'b> {
    type Target = ScreenSurfaceCreateInfoQNX;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SemaphoreCreateInfo`].
pub unsafe trait ExtendsSemaphoreCreateInfo: fmt::Debug {}
unsafe impl ExtendsSemaphoreCreateInfo for ExportMetalObjectCreateInfoEXT {}
unsafe impl ExtendsSemaphoreCreateInfo for ExportSemaphoreCreateInfo {}
unsafe impl ExtendsSemaphoreCreateInfo for ExportSemaphoreSciSyncInfoNV {}
unsafe impl ExtendsSemaphoreCreateInfo for ExportSemaphoreWin32HandleInfoKHR {}
unsafe impl ExtendsSemaphoreCreateInfo for ImportMetalSharedEventInfoEXT {}
unsafe impl ExtendsSemaphoreCreateInfo for QueryLowLatencySupportNV {}
unsafe impl ExtendsSemaphoreCreateInfo for SemaphoreSciSyncCreateInfoNV {}
unsafe impl ExtendsSemaphoreCreateInfo for SemaphoreTypeCreateInfo {}

unsafe impl Cast for SemaphoreCreateInfo {
    type Target = SemaphoreCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SemaphoreCreateInfo {
    type Builder = SemaphoreCreateInfoBuilder<'b>;
}

/// A builder for a [`SemaphoreCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreCreateInfoBuilder<'b> {
    value: SemaphoreCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SemaphoreCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSemaphoreCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SemaphoreCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for SemaphoreCreateInfoBuilder<'b> {
    type Target = SemaphoreCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SemaphoreCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SemaphoreCreateInfoBuilder<'b> {
    type Target = SemaphoreCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreGetFdInfoKHR {
    type Target = SemaphoreGetFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SemaphoreGetFdInfoKHR {
    type Builder = SemaphoreGetFdInfoKHRBuilder;
}

/// A builder for a [`SemaphoreGetFdInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreGetFdInfoKHRBuilder {
    value: SemaphoreGetFdInfoKHR,
}

impl SemaphoreGetFdInfoKHRBuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreGetFdInfoKHR {
        self.value
    }
}

impl ops::Deref for SemaphoreGetFdInfoKHRBuilder {
    type Target = SemaphoreGetFdInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SemaphoreGetFdInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SemaphoreGetFdInfoKHRBuilder {
    type Target = SemaphoreGetFdInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreGetSciSyncInfoNV {
    type Target = SemaphoreGetSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SemaphoreGetSciSyncInfoNV {
    type Builder = SemaphoreGetSciSyncInfoNVBuilder;
}

/// A builder for a [`SemaphoreGetSciSyncInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreGetSciSyncInfoNVBuilder {
    value: SemaphoreGetSciSyncInfoNV,
}

impl SemaphoreGetSciSyncInfoNVBuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreGetSciSyncInfoNV {
        self.value
    }
}

impl ops::Deref for SemaphoreGetSciSyncInfoNVBuilder {
    type Target = SemaphoreGetSciSyncInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SemaphoreGetSciSyncInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SemaphoreGetSciSyncInfoNVBuilder {
    type Target = SemaphoreGetSciSyncInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreGetWin32HandleInfoKHR {
    type Target = SemaphoreGetWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SemaphoreGetWin32HandleInfoKHR {
    type Builder = SemaphoreGetWin32HandleInfoKHRBuilder;
}

/// A builder for a [`SemaphoreGetWin32HandleInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreGetWin32HandleInfoKHRBuilder {
    value: SemaphoreGetWin32HandleInfoKHR,
}

impl SemaphoreGetWin32HandleInfoKHRBuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreGetWin32HandleInfoKHR {
        self.value
    }
}

impl ops::Deref for SemaphoreGetWin32HandleInfoKHRBuilder {
    type Target = SemaphoreGetWin32HandleInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SemaphoreGetWin32HandleInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SemaphoreGetWin32HandleInfoKHRBuilder {
    type Target = SemaphoreGetWin32HandleInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreGetZirconHandleInfoFUCHSIA {
    type Target = SemaphoreGetZirconHandleInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SemaphoreGetZirconHandleInfoFUCHSIA {
    type Builder = SemaphoreGetZirconHandleInfoFUCHSIABuilder;
}

/// A builder for a [`SemaphoreGetZirconHandleInfoFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreGetZirconHandleInfoFUCHSIABuilder {
    value: SemaphoreGetZirconHandleInfoFUCHSIA,
}

impl SemaphoreGetZirconHandleInfoFUCHSIABuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn handle_type(mut self, handle_type: ExternalSemaphoreHandleTypeFlags) -> Self {
        self.value.handle_type = handle_type;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreGetZirconHandleInfoFUCHSIA {
        self.value
    }
}

impl ops::Deref for SemaphoreGetZirconHandleInfoFUCHSIABuilder {
    type Target = SemaphoreGetZirconHandleInfoFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SemaphoreGetZirconHandleInfoFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SemaphoreGetZirconHandleInfoFUCHSIABuilder {
    type Target = SemaphoreGetZirconHandleInfoFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreSciSyncCreateInfoNV {
    type Target = SemaphoreSciSyncCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SemaphoreSciSyncCreateInfoNV {
    type Builder = SemaphoreSciSyncCreateInfoNVBuilder<'b>;
}

/// A builder for a [`SemaphoreSciSyncCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreSciSyncCreateInfoNVBuilder<'b> {
    value: SemaphoreSciSyncCreateInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SemaphoreSciSyncCreateInfoNVBuilder<'b> {
    #[inline]
    pub fn semaphore_pool(mut self, semaphore_pool: SemaphoreSciSyncPoolNV) -> Self {
        self.value.semaphore_pool = semaphore_pool;
        self
    }

    #[inline]
    pub fn fence(mut self, fence: &'b NvSciSyncFence) -> Self {
        self.value.fence = fence as *const NvSciSyncFence;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreSciSyncCreateInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for SemaphoreSciSyncCreateInfoNVBuilder<'b> {
    type Target = SemaphoreSciSyncCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SemaphoreSciSyncCreateInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SemaphoreSciSyncCreateInfoNVBuilder<'b> {
    type Target = SemaphoreSciSyncCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreSciSyncPoolCreateInfoNV {
    type Target = SemaphoreSciSyncPoolCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SemaphoreSciSyncPoolCreateInfoNV {
    type Builder = SemaphoreSciSyncPoolCreateInfoNVBuilder;
}

/// A builder for a [`SemaphoreSciSyncPoolCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreSciSyncPoolCreateInfoNVBuilder {
    value: SemaphoreSciSyncPoolCreateInfoNV,
}

impl SemaphoreSciSyncPoolCreateInfoNVBuilder {
    #[inline]
    pub fn handle(mut self, handle: NvSciSyncObj) -> Self {
        self.value.handle = handle;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreSciSyncPoolCreateInfoNV {
        self.value
    }
}

impl ops::Deref for SemaphoreSciSyncPoolCreateInfoNVBuilder {
    type Target = SemaphoreSciSyncPoolCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SemaphoreSciSyncPoolCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SemaphoreSciSyncPoolCreateInfoNVBuilder {
    type Target = SemaphoreSciSyncPoolCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreSignalInfo {
    type Target = SemaphoreSignalInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SemaphoreSignalInfo {
    type Builder = SemaphoreSignalInfoBuilder;
}

/// A builder for a [`SemaphoreSignalInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreSignalInfoBuilder {
    value: SemaphoreSignalInfo,
}

impl SemaphoreSignalInfoBuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn value(mut self, value: u64) -> Self {
        self.value.value = value;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreSignalInfo {
        self.value
    }
}

impl ops::Deref for SemaphoreSignalInfoBuilder {
    type Target = SemaphoreSignalInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SemaphoreSignalInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SemaphoreSignalInfoBuilder {
    type Target = SemaphoreSignalInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreSubmitInfo {
    type Target = SemaphoreSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SemaphoreSubmitInfo {
    type Builder = SemaphoreSubmitInfoBuilder;
}

/// A builder for a [`SemaphoreSubmitInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreSubmitInfoBuilder {
    value: SemaphoreSubmitInfo,
}

impl SemaphoreSubmitInfoBuilder {
    #[inline]
    pub fn semaphore(mut self, semaphore: Semaphore) -> Self {
        self.value.semaphore = semaphore;
        self
    }

    #[inline]
    pub fn value(mut self, value: u64) -> Self {
        self.value.value = value;
        self
    }

    #[inline]
    pub fn stage_mask(mut self, stage_mask: PipelineStageFlags2) -> Self {
        self.value.stage_mask = stage_mask;
        self
    }

    #[inline]
    pub fn device_index(mut self, device_index: u32) -> Self {
        self.value.device_index = device_index;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreSubmitInfo {
        self.value
    }
}

impl ops::Deref for SemaphoreSubmitInfoBuilder {
    type Target = SemaphoreSubmitInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SemaphoreSubmitInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SemaphoreSubmitInfoBuilder {
    type Target = SemaphoreSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreTypeCreateInfo {
    type Target = SemaphoreTypeCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SemaphoreTypeCreateInfo {
    type Builder = SemaphoreTypeCreateInfoBuilder;
}

/// A builder for a [`SemaphoreTypeCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreTypeCreateInfoBuilder {
    value: SemaphoreTypeCreateInfo,
}

impl SemaphoreTypeCreateInfoBuilder {
    #[inline]
    pub fn semaphore_type(mut self, semaphore_type: SemaphoreType) -> Self {
        self.value.semaphore_type = semaphore_type;
        self
    }

    #[inline]
    pub fn initial_value(mut self, initial_value: u64) -> Self {
        self.value.initial_value = initial_value;
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreTypeCreateInfo {
        self.value
    }
}

impl ops::Deref for SemaphoreTypeCreateInfoBuilder {
    type Target = SemaphoreTypeCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SemaphoreTypeCreateInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SemaphoreTypeCreateInfoBuilder {
    type Target = SemaphoreTypeCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SemaphoreWaitInfo {
    type Target = SemaphoreWaitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SemaphoreWaitInfo {
    type Builder = SemaphoreWaitInfoBuilder<'b>;
}

/// A builder for a [`SemaphoreWaitInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SemaphoreWaitInfoBuilder<'b> {
    value: SemaphoreWaitInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SemaphoreWaitInfoBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: SemaphoreWaitFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn semaphores(mut self, semaphores: &'b [Semaphore]) -> Self {
        self.value.semaphore_count = semaphores.len() as u32;
        self.value.semaphores = semaphores.as_ptr();
        self
    }

    #[inline]
    pub fn values(mut self, values: &'b [u64]) -> Self {
        self.value.semaphore_count = values.len() as u32;
        self.value.values = values.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SemaphoreWaitInfo {
        self.value
    }
}

impl<'b> ops::Deref for SemaphoreWaitInfoBuilder<'b> {
    type Target = SemaphoreWaitInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SemaphoreWaitInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SemaphoreWaitInfoBuilder<'b> {
    type Target = SemaphoreWaitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SetDescriptorBufferOffsetsInfoEXT`].
pub unsafe trait ExtendsSetDescriptorBufferOffsetsInfoEXT: fmt::Debug {}
unsafe impl ExtendsSetDescriptorBufferOffsetsInfoEXT for PipelineLayoutCreateInfo {}

unsafe impl Cast for SetDescriptorBufferOffsetsInfoEXT {
    type Target = SetDescriptorBufferOffsetsInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SetDescriptorBufferOffsetsInfoEXT {
    type Builder = SetDescriptorBufferOffsetsInfoEXTBuilder<'b>;
}

/// A builder for a [`SetDescriptorBufferOffsetsInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SetDescriptorBufferOffsetsInfoEXTBuilder<'b> {
    value: SetDescriptorBufferOffsetsInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SetDescriptorBufferOffsetsInfoEXTBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSetDescriptorBufferOffsetsInfoEXT,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn stage_flags(mut self, stage_flags: ShaderStageFlags) -> Self {
        self.value.stage_flags = stage_flags;
        self
    }

    #[inline]
    pub fn layout(mut self, layout: PipelineLayout) -> Self {
        self.value.layout = layout;
        self
    }

    #[inline]
    pub fn first_set(mut self, first_set: u32) -> Self {
        self.value.first_set = first_set;
        self
    }

    #[inline]
    pub fn buffer_indices(mut self, buffer_indices: &'b [u32]) -> Self {
        self.value.set_count = buffer_indices.len() as u32;
        self.value.buffer_indices = buffer_indices.as_ptr();
        self
    }

    #[inline]
    pub fn offsets(mut self, offsets: &'b [DeviceSize]) -> Self {
        self.value.set_count = offsets.len() as u32;
        self.value.offsets = offsets.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SetDescriptorBufferOffsetsInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for SetDescriptorBufferOffsetsInfoEXTBuilder<'b> {
    type Target = SetDescriptorBufferOffsetsInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SetDescriptorBufferOffsetsInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SetDescriptorBufferOffsetsInfoEXTBuilder<'b> {
    type Target = SetDescriptorBufferOffsetsInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SetLatencyMarkerInfoNV {
    type Target = SetLatencyMarkerInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SetLatencyMarkerInfoNV {
    type Builder = SetLatencyMarkerInfoNVBuilder;
}

/// A builder for a [`SetLatencyMarkerInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SetLatencyMarkerInfoNVBuilder {
    value: SetLatencyMarkerInfoNV,
}

impl SetLatencyMarkerInfoNVBuilder {
    #[inline]
    pub fn present_id(mut self, present_id: u64) -> Self {
        self.value.present_id = present_id;
        self
    }

    #[inline]
    pub fn marker(mut self, marker: LatencyMarkerNV) -> Self {
        self.value.marker = marker;
        self
    }

    #[inline]
    pub fn build(self) -> SetLatencyMarkerInfoNV {
        self.value
    }
}

impl ops::Deref for SetLatencyMarkerInfoNVBuilder {
    type Target = SetLatencyMarkerInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SetLatencyMarkerInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SetLatencyMarkerInfoNVBuilder {
    type Target = SetLatencyMarkerInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SetStateFlagsIndirectCommandNV {
    type Target = SetStateFlagsIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SetStateFlagsIndirectCommandNV {
    type Builder = SetStateFlagsIndirectCommandNVBuilder;
}

/// A builder for a [`SetStateFlagsIndirectCommandNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SetStateFlagsIndirectCommandNVBuilder {
    value: SetStateFlagsIndirectCommandNV,
}

impl SetStateFlagsIndirectCommandNVBuilder {
    #[inline]
    pub fn data(mut self, data: u32) -> Self {
        self.value.data = data;
        self
    }

    #[inline]
    pub fn build(self) -> SetStateFlagsIndirectCommandNV {
        self.value
    }
}

impl ops::Deref for SetStateFlagsIndirectCommandNVBuilder {
    type Target = SetStateFlagsIndirectCommandNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SetStateFlagsIndirectCommandNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SetStateFlagsIndirectCommandNVBuilder {
    type Target = SetStateFlagsIndirectCommandNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ShaderCreateInfoEXT`].
pub unsafe trait ExtendsShaderCreateInfoEXT: fmt::Debug {}
unsafe impl ExtendsShaderCreateInfoEXT for PipelineShaderStageRequiredSubgroupSizeCreateInfo {}
unsafe impl ExtendsShaderCreateInfoEXT for ValidationFeaturesEXT {}

unsafe impl Cast for ShaderCreateInfoEXT {
    type Target = ShaderCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ShaderCreateInfoEXT {
    type Builder = ShaderCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`ShaderCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ShaderCreateInfoEXTBuilder<'b> {
    value: ShaderCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ShaderCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsShaderCreateInfoEXT,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: ShaderCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn stage(mut self, stage: ShaderStageFlags) -> Self {
        self.value.stage = stage;
        self
    }

    #[inline]
    pub fn next_stage(mut self, next_stage: ShaderStageFlags) -> Self {
        self.value.next_stage = next_stage;
        self
    }

    #[inline]
    pub fn code_type(mut self, code_type: ShaderCodeTypeEXT) -> Self {
        self.value.code_type = code_type;
        self
    }

    #[inline]
    pub fn code(mut self, code: &'b [u8]) -> Self {
        self.value.code_size = code.len() as usize;
        self.value.code = code.as_ptr().cast();
        self
    }

    #[inline]
    pub fn name(mut self, name: &'b [u8]) -> Self {
        self.value.name = name.as_ptr().cast();
        self
    }

    #[inline]
    pub fn set_layout_count(mut self, set_layout_count: u32) -> Self {
        self.value.set_layout_count = set_layout_count;
        self
    }

    #[inline]
    pub fn set_layouts(mut self, set_layouts: &'b [DescriptorSetLayout]) -> Self {
        self.value.set_layout_count = set_layouts.len() as u32;
        self.value.set_layouts = set_layouts.as_ptr();
        self
    }

    #[inline]
    pub fn push_constant_range_count(mut self, push_constant_range_count: u32) -> Self {
        self.value.push_constant_range_count = push_constant_range_count;
        self
    }

    #[inline]
    pub fn push_constant_ranges(
        mut self,
        push_constant_ranges: &'b [impl Cast<Target = PushConstantRange>],
    ) -> Self {
        self.value.push_constant_range_count = push_constant_ranges.len() as u32;
        self.value.push_constant_ranges = push_constant_ranges.as_ptr().cast();
        self
    }

    #[inline]
    pub fn specialization_info(
        mut self,
        specialization_info: &'b impl Cast<Target = SpecializationInfo>,
    ) -> Self {
        self.value.specialization_info = specialization_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> ShaderCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for ShaderCreateInfoEXTBuilder<'b> {
    type Target = ShaderCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ShaderCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ShaderCreateInfoEXTBuilder<'b> {
    type Target = ShaderCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`ShaderModuleCreateInfo`].
pub unsafe trait ExtendsShaderModuleCreateInfo: fmt::Debug {}
unsafe impl ExtendsShaderModuleCreateInfo for ShaderModuleValidationCacheCreateInfoEXT {}
unsafe impl ExtendsShaderModuleCreateInfo for ValidationFeaturesEXT {}

unsafe impl Cast for ShaderModuleCreateInfo {
    type Target = ShaderModuleCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ShaderModuleCreateInfo {
    type Builder = ShaderModuleCreateInfoBuilder<'b>;
}

/// A builder for a [`ShaderModuleCreateInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ShaderModuleCreateInfoBuilder<'b> {
    value: ShaderModuleCreateInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ShaderModuleCreateInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsShaderModuleCreateInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: ShaderModuleCreateFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn code_size(mut self, code_size: usize) -> Self {
        self.value.code_size = code_size;
        self
    }

    #[inline]
    pub fn code(mut self, code: &'b [u32]) -> Self {
        self.value.code = code.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> ShaderModuleCreateInfo {
        self.value
    }
}

impl<'b> ops::Deref for ShaderModuleCreateInfoBuilder<'b> {
    type Target = ShaderModuleCreateInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ShaderModuleCreateInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ShaderModuleCreateInfoBuilder<'b> {
    type Target = ShaderModuleCreateInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ShaderModuleIdentifierEXT {
    type Target = ShaderModuleIdentifierEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ShaderModuleIdentifierEXT {
    type Builder = ShaderModuleIdentifierEXTBuilder;
}

/// A builder for a [`ShaderModuleIdentifierEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ShaderModuleIdentifierEXTBuilder {
    value: ShaderModuleIdentifierEXT,
}

impl ShaderModuleIdentifierEXTBuilder {
    #[inline]
    pub fn identifier_size(mut self, identifier_size: u32) -> Self {
        self.value.identifier_size = identifier_size;
        self
    }

    #[inline]
    pub fn identifier(
        mut self,
        identifier: impl Into<ByteArray<MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT>>,
    ) -> Self {
        self.value.identifier = identifier.into();
        self
    }

    #[inline]
    pub fn build(self) -> ShaderModuleIdentifierEXT {
        self.value
    }
}

impl ops::Deref for ShaderModuleIdentifierEXTBuilder {
    type Target = ShaderModuleIdentifierEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ShaderModuleIdentifierEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ShaderModuleIdentifierEXTBuilder {
    type Target = ShaderModuleIdentifierEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ShaderModuleValidationCacheCreateInfoEXT {
    type Target = ShaderModuleValidationCacheCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ShaderModuleValidationCacheCreateInfoEXT {
    type Builder = ShaderModuleValidationCacheCreateInfoEXTBuilder;
}

/// A builder for a [`ShaderModuleValidationCacheCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ShaderModuleValidationCacheCreateInfoEXTBuilder {
    value: ShaderModuleValidationCacheCreateInfoEXT,
}

impl ShaderModuleValidationCacheCreateInfoEXTBuilder {
    #[inline]
    pub fn validation_cache(mut self, validation_cache: ValidationCacheEXT) -> Self {
        self.value.validation_cache = validation_cache;
        self
    }

    #[inline]
    pub fn build(self) -> ShaderModuleValidationCacheCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for ShaderModuleValidationCacheCreateInfoEXTBuilder {
    type Target = ShaderModuleValidationCacheCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ShaderModuleValidationCacheCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ShaderModuleValidationCacheCreateInfoEXTBuilder {
    type Target = ShaderModuleValidationCacheCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ShaderResourceUsageAMD {
    type Target = ShaderResourceUsageAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ShaderResourceUsageAMD {
    type Builder = ShaderResourceUsageAMDBuilder;
}

/// A builder for a [`ShaderResourceUsageAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ShaderResourceUsageAMDBuilder {
    value: ShaderResourceUsageAMD,
}

impl ShaderResourceUsageAMDBuilder {
    #[inline]
    pub fn num_used_vgprs(mut self, num_used_vgprs: u32) -> Self {
        self.value.num_used_vgprs = num_used_vgprs;
        self
    }

    #[inline]
    pub fn num_used_sgprs(mut self, num_used_sgprs: u32) -> Self {
        self.value.num_used_sgprs = num_used_sgprs;
        self
    }

    #[inline]
    pub fn lds_size_per_local_work_group(mut self, lds_size_per_local_work_group: u32) -> Self {
        self.value.lds_size_per_local_work_group = lds_size_per_local_work_group;
        self
    }

    #[inline]
    pub fn lds_usage_size_in_bytes(mut self, lds_usage_size_in_bytes: usize) -> Self {
        self.value.lds_usage_size_in_bytes = lds_usage_size_in_bytes;
        self
    }

    #[inline]
    pub fn scratch_mem_usage_in_bytes(mut self, scratch_mem_usage_in_bytes: usize) -> Self {
        self.value.scratch_mem_usage_in_bytes = scratch_mem_usage_in_bytes;
        self
    }

    #[inline]
    pub fn build(self) -> ShaderResourceUsageAMD {
        self.value
    }
}

impl ops::Deref for ShaderResourceUsageAMDBuilder {
    type Target = ShaderResourceUsageAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ShaderResourceUsageAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ShaderResourceUsageAMDBuilder {
    type Target = ShaderResourceUsageAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ShaderStatisticsInfoAMD {
    type Target = ShaderStatisticsInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ShaderStatisticsInfoAMD {
    type Builder = ShaderStatisticsInfoAMDBuilder;
}

/// A builder for a [`ShaderStatisticsInfoAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ShaderStatisticsInfoAMDBuilder {
    value: ShaderStatisticsInfoAMD,
}

impl ShaderStatisticsInfoAMDBuilder {
    #[inline]
    pub fn shader_stage_mask(mut self, shader_stage_mask: ShaderStageFlags) -> Self {
        self.value.shader_stage_mask = shader_stage_mask;
        self
    }

    #[inline]
    pub fn resource_usage(
        mut self,
        resource_usage: impl Cast<Target = ShaderResourceUsageAMD>,
    ) -> Self {
        self.value.resource_usage = resource_usage.into();
        self
    }

    #[inline]
    pub fn num_physical_vgprs(mut self, num_physical_vgprs: u32) -> Self {
        self.value.num_physical_vgprs = num_physical_vgprs;
        self
    }

    #[inline]
    pub fn num_physical_sgprs(mut self, num_physical_sgprs: u32) -> Self {
        self.value.num_physical_sgprs = num_physical_sgprs;
        self
    }

    #[inline]
    pub fn num_available_vgprs(mut self, num_available_vgprs: u32) -> Self {
        self.value.num_available_vgprs = num_available_vgprs;
        self
    }

    #[inline]
    pub fn num_available_sgprs(mut self, num_available_sgprs: u32) -> Self {
        self.value.num_available_sgprs = num_available_sgprs;
        self
    }

    #[inline]
    pub fn compute_work_group_size(mut self, compute_work_group_size: [u32; 3]) -> Self {
        self.value.compute_work_group_size = compute_work_group_size;
        self
    }

    #[inline]
    pub fn build(self) -> ShaderStatisticsInfoAMD {
        self.value
    }
}

impl ops::Deref for ShaderStatisticsInfoAMDBuilder {
    type Target = ShaderStatisticsInfoAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ShaderStatisticsInfoAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ShaderStatisticsInfoAMDBuilder {
    type Target = ShaderStatisticsInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ShadingRatePaletteNV {
    type Target = ShadingRatePaletteNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ShadingRatePaletteNV {
    type Builder = ShadingRatePaletteNVBuilder<'b>;
}

/// A builder for a [`ShadingRatePaletteNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ShadingRatePaletteNVBuilder<'b> {
    value: ShadingRatePaletteNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ShadingRatePaletteNVBuilder<'b> {
    #[inline]
    pub fn shading_rate_palette_entries(
        mut self,
        shading_rate_palette_entries: &'b [ShadingRatePaletteEntryNV],
    ) -> Self {
        self.value.shading_rate_palette_entry_count = shading_rate_palette_entries.len() as u32;
        self.value.shading_rate_palette_entries = shading_rate_palette_entries.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> ShadingRatePaletteNV {
        self.value
    }
}

impl<'b> ops::Deref for ShadingRatePaletteNVBuilder<'b> {
    type Target = ShadingRatePaletteNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ShadingRatePaletteNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ShadingRatePaletteNVBuilder<'b> {
    type Target = ShadingRatePaletteNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SharedPresentSurfaceCapabilitiesKHR {
    type Target = SharedPresentSurfaceCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SharedPresentSurfaceCapabilitiesKHR {
    type Builder = SharedPresentSurfaceCapabilitiesKHRBuilder;
}

/// A builder for a [`SharedPresentSurfaceCapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SharedPresentSurfaceCapabilitiesKHRBuilder {
    value: SharedPresentSurfaceCapabilitiesKHR,
}

impl SharedPresentSurfaceCapabilitiesKHRBuilder {
    #[inline]
    pub fn shared_present_supported_usage_flags(
        mut self,
        shared_present_supported_usage_flags: ImageUsageFlags,
    ) -> Self {
        self.value.shared_present_supported_usage_flags = shared_present_supported_usage_flags;
        self
    }

    #[inline]
    pub fn build(self) -> SharedPresentSurfaceCapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for SharedPresentSurfaceCapabilitiesKHRBuilder {
    type Target = SharedPresentSurfaceCapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SharedPresentSurfaceCapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SharedPresentSurfaceCapabilitiesKHRBuilder {
    type Target = SharedPresentSurfaceCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseBufferMemoryBindInfo {
    type Target = SparseBufferMemoryBindInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SparseBufferMemoryBindInfo {
    type Builder = SparseBufferMemoryBindInfoBuilder<'b>;
}

/// A builder for a [`SparseBufferMemoryBindInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseBufferMemoryBindInfoBuilder<'b> {
    value: SparseBufferMemoryBindInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SparseBufferMemoryBindInfoBuilder<'b> {
    #[inline]
    pub fn buffer(mut self, buffer: Buffer) -> Self {
        self.value.buffer = buffer;
        self
    }

    #[inline]
    pub fn binds(mut self, binds: &'b [impl Cast<Target = SparseMemoryBind>]) -> Self {
        self.value.bind_count = binds.len() as u32;
        self.value.binds = binds.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> SparseBufferMemoryBindInfo {
        self.value
    }
}

impl<'b> ops::Deref for SparseBufferMemoryBindInfoBuilder<'b> {
    type Target = SparseBufferMemoryBindInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SparseBufferMemoryBindInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SparseBufferMemoryBindInfoBuilder<'b> {
    type Target = SparseBufferMemoryBindInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseImageFormatProperties {
    type Target = SparseImageFormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SparseImageFormatProperties {
    type Builder = SparseImageFormatPropertiesBuilder;
}

/// A builder for a [`SparseImageFormatProperties`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseImageFormatPropertiesBuilder {
    value: SparseImageFormatProperties,
}

impl SparseImageFormatPropertiesBuilder {
    #[inline]
    pub fn aspect_mask(mut self, aspect_mask: ImageAspectFlags) -> Self {
        self.value.aspect_mask = aspect_mask;
        self
    }

    #[inline]
    pub fn image_granularity(mut self, image_granularity: impl Cast<Target = Extent3D>) -> Self {
        self.value.image_granularity = image_granularity.into();
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SparseImageFormatFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> SparseImageFormatProperties {
        self.value
    }
}

impl ops::Deref for SparseImageFormatPropertiesBuilder {
    type Target = SparseImageFormatProperties;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SparseImageFormatPropertiesBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SparseImageFormatPropertiesBuilder {
    type Target = SparseImageFormatProperties;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseImageFormatProperties2 {
    type Target = SparseImageFormatProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SparseImageFormatProperties2 {
    type Builder = SparseImageFormatProperties2Builder;
}

/// A builder for a [`SparseImageFormatProperties2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseImageFormatProperties2Builder {
    value: SparseImageFormatProperties2,
}

impl SparseImageFormatProperties2Builder {
    #[inline]
    pub fn properties(
        mut self,
        properties: impl Cast<Target = SparseImageFormatProperties>,
    ) -> Self {
        self.value.properties = properties.into();
        self
    }

    #[inline]
    pub fn build(self) -> SparseImageFormatProperties2 {
        self.value
    }
}

impl ops::Deref for SparseImageFormatProperties2Builder {
    type Target = SparseImageFormatProperties2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SparseImageFormatProperties2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SparseImageFormatProperties2Builder {
    type Target = SparseImageFormatProperties2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseImageMemoryBind {
    type Target = SparseImageMemoryBind;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SparseImageMemoryBind {
    type Builder = SparseImageMemoryBindBuilder;
}

/// A builder for a [`SparseImageMemoryBind`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseImageMemoryBindBuilder {
    value: SparseImageMemoryBind,
}

impl SparseImageMemoryBindBuilder {
    #[inline]
    pub fn subresource(mut self, subresource: impl Cast<Target = ImageSubresource>) -> Self {
        self.value.subresource = subresource.into();
        self
    }

    #[inline]
    pub fn offset(mut self, offset: impl Cast<Target = Offset3D>) -> Self {
        self.value.offset = offset.into();
        self
    }

    #[inline]
    pub fn extent(mut self, extent: impl Cast<Target = Extent3D>) -> Self {
        self.value.extent = extent.into();
        self
    }

    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn memory_offset(mut self, memory_offset: DeviceSize) -> Self {
        self.value.memory_offset = memory_offset;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SparseMemoryBindFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> SparseImageMemoryBind {
        self.value
    }
}

impl ops::Deref for SparseImageMemoryBindBuilder {
    type Target = SparseImageMemoryBind;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SparseImageMemoryBindBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SparseImageMemoryBindBuilder {
    type Target = SparseImageMemoryBind;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseImageMemoryBindInfo {
    type Target = SparseImageMemoryBindInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SparseImageMemoryBindInfo {
    type Builder = SparseImageMemoryBindInfoBuilder<'b>;
}

/// A builder for a [`SparseImageMemoryBindInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseImageMemoryBindInfoBuilder<'b> {
    value: SparseImageMemoryBindInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SparseImageMemoryBindInfoBuilder<'b> {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn binds(mut self, binds: &'b [impl Cast<Target = SparseImageMemoryBind>]) -> Self {
        self.value.bind_count = binds.len() as u32;
        self.value.binds = binds.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> SparseImageMemoryBindInfo {
        self.value
    }
}

impl<'b> ops::Deref for SparseImageMemoryBindInfoBuilder<'b> {
    type Target = SparseImageMemoryBindInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SparseImageMemoryBindInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SparseImageMemoryBindInfoBuilder<'b> {
    type Target = SparseImageMemoryBindInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseImageMemoryRequirements {
    type Target = SparseImageMemoryRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SparseImageMemoryRequirements {
    type Builder = SparseImageMemoryRequirementsBuilder;
}

/// A builder for a [`SparseImageMemoryRequirements`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseImageMemoryRequirementsBuilder {
    value: SparseImageMemoryRequirements,
}

impl SparseImageMemoryRequirementsBuilder {
    #[inline]
    pub fn format_properties(
        mut self,
        format_properties: impl Cast<Target = SparseImageFormatProperties>,
    ) -> Self {
        self.value.format_properties = format_properties.into();
        self
    }

    #[inline]
    pub fn image_mip_tail_first_lod(mut self, image_mip_tail_first_lod: u32) -> Self {
        self.value.image_mip_tail_first_lod = image_mip_tail_first_lod;
        self
    }

    #[inline]
    pub fn image_mip_tail_size(mut self, image_mip_tail_size: DeviceSize) -> Self {
        self.value.image_mip_tail_size = image_mip_tail_size;
        self
    }

    #[inline]
    pub fn image_mip_tail_offset(mut self, image_mip_tail_offset: DeviceSize) -> Self {
        self.value.image_mip_tail_offset = image_mip_tail_offset;
        self
    }

    #[inline]
    pub fn image_mip_tail_stride(mut self, image_mip_tail_stride: DeviceSize) -> Self {
        self.value.image_mip_tail_stride = image_mip_tail_stride;
        self
    }

    #[inline]
    pub fn build(self) -> SparseImageMemoryRequirements {
        self.value
    }
}

impl ops::Deref for SparseImageMemoryRequirementsBuilder {
    type Target = SparseImageMemoryRequirements;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SparseImageMemoryRequirementsBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SparseImageMemoryRequirementsBuilder {
    type Target = SparseImageMemoryRequirements;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseImageMemoryRequirements2 {
    type Target = SparseImageMemoryRequirements2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SparseImageMemoryRequirements2 {
    type Builder = SparseImageMemoryRequirements2Builder;
}

/// A builder for a [`SparseImageMemoryRequirements2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseImageMemoryRequirements2Builder {
    value: SparseImageMemoryRequirements2,
}

impl SparseImageMemoryRequirements2Builder {
    #[inline]
    pub fn memory_requirements(
        mut self,
        memory_requirements: impl Cast<Target = SparseImageMemoryRequirements>,
    ) -> Self {
        self.value.memory_requirements = memory_requirements.into();
        self
    }

    #[inline]
    pub fn build(self) -> SparseImageMemoryRequirements2 {
        self.value
    }
}

impl ops::Deref for SparseImageMemoryRequirements2Builder {
    type Target = SparseImageMemoryRequirements2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SparseImageMemoryRequirements2Builder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SparseImageMemoryRequirements2Builder {
    type Target = SparseImageMemoryRequirements2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseImageOpaqueMemoryBindInfo {
    type Target = SparseImageOpaqueMemoryBindInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SparseImageOpaqueMemoryBindInfo {
    type Builder = SparseImageOpaqueMemoryBindInfoBuilder<'b>;
}

/// A builder for a [`SparseImageOpaqueMemoryBindInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseImageOpaqueMemoryBindInfoBuilder<'b> {
    value: SparseImageOpaqueMemoryBindInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SparseImageOpaqueMemoryBindInfoBuilder<'b> {
    #[inline]
    pub fn image(mut self, image: Image) -> Self {
        self.value.image = image;
        self
    }

    #[inline]
    pub fn binds(mut self, binds: &'b [impl Cast<Target = SparseMemoryBind>]) -> Self {
        self.value.bind_count = binds.len() as u32;
        self.value.binds = binds.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> SparseImageOpaqueMemoryBindInfo {
        self.value
    }
}

impl<'b> ops::Deref for SparseImageOpaqueMemoryBindInfoBuilder<'b> {
    type Target = SparseImageOpaqueMemoryBindInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SparseImageOpaqueMemoryBindInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SparseImageOpaqueMemoryBindInfoBuilder<'b> {
    type Target = SparseImageOpaqueMemoryBindInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SparseMemoryBind {
    type Target = SparseMemoryBind;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SparseMemoryBind {
    type Builder = SparseMemoryBindBuilder;
}

/// A builder for a [`SparseMemoryBind`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SparseMemoryBindBuilder {
    value: SparseMemoryBind,
}

impl SparseMemoryBindBuilder {
    #[inline]
    pub fn resource_offset(mut self, resource_offset: DeviceSize) -> Self {
        self.value.resource_offset = resource_offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn memory(mut self, memory: DeviceMemory) -> Self {
        self.value.memory = memory;
        self
    }

    #[inline]
    pub fn memory_offset(mut self, memory_offset: DeviceSize) -> Self {
        self.value.memory_offset = memory_offset;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SparseMemoryBindFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> SparseMemoryBind {
        self.value
    }
}

impl ops::Deref for SparseMemoryBindBuilder {
    type Target = SparseMemoryBind;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SparseMemoryBindBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SparseMemoryBindBuilder {
    type Target = SparseMemoryBind;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SpecializationInfo {
    type Target = SpecializationInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SpecializationInfo {
    type Builder = SpecializationInfoBuilder<'b>;
}

/// A builder for a [`SpecializationInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SpecializationInfoBuilder<'b> {
    value: SpecializationInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SpecializationInfoBuilder<'b> {
    #[inline]
    pub fn map_entries(
        mut self,
        map_entries: &'b [impl Cast<Target = SpecializationMapEntry>],
    ) -> Self {
        self.value.map_entry_count = map_entries.len() as u32;
        self.value.map_entries = map_entries.as_ptr().cast();
        self
    }

    #[inline]
    pub fn data(mut self, data: &'b [u8]) -> Self {
        self.value.data_size = data.len() as usize;
        self.value.data = data.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> SpecializationInfo {
        self.value
    }
}

impl<'b> ops::Deref for SpecializationInfoBuilder<'b> {
    type Target = SpecializationInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SpecializationInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SpecializationInfoBuilder<'b> {
    type Target = SpecializationInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SpecializationMapEntry {
    type Target = SpecializationMapEntry;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SpecializationMapEntry {
    type Builder = SpecializationMapEntryBuilder;
}

/// A builder for a [`SpecializationMapEntry`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SpecializationMapEntryBuilder {
    value: SpecializationMapEntry,
}

impl SpecializationMapEntryBuilder {
    #[inline]
    pub fn constant_id(mut self, constant_id: u32) -> Self {
        self.value.constant_id = constant_id;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: u32) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: usize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> SpecializationMapEntry {
        self.value
    }
}

impl ops::Deref for SpecializationMapEntryBuilder {
    type Target = SpecializationMapEntry;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SpecializationMapEntryBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SpecializationMapEntryBuilder {
    type Target = SpecializationMapEntry;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for StencilOpState {
    type Target = StencilOpState;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for StencilOpState {
    type Builder = StencilOpStateBuilder;
}

/// A builder for a [`StencilOpState`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct StencilOpStateBuilder {
    value: StencilOpState,
}

impl StencilOpStateBuilder {
    #[inline]
    pub fn fail_op(mut self, fail_op: StencilOp) -> Self {
        self.value.fail_op = fail_op;
        self
    }

    #[inline]
    pub fn pass_op(mut self, pass_op: StencilOp) -> Self {
        self.value.pass_op = pass_op;
        self
    }

    #[inline]
    pub fn depth_fail_op(mut self, depth_fail_op: StencilOp) -> Self {
        self.value.depth_fail_op = depth_fail_op;
        self
    }

    #[inline]
    pub fn compare_op(mut self, compare_op: CompareOp) -> Self {
        self.value.compare_op = compare_op;
        self
    }

    #[inline]
    pub fn compare_mask(mut self, compare_mask: u32) -> Self {
        self.value.compare_mask = compare_mask;
        self
    }

    #[inline]
    pub fn write_mask(mut self, write_mask: u32) -> Self {
        self.value.write_mask = write_mask;
        self
    }

    #[inline]
    pub fn reference(mut self, reference: u32) -> Self {
        self.value.reference = reference;
        self
    }

    #[inline]
    pub fn build(self) -> StencilOpState {
        self.value
    }
}

impl ops::Deref for StencilOpStateBuilder {
    type Target = StencilOpState;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for StencilOpStateBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for StencilOpStateBuilder {
    type Target = StencilOpState;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for StreamDescriptorSurfaceCreateInfoGGP {
    type Target = StreamDescriptorSurfaceCreateInfoGGP;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for StreamDescriptorSurfaceCreateInfoGGP {
    type Builder = StreamDescriptorSurfaceCreateInfoGGPBuilder;
}

/// A builder for a [`StreamDescriptorSurfaceCreateInfoGGP`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct StreamDescriptorSurfaceCreateInfoGGPBuilder {
    value: StreamDescriptorSurfaceCreateInfoGGP,
}

impl StreamDescriptorSurfaceCreateInfoGGPBuilder {
    #[inline]
    pub fn flags(mut self, flags: StreamDescriptorSurfaceCreateFlagsGGP) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn stream_descriptor(mut self, stream_descriptor: GgpStreamDescriptor) -> Self {
        self.value.stream_descriptor = stream_descriptor;
        self
    }

    #[inline]
    pub fn build(self) -> StreamDescriptorSurfaceCreateInfoGGP {
        self.value
    }
}

impl ops::Deref for StreamDescriptorSurfaceCreateInfoGGPBuilder {
    type Target = StreamDescriptorSurfaceCreateInfoGGP;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for StreamDescriptorSurfaceCreateInfoGGPBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for StreamDescriptorSurfaceCreateInfoGGPBuilder {
    type Target = StreamDescriptorSurfaceCreateInfoGGP;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for StridedDeviceAddressRegionKHR {
    type Target = StridedDeviceAddressRegionKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for StridedDeviceAddressRegionKHR {
    type Builder = StridedDeviceAddressRegionKHRBuilder;
}

/// A builder for a [`StridedDeviceAddressRegionKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct StridedDeviceAddressRegionKHRBuilder {
    value: StridedDeviceAddressRegionKHR,
}

impl StridedDeviceAddressRegionKHRBuilder {
    #[inline]
    pub fn device_address(mut self, device_address: DeviceAddress) -> Self {
        self.value.device_address = device_address;
        self
    }

    #[inline]
    pub fn stride(mut self, stride: DeviceSize) -> Self {
        self.value.stride = stride;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> StridedDeviceAddressRegionKHR {
        self.value
    }
}

impl ops::Deref for StridedDeviceAddressRegionKHRBuilder {
    type Target = StridedDeviceAddressRegionKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for StridedDeviceAddressRegionKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for StridedDeviceAddressRegionKHRBuilder {
    type Target = StridedDeviceAddressRegionKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SubmitInfo`].
pub unsafe trait ExtendsSubmitInfo: fmt::Debug {}
unsafe impl ExtendsSubmitInfo for AmigoProfilingSubmitInfoSEC {}
unsafe impl ExtendsSubmitInfo for D3D12FenceSubmitInfoKHR {}
unsafe impl ExtendsSubmitInfo for DeviceGroupSubmitInfo {}
unsafe impl ExtendsSubmitInfo for FrameBoundaryEXT {}
unsafe impl ExtendsSubmitInfo for LatencySubmissionPresentIdNV {}
unsafe impl ExtendsSubmitInfo for PerformanceQuerySubmitInfoKHR {}
unsafe impl ExtendsSubmitInfo for ProtectedSubmitInfo {}
unsafe impl ExtendsSubmitInfo for TimelineSemaphoreSubmitInfo {}
unsafe impl ExtendsSubmitInfo for Win32KeyedMutexAcquireReleaseInfoKHR {}
unsafe impl ExtendsSubmitInfo for Win32KeyedMutexAcquireReleaseInfoNV {}

unsafe impl Cast for SubmitInfo {
    type Target = SubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubmitInfo {
    type Builder = SubmitInfoBuilder<'b>;
}

/// A builder for a [`SubmitInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubmitInfoBuilder<'b> {
    value: SubmitInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubmitInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSubmitInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn wait_semaphores(mut self, wait_semaphores: &'b [Semaphore]) -> Self {
        self.value.wait_semaphore_count = wait_semaphores.len() as u32;
        self.value.wait_semaphores = wait_semaphores.as_ptr();
        self
    }

    #[inline]
    pub fn wait_dst_stage_mask(mut self, wait_dst_stage_mask: &'b [PipelineStageFlags]) -> Self {
        self.value.wait_semaphore_count = wait_dst_stage_mask.len() as u32;
        self.value.wait_dst_stage_mask = wait_dst_stage_mask.as_ptr();
        self
    }

    #[inline]
    pub fn command_buffers(mut self, command_buffers: &'b [CommandBuffer]) -> Self {
        self.value.command_buffer_count = command_buffers.len() as u32;
        self.value.command_buffers = command_buffers.as_ptr();
        self
    }

    #[inline]
    pub fn signal_semaphores(mut self, signal_semaphores: &'b [Semaphore]) -> Self {
        self.value.signal_semaphore_count = signal_semaphores.len() as u32;
        self.value.signal_semaphores = signal_semaphores.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SubmitInfo {
        self.value
    }
}

impl<'b> ops::Deref for SubmitInfoBuilder<'b> {
    type Target = SubmitInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubmitInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubmitInfoBuilder<'b> {
    type Target = SubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SubmitInfo2`].
pub unsafe trait ExtendsSubmitInfo2: fmt::Debug {}
unsafe impl ExtendsSubmitInfo2 for FrameBoundaryEXT {}
unsafe impl ExtendsSubmitInfo2 for LatencySubmissionPresentIdNV {}
unsafe impl ExtendsSubmitInfo2 for PerformanceQuerySubmitInfoKHR {}
unsafe impl ExtendsSubmitInfo2 for Win32KeyedMutexAcquireReleaseInfoKHR {}
unsafe impl ExtendsSubmitInfo2 for Win32KeyedMutexAcquireReleaseInfoNV {}

unsafe impl Cast for SubmitInfo2 {
    type Target = SubmitInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubmitInfo2 {
    type Builder = SubmitInfo2Builder<'b>;
}

/// A builder for a [`SubmitInfo2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubmitInfo2Builder<'b> {
    value: SubmitInfo2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubmitInfo2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSubmitInfo2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SubmitFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn wait_semaphore_infos(
        mut self,
        wait_semaphore_infos: &'b [impl Cast<Target = SemaphoreSubmitInfo>],
    ) -> Self {
        self.value.wait_semaphore_info_count = wait_semaphore_infos.len() as u32;
        self.value.wait_semaphore_infos = wait_semaphore_infos.as_ptr().cast();
        self
    }

    #[inline]
    pub fn command_buffer_infos(
        mut self,
        command_buffer_infos: &'b [impl Cast<Target = CommandBufferSubmitInfo>],
    ) -> Self {
        self.value.command_buffer_info_count = command_buffer_infos.len() as u32;
        self.value.command_buffer_infos = command_buffer_infos.as_ptr().cast();
        self
    }

    #[inline]
    pub fn signal_semaphore_infos(
        mut self,
        signal_semaphore_infos: &'b [impl Cast<Target = SemaphoreSubmitInfo>],
    ) -> Self {
        self.value.signal_semaphore_info_count = signal_semaphore_infos.len() as u32;
        self.value.signal_semaphore_infos = signal_semaphore_infos.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> SubmitInfo2 {
        self.value
    }
}

impl<'b> ops::Deref for SubmitInfo2Builder<'b> {
    type Target = SubmitInfo2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubmitInfo2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubmitInfo2Builder<'b> {
    type Target = SubmitInfo2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubpassBeginInfo {
    type Target = SubpassBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SubpassBeginInfo {
    type Builder = SubpassBeginInfoBuilder;
}

/// A builder for a [`SubpassBeginInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassBeginInfoBuilder {
    value: SubpassBeginInfo,
}

impl SubpassBeginInfoBuilder {
    #[inline]
    pub fn contents(mut self, contents: SubpassContents) -> Self {
        self.value.contents = contents;
        self
    }

    #[inline]
    pub fn build(self) -> SubpassBeginInfo {
        self.value
    }
}

impl ops::Deref for SubpassBeginInfoBuilder {
    type Target = SubpassBeginInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SubpassBeginInfoBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SubpassBeginInfoBuilder {
    type Target = SubpassBeginInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubpassDependency {
    type Target = SubpassDependency;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SubpassDependency {
    type Builder = SubpassDependencyBuilder;
}

/// A builder for a [`SubpassDependency`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassDependencyBuilder {
    value: SubpassDependency,
}

impl SubpassDependencyBuilder {
    #[inline]
    pub fn src_subpass(mut self, src_subpass: u32) -> Self {
        self.value.src_subpass = src_subpass;
        self
    }

    #[inline]
    pub fn dst_subpass(mut self, dst_subpass: u32) -> Self {
        self.value.dst_subpass = dst_subpass;
        self
    }

    #[inline]
    pub fn src_stage_mask(mut self, src_stage_mask: PipelineStageFlags) -> Self {
        self.value.src_stage_mask = src_stage_mask;
        self
    }

    #[inline]
    pub fn dst_stage_mask(mut self, dst_stage_mask: PipelineStageFlags) -> Self {
        self.value.dst_stage_mask = dst_stage_mask;
        self
    }

    #[inline]
    pub fn src_access_mask(mut self, src_access_mask: AccessFlags) -> Self {
        self.value.src_access_mask = src_access_mask;
        self
    }

    #[inline]
    pub fn dst_access_mask(mut self, dst_access_mask: AccessFlags) -> Self {
        self.value.dst_access_mask = dst_access_mask;
        self
    }

    #[inline]
    pub fn dependency_flags(mut self, dependency_flags: DependencyFlags) -> Self {
        self.value.dependency_flags = dependency_flags;
        self
    }

    #[inline]
    pub fn build(self) -> SubpassDependency {
        self.value
    }
}

impl ops::Deref for SubpassDependencyBuilder {
    type Target = SubpassDependency;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SubpassDependencyBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SubpassDependencyBuilder {
    type Target = SubpassDependency;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SubpassDependency2`].
pub unsafe trait ExtendsSubpassDependency2: fmt::Debug {}
unsafe impl ExtendsSubpassDependency2 for MemoryBarrier2 {}

unsafe impl Cast for SubpassDependency2 {
    type Target = SubpassDependency2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubpassDependency2 {
    type Builder = SubpassDependency2Builder<'b>;
}

/// A builder for a [`SubpassDependency2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassDependency2Builder<'b> {
    value: SubpassDependency2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubpassDependency2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSubpassDependency2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn src_subpass(mut self, src_subpass: u32) -> Self {
        self.value.src_subpass = src_subpass;
        self
    }

    #[inline]
    pub fn dst_subpass(mut self, dst_subpass: u32) -> Self {
        self.value.dst_subpass = dst_subpass;
        self
    }

    #[inline]
    pub fn src_stage_mask(mut self, src_stage_mask: PipelineStageFlags) -> Self {
        self.value.src_stage_mask = src_stage_mask;
        self
    }

    #[inline]
    pub fn dst_stage_mask(mut self, dst_stage_mask: PipelineStageFlags) -> Self {
        self.value.dst_stage_mask = dst_stage_mask;
        self
    }

    #[inline]
    pub fn src_access_mask(mut self, src_access_mask: AccessFlags) -> Self {
        self.value.src_access_mask = src_access_mask;
        self
    }

    #[inline]
    pub fn dst_access_mask(mut self, dst_access_mask: AccessFlags) -> Self {
        self.value.dst_access_mask = dst_access_mask;
        self
    }

    #[inline]
    pub fn dependency_flags(mut self, dependency_flags: DependencyFlags) -> Self {
        self.value.dependency_flags = dependency_flags;
        self
    }

    #[inline]
    pub fn view_offset(mut self, view_offset: i32) -> Self {
        self.value.view_offset = view_offset;
        self
    }

    #[inline]
    pub fn build(self) -> SubpassDependency2 {
        self.value
    }
}

impl<'b> ops::Deref for SubpassDependency2Builder<'b> {
    type Target = SubpassDependency2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubpassDependency2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubpassDependency2Builder<'b> {
    type Target = SubpassDependency2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubpassDescription {
    type Target = SubpassDescription;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubpassDescription {
    type Builder = SubpassDescriptionBuilder<'b>;
}

/// A builder for a [`SubpassDescription`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassDescriptionBuilder<'b> {
    value: SubpassDescription,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubpassDescriptionBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: SubpassDescriptionFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn pipeline_bind_point(mut self, pipeline_bind_point: PipelineBindPoint) -> Self {
        self.value.pipeline_bind_point = pipeline_bind_point;
        self
    }

    #[inline]
    pub fn input_attachments(
        mut self,
        input_attachments: &'b [impl Cast<Target = AttachmentReference>],
    ) -> Self {
        self.value.input_attachment_count = input_attachments.len() as u32;
        self.value.input_attachments = input_attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn color_attachment_count(mut self, color_attachment_count: u32) -> Self {
        self.value.color_attachment_count = color_attachment_count;
        self
    }

    #[inline]
    pub fn color_attachments(
        mut self,
        color_attachments: &'b [impl Cast<Target = AttachmentReference>],
    ) -> Self {
        self.value.color_attachment_count = color_attachments.len() as u32;
        self.value.color_attachments = color_attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn resolve_attachments(
        mut self,
        resolve_attachments: &'b [impl Cast<Target = AttachmentReference>],
    ) -> Self {
        self.value.color_attachment_count = resolve_attachments.len() as u32;
        self.value.resolve_attachments = resolve_attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn depth_stencil_attachment(
        mut self,
        depth_stencil_attachment: &'b impl Cast<Target = AttachmentReference>,
    ) -> Self {
        self.value.depth_stencil_attachment = depth_stencil_attachment.as_ref();
        self
    }

    #[inline]
    pub fn preserve_attachments(mut self, preserve_attachments: &'b [u32]) -> Self {
        self.value.preserve_attachment_count = preserve_attachments.len() as u32;
        self.value.preserve_attachments = preserve_attachments.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SubpassDescription {
        self.value
    }
}

impl<'b> ops::Deref for SubpassDescriptionBuilder<'b> {
    type Target = SubpassDescription;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubpassDescriptionBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubpassDescriptionBuilder<'b> {
    type Target = SubpassDescription;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SubpassDescription2`].
pub unsafe trait ExtendsSubpassDescription2: fmt::Debug {}
unsafe impl ExtendsSubpassDescription2 for FragmentShadingRateAttachmentInfoKHR {}
unsafe impl ExtendsSubpassDescription2 for MultisampledRenderToSingleSampledInfoEXT {}
unsafe impl ExtendsSubpassDescription2 for RenderPassCreationControlEXT {}
unsafe impl ExtendsSubpassDescription2 for RenderPassSubpassFeedbackCreateInfoEXT {}
unsafe impl ExtendsSubpassDescription2 for SubpassDescriptionDepthStencilResolve {}

unsafe impl Cast for SubpassDescription2 {
    type Target = SubpassDescription2;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubpassDescription2 {
    type Builder = SubpassDescription2Builder<'b>;
}

/// A builder for a [`SubpassDescription2`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassDescription2Builder<'b> {
    value: SubpassDescription2,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubpassDescription2Builder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSubpassDescription2,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SubpassDescriptionFlags) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn pipeline_bind_point(mut self, pipeline_bind_point: PipelineBindPoint) -> Self {
        self.value.pipeline_bind_point = pipeline_bind_point;
        self
    }

    #[inline]
    pub fn view_mask(mut self, view_mask: u32) -> Self {
        self.value.view_mask = view_mask;
        self
    }

    #[inline]
    pub fn input_attachments(
        mut self,
        input_attachments: &'b [impl Cast<Target = AttachmentReference2>],
    ) -> Self {
        self.value.input_attachment_count = input_attachments.len() as u32;
        self.value.input_attachments = input_attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn color_attachment_count(mut self, color_attachment_count: u32) -> Self {
        self.value.color_attachment_count = color_attachment_count;
        self
    }

    #[inline]
    pub fn color_attachments(
        mut self,
        color_attachments: &'b [impl Cast<Target = AttachmentReference2>],
    ) -> Self {
        self.value.color_attachment_count = color_attachments.len() as u32;
        self.value.color_attachments = color_attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn resolve_attachments(
        mut self,
        resolve_attachments: &'b [impl Cast<Target = AttachmentReference2>],
    ) -> Self {
        self.value.color_attachment_count = resolve_attachments.len() as u32;
        self.value.resolve_attachments = resolve_attachments.as_ptr().cast();
        self
    }

    #[inline]
    pub fn depth_stencil_attachment(
        mut self,
        depth_stencil_attachment: &'b impl Cast<Target = AttachmentReference2>,
    ) -> Self {
        self.value.depth_stencil_attachment = depth_stencil_attachment.as_ref();
        self
    }

    #[inline]
    pub fn preserve_attachments(mut self, preserve_attachments: &'b [u32]) -> Self {
        self.value.preserve_attachment_count = preserve_attachments.len() as u32;
        self.value.preserve_attachments = preserve_attachments.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SubpassDescription2 {
        self.value
    }
}

impl<'b> ops::Deref for SubpassDescription2Builder<'b> {
    type Target = SubpassDescription2;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubpassDescription2Builder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubpassDescription2Builder<'b> {
    type Target = SubpassDescription2;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubpassDescriptionDepthStencilResolve {
    type Target = SubpassDescriptionDepthStencilResolve;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubpassDescriptionDepthStencilResolve {
    type Builder = SubpassDescriptionDepthStencilResolveBuilder<'b>;
}

/// A builder for a [`SubpassDescriptionDepthStencilResolve`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassDescriptionDepthStencilResolveBuilder<'b> {
    value: SubpassDescriptionDepthStencilResolve,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubpassDescriptionDepthStencilResolveBuilder<'b> {
    #[inline]
    pub fn depth_resolve_mode(mut self, depth_resolve_mode: ResolveModeFlags) -> Self {
        self.value.depth_resolve_mode = depth_resolve_mode;
        self
    }

    #[inline]
    pub fn stencil_resolve_mode(mut self, stencil_resolve_mode: ResolveModeFlags) -> Self {
        self.value.stencil_resolve_mode = stencil_resolve_mode;
        self
    }

    #[inline]
    pub fn depth_stencil_resolve_attachment(
        mut self,
        depth_stencil_resolve_attachment: &'b impl Cast<Target = AttachmentReference2>,
    ) -> Self {
        self.value.depth_stencil_resolve_attachment = depth_stencil_resolve_attachment.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> SubpassDescriptionDepthStencilResolve {
        self.value
    }
}

impl<'b> ops::Deref for SubpassDescriptionDepthStencilResolveBuilder<'b> {
    type Target = SubpassDescriptionDepthStencilResolve;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubpassDescriptionDepthStencilResolveBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubpassDescriptionDepthStencilResolveBuilder<'b> {
    type Target = SubpassDescriptionDepthStencilResolve;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SubpassEndInfo`].
pub unsafe trait ExtendsSubpassEndInfo: fmt::Debug {}
unsafe impl ExtendsSubpassEndInfo for SubpassFragmentDensityMapOffsetEndInfoQCOM {}

unsafe impl Cast for SubpassEndInfo {
    type Target = SubpassEndInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubpassEndInfo {
    type Builder = SubpassEndInfoBuilder<'b>;
}

/// A builder for a [`SubpassEndInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassEndInfoBuilder<'b> {
    value: SubpassEndInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubpassEndInfoBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSubpassEndInfo,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn build(self) -> SubpassEndInfo {
        self.value
    }
}

impl<'b> ops::Deref for SubpassEndInfoBuilder<'b> {
    type Target = SubpassEndInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubpassEndInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubpassEndInfoBuilder<'b> {
    type Target = SubpassEndInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubpassFragmentDensityMapOffsetEndInfoQCOM {
    type Target = SubpassFragmentDensityMapOffsetEndInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubpassFragmentDensityMapOffsetEndInfoQCOM {
    type Builder = SubpassFragmentDensityMapOffsetEndInfoQCOMBuilder<'b>;
}

/// A builder for a [`SubpassFragmentDensityMapOffsetEndInfoQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassFragmentDensityMapOffsetEndInfoQCOMBuilder<'b> {
    value: SubpassFragmentDensityMapOffsetEndInfoQCOM,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubpassFragmentDensityMapOffsetEndInfoQCOMBuilder<'b> {
    #[inline]
    pub fn fragment_density_offsets(
        mut self,
        fragment_density_offsets: &'b [impl Cast<Target = Offset2D>],
    ) -> Self {
        self.value.fragment_density_offset_count = fragment_density_offsets.len() as u32;
        self.value.fragment_density_offsets = fragment_density_offsets.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> SubpassFragmentDensityMapOffsetEndInfoQCOM {
        self.value
    }
}

impl<'b> ops::Deref for SubpassFragmentDensityMapOffsetEndInfoQCOMBuilder<'b> {
    type Target = SubpassFragmentDensityMapOffsetEndInfoQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubpassFragmentDensityMapOffsetEndInfoQCOMBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubpassFragmentDensityMapOffsetEndInfoQCOMBuilder<'b> {
    type Target = SubpassFragmentDensityMapOffsetEndInfoQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubpassResolvePerformanceQueryEXT {
    type Target = SubpassResolvePerformanceQueryEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SubpassResolvePerformanceQueryEXT {
    type Builder = SubpassResolvePerformanceQueryEXTBuilder;
}

/// A builder for a [`SubpassResolvePerformanceQueryEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassResolvePerformanceQueryEXTBuilder {
    value: SubpassResolvePerformanceQueryEXT,
}

impl SubpassResolvePerformanceQueryEXTBuilder {
    #[inline]
    pub fn optimal(mut self, optimal: bool) -> Self {
        self.value.optimal = optimal as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SubpassResolvePerformanceQueryEXT {
        self.value
    }
}

impl ops::Deref for SubpassResolvePerformanceQueryEXTBuilder {
    type Target = SubpassResolvePerformanceQueryEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SubpassResolvePerformanceQueryEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SubpassResolvePerformanceQueryEXTBuilder {
    type Target = SubpassResolvePerformanceQueryEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubpassSampleLocationsEXT {
    type Target = SubpassSampleLocationsEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubpassSampleLocationsEXT {
    type Builder = SubpassSampleLocationsEXTBuilder<'b>;
}

/// A builder for a [`SubpassSampleLocationsEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassSampleLocationsEXTBuilder<'b> {
    value: SubpassSampleLocationsEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubpassSampleLocationsEXTBuilder<'b> {
    #[inline]
    pub fn subpass_index(mut self, subpass_index: u32) -> Self {
        self.value.subpass_index = subpass_index;
        self
    }

    #[inline]
    pub fn sample_locations_info(
        mut self,
        sample_locations_info: impl Cast<Target = SampleLocationsInfoEXT>,
    ) -> Self {
        self.value.sample_locations_info = sample_locations_info.into();
        self
    }

    #[inline]
    pub fn build(self) -> SubpassSampleLocationsEXT {
        self.value
    }
}

impl<'b> ops::Deref for SubpassSampleLocationsEXTBuilder<'b> {
    type Target = SubpassSampleLocationsEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubpassSampleLocationsEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubpassSampleLocationsEXTBuilder<'b> {
    type Target = SubpassSampleLocationsEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubpassShadingPipelineCreateInfoHUAWEI {
    type Target = SubpassShadingPipelineCreateInfoHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SubpassShadingPipelineCreateInfoHUAWEI {
    type Builder = SubpassShadingPipelineCreateInfoHUAWEIBuilder;
}

/// A builder for a [`SubpassShadingPipelineCreateInfoHUAWEI`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubpassShadingPipelineCreateInfoHUAWEIBuilder {
    value: SubpassShadingPipelineCreateInfoHUAWEI,
}

impl SubpassShadingPipelineCreateInfoHUAWEIBuilder {
    #[inline]
    pub fn render_pass(mut self, render_pass: RenderPass) -> Self {
        self.value.render_pass = render_pass;
        self
    }

    #[inline]
    pub fn subpass(mut self, subpass: u32) -> Self {
        self.value.subpass = subpass;
        self
    }

    #[inline]
    pub fn build(self) -> SubpassShadingPipelineCreateInfoHUAWEI {
        self.value
    }
}

impl ops::Deref for SubpassShadingPipelineCreateInfoHUAWEIBuilder {
    type Target = SubpassShadingPipelineCreateInfoHUAWEI;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SubpassShadingPipelineCreateInfoHUAWEIBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SubpassShadingPipelineCreateInfoHUAWEIBuilder {
    type Target = SubpassShadingPipelineCreateInfoHUAWEI;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubresourceHostMemcpySizeEXT {
    type Target = SubresourceHostMemcpySizeEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SubresourceHostMemcpySizeEXT {
    type Builder = SubresourceHostMemcpySizeEXTBuilder;
}

/// A builder for a [`SubresourceHostMemcpySizeEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubresourceHostMemcpySizeEXTBuilder {
    value: SubresourceHostMemcpySizeEXT,
}

impl SubresourceHostMemcpySizeEXTBuilder {
    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn build(self) -> SubresourceHostMemcpySizeEXT {
        self.value
    }
}

impl ops::Deref for SubresourceHostMemcpySizeEXTBuilder {
    type Target = SubresourceHostMemcpySizeEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SubresourceHostMemcpySizeEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SubresourceHostMemcpySizeEXTBuilder {
    type Target = SubresourceHostMemcpySizeEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SubresourceLayout {
    type Target = SubresourceLayout;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SubresourceLayout {
    type Builder = SubresourceLayoutBuilder;
}

/// A builder for a [`SubresourceLayout`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubresourceLayoutBuilder {
    value: SubresourceLayout,
}

impl SubresourceLayoutBuilder {
    #[inline]
    pub fn offset(mut self, offset: DeviceSize) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn size(mut self, size: DeviceSize) -> Self {
        self.value.size = size;
        self
    }

    #[inline]
    pub fn row_pitch(mut self, row_pitch: DeviceSize) -> Self {
        self.value.row_pitch = row_pitch;
        self
    }

    #[inline]
    pub fn array_pitch(mut self, array_pitch: DeviceSize) -> Self {
        self.value.array_pitch = array_pitch;
        self
    }

    #[inline]
    pub fn depth_pitch(mut self, depth_pitch: DeviceSize) -> Self {
        self.value.depth_pitch = depth_pitch;
        self
    }

    #[inline]
    pub fn build(self) -> SubresourceLayout {
        self.value
    }
}

impl ops::Deref for SubresourceLayoutBuilder {
    type Target = SubresourceLayout;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SubresourceLayoutBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SubresourceLayoutBuilder {
    type Target = SubresourceLayout;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SubresourceLayout2KHR`].
pub unsafe trait ExtendsSubresourceLayout2KHR: fmt::Debug {}
unsafe impl ExtendsSubresourceLayout2KHR for ImageCompressionPropertiesEXT {}
unsafe impl ExtendsSubresourceLayout2KHR for SubresourceHostMemcpySizeEXT {}

unsafe impl Cast for SubresourceLayout2KHR {
    type Target = SubresourceLayout2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SubresourceLayout2KHR {
    type Builder = SubresourceLayout2KHRBuilder<'b>;
}

/// A builder for a [`SubresourceLayout2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SubresourceLayout2KHRBuilder<'b> {
    value: SubresourceLayout2KHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SubresourceLayout2KHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSubresourceLayout2KHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn subresource_layout(
        mut self,
        subresource_layout: impl Cast<Target = SubresourceLayout>,
    ) -> Self {
        self.value.subresource_layout = subresource_layout.into();
        self
    }

    #[inline]
    pub fn build(self) -> SubresourceLayout2KHR {
        self.value
    }
}

impl<'b> ops::Deref for SubresourceLayout2KHRBuilder<'b> {
    type Target = SubresourceLayout2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SubresourceLayout2KHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SubresourceLayout2KHRBuilder<'b> {
    type Target = SubresourceLayout2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfaceCapabilities2EXT {
    type Target = SurfaceCapabilities2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfaceCapabilities2EXT {
    type Builder = SurfaceCapabilities2EXTBuilder;
}

/// A builder for a [`SurfaceCapabilities2EXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceCapabilities2EXTBuilder {
    value: SurfaceCapabilities2EXT,
}

impl SurfaceCapabilities2EXTBuilder {
    #[inline]
    pub fn min_image_count(mut self, min_image_count: u32) -> Self {
        self.value.min_image_count = min_image_count;
        self
    }

    #[inline]
    pub fn max_image_count(mut self, max_image_count: u32) -> Self {
        self.value.max_image_count = max_image_count;
        self
    }

    #[inline]
    pub fn current_extent(mut self, current_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.current_extent = current_extent.into();
        self
    }

    #[inline]
    pub fn min_image_extent(mut self, min_image_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.min_image_extent = min_image_extent.into();
        self
    }

    #[inline]
    pub fn max_image_extent(mut self, max_image_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.max_image_extent = max_image_extent.into();
        self
    }

    #[inline]
    pub fn max_image_array_layers(mut self, max_image_array_layers: u32) -> Self {
        self.value.max_image_array_layers = max_image_array_layers;
        self
    }

    #[inline]
    pub fn supported_transforms(mut self, supported_transforms: SurfaceTransformFlagsKHR) -> Self {
        self.value.supported_transforms = supported_transforms;
        self
    }

    #[inline]
    pub fn current_transform(mut self, current_transform: SurfaceTransformFlagsKHR) -> Self {
        self.value.current_transform = current_transform;
        self
    }

    #[inline]
    pub fn supported_composite_alpha(
        mut self,
        supported_composite_alpha: CompositeAlphaFlagsKHR,
    ) -> Self {
        self.value.supported_composite_alpha = supported_composite_alpha;
        self
    }

    #[inline]
    pub fn supported_usage_flags(mut self, supported_usage_flags: ImageUsageFlags) -> Self {
        self.value.supported_usage_flags = supported_usage_flags;
        self
    }

    #[inline]
    pub fn supported_surface_counters(
        mut self,
        supported_surface_counters: SurfaceCounterFlagsEXT,
    ) -> Self {
        self.value.supported_surface_counters = supported_surface_counters;
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceCapabilities2EXT {
        self.value
    }
}

impl ops::Deref for SurfaceCapabilities2EXTBuilder {
    type Target = SurfaceCapabilities2EXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfaceCapabilities2EXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfaceCapabilities2EXTBuilder {
    type Target = SurfaceCapabilities2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SurfaceCapabilities2KHR`].
pub unsafe trait ExtendsSurfaceCapabilities2KHR: fmt::Debug {}
unsafe impl ExtendsSurfaceCapabilities2KHR for DisplayNativeHdrSurfaceCapabilitiesAMD {}
unsafe impl ExtendsSurfaceCapabilities2KHR for LatencySurfaceCapabilitiesNV {}
unsafe impl ExtendsSurfaceCapabilities2KHR for SharedPresentSurfaceCapabilitiesKHR {}
unsafe impl ExtendsSurfaceCapabilities2KHR for SurfaceCapabilitiesFullScreenExclusiveEXT {}
unsafe impl ExtendsSurfaceCapabilities2KHR for SurfaceCapabilitiesPresentBarrierNV {}
unsafe impl ExtendsSurfaceCapabilities2KHR for SurfacePresentModeCompatibilityEXT {}
unsafe impl ExtendsSurfaceCapabilities2KHR for SurfacePresentScalingCapabilitiesEXT {}
unsafe impl ExtendsSurfaceCapabilities2KHR for SurfaceProtectedCapabilitiesKHR {}

unsafe impl Cast for SurfaceCapabilities2KHR {
    type Target = SurfaceCapabilities2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SurfaceCapabilities2KHR {
    type Builder = SurfaceCapabilities2KHRBuilder<'b>;
}

/// A builder for a [`SurfaceCapabilities2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceCapabilities2KHRBuilder<'b> {
    value: SurfaceCapabilities2KHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SurfaceCapabilities2KHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSurfaceCapabilities2KHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn surface_capabilities(
        mut self,
        surface_capabilities: impl Cast<Target = SurfaceCapabilitiesKHR>,
    ) -> Self {
        self.value.surface_capabilities = surface_capabilities.into();
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceCapabilities2KHR {
        self.value
    }
}

impl<'b> ops::Deref for SurfaceCapabilities2KHRBuilder<'b> {
    type Target = SurfaceCapabilities2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SurfaceCapabilities2KHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SurfaceCapabilities2KHRBuilder<'b> {
    type Target = SurfaceCapabilities2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfaceCapabilitiesFullScreenExclusiveEXT {
    type Target = SurfaceCapabilitiesFullScreenExclusiveEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfaceCapabilitiesFullScreenExclusiveEXT {
    type Builder = SurfaceCapabilitiesFullScreenExclusiveEXTBuilder;
}

/// A builder for a [`SurfaceCapabilitiesFullScreenExclusiveEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceCapabilitiesFullScreenExclusiveEXTBuilder {
    value: SurfaceCapabilitiesFullScreenExclusiveEXT,
}

impl SurfaceCapabilitiesFullScreenExclusiveEXTBuilder {
    #[inline]
    pub fn full_screen_exclusive_supported(
        mut self,
        full_screen_exclusive_supported: bool,
    ) -> Self {
        self.value.full_screen_exclusive_supported = full_screen_exclusive_supported as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceCapabilitiesFullScreenExclusiveEXT {
        self.value
    }
}

impl ops::Deref for SurfaceCapabilitiesFullScreenExclusiveEXTBuilder {
    type Target = SurfaceCapabilitiesFullScreenExclusiveEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfaceCapabilitiesFullScreenExclusiveEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfaceCapabilitiesFullScreenExclusiveEXTBuilder {
    type Target = SurfaceCapabilitiesFullScreenExclusiveEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfaceCapabilitiesKHR {
    type Target = SurfaceCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfaceCapabilitiesKHR {
    type Builder = SurfaceCapabilitiesKHRBuilder;
}

/// A builder for a [`SurfaceCapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceCapabilitiesKHRBuilder {
    value: SurfaceCapabilitiesKHR,
}

impl SurfaceCapabilitiesKHRBuilder {
    #[inline]
    pub fn min_image_count(mut self, min_image_count: u32) -> Self {
        self.value.min_image_count = min_image_count;
        self
    }

    #[inline]
    pub fn max_image_count(mut self, max_image_count: u32) -> Self {
        self.value.max_image_count = max_image_count;
        self
    }

    #[inline]
    pub fn current_extent(mut self, current_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.current_extent = current_extent.into();
        self
    }

    #[inline]
    pub fn min_image_extent(mut self, min_image_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.min_image_extent = min_image_extent.into();
        self
    }

    #[inline]
    pub fn max_image_extent(mut self, max_image_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.max_image_extent = max_image_extent.into();
        self
    }

    #[inline]
    pub fn max_image_array_layers(mut self, max_image_array_layers: u32) -> Self {
        self.value.max_image_array_layers = max_image_array_layers;
        self
    }

    #[inline]
    pub fn supported_transforms(mut self, supported_transforms: SurfaceTransformFlagsKHR) -> Self {
        self.value.supported_transforms = supported_transforms;
        self
    }

    #[inline]
    pub fn current_transform(mut self, current_transform: SurfaceTransformFlagsKHR) -> Self {
        self.value.current_transform = current_transform;
        self
    }

    #[inline]
    pub fn supported_composite_alpha(
        mut self,
        supported_composite_alpha: CompositeAlphaFlagsKHR,
    ) -> Self {
        self.value.supported_composite_alpha = supported_composite_alpha;
        self
    }

    #[inline]
    pub fn supported_usage_flags(mut self, supported_usage_flags: ImageUsageFlags) -> Self {
        self.value.supported_usage_flags = supported_usage_flags;
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceCapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for SurfaceCapabilitiesKHRBuilder {
    type Target = SurfaceCapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfaceCapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfaceCapabilitiesKHRBuilder {
    type Target = SurfaceCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfaceCapabilitiesPresentBarrierNV {
    type Target = SurfaceCapabilitiesPresentBarrierNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfaceCapabilitiesPresentBarrierNV {
    type Builder = SurfaceCapabilitiesPresentBarrierNVBuilder;
}

/// A builder for a [`SurfaceCapabilitiesPresentBarrierNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceCapabilitiesPresentBarrierNVBuilder {
    value: SurfaceCapabilitiesPresentBarrierNV,
}

impl SurfaceCapabilitiesPresentBarrierNVBuilder {
    #[inline]
    pub fn present_barrier_supported(mut self, present_barrier_supported: bool) -> Self {
        self.value.present_barrier_supported = present_barrier_supported as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceCapabilitiesPresentBarrierNV {
        self.value
    }
}

impl ops::Deref for SurfaceCapabilitiesPresentBarrierNVBuilder {
    type Target = SurfaceCapabilitiesPresentBarrierNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfaceCapabilitiesPresentBarrierNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfaceCapabilitiesPresentBarrierNVBuilder {
    type Target = SurfaceCapabilitiesPresentBarrierNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SurfaceFormat2KHR`].
pub unsafe trait ExtendsSurfaceFormat2KHR: fmt::Debug {}
unsafe impl ExtendsSurfaceFormat2KHR for ImageCompressionPropertiesEXT {}

unsafe impl Cast for SurfaceFormat2KHR {
    type Target = SurfaceFormat2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SurfaceFormat2KHR {
    type Builder = SurfaceFormat2KHRBuilder<'b>;
}

/// A builder for a [`SurfaceFormat2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceFormat2KHRBuilder<'b> {
    value: SurfaceFormat2KHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SurfaceFormat2KHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSurfaceFormat2KHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn surface_format(mut self, surface_format: impl Cast<Target = SurfaceFormatKHR>) -> Self {
        self.value.surface_format = surface_format.into();
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceFormat2KHR {
        self.value
    }
}

impl<'b> ops::Deref for SurfaceFormat2KHRBuilder<'b> {
    type Target = SurfaceFormat2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SurfaceFormat2KHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SurfaceFormat2KHRBuilder<'b> {
    type Target = SurfaceFormat2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfaceFormatKHR {
    type Target = SurfaceFormatKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfaceFormatKHR {
    type Builder = SurfaceFormatKHRBuilder;
}

/// A builder for a [`SurfaceFormatKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceFormatKHRBuilder {
    value: SurfaceFormatKHR,
}

impl SurfaceFormatKHRBuilder {
    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn color_space(mut self, color_space: ColorSpaceKHR) -> Self {
        self.value.color_space = color_space;
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceFormatKHR {
        self.value
    }
}

impl ops::Deref for SurfaceFormatKHRBuilder {
    type Target = SurfaceFormatKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfaceFormatKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfaceFormatKHRBuilder {
    type Target = SurfaceFormatKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfaceFullScreenExclusiveInfoEXT {
    type Target = SurfaceFullScreenExclusiveInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfaceFullScreenExclusiveInfoEXT {
    type Builder = SurfaceFullScreenExclusiveInfoEXTBuilder;
}

/// A builder for a [`SurfaceFullScreenExclusiveInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceFullScreenExclusiveInfoEXTBuilder {
    value: SurfaceFullScreenExclusiveInfoEXT,
}

impl SurfaceFullScreenExclusiveInfoEXTBuilder {
    #[inline]
    pub fn full_screen_exclusive(mut self, full_screen_exclusive: FullScreenExclusiveEXT) -> Self {
        self.value.full_screen_exclusive = full_screen_exclusive;
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceFullScreenExclusiveInfoEXT {
        self.value
    }
}

impl ops::Deref for SurfaceFullScreenExclusiveInfoEXTBuilder {
    type Target = SurfaceFullScreenExclusiveInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfaceFullScreenExclusiveInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfaceFullScreenExclusiveInfoEXTBuilder {
    type Target = SurfaceFullScreenExclusiveInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfaceFullScreenExclusiveWin32InfoEXT {
    type Target = SurfaceFullScreenExclusiveWin32InfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfaceFullScreenExclusiveWin32InfoEXT {
    type Builder = SurfaceFullScreenExclusiveWin32InfoEXTBuilder;
}

/// A builder for a [`SurfaceFullScreenExclusiveWin32InfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceFullScreenExclusiveWin32InfoEXTBuilder {
    value: SurfaceFullScreenExclusiveWin32InfoEXT,
}

impl SurfaceFullScreenExclusiveWin32InfoEXTBuilder {
    #[inline]
    pub fn hmonitor(mut self, hmonitor: HMONITOR) -> Self {
        self.value.hmonitor = hmonitor;
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceFullScreenExclusiveWin32InfoEXT {
        self.value
    }
}

impl ops::Deref for SurfaceFullScreenExclusiveWin32InfoEXTBuilder {
    type Target = SurfaceFullScreenExclusiveWin32InfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfaceFullScreenExclusiveWin32InfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfaceFullScreenExclusiveWin32InfoEXTBuilder {
    type Target = SurfaceFullScreenExclusiveWin32InfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfacePresentModeCompatibilityEXT {
    type Target = SurfacePresentModeCompatibilityEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SurfacePresentModeCompatibilityEXT {
    type Builder = SurfacePresentModeCompatibilityEXTBuilder<'b>;
}

/// A builder for a [`SurfacePresentModeCompatibilityEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfacePresentModeCompatibilityEXTBuilder<'b> {
    value: SurfacePresentModeCompatibilityEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SurfacePresentModeCompatibilityEXTBuilder<'b> {
    #[inline]
    pub fn present_mode_count(mut self, present_mode_count: u32) -> Self {
        self.value.present_mode_count = present_mode_count;
        self
    }

    #[inline]
    pub fn present_modes(mut self, present_modes: &'b mut [PresentModeKHR]) -> Self {
        self.value.present_mode_count = present_modes.len() as u32;
        self.value.present_modes = present_modes.as_mut_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SurfacePresentModeCompatibilityEXT {
        self.value
    }
}

impl<'b> ops::Deref for SurfacePresentModeCompatibilityEXTBuilder<'b> {
    type Target = SurfacePresentModeCompatibilityEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SurfacePresentModeCompatibilityEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SurfacePresentModeCompatibilityEXTBuilder<'b> {
    type Target = SurfacePresentModeCompatibilityEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfacePresentModeEXT {
    type Target = SurfacePresentModeEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfacePresentModeEXT {
    type Builder = SurfacePresentModeEXTBuilder;
}

/// A builder for a [`SurfacePresentModeEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfacePresentModeEXTBuilder {
    value: SurfacePresentModeEXT,
}

impl SurfacePresentModeEXTBuilder {
    #[inline]
    pub fn present_mode(mut self, present_mode: PresentModeKHR) -> Self {
        self.value.present_mode = present_mode;
        self
    }

    #[inline]
    pub fn build(self) -> SurfacePresentModeEXT {
        self.value
    }
}

impl ops::Deref for SurfacePresentModeEXTBuilder {
    type Target = SurfacePresentModeEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfacePresentModeEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfacePresentModeEXTBuilder {
    type Target = SurfacePresentModeEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfacePresentScalingCapabilitiesEXT {
    type Target = SurfacePresentScalingCapabilitiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfacePresentScalingCapabilitiesEXT {
    type Builder = SurfacePresentScalingCapabilitiesEXTBuilder;
}

/// A builder for a [`SurfacePresentScalingCapabilitiesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfacePresentScalingCapabilitiesEXTBuilder {
    value: SurfacePresentScalingCapabilitiesEXT,
}

impl SurfacePresentScalingCapabilitiesEXTBuilder {
    #[inline]
    pub fn supported_present_scaling(
        mut self,
        supported_present_scaling: PresentScalingFlagsEXT,
    ) -> Self {
        self.value.supported_present_scaling = supported_present_scaling;
        self
    }

    #[inline]
    pub fn supported_present_gravity_x(
        mut self,
        supported_present_gravity_x: PresentGravityFlagsEXT,
    ) -> Self {
        self.value.supported_present_gravity_x = supported_present_gravity_x;
        self
    }

    #[inline]
    pub fn supported_present_gravity_y(
        mut self,
        supported_present_gravity_y: PresentGravityFlagsEXT,
    ) -> Self {
        self.value.supported_present_gravity_y = supported_present_gravity_y;
        self
    }

    #[inline]
    pub fn min_scaled_image_extent(
        mut self,
        min_scaled_image_extent: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.min_scaled_image_extent = min_scaled_image_extent.into();
        self
    }

    #[inline]
    pub fn max_scaled_image_extent(
        mut self,
        max_scaled_image_extent: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.max_scaled_image_extent = max_scaled_image_extent.into();
        self
    }

    #[inline]
    pub fn build(self) -> SurfacePresentScalingCapabilitiesEXT {
        self.value
    }
}

impl ops::Deref for SurfacePresentScalingCapabilitiesEXTBuilder {
    type Target = SurfacePresentScalingCapabilitiesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfacePresentScalingCapabilitiesEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfacePresentScalingCapabilitiesEXTBuilder {
    type Target = SurfacePresentScalingCapabilitiesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SurfaceProtectedCapabilitiesKHR {
    type Target = SurfaceProtectedCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SurfaceProtectedCapabilitiesKHR {
    type Builder = SurfaceProtectedCapabilitiesKHRBuilder;
}

/// A builder for a [`SurfaceProtectedCapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SurfaceProtectedCapabilitiesKHRBuilder {
    value: SurfaceProtectedCapabilitiesKHR,
}

impl SurfaceProtectedCapabilitiesKHRBuilder {
    #[inline]
    pub fn supports_protected(mut self, supports_protected: bool) -> Self {
        self.value.supports_protected = supports_protected as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SurfaceProtectedCapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for SurfaceProtectedCapabilitiesKHRBuilder {
    type Target = SurfaceProtectedCapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SurfaceProtectedCapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SurfaceProtectedCapabilitiesKHRBuilder {
    type Target = SurfaceProtectedCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SwapchainCounterCreateInfoEXT {
    type Target = SwapchainCounterCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SwapchainCounterCreateInfoEXT {
    type Builder = SwapchainCounterCreateInfoEXTBuilder;
}

/// A builder for a [`SwapchainCounterCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainCounterCreateInfoEXTBuilder {
    value: SwapchainCounterCreateInfoEXT,
}

impl SwapchainCounterCreateInfoEXTBuilder {
    #[inline]
    pub fn surface_counters(mut self, surface_counters: SurfaceCounterFlagsEXT) -> Self {
        self.value.surface_counters = surface_counters;
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainCounterCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for SwapchainCounterCreateInfoEXTBuilder {
    type Target = SwapchainCounterCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SwapchainCounterCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SwapchainCounterCreateInfoEXTBuilder {
    type Target = SwapchainCounterCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`SwapchainCreateInfoKHR`].
pub unsafe trait ExtendsSwapchainCreateInfoKHR: fmt::Debug {}
unsafe impl ExtendsSwapchainCreateInfoKHR for DeviceGroupSwapchainCreateInfoKHR {}
unsafe impl ExtendsSwapchainCreateInfoKHR for ImageCompressionControlEXT {}
unsafe impl ExtendsSwapchainCreateInfoKHR for ImageFormatListCreateInfo {}
unsafe impl ExtendsSwapchainCreateInfoKHR for SurfaceFullScreenExclusiveInfoEXT {}
unsafe impl ExtendsSwapchainCreateInfoKHR for SurfaceFullScreenExclusiveWin32InfoEXT {}
unsafe impl ExtendsSwapchainCreateInfoKHR for SwapchainCounterCreateInfoEXT {}
unsafe impl ExtendsSwapchainCreateInfoKHR for SwapchainDisplayNativeHdrCreateInfoAMD {}
unsafe impl ExtendsSwapchainCreateInfoKHR for SwapchainLatencyCreateInfoNV {}
unsafe impl ExtendsSwapchainCreateInfoKHR for SwapchainPresentBarrierCreateInfoNV {}
unsafe impl ExtendsSwapchainCreateInfoKHR for SwapchainPresentModesCreateInfoEXT {}
unsafe impl ExtendsSwapchainCreateInfoKHR for SwapchainPresentScalingCreateInfoEXT {}

unsafe impl Cast for SwapchainCreateInfoKHR {
    type Target = SwapchainCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SwapchainCreateInfoKHR {
    type Builder = SwapchainCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`SwapchainCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainCreateInfoKHRBuilder<'b> {
    value: SwapchainCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SwapchainCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsSwapchainCreateInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: SwapchainCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn surface(mut self, surface: SurfaceKHR) -> Self {
        self.value.surface = surface;
        self
    }

    #[inline]
    pub fn min_image_count(mut self, min_image_count: u32) -> Self {
        self.value.min_image_count = min_image_count;
        self
    }

    #[inline]
    pub fn image_format(mut self, image_format: Format) -> Self {
        self.value.image_format = image_format;
        self
    }

    #[inline]
    pub fn image_color_space(mut self, image_color_space: ColorSpaceKHR) -> Self {
        self.value.image_color_space = image_color_space;
        self
    }

    #[inline]
    pub fn image_extent(mut self, image_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.image_extent = image_extent.into();
        self
    }

    #[inline]
    pub fn image_array_layers(mut self, image_array_layers: u32) -> Self {
        self.value.image_array_layers = image_array_layers;
        self
    }

    #[inline]
    pub fn image_usage(mut self, image_usage: ImageUsageFlags) -> Self {
        self.value.image_usage = image_usage;
        self
    }

    #[inline]
    pub fn image_sharing_mode(mut self, image_sharing_mode: SharingMode) -> Self {
        self.value.image_sharing_mode = image_sharing_mode;
        self
    }

    #[inline]
    pub fn queue_family_indices(mut self, queue_family_indices: &'b [u32]) -> Self {
        self.value.queue_family_index_count = queue_family_indices.len() as u32;
        self.value.queue_family_indices = queue_family_indices.as_ptr();
        self
    }

    #[inline]
    pub fn pre_transform(mut self, pre_transform: SurfaceTransformFlagsKHR) -> Self {
        self.value.pre_transform = pre_transform;
        self
    }

    #[inline]
    pub fn composite_alpha(mut self, composite_alpha: CompositeAlphaFlagsKHR) -> Self {
        self.value.composite_alpha = composite_alpha;
        self
    }

    #[inline]
    pub fn present_mode(mut self, present_mode: PresentModeKHR) -> Self {
        self.value.present_mode = present_mode;
        self
    }

    #[inline]
    pub fn clipped(mut self, clipped: bool) -> Self {
        self.value.clipped = clipped as Bool32;
        self
    }

    #[inline]
    pub fn old_swapchain(mut self, old_swapchain: SwapchainKHR) -> Self {
        self.value.old_swapchain = old_swapchain;
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for SwapchainCreateInfoKHRBuilder<'b> {
    type Target = SwapchainCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SwapchainCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SwapchainCreateInfoKHRBuilder<'b> {
    type Target = SwapchainCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SwapchainDisplayNativeHdrCreateInfoAMD {
    type Target = SwapchainDisplayNativeHdrCreateInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SwapchainDisplayNativeHdrCreateInfoAMD {
    type Builder = SwapchainDisplayNativeHdrCreateInfoAMDBuilder;
}

/// A builder for a [`SwapchainDisplayNativeHdrCreateInfoAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainDisplayNativeHdrCreateInfoAMDBuilder {
    value: SwapchainDisplayNativeHdrCreateInfoAMD,
}

impl SwapchainDisplayNativeHdrCreateInfoAMDBuilder {
    #[inline]
    pub fn local_dimming_enable(mut self, local_dimming_enable: bool) -> Self {
        self.value.local_dimming_enable = local_dimming_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainDisplayNativeHdrCreateInfoAMD {
        self.value
    }
}

impl ops::Deref for SwapchainDisplayNativeHdrCreateInfoAMDBuilder {
    type Target = SwapchainDisplayNativeHdrCreateInfoAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SwapchainDisplayNativeHdrCreateInfoAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SwapchainDisplayNativeHdrCreateInfoAMDBuilder {
    type Target = SwapchainDisplayNativeHdrCreateInfoAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SwapchainLatencyCreateInfoNV {
    type Target = SwapchainLatencyCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SwapchainLatencyCreateInfoNV {
    type Builder = SwapchainLatencyCreateInfoNVBuilder;
}

/// A builder for a [`SwapchainLatencyCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainLatencyCreateInfoNVBuilder {
    value: SwapchainLatencyCreateInfoNV,
}

impl SwapchainLatencyCreateInfoNVBuilder {
    #[inline]
    pub fn latency_mode_enable(mut self, latency_mode_enable: bool) -> Self {
        self.value.latency_mode_enable = latency_mode_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainLatencyCreateInfoNV {
        self.value
    }
}

impl ops::Deref for SwapchainLatencyCreateInfoNVBuilder {
    type Target = SwapchainLatencyCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SwapchainLatencyCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SwapchainLatencyCreateInfoNVBuilder {
    type Target = SwapchainLatencyCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SwapchainPresentBarrierCreateInfoNV {
    type Target = SwapchainPresentBarrierCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SwapchainPresentBarrierCreateInfoNV {
    type Builder = SwapchainPresentBarrierCreateInfoNVBuilder;
}

/// A builder for a [`SwapchainPresentBarrierCreateInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainPresentBarrierCreateInfoNVBuilder {
    value: SwapchainPresentBarrierCreateInfoNV,
}

impl SwapchainPresentBarrierCreateInfoNVBuilder {
    #[inline]
    pub fn present_barrier_enable(mut self, present_barrier_enable: bool) -> Self {
        self.value.present_barrier_enable = present_barrier_enable as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainPresentBarrierCreateInfoNV {
        self.value
    }
}

impl ops::Deref for SwapchainPresentBarrierCreateInfoNVBuilder {
    type Target = SwapchainPresentBarrierCreateInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SwapchainPresentBarrierCreateInfoNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SwapchainPresentBarrierCreateInfoNVBuilder {
    type Target = SwapchainPresentBarrierCreateInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SwapchainPresentFenceInfoEXT {
    type Target = SwapchainPresentFenceInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SwapchainPresentFenceInfoEXT {
    type Builder = SwapchainPresentFenceInfoEXTBuilder<'b>;
}

/// A builder for a [`SwapchainPresentFenceInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainPresentFenceInfoEXTBuilder<'b> {
    value: SwapchainPresentFenceInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SwapchainPresentFenceInfoEXTBuilder<'b> {
    #[inline]
    pub fn fences(mut self, fences: &'b [Fence]) -> Self {
        self.value.swapchain_count = fences.len() as u32;
        self.value.fences = fences.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainPresentFenceInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for SwapchainPresentFenceInfoEXTBuilder<'b> {
    type Target = SwapchainPresentFenceInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SwapchainPresentFenceInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SwapchainPresentFenceInfoEXTBuilder<'b> {
    type Target = SwapchainPresentFenceInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SwapchainPresentModeInfoEXT {
    type Target = SwapchainPresentModeInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SwapchainPresentModeInfoEXT {
    type Builder = SwapchainPresentModeInfoEXTBuilder<'b>;
}

/// A builder for a [`SwapchainPresentModeInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainPresentModeInfoEXTBuilder<'b> {
    value: SwapchainPresentModeInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SwapchainPresentModeInfoEXTBuilder<'b> {
    #[inline]
    pub fn present_modes(mut self, present_modes: &'b [PresentModeKHR]) -> Self {
        self.value.swapchain_count = present_modes.len() as u32;
        self.value.present_modes = present_modes.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainPresentModeInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for SwapchainPresentModeInfoEXTBuilder<'b> {
    type Target = SwapchainPresentModeInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SwapchainPresentModeInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SwapchainPresentModeInfoEXTBuilder<'b> {
    type Target = SwapchainPresentModeInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SwapchainPresentModesCreateInfoEXT {
    type Target = SwapchainPresentModesCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for SwapchainPresentModesCreateInfoEXT {
    type Builder = SwapchainPresentModesCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`SwapchainPresentModesCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainPresentModesCreateInfoEXTBuilder<'b> {
    value: SwapchainPresentModesCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> SwapchainPresentModesCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn present_modes(mut self, present_modes: &'b [PresentModeKHR]) -> Self {
        self.value.present_mode_count = present_modes.len() as u32;
        self.value.present_modes = present_modes.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainPresentModesCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for SwapchainPresentModesCreateInfoEXTBuilder<'b> {
    type Target = SwapchainPresentModesCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for SwapchainPresentModesCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for SwapchainPresentModesCreateInfoEXTBuilder<'b> {
    type Target = SwapchainPresentModesCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SwapchainPresentScalingCreateInfoEXT {
    type Target = SwapchainPresentScalingCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SwapchainPresentScalingCreateInfoEXT {
    type Builder = SwapchainPresentScalingCreateInfoEXTBuilder;
}

/// A builder for a [`SwapchainPresentScalingCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SwapchainPresentScalingCreateInfoEXTBuilder {
    value: SwapchainPresentScalingCreateInfoEXT,
}

impl SwapchainPresentScalingCreateInfoEXTBuilder {
    #[inline]
    pub fn scaling_behavior(mut self, scaling_behavior: PresentScalingFlagsEXT) -> Self {
        self.value.scaling_behavior = scaling_behavior;
        self
    }

    #[inline]
    pub fn present_gravity_x(mut self, present_gravity_x: PresentGravityFlagsEXT) -> Self {
        self.value.present_gravity_x = present_gravity_x;
        self
    }

    #[inline]
    pub fn present_gravity_y(mut self, present_gravity_y: PresentGravityFlagsEXT) -> Self {
        self.value.present_gravity_y = present_gravity_y;
        self
    }

    #[inline]
    pub fn build(self) -> SwapchainPresentScalingCreateInfoEXT {
        self.value
    }
}

impl ops::Deref for SwapchainPresentScalingCreateInfoEXTBuilder {
    type Target = SwapchainPresentScalingCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SwapchainPresentScalingCreateInfoEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SwapchainPresentScalingCreateInfoEXTBuilder {
    type Target = SwapchainPresentScalingCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for SysmemColorSpaceFUCHSIA {
    type Target = SysmemColorSpaceFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for SysmemColorSpaceFUCHSIA {
    type Builder = SysmemColorSpaceFUCHSIABuilder;
}

/// A builder for a [`SysmemColorSpaceFUCHSIA`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct SysmemColorSpaceFUCHSIABuilder {
    value: SysmemColorSpaceFUCHSIA,
}

impl SysmemColorSpaceFUCHSIABuilder {
    #[inline]
    pub fn color_space(mut self, color_space: u32) -> Self {
        self.value.color_space = color_space;
        self
    }

    #[inline]
    pub fn build(self) -> SysmemColorSpaceFUCHSIA {
        self.value
    }
}

impl ops::Deref for SysmemColorSpaceFUCHSIABuilder {
    type Target = SysmemColorSpaceFUCHSIA;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for SysmemColorSpaceFUCHSIABuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for SysmemColorSpaceFUCHSIABuilder {
    type Target = SysmemColorSpaceFUCHSIA;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for TextureLODGatherFormatPropertiesAMD {
    type Target = TextureLODGatherFormatPropertiesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for TextureLODGatherFormatPropertiesAMD {
    type Builder = TextureLODGatherFormatPropertiesAMDBuilder;
}

/// A builder for a [`TextureLODGatherFormatPropertiesAMD`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct TextureLODGatherFormatPropertiesAMDBuilder {
    value: TextureLODGatherFormatPropertiesAMD,
}

impl TextureLODGatherFormatPropertiesAMDBuilder {
    #[inline]
    pub fn supports_texture_gather_lod_bias_amd(
        mut self,
        supports_texture_gather_lod_bias_amd: bool,
    ) -> Self {
        self.value.supports_texture_gather_lod_bias_amd =
            supports_texture_gather_lod_bias_amd as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> TextureLODGatherFormatPropertiesAMD {
        self.value
    }
}

impl ops::Deref for TextureLODGatherFormatPropertiesAMDBuilder {
    type Target = TextureLODGatherFormatPropertiesAMD;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for TextureLODGatherFormatPropertiesAMDBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for TextureLODGatherFormatPropertiesAMDBuilder {
    type Target = TextureLODGatherFormatPropertiesAMD;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for TilePropertiesQCOM {
    type Target = TilePropertiesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for TilePropertiesQCOM {
    type Builder = TilePropertiesQCOMBuilder;
}

/// A builder for a [`TilePropertiesQCOM`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct TilePropertiesQCOMBuilder {
    value: TilePropertiesQCOM,
}

impl TilePropertiesQCOMBuilder {
    #[inline]
    pub fn tile_size(mut self, tile_size: impl Cast<Target = Extent3D>) -> Self {
        self.value.tile_size = tile_size.into();
        self
    }

    #[inline]
    pub fn apron_size(mut self, apron_size: impl Cast<Target = Extent2D>) -> Self {
        self.value.apron_size = apron_size.into();
        self
    }

    #[inline]
    pub fn origin(mut self, origin: impl Cast<Target = Offset2D>) -> Self {
        self.value.origin = origin.into();
        self
    }

    #[inline]
    pub fn build(self) -> TilePropertiesQCOM {
        self.value
    }
}

impl ops::Deref for TilePropertiesQCOMBuilder {
    type Target = TilePropertiesQCOM;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for TilePropertiesQCOMBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for TilePropertiesQCOMBuilder {
    type Target = TilePropertiesQCOM;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for TimelineSemaphoreSubmitInfo {
    type Target = TimelineSemaphoreSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for TimelineSemaphoreSubmitInfo {
    type Builder = TimelineSemaphoreSubmitInfoBuilder<'b>;
}

/// A builder for a [`TimelineSemaphoreSubmitInfo`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct TimelineSemaphoreSubmitInfoBuilder<'b> {
    value: TimelineSemaphoreSubmitInfo,
    _marker: PhantomData<&'b ()>,
}

impl<'b> TimelineSemaphoreSubmitInfoBuilder<'b> {
    #[inline]
    pub fn wait_semaphore_value_count(mut self, wait_semaphore_value_count: u32) -> Self {
        self.value.wait_semaphore_value_count = wait_semaphore_value_count;
        self
    }

    #[inline]
    pub fn wait_semaphore_values(mut self, wait_semaphore_values: &'b [u64]) -> Self {
        self.value.wait_semaphore_value_count = wait_semaphore_values.len() as u32;
        self.value.wait_semaphore_values = wait_semaphore_values.as_ptr();
        self
    }

    #[inline]
    pub fn signal_semaphore_value_count(mut self, signal_semaphore_value_count: u32) -> Self {
        self.value.signal_semaphore_value_count = signal_semaphore_value_count;
        self
    }

    #[inline]
    pub fn signal_semaphore_values(mut self, signal_semaphore_values: &'b [u64]) -> Self {
        self.value.signal_semaphore_value_count = signal_semaphore_values.len() as u32;
        self.value.signal_semaphore_values = signal_semaphore_values.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> TimelineSemaphoreSubmitInfo {
        self.value
    }
}

impl<'b> ops::Deref for TimelineSemaphoreSubmitInfoBuilder<'b> {
    type Target = TimelineSemaphoreSubmitInfo;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for TimelineSemaphoreSubmitInfoBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for TimelineSemaphoreSubmitInfoBuilder<'b> {
    type Target = TimelineSemaphoreSubmitInfo;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for TraceRaysIndirectCommand2KHR {
    type Target = TraceRaysIndirectCommand2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for TraceRaysIndirectCommand2KHR {
    type Builder = TraceRaysIndirectCommand2KHRBuilder;
}

/// A builder for a [`TraceRaysIndirectCommand2KHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct TraceRaysIndirectCommand2KHRBuilder {
    value: TraceRaysIndirectCommand2KHR,
}

impl TraceRaysIndirectCommand2KHRBuilder {
    #[inline]
    pub fn raygen_shader_record_address(
        mut self,
        raygen_shader_record_address: DeviceAddress,
    ) -> Self {
        self.value.raygen_shader_record_address = raygen_shader_record_address;
        self
    }

    #[inline]
    pub fn raygen_shader_record_size(mut self, raygen_shader_record_size: DeviceSize) -> Self {
        self.value.raygen_shader_record_size = raygen_shader_record_size;
        self
    }

    #[inline]
    pub fn miss_shader_binding_table_address(
        mut self,
        miss_shader_binding_table_address: DeviceAddress,
    ) -> Self {
        self.value.miss_shader_binding_table_address = miss_shader_binding_table_address;
        self
    }

    #[inline]
    pub fn miss_shader_binding_table_size(
        mut self,
        miss_shader_binding_table_size: DeviceSize,
    ) -> Self {
        self.value.miss_shader_binding_table_size = miss_shader_binding_table_size;
        self
    }

    #[inline]
    pub fn miss_shader_binding_table_stride(
        mut self,
        miss_shader_binding_table_stride: DeviceSize,
    ) -> Self {
        self.value.miss_shader_binding_table_stride = miss_shader_binding_table_stride;
        self
    }

    #[inline]
    pub fn hit_shader_binding_table_address(
        mut self,
        hit_shader_binding_table_address: DeviceAddress,
    ) -> Self {
        self.value.hit_shader_binding_table_address = hit_shader_binding_table_address;
        self
    }

    #[inline]
    pub fn hit_shader_binding_table_size(
        mut self,
        hit_shader_binding_table_size: DeviceSize,
    ) -> Self {
        self.value.hit_shader_binding_table_size = hit_shader_binding_table_size;
        self
    }

    #[inline]
    pub fn hit_shader_binding_table_stride(
        mut self,
        hit_shader_binding_table_stride: DeviceSize,
    ) -> Self {
        self.value.hit_shader_binding_table_stride = hit_shader_binding_table_stride;
        self
    }

    #[inline]
    pub fn callable_shader_binding_table_address(
        mut self,
        callable_shader_binding_table_address: DeviceAddress,
    ) -> Self {
        self.value.callable_shader_binding_table_address = callable_shader_binding_table_address;
        self
    }

    #[inline]
    pub fn callable_shader_binding_table_size(
        mut self,
        callable_shader_binding_table_size: DeviceSize,
    ) -> Self {
        self.value.callable_shader_binding_table_size = callable_shader_binding_table_size;
        self
    }

    #[inline]
    pub fn callable_shader_binding_table_stride(
        mut self,
        callable_shader_binding_table_stride: DeviceSize,
    ) -> Self {
        self.value.callable_shader_binding_table_stride = callable_shader_binding_table_stride;
        self
    }

    #[inline]
    pub fn width(mut self, width: u32) -> Self {
        self.value.width = width;
        self
    }

    #[inline]
    pub fn height(mut self, height: u32) -> Self {
        self.value.height = height;
        self
    }

    #[inline]
    pub fn depth(mut self, depth: u32) -> Self {
        self.value.depth = depth;
        self
    }

    #[inline]
    pub fn build(self) -> TraceRaysIndirectCommand2KHR {
        self.value
    }
}

impl ops::Deref for TraceRaysIndirectCommand2KHRBuilder {
    type Target = TraceRaysIndirectCommand2KHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for TraceRaysIndirectCommand2KHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for TraceRaysIndirectCommand2KHRBuilder {
    type Target = TraceRaysIndirectCommand2KHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for TraceRaysIndirectCommandKHR {
    type Target = TraceRaysIndirectCommandKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for TraceRaysIndirectCommandKHR {
    type Builder = TraceRaysIndirectCommandKHRBuilder;
}

/// A builder for a [`TraceRaysIndirectCommandKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct TraceRaysIndirectCommandKHRBuilder {
    value: TraceRaysIndirectCommandKHR,
}

impl TraceRaysIndirectCommandKHRBuilder {
    #[inline]
    pub fn width(mut self, width: u32) -> Self {
        self.value.width = width;
        self
    }

    #[inline]
    pub fn height(mut self, height: u32) -> Self {
        self.value.height = height;
        self
    }

    #[inline]
    pub fn depth(mut self, depth: u32) -> Self {
        self.value.depth = depth;
        self
    }

    #[inline]
    pub fn build(self) -> TraceRaysIndirectCommandKHR {
        self.value
    }
}

impl ops::Deref for TraceRaysIndirectCommandKHRBuilder {
    type Target = TraceRaysIndirectCommandKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for TraceRaysIndirectCommandKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for TraceRaysIndirectCommandKHRBuilder {
    type Target = TraceRaysIndirectCommandKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for TransformMatrixKHR {
    type Target = TransformMatrixKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for TransformMatrixKHR {
    type Builder = TransformMatrixKHRBuilder;
}

/// A builder for a [`TransformMatrixKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct TransformMatrixKHRBuilder {
    value: TransformMatrixKHR,
}

impl TransformMatrixKHRBuilder {
    #[inline]
    pub fn matrix(mut self, matrix: [[f32; 4]; 3]) -> Self {
        self.value.matrix = matrix;
        self
    }

    #[inline]
    pub fn build(self) -> TransformMatrixKHR {
        self.value
    }
}

impl ops::Deref for TransformMatrixKHRBuilder {
    type Target = TransformMatrixKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for TransformMatrixKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for TransformMatrixKHRBuilder {
    type Target = TransformMatrixKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ValidationCacheCreateInfoEXT {
    type Target = ValidationCacheCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ValidationCacheCreateInfoEXT {
    type Builder = ValidationCacheCreateInfoEXTBuilder<'b>;
}

/// A builder for a [`ValidationCacheCreateInfoEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ValidationCacheCreateInfoEXTBuilder<'b> {
    value: ValidationCacheCreateInfoEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ValidationCacheCreateInfoEXTBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: ValidationCacheCreateFlagsEXT) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn initial_data(mut self, initial_data: &'b [u8]) -> Self {
        self.value.initial_data_size = initial_data.len() as usize;
        self.value.initial_data = initial_data.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> ValidationCacheCreateInfoEXT {
        self.value
    }
}

impl<'b> ops::Deref for ValidationCacheCreateInfoEXTBuilder<'b> {
    type Target = ValidationCacheCreateInfoEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ValidationCacheCreateInfoEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ValidationCacheCreateInfoEXTBuilder<'b> {
    type Target = ValidationCacheCreateInfoEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ValidationFeaturesEXT {
    type Target = ValidationFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ValidationFeaturesEXT {
    type Builder = ValidationFeaturesEXTBuilder<'b>;
}

/// A builder for a [`ValidationFeaturesEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ValidationFeaturesEXTBuilder<'b> {
    value: ValidationFeaturesEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ValidationFeaturesEXTBuilder<'b> {
    #[inline]
    pub fn enabled_validation_features(
        mut self,
        enabled_validation_features: &'b [ValidationFeatureEnableEXT],
    ) -> Self {
        self.value.enabled_validation_feature_count = enabled_validation_features.len() as u32;
        self.value.enabled_validation_features = enabled_validation_features.as_ptr();
        self
    }

    #[inline]
    pub fn disabled_validation_features(
        mut self,
        disabled_validation_features: &'b [ValidationFeatureDisableEXT],
    ) -> Self {
        self.value.disabled_validation_feature_count = disabled_validation_features.len() as u32;
        self.value.disabled_validation_features = disabled_validation_features.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> ValidationFeaturesEXT {
        self.value
    }
}

impl<'b> ops::Deref for ValidationFeaturesEXTBuilder<'b> {
    type Target = ValidationFeaturesEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ValidationFeaturesEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ValidationFeaturesEXTBuilder<'b> {
    type Target = ValidationFeaturesEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ValidationFlagsEXT {
    type Target = ValidationFlagsEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ValidationFlagsEXT {
    type Builder = ValidationFlagsEXTBuilder<'b>;
}

/// A builder for a [`ValidationFlagsEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ValidationFlagsEXTBuilder<'b> {
    value: ValidationFlagsEXT,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ValidationFlagsEXTBuilder<'b> {
    #[inline]
    pub fn disabled_validation_checks(
        mut self,
        disabled_validation_checks: &'b [ValidationCheckEXT],
    ) -> Self {
        self.value.disabled_validation_check_count = disabled_validation_checks.len() as u32;
        self.value.disabled_validation_checks = disabled_validation_checks.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> ValidationFlagsEXT {
        self.value
    }
}

impl<'b> ops::Deref for ValidationFlagsEXTBuilder<'b> {
    type Target = ValidationFlagsEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ValidationFlagsEXTBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ValidationFlagsEXTBuilder<'b> {
    type Target = ValidationFlagsEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VertexInputAttributeDescription {
    type Target = VertexInputAttributeDescription;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VertexInputAttributeDescription {
    type Builder = VertexInputAttributeDescriptionBuilder;
}

/// A builder for a [`VertexInputAttributeDescription`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VertexInputAttributeDescriptionBuilder {
    value: VertexInputAttributeDescription,
}

impl VertexInputAttributeDescriptionBuilder {
    #[inline]
    pub fn location(mut self, location: u32) -> Self {
        self.value.location = location;
        self
    }

    #[inline]
    pub fn binding(mut self, binding: u32) -> Self {
        self.value.binding = binding;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: u32) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn build(self) -> VertexInputAttributeDescription {
        self.value
    }
}

impl ops::Deref for VertexInputAttributeDescriptionBuilder {
    type Target = VertexInputAttributeDescription;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VertexInputAttributeDescriptionBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VertexInputAttributeDescriptionBuilder {
    type Target = VertexInputAttributeDescription;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VertexInputAttributeDescription2EXT {
    type Target = VertexInputAttributeDescription2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VertexInputAttributeDescription2EXT {
    type Builder = VertexInputAttributeDescription2EXTBuilder;
}

/// A builder for a [`VertexInputAttributeDescription2EXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VertexInputAttributeDescription2EXTBuilder {
    value: VertexInputAttributeDescription2EXT,
}

impl VertexInputAttributeDescription2EXTBuilder {
    #[inline]
    pub fn location(mut self, location: u32) -> Self {
        self.value.location = location;
        self
    }

    #[inline]
    pub fn binding(mut self, binding: u32) -> Self {
        self.value.binding = binding;
        self
    }

    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn offset(mut self, offset: u32) -> Self {
        self.value.offset = offset;
        self
    }

    #[inline]
    pub fn build(self) -> VertexInputAttributeDescription2EXT {
        self.value
    }
}

impl ops::Deref for VertexInputAttributeDescription2EXTBuilder {
    type Target = VertexInputAttributeDescription2EXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VertexInputAttributeDescription2EXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VertexInputAttributeDescription2EXTBuilder {
    type Target = VertexInputAttributeDescription2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VertexInputBindingDescription {
    type Target = VertexInputBindingDescription;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VertexInputBindingDescription {
    type Builder = VertexInputBindingDescriptionBuilder;
}

/// A builder for a [`VertexInputBindingDescription`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VertexInputBindingDescriptionBuilder {
    value: VertexInputBindingDescription,
}

impl VertexInputBindingDescriptionBuilder {
    #[inline]
    pub fn binding(mut self, binding: u32) -> Self {
        self.value.binding = binding;
        self
    }

    #[inline]
    pub fn stride(mut self, stride: u32) -> Self {
        self.value.stride = stride;
        self
    }

    #[inline]
    pub fn input_rate(mut self, input_rate: VertexInputRate) -> Self {
        self.value.input_rate = input_rate;
        self
    }

    #[inline]
    pub fn build(self) -> VertexInputBindingDescription {
        self.value
    }
}

impl ops::Deref for VertexInputBindingDescriptionBuilder {
    type Target = VertexInputBindingDescription;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VertexInputBindingDescriptionBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VertexInputBindingDescriptionBuilder {
    type Target = VertexInputBindingDescription;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VertexInputBindingDescription2EXT {
    type Target = VertexInputBindingDescription2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VertexInputBindingDescription2EXT {
    type Builder = VertexInputBindingDescription2EXTBuilder;
}

/// A builder for a [`VertexInputBindingDescription2EXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VertexInputBindingDescription2EXTBuilder {
    value: VertexInputBindingDescription2EXT,
}

impl VertexInputBindingDescription2EXTBuilder {
    #[inline]
    pub fn binding(mut self, binding: u32) -> Self {
        self.value.binding = binding;
        self
    }

    #[inline]
    pub fn stride(mut self, stride: u32) -> Self {
        self.value.stride = stride;
        self
    }

    #[inline]
    pub fn input_rate(mut self, input_rate: VertexInputRate) -> Self {
        self.value.input_rate = input_rate;
        self
    }

    #[inline]
    pub fn divisor(mut self, divisor: u32) -> Self {
        self.value.divisor = divisor;
        self
    }

    #[inline]
    pub fn build(self) -> VertexInputBindingDescription2EXT {
        self.value
    }
}

impl ops::Deref for VertexInputBindingDescription2EXTBuilder {
    type Target = VertexInputBindingDescription2EXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VertexInputBindingDescription2EXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VertexInputBindingDescription2EXTBuilder {
    type Target = VertexInputBindingDescription2EXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VertexInputBindingDivisorDescriptionKHR {
    type Target = VertexInputBindingDivisorDescriptionKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VertexInputBindingDivisorDescriptionKHR {
    type Builder = VertexInputBindingDivisorDescriptionKHRBuilder;
}

/// A builder for a [`VertexInputBindingDivisorDescriptionKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VertexInputBindingDivisorDescriptionKHRBuilder {
    value: VertexInputBindingDivisorDescriptionKHR,
}

impl VertexInputBindingDivisorDescriptionKHRBuilder {
    #[inline]
    pub fn binding(mut self, binding: u32) -> Self {
        self.value.binding = binding;
        self
    }

    #[inline]
    pub fn divisor(mut self, divisor: u32) -> Self {
        self.value.divisor = divisor;
        self
    }

    #[inline]
    pub fn build(self) -> VertexInputBindingDivisorDescriptionKHR {
        self.value
    }
}

impl ops::Deref for VertexInputBindingDivisorDescriptionKHRBuilder {
    type Target = VertexInputBindingDivisorDescriptionKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VertexInputBindingDivisorDescriptionKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VertexInputBindingDivisorDescriptionKHRBuilder {
    type Target = VertexInputBindingDivisorDescriptionKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ViSurfaceCreateInfoNN {
    type Target = ViSurfaceCreateInfoNN;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for ViSurfaceCreateInfoNN {
    type Builder = ViSurfaceCreateInfoNNBuilder<'b>;
}

/// A builder for a [`ViSurfaceCreateInfoNN`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ViSurfaceCreateInfoNNBuilder<'b> {
    value: ViSurfaceCreateInfoNN,
    _marker: PhantomData<&'b ()>,
}

impl<'b> ViSurfaceCreateInfoNNBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: ViSurfaceCreateFlagsNN) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn window<T>(mut self, window: &'b mut T) -> Self {
        self.value.window = (window as *mut T).cast();
        self
    }

    #[inline]
    pub fn build(self) -> ViSurfaceCreateInfoNN {
        self.value
    }
}

impl<'b> ops::Deref for ViSurfaceCreateInfoNNBuilder<'b> {
    type Target = ViSurfaceCreateInfoNN;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for ViSurfaceCreateInfoNNBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for ViSurfaceCreateInfoNNBuilder<'b> {
    type Target = ViSurfaceCreateInfoNN;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoBeginCodingInfoKHR`].
pub unsafe trait ExtendsVideoBeginCodingInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoBeginCodingInfoKHR for VideoEncodeH264GopRemainingFrameInfoKHR {}
unsafe impl ExtendsVideoBeginCodingInfoKHR for VideoEncodeH264RateControlInfoKHR {}
unsafe impl ExtendsVideoBeginCodingInfoKHR for VideoEncodeH265GopRemainingFrameInfoKHR {}
unsafe impl ExtendsVideoBeginCodingInfoKHR for VideoEncodeH265RateControlInfoKHR {}
unsafe impl ExtendsVideoBeginCodingInfoKHR for VideoEncodeRateControlInfoKHR {}

unsafe impl Cast for VideoBeginCodingInfoKHR {
    type Target = VideoBeginCodingInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoBeginCodingInfoKHR {
    type Builder = VideoBeginCodingInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoBeginCodingInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoBeginCodingInfoKHRBuilder<'b> {
    value: VideoBeginCodingInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoBeginCodingInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoBeginCodingInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: VideoBeginCodingFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn video_session(mut self, video_session: VideoSessionKHR) -> Self {
        self.value.video_session = video_session;
        self
    }

    #[inline]
    pub fn video_session_parameters(
        mut self,
        video_session_parameters: VideoSessionParametersKHR,
    ) -> Self {
        self.value.video_session_parameters = video_session_parameters;
        self
    }

    #[inline]
    pub fn reference_slots(
        mut self,
        reference_slots: &'b [impl Cast<Target = VideoReferenceSlotInfoKHR>],
    ) -> Self {
        self.value.reference_slot_count = reference_slots.len() as u32;
        self.value.reference_slots = reference_slots.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> VideoBeginCodingInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoBeginCodingInfoKHRBuilder<'b> {
    type Target = VideoBeginCodingInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoBeginCodingInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoBeginCodingInfoKHRBuilder<'b> {
    type Target = VideoBeginCodingInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoCapabilitiesKHR`].
pub unsafe trait ExtendsVideoCapabilitiesKHR: fmt::Debug {}
unsafe impl ExtendsVideoCapabilitiesKHR for VideoDecodeAV1CapabilitiesKHR {}
unsafe impl ExtendsVideoCapabilitiesKHR for VideoDecodeCapabilitiesKHR {}
unsafe impl ExtendsVideoCapabilitiesKHR for VideoDecodeH264CapabilitiesKHR {}
unsafe impl ExtendsVideoCapabilitiesKHR for VideoDecodeH265CapabilitiesKHR {}
unsafe impl ExtendsVideoCapabilitiesKHR for VideoEncodeCapabilitiesKHR {}
unsafe impl ExtendsVideoCapabilitiesKHR for VideoEncodeH264CapabilitiesKHR {}
unsafe impl ExtendsVideoCapabilitiesKHR for VideoEncodeH265CapabilitiesKHR {}

unsafe impl Cast for VideoCapabilitiesKHR {
    type Target = VideoCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoCapabilitiesKHR {
    type Builder = VideoCapabilitiesKHRBuilder<'b>;
}

/// A builder for a [`VideoCapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoCapabilitiesKHRBuilder<'b> {
    value: VideoCapabilitiesKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoCapabilitiesKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoCapabilitiesKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: VideoCapabilityFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn min_bitstream_buffer_offset_alignment(
        mut self,
        min_bitstream_buffer_offset_alignment: DeviceSize,
    ) -> Self {
        self.value.min_bitstream_buffer_offset_alignment = min_bitstream_buffer_offset_alignment;
        self
    }

    #[inline]
    pub fn min_bitstream_buffer_size_alignment(
        mut self,
        min_bitstream_buffer_size_alignment: DeviceSize,
    ) -> Self {
        self.value.min_bitstream_buffer_size_alignment = min_bitstream_buffer_size_alignment;
        self
    }

    #[inline]
    pub fn picture_access_granularity(
        mut self,
        picture_access_granularity: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.picture_access_granularity = picture_access_granularity.into();
        self
    }

    #[inline]
    pub fn min_coded_extent(mut self, min_coded_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.min_coded_extent = min_coded_extent.into();
        self
    }

    #[inline]
    pub fn max_coded_extent(mut self, max_coded_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.max_coded_extent = max_coded_extent.into();
        self
    }

    #[inline]
    pub fn max_dpb_slots(mut self, max_dpb_slots: u32) -> Self {
        self.value.max_dpb_slots = max_dpb_slots;
        self
    }

    #[inline]
    pub fn max_active_reference_pictures(mut self, max_active_reference_pictures: u32) -> Self {
        self.value.max_active_reference_pictures = max_active_reference_pictures;
        self
    }

    #[inline]
    pub fn std_header_version(
        mut self,
        std_header_version: impl Cast<Target = ExtensionProperties>,
    ) -> Self {
        self.value.std_header_version = std_header_version.into();
        self
    }

    #[inline]
    pub fn build(self) -> VideoCapabilitiesKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoCapabilitiesKHRBuilder<'b> {
    type Target = VideoCapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoCapabilitiesKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoCapabilitiesKHRBuilder<'b> {
    type Target = VideoCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoCodingControlInfoKHR`].
pub unsafe trait ExtendsVideoCodingControlInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoCodingControlInfoKHR for VideoEncodeH264RateControlInfoKHR {}
unsafe impl ExtendsVideoCodingControlInfoKHR for VideoEncodeH265RateControlInfoKHR {}
unsafe impl ExtendsVideoCodingControlInfoKHR for VideoEncodeQualityLevelInfoKHR {}
unsafe impl ExtendsVideoCodingControlInfoKHR for VideoEncodeRateControlInfoKHR {}

unsafe impl Cast for VideoCodingControlInfoKHR {
    type Target = VideoCodingControlInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoCodingControlInfoKHR {
    type Builder = VideoCodingControlInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoCodingControlInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoCodingControlInfoKHRBuilder<'b> {
    value: VideoCodingControlInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoCodingControlInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoCodingControlInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: VideoCodingControlFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> VideoCodingControlInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoCodingControlInfoKHRBuilder<'b> {
    type Target = VideoCodingControlInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoCodingControlInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoCodingControlInfoKHRBuilder<'b> {
    type Target = VideoCodingControlInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeAV1CapabilitiesKHR {
    type Target = VideoDecodeAV1CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoDecodeAV1CapabilitiesKHR {
    type Builder = VideoDecodeAV1CapabilitiesKHRBuilder;
}

/// A builder for a [`VideoDecodeAV1CapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeAV1CapabilitiesKHRBuilder {
    value: VideoDecodeAV1CapabilitiesKHR,
}

impl VideoDecodeAV1CapabilitiesKHRBuilder {
    #[inline]
    pub fn max_level(mut self, max_level: video::StdVideoAV1Level) -> Self {
        self.value.max_level = max_level;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeAV1CapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for VideoDecodeAV1CapabilitiesKHRBuilder {
    type Target = VideoDecodeAV1CapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoDecodeAV1CapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoDecodeAV1CapabilitiesKHRBuilder {
    type Target = VideoDecodeAV1CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeAV1DpbSlotInfoKHR {
    type Target = VideoDecodeAV1DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeAV1DpbSlotInfoKHR {
    type Builder = VideoDecodeAV1DpbSlotInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeAV1DpbSlotInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeAV1DpbSlotInfoKHRBuilder<'b> {
    value: VideoDecodeAV1DpbSlotInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeAV1DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_reference_info(
        mut self,
        std_reference_info: &'b video::StdVideoDecodeAV1ReferenceInfo,
    ) -> Self {
        self.value.std_reference_info =
            std_reference_info as *const video::StdVideoDecodeAV1ReferenceInfo;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeAV1DpbSlotInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeAV1DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoDecodeAV1DpbSlotInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeAV1DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeAV1DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoDecodeAV1DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeAV1PictureInfoKHR {
    type Target = VideoDecodeAV1PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeAV1PictureInfoKHR {
    type Builder = VideoDecodeAV1PictureInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeAV1PictureInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeAV1PictureInfoKHRBuilder<'b> {
    value: VideoDecodeAV1PictureInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeAV1PictureInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_picture_info(
        mut self,
        std_picture_info: &'b video::StdVideoDecodeAV1PictureInfo,
    ) -> Self {
        self.value.std_picture_info =
            std_picture_info as *const video::StdVideoDecodeAV1PictureInfo;
        self
    }

    #[inline]
    pub fn reference_name_slot_indices(
        mut self,
        reference_name_slot_indices: [i32; MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR],
    ) -> Self {
        self.value.reference_name_slot_indices = reference_name_slot_indices;
        self
    }

    #[inline]
    pub fn frame_header_offset(mut self, frame_header_offset: u32) -> Self {
        self.value.frame_header_offset = frame_header_offset;
        self
    }

    #[inline]
    pub fn tile_offsets(mut self, tile_offsets: &'b [u32]) -> Self {
        self.value.tile_count = tile_offsets.len() as u32;
        self.value.tile_offsets = tile_offsets.as_ptr();
        self
    }

    #[inline]
    pub fn tile_sizes(mut self, tile_sizes: &'b [u32]) -> Self {
        self.value.tile_count = tile_sizes.len() as u32;
        self.value.tile_sizes = tile_sizes.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeAV1PictureInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeAV1PictureInfoKHRBuilder<'b> {
    type Target = VideoDecodeAV1PictureInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeAV1PictureInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeAV1PictureInfoKHRBuilder<'b> {
    type Target = VideoDecodeAV1PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeAV1ProfileInfoKHR {
    type Target = VideoDecodeAV1ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoDecodeAV1ProfileInfoKHR {
    type Builder = VideoDecodeAV1ProfileInfoKHRBuilder;
}

/// A builder for a [`VideoDecodeAV1ProfileInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeAV1ProfileInfoKHRBuilder {
    value: VideoDecodeAV1ProfileInfoKHR,
}

impl VideoDecodeAV1ProfileInfoKHRBuilder {
    #[inline]
    pub fn std_profile(mut self, std_profile: video::StdVideoAV1Profile) -> Self {
        self.value.std_profile = std_profile;
        self
    }

    #[inline]
    pub fn film_grain_support(mut self, film_grain_support: bool) -> Self {
        self.value.film_grain_support = film_grain_support as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeAV1ProfileInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoDecodeAV1ProfileInfoKHRBuilder {
    type Target = VideoDecodeAV1ProfileInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoDecodeAV1ProfileInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoDecodeAV1ProfileInfoKHRBuilder {
    type Target = VideoDecodeAV1ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeAV1SessionParametersCreateInfoKHR {
    type Target = VideoDecodeAV1SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeAV1SessionParametersCreateInfoKHR {
    type Builder = VideoDecodeAV1SessionParametersCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeAV1SessionParametersCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeAV1SessionParametersCreateInfoKHRBuilder<'b> {
    value: VideoDecodeAV1SessionParametersCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeAV1SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_sequence_header(
        mut self,
        std_sequence_header: &'b video::StdVideoAV1SequenceHeader,
    ) -> Self {
        self.value.std_sequence_header =
            std_sequence_header as *const video::StdVideoAV1SequenceHeader;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeAV1SessionParametersCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeAV1SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoDecodeAV1SessionParametersCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeAV1SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeAV1SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoDecodeAV1SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeCapabilitiesKHR {
    type Target = VideoDecodeCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoDecodeCapabilitiesKHR {
    type Builder = VideoDecodeCapabilitiesKHRBuilder;
}

/// A builder for a [`VideoDecodeCapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeCapabilitiesKHRBuilder {
    value: VideoDecodeCapabilitiesKHR,
}

impl VideoDecodeCapabilitiesKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: VideoDecodeCapabilityFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeCapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for VideoDecodeCapabilitiesKHRBuilder {
    type Target = VideoDecodeCapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoDecodeCapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoDecodeCapabilitiesKHRBuilder {
    type Target = VideoDecodeCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH264CapabilitiesKHR {
    type Target = VideoDecodeH264CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoDecodeH264CapabilitiesKHR {
    type Builder = VideoDecodeH264CapabilitiesKHRBuilder;
}

/// A builder for a [`VideoDecodeH264CapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH264CapabilitiesKHRBuilder {
    value: VideoDecodeH264CapabilitiesKHR,
}

impl VideoDecodeH264CapabilitiesKHRBuilder {
    #[inline]
    pub fn max_level_idc(mut self, max_level_idc: video::StdVideoH264LevelIdc) -> Self {
        self.value.max_level_idc = max_level_idc;
        self
    }

    #[inline]
    pub fn field_offset_granularity(
        mut self,
        field_offset_granularity: impl Cast<Target = Offset2D>,
    ) -> Self {
        self.value.field_offset_granularity = field_offset_granularity.into();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH264CapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for VideoDecodeH264CapabilitiesKHRBuilder {
    type Target = VideoDecodeH264CapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoDecodeH264CapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoDecodeH264CapabilitiesKHRBuilder {
    type Target = VideoDecodeH264CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH264DpbSlotInfoKHR {
    type Target = VideoDecodeH264DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeH264DpbSlotInfoKHR {
    type Builder = VideoDecodeH264DpbSlotInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeH264DpbSlotInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH264DpbSlotInfoKHRBuilder<'b> {
    value: VideoDecodeH264DpbSlotInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeH264DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_reference_info(
        mut self,
        std_reference_info: &'b video::StdVideoDecodeH264ReferenceInfo,
    ) -> Self {
        self.value.std_reference_info =
            std_reference_info as *const video::StdVideoDecodeH264ReferenceInfo;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH264DpbSlotInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeH264DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoDecodeH264DpbSlotInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeH264DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeH264DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoDecodeH264DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH264PictureInfoKHR {
    type Target = VideoDecodeH264PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeH264PictureInfoKHR {
    type Builder = VideoDecodeH264PictureInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeH264PictureInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH264PictureInfoKHRBuilder<'b> {
    value: VideoDecodeH264PictureInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeH264PictureInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_picture_info(
        mut self,
        std_picture_info: &'b video::StdVideoDecodeH264PictureInfo,
    ) -> Self {
        self.value.std_picture_info =
            std_picture_info as *const video::StdVideoDecodeH264PictureInfo;
        self
    }

    #[inline]
    pub fn slice_offsets(mut self, slice_offsets: &'b [u32]) -> Self {
        self.value.slice_count = slice_offsets.len() as u32;
        self.value.slice_offsets = slice_offsets.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH264PictureInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeH264PictureInfoKHRBuilder<'b> {
    type Target = VideoDecodeH264PictureInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeH264PictureInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeH264PictureInfoKHRBuilder<'b> {
    type Target = VideoDecodeH264PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH264ProfileInfoKHR {
    type Target = VideoDecodeH264ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoDecodeH264ProfileInfoKHR {
    type Builder = VideoDecodeH264ProfileInfoKHRBuilder;
}

/// A builder for a [`VideoDecodeH264ProfileInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH264ProfileInfoKHRBuilder {
    value: VideoDecodeH264ProfileInfoKHR,
}

impl VideoDecodeH264ProfileInfoKHRBuilder {
    #[inline]
    pub fn std_profile_idc(mut self, std_profile_idc: video::StdVideoH264ProfileIdc) -> Self {
        self.value.std_profile_idc = std_profile_idc;
        self
    }

    #[inline]
    pub fn picture_layout(mut self, picture_layout: VideoDecodeH264PictureLayoutFlagsKHR) -> Self {
        self.value.picture_layout = picture_layout;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH264ProfileInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoDecodeH264ProfileInfoKHRBuilder {
    type Target = VideoDecodeH264ProfileInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoDecodeH264ProfileInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoDecodeH264ProfileInfoKHRBuilder {
    type Target = VideoDecodeH264ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH264SessionParametersAddInfoKHR {
    type Target = VideoDecodeH264SessionParametersAddInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeH264SessionParametersAddInfoKHR {
    type Builder = VideoDecodeH264SessionParametersAddInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeH264SessionParametersAddInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH264SessionParametersAddInfoKHRBuilder<'b> {
    value: VideoDecodeH264SessionParametersAddInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeH264SessionParametersAddInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_sp_ss(mut self, std_sp_ss: &'b [video::StdVideoH264SequenceParameterSet]) -> Self {
        self.value.std_sps_count = std_sp_ss.len() as u32;
        self.value.std_sp_ss = std_sp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn std_pp_ss(mut self, std_pp_ss: &'b [video::StdVideoH264PictureParameterSet]) -> Self {
        self.value.std_pps_count = std_pp_ss.len() as u32;
        self.value.std_pp_ss = std_pp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH264SessionParametersAddInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeH264SessionParametersAddInfoKHRBuilder<'b> {
    type Target = VideoDecodeH264SessionParametersAddInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeH264SessionParametersAddInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeH264SessionParametersAddInfoKHRBuilder<'b> {
    type Target = VideoDecodeH264SessionParametersAddInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH264SessionParametersCreateInfoKHR {
    type Target = VideoDecodeH264SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeH264SessionParametersCreateInfoKHR {
    type Builder = VideoDecodeH264SessionParametersCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeH264SessionParametersCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    value: VideoDecodeH264SessionParametersCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn max_std_sps_count(mut self, max_std_sps_count: u32) -> Self {
        self.value.max_std_sps_count = max_std_sps_count;
        self
    }

    #[inline]
    pub fn max_std_pps_count(mut self, max_std_pps_count: u32) -> Self {
        self.value.max_std_pps_count = max_std_pps_count;
        self
    }

    #[inline]
    pub fn parameters_add_info(
        mut self,
        parameters_add_info: &'b impl Cast<Target = VideoDecodeH264SessionParametersAddInfoKHR>,
    ) -> Self {
        self.value.parameters_add_info = parameters_add_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH264SessionParametersCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoDecodeH264SessionParametersCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoDecodeH264SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH265CapabilitiesKHR {
    type Target = VideoDecodeH265CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoDecodeH265CapabilitiesKHR {
    type Builder = VideoDecodeH265CapabilitiesKHRBuilder;
}

/// A builder for a [`VideoDecodeH265CapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH265CapabilitiesKHRBuilder {
    value: VideoDecodeH265CapabilitiesKHR,
}

impl VideoDecodeH265CapabilitiesKHRBuilder {
    #[inline]
    pub fn max_level_idc(mut self, max_level_idc: video::StdVideoH265LevelIdc) -> Self {
        self.value.max_level_idc = max_level_idc;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH265CapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for VideoDecodeH265CapabilitiesKHRBuilder {
    type Target = VideoDecodeH265CapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoDecodeH265CapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoDecodeH265CapabilitiesKHRBuilder {
    type Target = VideoDecodeH265CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH265DpbSlotInfoKHR {
    type Target = VideoDecodeH265DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeH265DpbSlotInfoKHR {
    type Builder = VideoDecodeH265DpbSlotInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeH265DpbSlotInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH265DpbSlotInfoKHRBuilder<'b> {
    value: VideoDecodeH265DpbSlotInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeH265DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_reference_info(
        mut self,
        std_reference_info: &'b video::StdVideoDecodeH265ReferenceInfo,
    ) -> Self {
        self.value.std_reference_info =
            std_reference_info as *const video::StdVideoDecodeH265ReferenceInfo;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH265DpbSlotInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeH265DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoDecodeH265DpbSlotInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeH265DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeH265DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoDecodeH265DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH265PictureInfoKHR {
    type Target = VideoDecodeH265PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeH265PictureInfoKHR {
    type Builder = VideoDecodeH265PictureInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeH265PictureInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH265PictureInfoKHRBuilder<'b> {
    value: VideoDecodeH265PictureInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeH265PictureInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_picture_info(
        mut self,
        std_picture_info: &'b video::StdVideoDecodeH265PictureInfo,
    ) -> Self {
        self.value.std_picture_info =
            std_picture_info as *const video::StdVideoDecodeH265PictureInfo;
        self
    }

    #[inline]
    pub fn slice_segment_offsets(mut self, slice_segment_offsets: &'b [u32]) -> Self {
        self.value.slice_segment_count = slice_segment_offsets.len() as u32;
        self.value.slice_segment_offsets = slice_segment_offsets.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH265PictureInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeH265PictureInfoKHRBuilder<'b> {
    type Target = VideoDecodeH265PictureInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeH265PictureInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeH265PictureInfoKHRBuilder<'b> {
    type Target = VideoDecodeH265PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH265ProfileInfoKHR {
    type Target = VideoDecodeH265ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoDecodeH265ProfileInfoKHR {
    type Builder = VideoDecodeH265ProfileInfoKHRBuilder;
}

/// A builder for a [`VideoDecodeH265ProfileInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH265ProfileInfoKHRBuilder {
    value: VideoDecodeH265ProfileInfoKHR,
}

impl VideoDecodeH265ProfileInfoKHRBuilder {
    #[inline]
    pub fn std_profile_idc(mut self, std_profile_idc: video::StdVideoH265ProfileIdc) -> Self {
        self.value.std_profile_idc = std_profile_idc;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH265ProfileInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoDecodeH265ProfileInfoKHRBuilder {
    type Target = VideoDecodeH265ProfileInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoDecodeH265ProfileInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoDecodeH265ProfileInfoKHRBuilder {
    type Target = VideoDecodeH265ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH265SessionParametersAddInfoKHR {
    type Target = VideoDecodeH265SessionParametersAddInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeH265SessionParametersAddInfoKHR {
    type Builder = VideoDecodeH265SessionParametersAddInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeH265SessionParametersAddInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH265SessionParametersAddInfoKHRBuilder<'b> {
    value: VideoDecodeH265SessionParametersAddInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeH265SessionParametersAddInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_vp_ss(mut self, std_vp_ss: &'b [video::StdVideoH265VideoParameterSet]) -> Self {
        self.value.std_vps_count = std_vp_ss.len() as u32;
        self.value.std_vp_ss = std_vp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn std_sp_ss(mut self, std_sp_ss: &'b [video::StdVideoH265SequenceParameterSet]) -> Self {
        self.value.std_sps_count = std_sp_ss.len() as u32;
        self.value.std_sp_ss = std_sp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn std_pp_ss(mut self, std_pp_ss: &'b [video::StdVideoH265PictureParameterSet]) -> Self {
        self.value.std_pps_count = std_pp_ss.len() as u32;
        self.value.std_pp_ss = std_pp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH265SessionParametersAddInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeH265SessionParametersAddInfoKHRBuilder<'b> {
    type Target = VideoDecodeH265SessionParametersAddInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeH265SessionParametersAddInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeH265SessionParametersAddInfoKHRBuilder<'b> {
    type Target = VideoDecodeH265SessionParametersAddInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeH265SessionParametersCreateInfoKHR {
    type Target = VideoDecodeH265SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeH265SessionParametersCreateInfoKHR {
    type Builder = VideoDecodeH265SessionParametersCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeH265SessionParametersCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    value: VideoDecodeH265SessionParametersCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn max_std_vps_count(mut self, max_std_vps_count: u32) -> Self {
        self.value.max_std_vps_count = max_std_vps_count;
        self
    }

    #[inline]
    pub fn max_std_sps_count(mut self, max_std_sps_count: u32) -> Self {
        self.value.max_std_sps_count = max_std_sps_count;
        self
    }

    #[inline]
    pub fn max_std_pps_count(mut self, max_std_pps_count: u32) -> Self {
        self.value.max_std_pps_count = max_std_pps_count;
        self
    }

    #[inline]
    pub fn parameters_add_info(
        mut self,
        parameters_add_info: &'b impl Cast<Target = VideoDecodeH265SessionParametersAddInfoKHR>,
    ) -> Self {
        self.value.parameters_add_info = parameters_add_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeH265SessionParametersCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoDecodeH265SessionParametersCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoDecodeH265SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoDecodeInfoKHR`].
pub unsafe trait ExtendsVideoDecodeInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoDecodeInfoKHR for VideoDecodeAV1PictureInfoKHR {}
unsafe impl ExtendsVideoDecodeInfoKHR for VideoDecodeH264PictureInfoKHR {}
unsafe impl ExtendsVideoDecodeInfoKHR for VideoDecodeH265PictureInfoKHR {}
unsafe impl ExtendsVideoDecodeInfoKHR for VideoInlineQueryInfoKHR {}

unsafe impl Cast for VideoDecodeInfoKHR {
    type Target = VideoDecodeInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoDecodeInfoKHR {
    type Builder = VideoDecodeInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoDecodeInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeInfoKHRBuilder<'b> {
    value: VideoDecodeInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoDecodeInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoDecodeInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: VideoDecodeFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn src_buffer(mut self, src_buffer: Buffer) -> Self {
        self.value.src_buffer = src_buffer;
        self
    }

    #[inline]
    pub fn src_buffer_offset(mut self, src_buffer_offset: DeviceSize) -> Self {
        self.value.src_buffer_offset = src_buffer_offset;
        self
    }

    #[inline]
    pub fn src_buffer_range(mut self, src_buffer_range: DeviceSize) -> Self {
        self.value.src_buffer_range = src_buffer_range;
        self
    }

    #[inline]
    pub fn dst_picture_resource(
        mut self,
        dst_picture_resource: impl Cast<Target = VideoPictureResourceInfoKHR>,
    ) -> Self {
        self.value.dst_picture_resource = dst_picture_resource.into();
        self
    }

    #[inline]
    pub fn setup_reference_slot(
        mut self,
        setup_reference_slot: &'b impl Cast<Target = VideoReferenceSlotInfoKHR>,
    ) -> Self {
        self.value.setup_reference_slot = setup_reference_slot.as_ref();
        self
    }

    #[inline]
    pub fn reference_slots(
        mut self,
        reference_slots: &'b [impl Cast<Target = VideoReferenceSlotInfoKHR>],
    ) -> Self {
        self.value.reference_slot_count = reference_slots.len() as u32;
        self.value.reference_slots = reference_slots.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoDecodeInfoKHRBuilder<'b> {
    type Target = VideoDecodeInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoDecodeInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoDecodeInfoKHRBuilder<'b> {
    type Target = VideoDecodeInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoDecodeUsageInfoKHR {
    type Target = VideoDecodeUsageInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoDecodeUsageInfoKHR {
    type Builder = VideoDecodeUsageInfoKHRBuilder;
}

/// A builder for a [`VideoDecodeUsageInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoDecodeUsageInfoKHRBuilder {
    value: VideoDecodeUsageInfoKHR,
}

impl VideoDecodeUsageInfoKHRBuilder {
    #[inline]
    pub fn video_usage_hints(mut self, video_usage_hints: VideoDecodeUsageFlagsKHR) -> Self {
        self.value.video_usage_hints = video_usage_hints;
        self
    }

    #[inline]
    pub fn build(self) -> VideoDecodeUsageInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoDecodeUsageInfoKHRBuilder {
    type Target = VideoDecodeUsageInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoDecodeUsageInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoDecodeUsageInfoKHRBuilder {
    type Target = VideoDecodeUsageInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeCapabilitiesKHR {
    type Target = VideoEncodeCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeCapabilitiesKHR {
    type Builder = VideoEncodeCapabilitiesKHRBuilder;
}

/// A builder for a [`VideoEncodeCapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeCapabilitiesKHRBuilder {
    value: VideoEncodeCapabilitiesKHR,
}

impl VideoEncodeCapabilitiesKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: VideoEncodeCapabilityFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn rate_control_modes(
        mut self,
        rate_control_modes: VideoEncodeRateControlModeFlagsKHR,
    ) -> Self {
        self.value.rate_control_modes = rate_control_modes;
        self
    }

    #[inline]
    pub fn max_rate_control_layers(mut self, max_rate_control_layers: u32) -> Self {
        self.value.max_rate_control_layers = max_rate_control_layers;
        self
    }

    #[inline]
    pub fn max_bitrate(mut self, max_bitrate: u64) -> Self {
        self.value.max_bitrate = max_bitrate;
        self
    }

    #[inline]
    pub fn max_quality_levels(mut self, max_quality_levels: u32) -> Self {
        self.value.max_quality_levels = max_quality_levels;
        self
    }

    #[inline]
    pub fn encode_input_picture_granularity(
        mut self,
        encode_input_picture_granularity: impl Cast<Target = Extent2D>,
    ) -> Self {
        self.value.encode_input_picture_granularity = encode_input_picture_granularity.into();
        self
    }

    #[inline]
    pub fn supported_encode_feedback_flags(
        mut self,
        supported_encode_feedback_flags: VideoEncodeFeedbackFlagsKHR,
    ) -> Self {
        self.value.supported_encode_feedback_flags = supported_encode_feedback_flags;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeCapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeCapabilitiesKHRBuilder {
    type Target = VideoEncodeCapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeCapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeCapabilitiesKHRBuilder {
    type Target = VideoEncodeCapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264CapabilitiesKHR {
    type Target = VideoEncodeH264CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264CapabilitiesKHR {
    type Builder = VideoEncodeH264CapabilitiesKHRBuilder;
}

/// A builder for a [`VideoEncodeH264CapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264CapabilitiesKHRBuilder {
    value: VideoEncodeH264CapabilitiesKHR,
}

impl VideoEncodeH264CapabilitiesKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: VideoEncodeH264CapabilityFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn max_level_idc(mut self, max_level_idc: video::StdVideoH264LevelIdc) -> Self {
        self.value.max_level_idc = max_level_idc;
        self
    }

    #[inline]
    pub fn max_slice_count(mut self, max_slice_count: u32) -> Self {
        self.value.max_slice_count = max_slice_count;
        self
    }

    #[inline]
    pub fn max_p_picture_l0_reference_count(
        mut self,
        max_p_picture_l0_reference_count: u32,
    ) -> Self {
        self.value.max_p_picture_l0_reference_count = max_p_picture_l0_reference_count;
        self
    }

    #[inline]
    pub fn max_b_picture_l0_reference_count(
        mut self,
        max_b_picture_l0_reference_count: u32,
    ) -> Self {
        self.value.max_b_picture_l0_reference_count = max_b_picture_l0_reference_count;
        self
    }

    #[inline]
    pub fn max_l1_reference_count(mut self, max_l1_reference_count: u32) -> Self {
        self.value.max_l1_reference_count = max_l1_reference_count;
        self
    }

    #[inline]
    pub fn max_temporal_layer_count(mut self, max_temporal_layer_count: u32) -> Self {
        self.value.max_temporal_layer_count = max_temporal_layer_count;
        self
    }

    #[inline]
    pub fn expect_dyadic_temporal_layer_pattern(
        mut self,
        expect_dyadic_temporal_layer_pattern: bool,
    ) -> Self {
        self.value.expect_dyadic_temporal_layer_pattern =
            expect_dyadic_temporal_layer_pattern as Bool32;
        self
    }

    #[inline]
    pub fn min_qp(mut self, min_qp: i32) -> Self {
        self.value.min_qp = min_qp;
        self
    }

    #[inline]
    pub fn max_qp(mut self, max_qp: i32) -> Self {
        self.value.max_qp = max_qp;
        self
    }

    #[inline]
    pub fn prefers_gop_remaining_frames(mut self, prefers_gop_remaining_frames: bool) -> Self {
        self.value.prefers_gop_remaining_frames = prefers_gop_remaining_frames as Bool32;
        self
    }

    #[inline]
    pub fn requires_gop_remaining_frames(mut self, requires_gop_remaining_frames: bool) -> Self {
        self.value.requires_gop_remaining_frames = requires_gop_remaining_frames as Bool32;
        self
    }

    #[inline]
    pub fn std_syntax_flags(mut self, std_syntax_flags: VideoEncodeH264StdFlagsKHR) -> Self {
        self.value.std_syntax_flags = std_syntax_flags;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264CapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264CapabilitiesKHRBuilder {
    type Target = VideoEncodeH264CapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264CapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264CapabilitiesKHRBuilder {
    type Target = VideoEncodeH264CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264DpbSlotInfoKHR {
    type Target = VideoEncodeH264DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH264DpbSlotInfoKHR {
    type Builder = VideoEncodeH264DpbSlotInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH264DpbSlotInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264DpbSlotInfoKHRBuilder<'b> {
    value: VideoEncodeH264DpbSlotInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH264DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_reference_info(
        mut self,
        std_reference_info: &'b video::StdVideoEncodeH264ReferenceInfo,
    ) -> Self {
        self.value.std_reference_info =
            std_reference_info as *const video::StdVideoEncodeH264ReferenceInfo;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264DpbSlotInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH264DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264DpbSlotInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH264DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH264DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264FrameSizeKHR {
    type Target = VideoEncodeH264FrameSizeKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264FrameSizeKHR {
    type Builder = VideoEncodeH264FrameSizeKHRBuilder;
}

/// A builder for a [`VideoEncodeH264FrameSizeKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264FrameSizeKHRBuilder {
    value: VideoEncodeH264FrameSizeKHR,
}

impl VideoEncodeH264FrameSizeKHRBuilder {
    #[inline]
    pub fn frame_i_size(mut self, frame_i_size: u32) -> Self {
        self.value.frame_i_size = frame_i_size;
        self
    }

    #[inline]
    pub fn frame_p_size(mut self, frame_p_size: u32) -> Self {
        self.value.frame_p_size = frame_p_size;
        self
    }

    #[inline]
    pub fn frame_b_size(mut self, frame_b_size: u32) -> Self {
        self.value.frame_b_size = frame_b_size;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264FrameSizeKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264FrameSizeKHRBuilder {
    type Target = VideoEncodeH264FrameSizeKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264FrameSizeKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264FrameSizeKHRBuilder {
    type Target = VideoEncodeH264FrameSizeKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264GopRemainingFrameInfoKHR {
    type Target = VideoEncodeH264GopRemainingFrameInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264GopRemainingFrameInfoKHR {
    type Builder = VideoEncodeH264GopRemainingFrameInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH264GopRemainingFrameInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264GopRemainingFrameInfoKHRBuilder {
    value: VideoEncodeH264GopRemainingFrameInfoKHR,
}

impl VideoEncodeH264GopRemainingFrameInfoKHRBuilder {
    #[inline]
    pub fn use_gop_remaining_frames(mut self, use_gop_remaining_frames: bool) -> Self {
        self.value.use_gop_remaining_frames = use_gop_remaining_frames as Bool32;
        self
    }

    #[inline]
    pub fn gop_remaining_i(mut self, gop_remaining_i: u32) -> Self {
        self.value.gop_remaining_i = gop_remaining_i;
        self
    }

    #[inline]
    pub fn gop_remaining_p(mut self, gop_remaining_p: u32) -> Self {
        self.value.gop_remaining_p = gop_remaining_p;
        self
    }

    #[inline]
    pub fn gop_remaining_b(mut self, gop_remaining_b: u32) -> Self {
        self.value.gop_remaining_b = gop_remaining_b;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264GopRemainingFrameInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264GopRemainingFrameInfoKHRBuilder {
    type Target = VideoEncodeH264GopRemainingFrameInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264GopRemainingFrameInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264GopRemainingFrameInfoKHRBuilder {
    type Target = VideoEncodeH264GopRemainingFrameInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264NaluSliceInfoKHR {
    type Target = VideoEncodeH264NaluSliceInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH264NaluSliceInfoKHR {
    type Builder = VideoEncodeH264NaluSliceInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH264NaluSliceInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264NaluSliceInfoKHRBuilder<'b> {
    value: VideoEncodeH264NaluSliceInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH264NaluSliceInfoKHRBuilder<'b> {
    #[inline]
    pub fn constant_qp(mut self, constant_qp: i32) -> Self {
        self.value.constant_qp = constant_qp;
        self
    }

    #[inline]
    pub fn std_slice_header(
        mut self,
        std_slice_header: &'b video::StdVideoEncodeH264SliceHeader,
    ) -> Self {
        self.value.std_slice_header =
            std_slice_header as *const video::StdVideoEncodeH264SliceHeader;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264NaluSliceInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH264NaluSliceInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264NaluSliceInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH264NaluSliceInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH264NaluSliceInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264NaluSliceInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264PictureInfoKHR {
    type Target = VideoEncodeH264PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH264PictureInfoKHR {
    type Builder = VideoEncodeH264PictureInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH264PictureInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264PictureInfoKHRBuilder<'b> {
    value: VideoEncodeH264PictureInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH264PictureInfoKHRBuilder<'b> {
    #[inline]
    pub fn nalu_slice_entries(
        mut self,
        nalu_slice_entries: &'b [impl Cast<Target = VideoEncodeH264NaluSliceInfoKHR>],
    ) -> Self {
        self.value.nalu_slice_entry_count = nalu_slice_entries.len() as u32;
        self.value.nalu_slice_entries = nalu_slice_entries.as_ptr().cast();
        self
    }

    #[inline]
    pub fn std_picture_info(
        mut self,
        std_picture_info: &'b video::StdVideoEncodeH264PictureInfo,
    ) -> Self {
        self.value.std_picture_info =
            std_picture_info as *const video::StdVideoEncodeH264PictureInfo;
        self
    }

    #[inline]
    pub fn generate_prefix_nalu(mut self, generate_prefix_nalu: bool) -> Self {
        self.value.generate_prefix_nalu = generate_prefix_nalu as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264PictureInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH264PictureInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264PictureInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH264PictureInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH264PictureInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264ProfileInfoKHR {
    type Target = VideoEncodeH264ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264ProfileInfoKHR {
    type Builder = VideoEncodeH264ProfileInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH264ProfileInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264ProfileInfoKHRBuilder {
    value: VideoEncodeH264ProfileInfoKHR,
}

impl VideoEncodeH264ProfileInfoKHRBuilder {
    #[inline]
    pub fn std_profile_idc(mut self, std_profile_idc: video::StdVideoH264ProfileIdc) -> Self {
        self.value.std_profile_idc = std_profile_idc;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264ProfileInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264ProfileInfoKHRBuilder {
    type Target = VideoEncodeH264ProfileInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264ProfileInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264ProfileInfoKHRBuilder {
    type Target = VideoEncodeH264ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264QpKHR {
    type Target = VideoEncodeH264QpKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264QpKHR {
    type Builder = VideoEncodeH264QpKHRBuilder;
}

/// A builder for a [`VideoEncodeH264QpKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264QpKHRBuilder {
    value: VideoEncodeH264QpKHR,
}

impl VideoEncodeH264QpKHRBuilder {
    #[inline]
    pub fn qp_i(mut self, qp_i: i32) -> Self {
        self.value.qp_i = qp_i;
        self
    }

    #[inline]
    pub fn qp_p(mut self, qp_p: i32) -> Self {
        self.value.qp_p = qp_p;
        self
    }

    #[inline]
    pub fn qp_b(mut self, qp_b: i32) -> Self {
        self.value.qp_b = qp_b;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264QpKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264QpKHRBuilder {
    type Target = VideoEncodeH264QpKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264QpKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264QpKHRBuilder {
    type Target = VideoEncodeH264QpKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264QualityLevelPropertiesKHR {
    type Target = VideoEncodeH264QualityLevelPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264QualityLevelPropertiesKHR {
    type Builder = VideoEncodeH264QualityLevelPropertiesKHRBuilder;
}

/// A builder for a [`VideoEncodeH264QualityLevelPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264QualityLevelPropertiesKHRBuilder {
    value: VideoEncodeH264QualityLevelPropertiesKHR,
}

impl VideoEncodeH264QualityLevelPropertiesKHRBuilder {
    #[inline]
    pub fn preferred_rate_control_flags(
        mut self,
        preferred_rate_control_flags: VideoEncodeH264RateControlFlagsKHR,
    ) -> Self {
        self.value.preferred_rate_control_flags = preferred_rate_control_flags;
        self
    }

    #[inline]
    pub fn preferred_gop_frame_count(mut self, preferred_gop_frame_count: u32) -> Self {
        self.value.preferred_gop_frame_count = preferred_gop_frame_count;
        self
    }

    #[inline]
    pub fn preferred_idr_period(mut self, preferred_idr_period: u32) -> Self {
        self.value.preferred_idr_period = preferred_idr_period;
        self
    }

    #[inline]
    pub fn preferred_consecutive_b_frame_count(
        mut self,
        preferred_consecutive_b_frame_count: u32,
    ) -> Self {
        self.value.preferred_consecutive_b_frame_count = preferred_consecutive_b_frame_count;
        self
    }

    #[inline]
    pub fn preferred_temporal_layer_count(mut self, preferred_temporal_layer_count: u32) -> Self {
        self.value.preferred_temporal_layer_count = preferred_temporal_layer_count;
        self
    }

    #[inline]
    pub fn preferred_constant_qp(
        mut self,
        preferred_constant_qp: impl Cast<Target = VideoEncodeH264QpKHR>,
    ) -> Self {
        self.value.preferred_constant_qp = preferred_constant_qp.into();
        self
    }

    #[inline]
    pub fn preferred_max_l0_reference_count(
        mut self,
        preferred_max_l0_reference_count: u32,
    ) -> Self {
        self.value.preferred_max_l0_reference_count = preferred_max_l0_reference_count;
        self
    }

    #[inline]
    pub fn preferred_max_l1_reference_count(
        mut self,
        preferred_max_l1_reference_count: u32,
    ) -> Self {
        self.value.preferred_max_l1_reference_count = preferred_max_l1_reference_count;
        self
    }

    #[inline]
    pub fn preferred_std_entropy_coding_mode_flag(
        mut self,
        preferred_std_entropy_coding_mode_flag: bool,
    ) -> Self {
        self.value.preferred_std_entropy_coding_mode_flag =
            preferred_std_entropy_coding_mode_flag as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264QualityLevelPropertiesKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264QualityLevelPropertiesKHRBuilder {
    type Target = VideoEncodeH264QualityLevelPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264QualityLevelPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264QualityLevelPropertiesKHRBuilder {
    type Target = VideoEncodeH264QualityLevelPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264RateControlInfoKHR {
    type Target = VideoEncodeH264RateControlInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264RateControlInfoKHR {
    type Builder = VideoEncodeH264RateControlInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH264RateControlInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264RateControlInfoKHRBuilder {
    value: VideoEncodeH264RateControlInfoKHR,
}

impl VideoEncodeH264RateControlInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: VideoEncodeH264RateControlFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn gop_frame_count(mut self, gop_frame_count: u32) -> Self {
        self.value.gop_frame_count = gop_frame_count;
        self
    }

    #[inline]
    pub fn idr_period(mut self, idr_period: u32) -> Self {
        self.value.idr_period = idr_period;
        self
    }

    #[inline]
    pub fn consecutive_b_frame_count(mut self, consecutive_b_frame_count: u32) -> Self {
        self.value.consecutive_b_frame_count = consecutive_b_frame_count;
        self
    }

    #[inline]
    pub fn temporal_layer_count(mut self, temporal_layer_count: u32) -> Self {
        self.value.temporal_layer_count = temporal_layer_count;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264RateControlInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264RateControlInfoKHRBuilder {
    type Target = VideoEncodeH264RateControlInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264RateControlInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264RateControlInfoKHRBuilder {
    type Target = VideoEncodeH264RateControlInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264RateControlLayerInfoKHR {
    type Target = VideoEncodeH264RateControlLayerInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264RateControlLayerInfoKHR {
    type Builder = VideoEncodeH264RateControlLayerInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH264RateControlLayerInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264RateControlLayerInfoKHRBuilder {
    value: VideoEncodeH264RateControlLayerInfoKHR,
}

impl VideoEncodeH264RateControlLayerInfoKHRBuilder {
    #[inline]
    pub fn use_min_qp(mut self, use_min_qp: bool) -> Self {
        self.value.use_min_qp = use_min_qp as Bool32;
        self
    }

    #[inline]
    pub fn min_qp(mut self, min_qp: impl Cast<Target = VideoEncodeH264QpKHR>) -> Self {
        self.value.min_qp = min_qp.into();
        self
    }

    #[inline]
    pub fn use_max_qp(mut self, use_max_qp: bool) -> Self {
        self.value.use_max_qp = use_max_qp as Bool32;
        self
    }

    #[inline]
    pub fn max_qp(mut self, max_qp: impl Cast<Target = VideoEncodeH264QpKHR>) -> Self {
        self.value.max_qp = max_qp.into();
        self
    }

    #[inline]
    pub fn use_max_frame_size(mut self, use_max_frame_size: bool) -> Self {
        self.value.use_max_frame_size = use_max_frame_size as Bool32;
        self
    }

    #[inline]
    pub fn max_frame_size(
        mut self,
        max_frame_size: impl Cast<Target = VideoEncodeH264FrameSizeKHR>,
    ) -> Self {
        self.value.max_frame_size = max_frame_size.into();
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264RateControlLayerInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264RateControlLayerInfoKHRBuilder {
    type Target = VideoEncodeH264RateControlLayerInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264RateControlLayerInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264RateControlLayerInfoKHRBuilder {
    type Target = VideoEncodeH264RateControlLayerInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264SessionCreateInfoKHR {
    type Target = VideoEncodeH264SessionCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264SessionCreateInfoKHR {
    type Builder = VideoEncodeH264SessionCreateInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH264SessionCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264SessionCreateInfoKHRBuilder {
    value: VideoEncodeH264SessionCreateInfoKHR,
}

impl VideoEncodeH264SessionCreateInfoKHRBuilder {
    #[inline]
    pub fn use_max_level_idc(mut self, use_max_level_idc: bool) -> Self {
        self.value.use_max_level_idc = use_max_level_idc as Bool32;
        self
    }

    #[inline]
    pub fn max_level_idc(mut self, max_level_idc: video::StdVideoH264LevelIdc) -> Self {
        self.value.max_level_idc = max_level_idc;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264SessionCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264SessionCreateInfoKHRBuilder {
    type Target = VideoEncodeH264SessionCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264SessionCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264SessionCreateInfoKHRBuilder {
    type Target = VideoEncodeH264SessionCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264SessionParametersAddInfoKHR {
    type Target = VideoEncodeH264SessionParametersAddInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH264SessionParametersAddInfoKHR {
    type Builder = VideoEncodeH264SessionParametersAddInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH264SessionParametersAddInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264SessionParametersAddInfoKHRBuilder<'b> {
    value: VideoEncodeH264SessionParametersAddInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH264SessionParametersAddInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_sps_count(mut self, std_sps_count: u32) -> Self {
        self.value.std_sps_count = std_sps_count;
        self
    }

    #[inline]
    pub fn std_sp_ss(mut self, std_sp_ss: &'b [video::StdVideoH264SequenceParameterSet]) -> Self {
        self.value.std_sps_count = std_sp_ss.len() as u32;
        self.value.std_sp_ss = std_sp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn std_pps_count(mut self, std_pps_count: u32) -> Self {
        self.value.std_pps_count = std_pps_count;
        self
    }

    #[inline]
    pub fn std_pp_ss(mut self, std_pp_ss: &'b [video::StdVideoH264PictureParameterSet]) -> Self {
        self.value.std_pps_count = std_pp_ss.len() as u32;
        self.value.std_pp_ss = std_pp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264SessionParametersAddInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH264SessionParametersAddInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264SessionParametersAddInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH264SessionParametersAddInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH264SessionParametersAddInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264SessionParametersAddInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264SessionParametersCreateInfoKHR {
    type Target = VideoEncodeH264SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH264SessionParametersCreateInfoKHR {
    type Builder = VideoEncodeH264SessionParametersCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH264SessionParametersCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    value: VideoEncodeH264SessionParametersCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn max_std_sps_count(mut self, max_std_sps_count: u32) -> Self {
        self.value.max_std_sps_count = max_std_sps_count;
        self
    }

    #[inline]
    pub fn max_std_pps_count(mut self, max_std_pps_count: u32) -> Self {
        self.value.max_std_pps_count = max_std_pps_count;
        self
    }

    #[inline]
    pub fn parameters_add_info(
        mut self,
        parameters_add_info: &'b impl Cast<Target = VideoEncodeH264SessionParametersAddInfoKHR>,
    ) -> Self {
        self.value.parameters_add_info = parameters_add_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264SessionParametersCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264SessionParametersCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH264SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoEncodeH264SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264SessionParametersFeedbackInfoKHR {
    type Target = VideoEncodeH264SessionParametersFeedbackInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264SessionParametersFeedbackInfoKHR {
    type Builder = VideoEncodeH264SessionParametersFeedbackInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH264SessionParametersFeedbackInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264SessionParametersFeedbackInfoKHRBuilder {
    value: VideoEncodeH264SessionParametersFeedbackInfoKHR,
}

impl VideoEncodeH264SessionParametersFeedbackInfoKHRBuilder {
    #[inline]
    pub fn has_std_sps_overrides(mut self, has_std_sps_overrides: bool) -> Self {
        self.value.has_std_sps_overrides = has_std_sps_overrides as Bool32;
        self
    }

    #[inline]
    pub fn has_std_pps_overrides(mut self, has_std_pps_overrides: bool) -> Self {
        self.value.has_std_pps_overrides = has_std_pps_overrides as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264SessionParametersFeedbackInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264SessionParametersFeedbackInfoKHRBuilder {
    type Target = VideoEncodeH264SessionParametersFeedbackInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264SessionParametersFeedbackInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264SessionParametersFeedbackInfoKHRBuilder {
    type Target = VideoEncodeH264SessionParametersFeedbackInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH264SessionParametersGetInfoKHR {
    type Target = VideoEncodeH264SessionParametersGetInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH264SessionParametersGetInfoKHR {
    type Builder = VideoEncodeH264SessionParametersGetInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH264SessionParametersGetInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH264SessionParametersGetInfoKHRBuilder {
    value: VideoEncodeH264SessionParametersGetInfoKHR,
}

impl VideoEncodeH264SessionParametersGetInfoKHRBuilder {
    #[inline]
    pub fn write_std_sps(mut self, write_std_sps: bool) -> Self {
        self.value.write_std_sps = write_std_sps as Bool32;
        self
    }

    #[inline]
    pub fn write_std_pps(mut self, write_std_pps: bool) -> Self {
        self.value.write_std_pps = write_std_pps as Bool32;
        self
    }

    #[inline]
    pub fn std_sps_id(mut self, std_sps_id: u32) -> Self {
        self.value.std_sps_id = std_sps_id;
        self
    }

    #[inline]
    pub fn std_pps_id(mut self, std_pps_id: u32) -> Self {
        self.value.std_pps_id = std_pps_id;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH264SessionParametersGetInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH264SessionParametersGetInfoKHRBuilder {
    type Target = VideoEncodeH264SessionParametersGetInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH264SessionParametersGetInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH264SessionParametersGetInfoKHRBuilder {
    type Target = VideoEncodeH264SessionParametersGetInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265CapabilitiesKHR {
    type Target = VideoEncodeH265CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265CapabilitiesKHR {
    type Builder = VideoEncodeH265CapabilitiesKHRBuilder;
}

/// A builder for a [`VideoEncodeH265CapabilitiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265CapabilitiesKHRBuilder {
    value: VideoEncodeH265CapabilitiesKHR,
}

impl VideoEncodeH265CapabilitiesKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: VideoEncodeH265CapabilityFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn max_level_idc(mut self, max_level_idc: video::StdVideoH265LevelIdc) -> Self {
        self.value.max_level_idc = max_level_idc;
        self
    }

    #[inline]
    pub fn max_slice_segment_count(mut self, max_slice_segment_count: u32) -> Self {
        self.value.max_slice_segment_count = max_slice_segment_count;
        self
    }

    #[inline]
    pub fn max_tiles(mut self, max_tiles: impl Cast<Target = Extent2D>) -> Self {
        self.value.max_tiles = max_tiles.into();
        self
    }

    #[inline]
    pub fn ctb_sizes(mut self, ctb_sizes: VideoEncodeH265CtbSizeFlagsKHR) -> Self {
        self.value.ctb_sizes = ctb_sizes;
        self
    }

    #[inline]
    pub fn transform_block_sizes(
        mut self,
        transform_block_sizes: VideoEncodeH265TransformBlockSizeFlagsKHR,
    ) -> Self {
        self.value.transform_block_sizes = transform_block_sizes;
        self
    }

    #[inline]
    pub fn max_p_picture_l0_reference_count(
        mut self,
        max_p_picture_l0_reference_count: u32,
    ) -> Self {
        self.value.max_p_picture_l0_reference_count = max_p_picture_l0_reference_count;
        self
    }

    #[inline]
    pub fn max_b_picture_l0_reference_count(
        mut self,
        max_b_picture_l0_reference_count: u32,
    ) -> Self {
        self.value.max_b_picture_l0_reference_count = max_b_picture_l0_reference_count;
        self
    }

    #[inline]
    pub fn max_l1_reference_count(mut self, max_l1_reference_count: u32) -> Self {
        self.value.max_l1_reference_count = max_l1_reference_count;
        self
    }

    #[inline]
    pub fn max_sub_layer_count(mut self, max_sub_layer_count: u32) -> Self {
        self.value.max_sub_layer_count = max_sub_layer_count;
        self
    }

    #[inline]
    pub fn expect_dyadic_temporal_sub_layer_pattern(
        mut self,
        expect_dyadic_temporal_sub_layer_pattern: bool,
    ) -> Self {
        self.value.expect_dyadic_temporal_sub_layer_pattern =
            expect_dyadic_temporal_sub_layer_pattern as Bool32;
        self
    }

    #[inline]
    pub fn min_qp(mut self, min_qp: i32) -> Self {
        self.value.min_qp = min_qp;
        self
    }

    #[inline]
    pub fn max_qp(mut self, max_qp: i32) -> Self {
        self.value.max_qp = max_qp;
        self
    }

    #[inline]
    pub fn prefers_gop_remaining_frames(mut self, prefers_gop_remaining_frames: bool) -> Self {
        self.value.prefers_gop_remaining_frames = prefers_gop_remaining_frames as Bool32;
        self
    }

    #[inline]
    pub fn requires_gop_remaining_frames(mut self, requires_gop_remaining_frames: bool) -> Self {
        self.value.requires_gop_remaining_frames = requires_gop_remaining_frames as Bool32;
        self
    }

    #[inline]
    pub fn std_syntax_flags(mut self, std_syntax_flags: VideoEncodeH265StdFlagsKHR) -> Self {
        self.value.std_syntax_flags = std_syntax_flags;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265CapabilitiesKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265CapabilitiesKHRBuilder {
    type Target = VideoEncodeH265CapabilitiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265CapabilitiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265CapabilitiesKHRBuilder {
    type Target = VideoEncodeH265CapabilitiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265DpbSlotInfoKHR {
    type Target = VideoEncodeH265DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH265DpbSlotInfoKHR {
    type Builder = VideoEncodeH265DpbSlotInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH265DpbSlotInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265DpbSlotInfoKHRBuilder<'b> {
    value: VideoEncodeH265DpbSlotInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH265DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_reference_info(
        mut self,
        std_reference_info: &'b video::StdVideoEncodeH265ReferenceInfo,
    ) -> Self {
        self.value.std_reference_info =
            std_reference_info as *const video::StdVideoEncodeH265ReferenceInfo;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265DpbSlotInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH265DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265DpbSlotInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH265DpbSlotInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH265DpbSlotInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265DpbSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265FrameSizeKHR {
    type Target = VideoEncodeH265FrameSizeKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265FrameSizeKHR {
    type Builder = VideoEncodeH265FrameSizeKHRBuilder;
}

/// A builder for a [`VideoEncodeH265FrameSizeKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265FrameSizeKHRBuilder {
    value: VideoEncodeH265FrameSizeKHR,
}

impl VideoEncodeH265FrameSizeKHRBuilder {
    #[inline]
    pub fn frame_i_size(mut self, frame_i_size: u32) -> Self {
        self.value.frame_i_size = frame_i_size;
        self
    }

    #[inline]
    pub fn frame_p_size(mut self, frame_p_size: u32) -> Self {
        self.value.frame_p_size = frame_p_size;
        self
    }

    #[inline]
    pub fn frame_b_size(mut self, frame_b_size: u32) -> Self {
        self.value.frame_b_size = frame_b_size;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265FrameSizeKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265FrameSizeKHRBuilder {
    type Target = VideoEncodeH265FrameSizeKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265FrameSizeKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265FrameSizeKHRBuilder {
    type Target = VideoEncodeH265FrameSizeKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265GopRemainingFrameInfoKHR {
    type Target = VideoEncodeH265GopRemainingFrameInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265GopRemainingFrameInfoKHR {
    type Builder = VideoEncodeH265GopRemainingFrameInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH265GopRemainingFrameInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265GopRemainingFrameInfoKHRBuilder {
    value: VideoEncodeH265GopRemainingFrameInfoKHR,
}

impl VideoEncodeH265GopRemainingFrameInfoKHRBuilder {
    #[inline]
    pub fn use_gop_remaining_frames(mut self, use_gop_remaining_frames: bool) -> Self {
        self.value.use_gop_remaining_frames = use_gop_remaining_frames as Bool32;
        self
    }

    #[inline]
    pub fn gop_remaining_i(mut self, gop_remaining_i: u32) -> Self {
        self.value.gop_remaining_i = gop_remaining_i;
        self
    }

    #[inline]
    pub fn gop_remaining_p(mut self, gop_remaining_p: u32) -> Self {
        self.value.gop_remaining_p = gop_remaining_p;
        self
    }

    #[inline]
    pub fn gop_remaining_b(mut self, gop_remaining_b: u32) -> Self {
        self.value.gop_remaining_b = gop_remaining_b;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265GopRemainingFrameInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265GopRemainingFrameInfoKHRBuilder {
    type Target = VideoEncodeH265GopRemainingFrameInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265GopRemainingFrameInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265GopRemainingFrameInfoKHRBuilder {
    type Target = VideoEncodeH265GopRemainingFrameInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265NaluSliceSegmentInfoKHR {
    type Target = VideoEncodeH265NaluSliceSegmentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH265NaluSliceSegmentInfoKHR {
    type Builder = VideoEncodeH265NaluSliceSegmentInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH265NaluSliceSegmentInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265NaluSliceSegmentInfoKHRBuilder<'b> {
    value: VideoEncodeH265NaluSliceSegmentInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH265NaluSliceSegmentInfoKHRBuilder<'b> {
    #[inline]
    pub fn constant_qp(mut self, constant_qp: i32) -> Self {
        self.value.constant_qp = constant_qp;
        self
    }

    #[inline]
    pub fn std_slice_segment_header(
        mut self,
        std_slice_segment_header: &'b video::StdVideoEncodeH265SliceSegmentHeader,
    ) -> Self {
        self.value.std_slice_segment_header =
            std_slice_segment_header as *const video::StdVideoEncodeH265SliceSegmentHeader;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265NaluSliceSegmentInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH265NaluSliceSegmentInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265NaluSliceSegmentInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH265NaluSliceSegmentInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH265NaluSliceSegmentInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265NaluSliceSegmentInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265PictureInfoKHR {
    type Target = VideoEncodeH265PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH265PictureInfoKHR {
    type Builder = VideoEncodeH265PictureInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH265PictureInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265PictureInfoKHRBuilder<'b> {
    value: VideoEncodeH265PictureInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH265PictureInfoKHRBuilder<'b> {
    #[inline]
    pub fn nalu_slice_segment_entries(
        mut self,
        nalu_slice_segment_entries: &'b [impl Cast<Target = VideoEncodeH265NaluSliceSegmentInfoKHR>],
    ) -> Self {
        self.value.nalu_slice_segment_entry_count = nalu_slice_segment_entries.len() as u32;
        self.value.nalu_slice_segment_entries = nalu_slice_segment_entries.as_ptr().cast();
        self
    }

    #[inline]
    pub fn std_picture_info(
        mut self,
        std_picture_info: &'b video::StdVideoEncodeH265PictureInfo,
    ) -> Self {
        self.value.std_picture_info =
            std_picture_info as *const video::StdVideoEncodeH265PictureInfo;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265PictureInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH265PictureInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265PictureInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH265PictureInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH265PictureInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265PictureInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265ProfileInfoKHR {
    type Target = VideoEncodeH265ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265ProfileInfoKHR {
    type Builder = VideoEncodeH265ProfileInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH265ProfileInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265ProfileInfoKHRBuilder {
    value: VideoEncodeH265ProfileInfoKHR,
}

impl VideoEncodeH265ProfileInfoKHRBuilder {
    #[inline]
    pub fn std_profile_idc(mut self, std_profile_idc: video::StdVideoH265ProfileIdc) -> Self {
        self.value.std_profile_idc = std_profile_idc;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265ProfileInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265ProfileInfoKHRBuilder {
    type Target = VideoEncodeH265ProfileInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265ProfileInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265ProfileInfoKHRBuilder {
    type Target = VideoEncodeH265ProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265QpKHR {
    type Target = VideoEncodeH265QpKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265QpKHR {
    type Builder = VideoEncodeH265QpKHRBuilder;
}

/// A builder for a [`VideoEncodeH265QpKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265QpKHRBuilder {
    value: VideoEncodeH265QpKHR,
}

impl VideoEncodeH265QpKHRBuilder {
    #[inline]
    pub fn qp_i(mut self, qp_i: i32) -> Self {
        self.value.qp_i = qp_i;
        self
    }

    #[inline]
    pub fn qp_p(mut self, qp_p: i32) -> Self {
        self.value.qp_p = qp_p;
        self
    }

    #[inline]
    pub fn qp_b(mut self, qp_b: i32) -> Self {
        self.value.qp_b = qp_b;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265QpKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265QpKHRBuilder {
    type Target = VideoEncodeH265QpKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265QpKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265QpKHRBuilder {
    type Target = VideoEncodeH265QpKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265QualityLevelPropertiesKHR {
    type Target = VideoEncodeH265QualityLevelPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265QualityLevelPropertiesKHR {
    type Builder = VideoEncodeH265QualityLevelPropertiesKHRBuilder;
}

/// A builder for a [`VideoEncodeH265QualityLevelPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265QualityLevelPropertiesKHRBuilder {
    value: VideoEncodeH265QualityLevelPropertiesKHR,
}

impl VideoEncodeH265QualityLevelPropertiesKHRBuilder {
    #[inline]
    pub fn preferred_rate_control_flags(
        mut self,
        preferred_rate_control_flags: VideoEncodeH265RateControlFlagsKHR,
    ) -> Self {
        self.value.preferred_rate_control_flags = preferred_rate_control_flags;
        self
    }

    #[inline]
    pub fn preferred_gop_frame_count(mut self, preferred_gop_frame_count: u32) -> Self {
        self.value.preferred_gop_frame_count = preferred_gop_frame_count;
        self
    }

    #[inline]
    pub fn preferred_idr_period(mut self, preferred_idr_period: u32) -> Self {
        self.value.preferred_idr_period = preferred_idr_period;
        self
    }

    #[inline]
    pub fn preferred_consecutive_b_frame_count(
        mut self,
        preferred_consecutive_b_frame_count: u32,
    ) -> Self {
        self.value.preferred_consecutive_b_frame_count = preferred_consecutive_b_frame_count;
        self
    }

    #[inline]
    pub fn preferred_sub_layer_count(mut self, preferred_sub_layer_count: u32) -> Self {
        self.value.preferred_sub_layer_count = preferred_sub_layer_count;
        self
    }

    #[inline]
    pub fn preferred_constant_qp(
        mut self,
        preferred_constant_qp: impl Cast<Target = VideoEncodeH265QpKHR>,
    ) -> Self {
        self.value.preferred_constant_qp = preferred_constant_qp.into();
        self
    }

    #[inline]
    pub fn preferred_max_l0_reference_count(
        mut self,
        preferred_max_l0_reference_count: u32,
    ) -> Self {
        self.value.preferred_max_l0_reference_count = preferred_max_l0_reference_count;
        self
    }

    #[inline]
    pub fn preferred_max_l1_reference_count(
        mut self,
        preferred_max_l1_reference_count: u32,
    ) -> Self {
        self.value.preferred_max_l1_reference_count = preferred_max_l1_reference_count;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265QualityLevelPropertiesKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265QualityLevelPropertiesKHRBuilder {
    type Target = VideoEncodeH265QualityLevelPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265QualityLevelPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265QualityLevelPropertiesKHRBuilder {
    type Target = VideoEncodeH265QualityLevelPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265RateControlInfoKHR {
    type Target = VideoEncodeH265RateControlInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265RateControlInfoKHR {
    type Builder = VideoEncodeH265RateControlInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH265RateControlInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265RateControlInfoKHRBuilder {
    value: VideoEncodeH265RateControlInfoKHR,
}

impl VideoEncodeH265RateControlInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: VideoEncodeH265RateControlFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn gop_frame_count(mut self, gop_frame_count: u32) -> Self {
        self.value.gop_frame_count = gop_frame_count;
        self
    }

    #[inline]
    pub fn idr_period(mut self, idr_period: u32) -> Self {
        self.value.idr_period = idr_period;
        self
    }

    #[inline]
    pub fn consecutive_b_frame_count(mut self, consecutive_b_frame_count: u32) -> Self {
        self.value.consecutive_b_frame_count = consecutive_b_frame_count;
        self
    }

    #[inline]
    pub fn sub_layer_count(mut self, sub_layer_count: u32) -> Self {
        self.value.sub_layer_count = sub_layer_count;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265RateControlInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265RateControlInfoKHRBuilder {
    type Target = VideoEncodeH265RateControlInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265RateControlInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265RateControlInfoKHRBuilder {
    type Target = VideoEncodeH265RateControlInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265RateControlLayerInfoKHR {
    type Target = VideoEncodeH265RateControlLayerInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265RateControlLayerInfoKHR {
    type Builder = VideoEncodeH265RateControlLayerInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH265RateControlLayerInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265RateControlLayerInfoKHRBuilder {
    value: VideoEncodeH265RateControlLayerInfoKHR,
}

impl VideoEncodeH265RateControlLayerInfoKHRBuilder {
    #[inline]
    pub fn use_min_qp(mut self, use_min_qp: bool) -> Self {
        self.value.use_min_qp = use_min_qp as Bool32;
        self
    }

    #[inline]
    pub fn min_qp(mut self, min_qp: impl Cast<Target = VideoEncodeH265QpKHR>) -> Self {
        self.value.min_qp = min_qp.into();
        self
    }

    #[inline]
    pub fn use_max_qp(mut self, use_max_qp: bool) -> Self {
        self.value.use_max_qp = use_max_qp as Bool32;
        self
    }

    #[inline]
    pub fn max_qp(mut self, max_qp: impl Cast<Target = VideoEncodeH265QpKHR>) -> Self {
        self.value.max_qp = max_qp.into();
        self
    }

    #[inline]
    pub fn use_max_frame_size(mut self, use_max_frame_size: bool) -> Self {
        self.value.use_max_frame_size = use_max_frame_size as Bool32;
        self
    }

    #[inline]
    pub fn max_frame_size(
        mut self,
        max_frame_size: impl Cast<Target = VideoEncodeH265FrameSizeKHR>,
    ) -> Self {
        self.value.max_frame_size = max_frame_size.into();
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265RateControlLayerInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265RateControlLayerInfoKHRBuilder {
    type Target = VideoEncodeH265RateControlLayerInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265RateControlLayerInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265RateControlLayerInfoKHRBuilder {
    type Target = VideoEncodeH265RateControlLayerInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265SessionCreateInfoKHR {
    type Target = VideoEncodeH265SessionCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265SessionCreateInfoKHR {
    type Builder = VideoEncodeH265SessionCreateInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH265SessionCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265SessionCreateInfoKHRBuilder {
    value: VideoEncodeH265SessionCreateInfoKHR,
}

impl VideoEncodeH265SessionCreateInfoKHRBuilder {
    #[inline]
    pub fn use_max_level_idc(mut self, use_max_level_idc: bool) -> Self {
        self.value.use_max_level_idc = use_max_level_idc as Bool32;
        self
    }

    #[inline]
    pub fn max_level_idc(mut self, max_level_idc: video::StdVideoH265LevelIdc) -> Self {
        self.value.max_level_idc = max_level_idc;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265SessionCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265SessionCreateInfoKHRBuilder {
    type Target = VideoEncodeH265SessionCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265SessionCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265SessionCreateInfoKHRBuilder {
    type Target = VideoEncodeH265SessionCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265SessionParametersAddInfoKHR {
    type Target = VideoEncodeH265SessionParametersAddInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH265SessionParametersAddInfoKHR {
    type Builder = VideoEncodeH265SessionParametersAddInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH265SessionParametersAddInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265SessionParametersAddInfoKHRBuilder<'b> {
    value: VideoEncodeH265SessionParametersAddInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH265SessionParametersAddInfoKHRBuilder<'b> {
    #[inline]
    pub fn std_vps_count(mut self, std_vps_count: u32) -> Self {
        self.value.std_vps_count = std_vps_count;
        self
    }

    #[inline]
    pub fn std_vp_ss(mut self, std_vp_ss: &'b [video::StdVideoH265VideoParameterSet]) -> Self {
        self.value.std_vps_count = std_vp_ss.len() as u32;
        self.value.std_vp_ss = std_vp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn std_sps_count(mut self, std_sps_count: u32) -> Self {
        self.value.std_sps_count = std_sps_count;
        self
    }

    #[inline]
    pub fn std_sp_ss(mut self, std_sp_ss: &'b [video::StdVideoH265SequenceParameterSet]) -> Self {
        self.value.std_sps_count = std_sp_ss.len() as u32;
        self.value.std_sp_ss = std_sp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn std_pps_count(mut self, std_pps_count: u32) -> Self {
        self.value.std_pps_count = std_pps_count;
        self
    }

    #[inline]
    pub fn std_pp_ss(mut self, std_pp_ss: &'b [video::StdVideoH265PictureParameterSet]) -> Self {
        self.value.std_pps_count = std_pp_ss.len() as u32;
        self.value.std_pp_ss = std_pp_ss.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265SessionParametersAddInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH265SessionParametersAddInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265SessionParametersAddInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH265SessionParametersAddInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH265SessionParametersAddInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265SessionParametersAddInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265SessionParametersCreateInfoKHR {
    type Target = VideoEncodeH265SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeH265SessionParametersCreateInfoKHR {
    type Builder = VideoEncodeH265SessionParametersCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeH265SessionParametersCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    value: VideoEncodeH265SessionParametersCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn max_std_vps_count(mut self, max_std_vps_count: u32) -> Self {
        self.value.max_std_vps_count = max_std_vps_count;
        self
    }

    #[inline]
    pub fn max_std_sps_count(mut self, max_std_sps_count: u32) -> Self {
        self.value.max_std_sps_count = max_std_sps_count;
        self
    }

    #[inline]
    pub fn max_std_pps_count(mut self, max_std_pps_count: u32) -> Self {
        self.value.max_std_pps_count = max_std_pps_count;
        self
    }

    #[inline]
    pub fn parameters_add_info(
        mut self,
        parameters_add_info: &'b impl Cast<Target = VideoEncodeH265SessionParametersAddInfoKHR>,
    ) -> Self {
        self.value.parameters_add_info = parameters_add_info.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265SessionParametersCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265SessionParametersCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeH265SessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoEncodeH265SessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265SessionParametersFeedbackInfoKHR {
    type Target = VideoEncodeH265SessionParametersFeedbackInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265SessionParametersFeedbackInfoKHR {
    type Builder = VideoEncodeH265SessionParametersFeedbackInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH265SessionParametersFeedbackInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265SessionParametersFeedbackInfoKHRBuilder {
    value: VideoEncodeH265SessionParametersFeedbackInfoKHR,
}

impl VideoEncodeH265SessionParametersFeedbackInfoKHRBuilder {
    #[inline]
    pub fn has_std_vps_overrides(mut self, has_std_vps_overrides: bool) -> Self {
        self.value.has_std_vps_overrides = has_std_vps_overrides as Bool32;
        self
    }

    #[inline]
    pub fn has_std_sps_overrides(mut self, has_std_sps_overrides: bool) -> Self {
        self.value.has_std_sps_overrides = has_std_sps_overrides as Bool32;
        self
    }

    #[inline]
    pub fn has_std_pps_overrides(mut self, has_std_pps_overrides: bool) -> Self {
        self.value.has_std_pps_overrides = has_std_pps_overrides as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265SessionParametersFeedbackInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265SessionParametersFeedbackInfoKHRBuilder {
    type Target = VideoEncodeH265SessionParametersFeedbackInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265SessionParametersFeedbackInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265SessionParametersFeedbackInfoKHRBuilder {
    type Target = VideoEncodeH265SessionParametersFeedbackInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeH265SessionParametersGetInfoKHR {
    type Target = VideoEncodeH265SessionParametersGetInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeH265SessionParametersGetInfoKHR {
    type Builder = VideoEncodeH265SessionParametersGetInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeH265SessionParametersGetInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeH265SessionParametersGetInfoKHRBuilder {
    value: VideoEncodeH265SessionParametersGetInfoKHR,
}

impl VideoEncodeH265SessionParametersGetInfoKHRBuilder {
    #[inline]
    pub fn write_std_vps(mut self, write_std_vps: bool) -> Self {
        self.value.write_std_vps = write_std_vps as Bool32;
        self
    }

    #[inline]
    pub fn write_std_sps(mut self, write_std_sps: bool) -> Self {
        self.value.write_std_sps = write_std_sps as Bool32;
        self
    }

    #[inline]
    pub fn write_std_pps(mut self, write_std_pps: bool) -> Self {
        self.value.write_std_pps = write_std_pps as Bool32;
        self
    }

    #[inline]
    pub fn std_vps_id(mut self, std_vps_id: u32) -> Self {
        self.value.std_vps_id = std_vps_id;
        self
    }

    #[inline]
    pub fn std_sps_id(mut self, std_sps_id: u32) -> Self {
        self.value.std_sps_id = std_sps_id;
        self
    }

    #[inline]
    pub fn std_pps_id(mut self, std_pps_id: u32) -> Self {
        self.value.std_pps_id = std_pps_id;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeH265SessionParametersGetInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeH265SessionParametersGetInfoKHRBuilder {
    type Target = VideoEncodeH265SessionParametersGetInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeH265SessionParametersGetInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeH265SessionParametersGetInfoKHRBuilder {
    type Target = VideoEncodeH265SessionParametersGetInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoEncodeInfoKHR`].
pub unsafe trait ExtendsVideoEncodeInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoEncodeInfoKHR for VideoEncodeH264PictureInfoKHR {}
unsafe impl ExtendsVideoEncodeInfoKHR for VideoEncodeH265PictureInfoKHR {}
unsafe impl ExtendsVideoEncodeInfoKHR for VideoInlineQueryInfoKHR {}

unsafe impl Cast for VideoEncodeInfoKHR {
    type Target = VideoEncodeInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeInfoKHR {
    type Builder = VideoEncodeInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeInfoKHRBuilder<'b> {
    value: VideoEncodeInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoEncodeInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: VideoEncodeFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn dst_buffer(mut self, dst_buffer: Buffer) -> Self {
        self.value.dst_buffer = dst_buffer;
        self
    }

    #[inline]
    pub fn dst_buffer_offset(mut self, dst_buffer_offset: DeviceSize) -> Self {
        self.value.dst_buffer_offset = dst_buffer_offset;
        self
    }

    #[inline]
    pub fn dst_buffer_range(mut self, dst_buffer_range: DeviceSize) -> Self {
        self.value.dst_buffer_range = dst_buffer_range;
        self
    }

    #[inline]
    pub fn src_picture_resource(
        mut self,
        src_picture_resource: impl Cast<Target = VideoPictureResourceInfoKHR>,
    ) -> Self {
        self.value.src_picture_resource = src_picture_resource.into();
        self
    }

    #[inline]
    pub fn setup_reference_slot(
        mut self,
        setup_reference_slot: &'b impl Cast<Target = VideoReferenceSlotInfoKHR>,
    ) -> Self {
        self.value.setup_reference_slot = setup_reference_slot.as_ref();
        self
    }

    #[inline]
    pub fn reference_slots(
        mut self,
        reference_slots: &'b [impl Cast<Target = VideoReferenceSlotInfoKHR>],
    ) -> Self {
        self.value.reference_slot_count = reference_slots.len() as u32;
        self.value.reference_slots = reference_slots.as_ptr().cast();
        self
    }

    #[inline]
    pub fn preceding_externally_encoded_bytes(
        mut self,
        preceding_externally_encoded_bytes: u32,
    ) -> Self {
        self.value.preceding_externally_encoded_bytes = preceding_externally_encoded_bytes;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeInfoKHRBuilder<'b> {
    type Target = VideoEncodeInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeInfoKHRBuilder<'b> {
    type Target = VideoEncodeInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeQualityLevelInfoKHR {
    type Target = VideoEncodeQualityLevelInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeQualityLevelInfoKHR {
    type Builder = VideoEncodeQualityLevelInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeQualityLevelInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeQualityLevelInfoKHRBuilder {
    value: VideoEncodeQualityLevelInfoKHR,
}

impl VideoEncodeQualityLevelInfoKHRBuilder {
    #[inline]
    pub fn quality_level(mut self, quality_level: u32) -> Self {
        self.value.quality_level = quality_level;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeQualityLevelInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeQualityLevelInfoKHRBuilder {
    type Target = VideoEncodeQualityLevelInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeQualityLevelInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeQualityLevelInfoKHRBuilder {
    type Target = VideoEncodeQualityLevelInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoEncodeQualityLevelPropertiesKHR`].
pub unsafe trait ExtendsVideoEncodeQualityLevelPropertiesKHR: fmt::Debug {}
unsafe impl ExtendsVideoEncodeQualityLevelPropertiesKHR
    for VideoEncodeH264QualityLevelPropertiesKHR
{
}
unsafe impl ExtendsVideoEncodeQualityLevelPropertiesKHR
    for VideoEncodeH265QualityLevelPropertiesKHR
{
}

unsafe impl Cast for VideoEncodeQualityLevelPropertiesKHR {
    type Target = VideoEncodeQualityLevelPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeQualityLevelPropertiesKHR {
    type Builder = VideoEncodeQualityLevelPropertiesKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeQualityLevelPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeQualityLevelPropertiesKHRBuilder<'b> {
    value: VideoEncodeQualityLevelPropertiesKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeQualityLevelPropertiesKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoEncodeQualityLevelPropertiesKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn preferred_rate_control_mode(
        mut self,
        preferred_rate_control_mode: VideoEncodeRateControlModeFlagsKHR,
    ) -> Self {
        self.value.preferred_rate_control_mode = preferred_rate_control_mode;
        self
    }

    #[inline]
    pub fn preferred_rate_control_layer_count(
        mut self,
        preferred_rate_control_layer_count: u32,
    ) -> Self {
        self.value.preferred_rate_control_layer_count = preferred_rate_control_layer_count;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeQualityLevelPropertiesKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeQualityLevelPropertiesKHRBuilder<'b> {
    type Target = VideoEncodeQualityLevelPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeQualityLevelPropertiesKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeQualityLevelPropertiesKHRBuilder<'b> {
    type Target = VideoEncodeQualityLevelPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeRateControlInfoKHR {
    type Target = VideoEncodeRateControlInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeRateControlInfoKHR {
    type Builder = VideoEncodeRateControlInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeRateControlInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeRateControlInfoKHRBuilder<'b> {
    value: VideoEncodeRateControlInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeRateControlInfoKHRBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: VideoEncodeRateControlFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn rate_control_mode(
        mut self,
        rate_control_mode: VideoEncodeRateControlModeFlagsKHR,
    ) -> Self {
        self.value.rate_control_mode = rate_control_mode;
        self
    }

    #[inline]
    pub fn layers(
        mut self,
        layers: &'b [impl Cast<Target = VideoEncodeRateControlLayerInfoKHR>],
    ) -> Self {
        self.value.layer_count = layers.len() as u32;
        self.value.layers = layers.as_ptr().cast();
        self
    }

    #[inline]
    pub fn virtual_buffer_size_in_ms(mut self, virtual_buffer_size_in_ms: u32) -> Self {
        self.value.virtual_buffer_size_in_ms = virtual_buffer_size_in_ms;
        self
    }

    #[inline]
    pub fn initial_virtual_buffer_size_in_ms(
        mut self,
        initial_virtual_buffer_size_in_ms: u32,
    ) -> Self {
        self.value.initial_virtual_buffer_size_in_ms = initial_virtual_buffer_size_in_ms;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeRateControlInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeRateControlInfoKHRBuilder<'b> {
    type Target = VideoEncodeRateControlInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeRateControlInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeRateControlInfoKHRBuilder<'b> {
    type Target = VideoEncodeRateControlInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoEncodeRateControlLayerInfoKHR`].
pub unsafe trait ExtendsVideoEncodeRateControlLayerInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoEncodeRateControlLayerInfoKHR for VideoEncodeH264RateControlLayerInfoKHR {}
unsafe impl ExtendsVideoEncodeRateControlLayerInfoKHR for VideoEncodeH265RateControlLayerInfoKHR {}

unsafe impl Cast for VideoEncodeRateControlLayerInfoKHR {
    type Target = VideoEncodeRateControlLayerInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeRateControlLayerInfoKHR {
    type Builder = VideoEncodeRateControlLayerInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeRateControlLayerInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeRateControlLayerInfoKHRBuilder<'b> {
    value: VideoEncodeRateControlLayerInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeRateControlLayerInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoEncodeRateControlLayerInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn average_bitrate(mut self, average_bitrate: u64) -> Self {
        self.value.average_bitrate = average_bitrate;
        self
    }

    #[inline]
    pub fn max_bitrate(mut self, max_bitrate: u64) -> Self {
        self.value.max_bitrate = max_bitrate;
        self
    }

    #[inline]
    pub fn frame_rate_numerator(mut self, frame_rate_numerator: u32) -> Self {
        self.value.frame_rate_numerator = frame_rate_numerator;
        self
    }

    #[inline]
    pub fn frame_rate_denominator(mut self, frame_rate_denominator: u32) -> Self {
        self.value.frame_rate_denominator = frame_rate_denominator;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeRateControlLayerInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeRateControlLayerInfoKHRBuilder<'b> {
    type Target = VideoEncodeRateControlLayerInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeRateControlLayerInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeRateControlLayerInfoKHRBuilder<'b> {
    type Target = VideoEncodeRateControlLayerInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoEncodeSessionParametersFeedbackInfoKHR`].
pub unsafe trait ExtendsVideoEncodeSessionParametersFeedbackInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoEncodeSessionParametersFeedbackInfoKHR
    for VideoEncodeH264SessionParametersFeedbackInfoKHR
{
}
unsafe impl ExtendsVideoEncodeSessionParametersFeedbackInfoKHR
    for VideoEncodeH265SessionParametersFeedbackInfoKHR
{
}

unsafe impl Cast for VideoEncodeSessionParametersFeedbackInfoKHR {
    type Target = VideoEncodeSessionParametersFeedbackInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeSessionParametersFeedbackInfoKHR {
    type Builder = VideoEncodeSessionParametersFeedbackInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeSessionParametersFeedbackInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeSessionParametersFeedbackInfoKHRBuilder<'b> {
    value: VideoEncodeSessionParametersFeedbackInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeSessionParametersFeedbackInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoEncodeSessionParametersFeedbackInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn has_overrides(mut self, has_overrides: bool) -> Self {
        self.value.has_overrides = has_overrides as Bool32;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeSessionParametersFeedbackInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeSessionParametersFeedbackInfoKHRBuilder<'b> {
    type Target = VideoEncodeSessionParametersFeedbackInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeSessionParametersFeedbackInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeSessionParametersFeedbackInfoKHRBuilder<'b> {
    type Target = VideoEncodeSessionParametersFeedbackInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoEncodeSessionParametersGetInfoKHR`].
pub unsafe trait ExtendsVideoEncodeSessionParametersGetInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoEncodeSessionParametersGetInfoKHR
    for VideoEncodeH264SessionParametersGetInfoKHR
{
}
unsafe impl ExtendsVideoEncodeSessionParametersGetInfoKHR
    for VideoEncodeH265SessionParametersGetInfoKHR
{
}

unsafe impl Cast for VideoEncodeSessionParametersGetInfoKHR {
    type Target = VideoEncodeSessionParametersGetInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoEncodeSessionParametersGetInfoKHR {
    type Builder = VideoEncodeSessionParametersGetInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoEncodeSessionParametersGetInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeSessionParametersGetInfoKHRBuilder<'b> {
    value: VideoEncodeSessionParametersGetInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoEncodeSessionParametersGetInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoEncodeSessionParametersGetInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn video_session_parameters(
        mut self,
        video_session_parameters: VideoSessionParametersKHR,
    ) -> Self {
        self.value.video_session_parameters = video_session_parameters;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeSessionParametersGetInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoEncodeSessionParametersGetInfoKHRBuilder<'b> {
    type Target = VideoEncodeSessionParametersGetInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoEncodeSessionParametersGetInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoEncodeSessionParametersGetInfoKHRBuilder<'b> {
    type Target = VideoEncodeSessionParametersGetInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEncodeUsageInfoKHR {
    type Target = VideoEncodeUsageInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEncodeUsageInfoKHR {
    type Builder = VideoEncodeUsageInfoKHRBuilder;
}

/// A builder for a [`VideoEncodeUsageInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEncodeUsageInfoKHRBuilder {
    value: VideoEncodeUsageInfoKHR,
}

impl VideoEncodeUsageInfoKHRBuilder {
    #[inline]
    pub fn video_usage_hints(mut self, video_usage_hints: VideoEncodeUsageFlagsKHR) -> Self {
        self.value.video_usage_hints = video_usage_hints;
        self
    }

    #[inline]
    pub fn video_content_hints(mut self, video_content_hints: VideoEncodeContentFlagsKHR) -> Self {
        self.value.video_content_hints = video_content_hints;
        self
    }

    #[inline]
    pub fn tuning_mode(mut self, tuning_mode: VideoEncodeTuningModeKHR) -> Self {
        self.value.tuning_mode = tuning_mode;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEncodeUsageInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEncodeUsageInfoKHRBuilder {
    type Target = VideoEncodeUsageInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEncodeUsageInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEncodeUsageInfoKHRBuilder {
    type Target = VideoEncodeUsageInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoEndCodingInfoKHR {
    type Target = VideoEndCodingInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoEndCodingInfoKHR {
    type Builder = VideoEndCodingInfoKHRBuilder;
}

/// A builder for a [`VideoEndCodingInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoEndCodingInfoKHRBuilder {
    value: VideoEndCodingInfoKHR,
}

impl VideoEndCodingInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: VideoEndCodingFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn build(self) -> VideoEndCodingInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoEndCodingInfoKHRBuilder {
    type Target = VideoEndCodingInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoEndCodingInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoEndCodingInfoKHRBuilder {
    type Target = VideoEndCodingInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoFormatPropertiesKHR {
    type Target = VideoFormatPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoFormatPropertiesKHR {
    type Builder = VideoFormatPropertiesKHRBuilder;
}

/// A builder for a [`VideoFormatPropertiesKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoFormatPropertiesKHRBuilder {
    value: VideoFormatPropertiesKHR,
}

impl VideoFormatPropertiesKHRBuilder {
    #[inline]
    pub fn format(mut self, format: Format) -> Self {
        self.value.format = format;
        self
    }

    #[inline]
    pub fn component_mapping(
        mut self,
        component_mapping: impl Cast<Target = ComponentMapping>,
    ) -> Self {
        self.value.component_mapping = component_mapping.into();
        self
    }

    #[inline]
    pub fn image_create_flags(mut self, image_create_flags: ImageCreateFlags) -> Self {
        self.value.image_create_flags = image_create_flags;
        self
    }

    #[inline]
    pub fn image_type(mut self, image_type: ImageType) -> Self {
        self.value.image_type = image_type;
        self
    }

    #[inline]
    pub fn image_tiling(mut self, image_tiling: ImageTiling) -> Self {
        self.value.image_tiling = image_tiling;
        self
    }

    #[inline]
    pub fn image_usage_flags(mut self, image_usage_flags: ImageUsageFlags) -> Self {
        self.value.image_usage_flags = image_usage_flags;
        self
    }

    #[inline]
    pub fn build(self) -> VideoFormatPropertiesKHR {
        self.value
    }
}

impl ops::Deref for VideoFormatPropertiesKHRBuilder {
    type Target = VideoFormatPropertiesKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoFormatPropertiesKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoFormatPropertiesKHRBuilder {
    type Target = VideoFormatPropertiesKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoInlineQueryInfoKHR {
    type Target = VideoInlineQueryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoInlineQueryInfoKHR {
    type Builder = VideoInlineQueryInfoKHRBuilder;
}

/// A builder for a [`VideoInlineQueryInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoInlineQueryInfoKHRBuilder {
    value: VideoInlineQueryInfoKHR,
}

impl VideoInlineQueryInfoKHRBuilder {
    #[inline]
    pub fn query_pool(mut self, query_pool: QueryPool) -> Self {
        self.value.query_pool = query_pool;
        self
    }

    #[inline]
    pub fn first_query(mut self, first_query: u32) -> Self {
        self.value.first_query = first_query;
        self
    }

    #[inline]
    pub fn query_count(mut self, query_count: u32) -> Self {
        self.value.query_count = query_count;
        self
    }

    #[inline]
    pub fn build(self) -> VideoInlineQueryInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoInlineQueryInfoKHRBuilder {
    type Target = VideoInlineQueryInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoInlineQueryInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoInlineQueryInfoKHRBuilder {
    type Target = VideoInlineQueryInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoPictureResourceInfoKHR {
    type Target = VideoPictureResourceInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoPictureResourceInfoKHR {
    type Builder = VideoPictureResourceInfoKHRBuilder;
}

/// A builder for a [`VideoPictureResourceInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoPictureResourceInfoKHRBuilder {
    value: VideoPictureResourceInfoKHR,
}

impl VideoPictureResourceInfoKHRBuilder {
    #[inline]
    pub fn coded_offset(mut self, coded_offset: impl Cast<Target = Offset2D>) -> Self {
        self.value.coded_offset = coded_offset.into();
        self
    }

    #[inline]
    pub fn coded_extent(mut self, coded_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.coded_extent = coded_extent.into();
        self
    }

    #[inline]
    pub fn base_array_layer(mut self, base_array_layer: u32) -> Self {
        self.value.base_array_layer = base_array_layer;
        self
    }

    #[inline]
    pub fn image_view_binding(mut self, image_view_binding: ImageView) -> Self {
        self.value.image_view_binding = image_view_binding;
        self
    }

    #[inline]
    pub fn build(self) -> VideoPictureResourceInfoKHR {
        self.value
    }
}

impl ops::Deref for VideoPictureResourceInfoKHRBuilder {
    type Target = VideoPictureResourceInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoPictureResourceInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoPictureResourceInfoKHRBuilder {
    type Target = VideoPictureResourceInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoProfileInfoKHR`].
pub unsafe trait ExtendsVideoProfileInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoProfileInfoKHR for VideoDecodeAV1ProfileInfoKHR {}
unsafe impl ExtendsVideoProfileInfoKHR for VideoDecodeH264ProfileInfoKHR {}
unsafe impl ExtendsVideoProfileInfoKHR for VideoDecodeH265ProfileInfoKHR {}
unsafe impl ExtendsVideoProfileInfoKHR for VideoDecodeUsageInfoKHR {}
unsafe impl ExtendsVideoProfileInfoKHR for VideoEncodeH264ProfileInfoKHR {}
unsafe impl ExtendsVideoProfileInfoKHR for VideoEncodeH265ProfileInfoKHR {}
unsafe impl ExtendsVideoProfileInfoKHR for VideoEncodeUsageInfoKHR {}

unsafe impl Cast for VideoProfileInfoKHR {
    type Target = VideoProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoProfileInfoKHR {
    type Builder = VideoProfileInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoProfileInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoProfileInfoKHRBuilder<'b> {
    value: VideoProfileInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoProfileInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoProfileInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn video_codec_operation(
        mut self,
        video_codec_operation: VideoCodecOperationFlagsKHR,
    ) -> Self {
        self.value.video_codec_operation = video_codec_operation;
        self
    }

    #[inline]
    pub fn chroma_subsampling(
        mut self,
        chroma_subsampling: VideoChromaSubsamplingFlagsKHR,
    ) -> Self {
        self.value.chroma_subsampling = chroma_subsampling;
        self
    }

    #[inline]
    pub fn luma_bit_depth(mut self, luma_bit_depth: VideoComponentBitDepthFlagsKHR) -> Self {
        self.value.luma_bit_depth = luma_bit_depth;
        self
    }

    #[inline]
    pub fn chroma_bit_depth(mut self, chroma_bit_depth: VideoComponentBitDepthFlagsKHR) -> Self {
        self.value.chroma_bit_depth = chroma_bit_depth;
        self
    }

    #[inline]
    pub fn build(self) -> VideoProfileInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoProfileInfoKHRBuilder<'b> {
    type Target = VideoProfileInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoProfileInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoProfileInfoKHRBuilder<'b> {
    type Target = VideoProfileInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoProfileListInfoKHR {
    type Target = VideoProfileListInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoProfileListInfoKHR {
    type Builder = VideoProfileListInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoProfileListInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoProfileListInfoKHRBuilder<'b> {
    value: VideoProfileListInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoProfileListInfoKHRBuilder<'b> {
    #[inline]
    pub fn profiles(mut self, profiles: &'b [impl Cast<Target = VideoProfileInfoKHR>]) -> Self {
        self.value.profile_count = profiles.len() as u32;
        self.value.profiles = profiles.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> VideoProfileListInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoProfileListInfoKHRBuilder<'b> {
    type Target = VideoProfileListInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoProfileListInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoProfileListInfoKHRBuilder<'b> {
    type Target = VideoProfileListInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoReferenceSlotInfoKHR`].
pub unsafe trait ExtendsVideoReferenceSlotInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoReferenceSlotInfoKHR for VideoDecodeAV1DpbSlotInfoKHR {}
unsafe impl ExtendsVideoReferenceSlotInfoKHR for VideoDecodeH264DpbSlotInfoKHR {}
unsafe impl ExtendsVideoReferenceSlotInfoKHR for VideoDecodeH265DpbSlotInfoKHR {}
unsafe impl ExtendsVideoReferenceSlotInfoKHR for VideoEncodeH264DpbSlotInfoKHR {}
unsafe impl ExtendsVideoReferenceSlotInfoKHR for VideoEncodeH265DpbSlotInfoKHR {}

unsafe impl Cast for VideoReferenceSlotInfoKHR {
    type Target = VideoReferenceSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoReferenceSlotInfoKHR {
    type Builder = VideoReferenceSlotInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoReferenceSlotInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoReferenceSlotInfoKHRBuilder<'b> {
    value: VideoReferenceSlotInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoReferenceSlotInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoReferenceSlotInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn slot_index(mut self, slot_index: i32) -> Self {
        self.value.slot_index = slot_index;
        self
    }

    #[inline]
    pub fn picture_resource(
        mut self,
        picture_resource: &'b impl Cast<Target = VideoPictureResourceInfoKHR>,
    ) -> Self {
        self.value.picture_resource = picture_resource.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> VideoReferenceSlotInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoReferenceSlotInfoKHRBuilder<'b> {
    type Target = VideoReferenceSlotInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoReferenceSlotInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoReferenceSlotInfoKHRBuilder<'b> {
    type Target = VideoReferenceSlotInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoSessionCreateInfoKHR`].
pub unsafe trait ExtendsVideoSessionCreateInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoSessionCreateInfoKHR for VideoEncodeH264SessionCreateInfoKHR {}
unsafe impl ExtendsVideoSessionCreateInfoKHR for VideoEncodeH265SessionCreateInfoKHR {}

unsafe impl Cast for VideoSessionCreateInfoKHR {
    type Target = VideoSessionCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoSessionCreateInfoKHR {
    type Builder = VideoSessionCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoSessionCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoSessionCreateInfoKHRBuilder<'b> {
    value: VideoSessionCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoSessionCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoSessionCreateInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn queue_family_index(mut self, queue_family_index: u32) -> Self {
        self.value.queue_family_index = queue_family_index;
        self
    }

    #[inline]
    pub fn flags(mut self, flags: VideoSessionCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn video_profile(
        mut self,
        video_profile: &'b impl Cast<Target = VideoProfileInfoKHR>,
    ) -> Self {
        self.value.video_profile = video_profile.as_ref();
        self
    }

    #[inline]
    pub fn picture_format(mut self, picture_format: Format) -> Self {
        self.value.picture_format = picture_format;
        self
    }

    #[inline]
    pub fn max_coded_extent(mut self, max_coded_extent: impl Cast<Target = Extent2D>) -> Self {
        self.value.max_coded_extent = max_coded_extent.into();
        self
    }

    #[inline]
    pub fn reference_picture_format(mut self, reference_picture_format: Format) -> Self {
        self.value.reference_picture_format = reference_picture_format;
        self
    }

    #[inline]
    pub fn max_dpb_slots(mut self, max_dpb_slots: u32) -> Self {
        self.value.max_dpb_slots = max_dpb_slots;
        self
    }

    #[inline]
    pub fn max_active_reference_pictures(mut self, max_active_reference_pictures: u32) -> Self {
        self.value.max_active_reference_pictures = max_active_reference_pictures;
        self
    }

    #[inline]
    pub fn std_header_version(
        mut self,
        std_header_version: &'b impl Cast<Target = ExtensionProperties>,
    ) -> Self {
        self.value.std_header_version = std_header_version.as_ref();
        self
    }

    #[inline]
    pub fn build(self) -> VideoSessionCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoSessionCreateInfoKHRBuilder<'b> {
    type Target = VideoSessionCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoSessionCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoSessionCreateInfoKHRBuilder<'b> {
    type Target = VideoSessionCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for VideoSessionMemoryRequirementsKHR {
    type Target = VideoSessionMemoryRequirementsKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for VideoSessionMemoryRequirementsKHR {
    type Builder = VideoSessionMemoryRequirementsKHRBuilder;
}

/// A builder for a [`VideoSessionMemoryRequirementsKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoSessionMemoryRequirementsKHRBuilder {
    value: VideoSessionMemoryRequirementsKHR,
}

impl VideoSessionMemoryRequirementsKHRBuilder {
    #[inline]
    pub fn memory_bind_index(mut self, memory_bind_index: u32) -> Self {
        self.value.memory_bind_index = memory_bind_index;
        self
    }

    #[inline]
    pub fn memory_requirements(
        mut self,
        memory_requirements: impl Cast<Target = MemoryRequirements>,
    ) -> Self {
        self.value.memory_requirements = memory_requirements.into();
        self
    }

    #[inline]
    pub fn build(self) -> VideoSessionMemoryRequirementsKHR {
        self.value
    }
}

impl ops::Deref for VideoSessionMemoryRequirementsKHRBuilder {
    type Target = VideoSessionMemoryRequirementsKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for VideoSessionMemoryRequirementsKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for VideoSessionMemoryRequirementsKHRBuilder {
    type Target = VideoSessionMemoryRequirementsKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoSessionParametersCreateInfoKHR`].
pub unsafe trait ExtendsVideoSessionParametersCreateInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoSessionParametersCreateInfoKHR
    for VideoDecodeAV1SessionParametersCreateInfoKHR
{
}
unsafe impl ExtendsVideoSessionParametersCreateInfoKHR
    for VideoDecodeH264SessionParametersCreateInfoKHR
{
}
unsafe impl ExtendsVideoSessionParametersCreateInfoKHR
    for VideoDecodeH265SessionParametersCreateInfoKHR
{
}
unsafe impl ExtendsVideoSessionParametersCreateInfoKHR
    for VideoEncodeH264SessionParametersCreateInfoKHR
{
}
unsafe impl ExtendsVideoSessionParametersCreateInfoKHR
    for VideoEncodeH265SessionParametersCreateInfoKHR
{
}
unsafe impl ExtendsVideoSessionParametersCreateInfoKHR for VideoEncodeQualityLevelInfoKHR {}

unsafe impl Cast for VideoSessionParametersCreateInfoKHR {
    type Target = VideoSessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoSessionParametersCreateInfoKHR {
    type Builder = VideoSessionParametersCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoSessionParametersCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoSessionParametersCreateInfoKHRBuilder<'b> {
    value: VideoSessionParametersCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoSessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoSessionParametersCreateInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn flags(mut self, flags: VideoSessionParametersCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn video_session_parameters_template(
        mut self,
        video_session_parameters_template: VideoSessionParametersKHR,
    ) -> Self {
        self.value.video_session_parameters_template = video_session_parameters_template;
        self
    }

    #[inline]
    pub fn video_session(mut self, video_session: VideoSessionKHR) -> Self {
        self.value.video_session = video_session;
        self
    }

    #[inline]
    pub fn build(self) -> VideoSessionParametersCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoSessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoSessionParametersCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoSessionParametersCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoSessionParametersCreateInfoKHRBuilder<'b> {
    type Target = VideoSessionParametersCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`VideoSessionParametersUpdateInfoKHR`].
pub unsafe trait ExtendsVideoSessionParametersUpdateInfoKHR: fmt::Debug {}
unsafe impl ExtendsVideoSessionParametersUpdateInfoKHR
    for VideoDecodeH264SessionParametersAddInfoKHR
{
}
unsafe impl ExtendsVideoSessionParametersUpdateInfoKHR
    for VideoDecodeH265SessionParametersAddInfoKHR
{
}
unsafe impl ExtendsVideoSessionParametersUpdateInfoKHR
    for VideoEncodeH264SessionParametersAddInfoKHR
{
}
unsafe impl ExtendsVideoSessionParametersUpdateInfoKHR
    for VideoEncodeH265SessionParametersAddInfoKHR
{
}

unsafe impl Cast for VideoSessionParametersUpdateInfoKHR {
    type Target = VideoSessionParametersUpdateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for VideoSessionParametersUpdateInfoKHR {
    type Builder = VideoSessionParametersUpdateInfoKHRBuilder<'b>;
}

/// A builder for a [`VideoSessionParametersUpdateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct VideoSessionParametersUpdateInfoKHRBuilder<'b> {
    value: VideoSessionParametersUpdateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> VideoSessionParametersUpdateInfoKHRBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsVideoSessionParametersUpdateInfoKHR,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn update_sequence_count(mut self, update_sequence_count: u32) -> Self {
        self.value.update_sequence_count = update_sequence_count;
        self
    }

    #[inline]
    pub fn build(self) -> VideoSessionParametersUpdateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for VideoSessionParametersUpdateInfoKHRBuilder<'b> {
    type Target = VideoSessionParametersUpdateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for VideoSessionParametersUpdateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for VideoSessionParametersUpdateInfoKHRBuilder<'b> {
    type Target = VideoSessionParametersUpdateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Viewport {
    type Target = Viewport;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for Viewport {
    type Builder = ViewportBuilder;
}

/// A builder for a [`Viewport`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ViewportBuilder {
    value: Viewport,
}

impl ViewportBuilder {
    #[inline]
    pub fn x(mut self, x: f32) -> Self {
        self.value.x = x;
        self
    }

    #[inline]
    pub fn y(mut self, y: f32) -> Self {
        self.value.y = y;
        self
    }

    #[inline]
    pub fn width(mut self, width: f32) -> Self {
        self.value.width = width;
        self
    }

    #[inline]
    pub fn height(mut self, height: f32) -> Self {
        self.value.height = height;
        self
    }

    #[inline]
    pub fn min_depth(mut self, min_depth: f32) -> Self {
        self.value.min_depth = min_depth;
        self
    }

    #[inline]
    pub fn max_depth(mut self, max_depth: f32) -> Self {
        self.value.max_depth = max_depth;
        self
    }

    #[inline]
    pub fn build(self) -> Viewport {
        self.value
    }
}

impl ops::Deref for ViewportBuilder {
    type Target = Viewport;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ViewportBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ViewportBuilder {
    type Target = Viewport;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ViewportSwizzleNV {
    type Target = ViewportSwizzleNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ViewportSwizzleNV {
    type Builder = ViewportSwizzleNVBuilder;
}

/// A builder for a [`ViewportSwizzleNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ViewportSwizzleNVBuilder {
    value: ViewportSwizzleNV,
}

impl ViewportSwizzleNVBuilder {
    #[inline]
    pub fn x(mut self, x: ViewportCoordinateSwizzleNV) -> Self {
        self.value.x = x;
        self
    }

    #[inline]
    pub fn y(mut self, y: ViewportCoordinateSwizzleNV) -> Self {
        self.value.y = y;
        self
    }

    #[inline]
    pub fn z(mut self, z: ViewportCoordinateSwizzleNV) -> Self {
        self.value.z = z;
        self
    }

    #[inline]
    pub fn w(mut self, w: ViewportCoordinateSwizzleNV) -> Self {
        self.value.w = w;
        self
    }

    #[inline]
    pub fn build(self) -> ViewportSwizzleNV {
        self.value
    }
}

impl ops::Deref for ViewportSwizzleNVBuilder {
    type Target = ViewportSwizzleNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ViewportSwizzleNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ViewportSwizzleNVBuilder {
    type Target = ViewportSwizzleNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for ViewportWScalingNV {
    type Target = ViewportWScalingNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for ViewportWScalingNV {
    type Builder = ViewportWScalingNVBuilder;
}

/// A builder for a [`ViewportWScalingNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct ViewportWScalingNVBuilder {
    value: ViewportWScalingNV,
}

impl ViewportWScalingNVBuilder {
    #[inline]
    pub fn xcoeff(mut self, xcoeff: f32) -> Self {
        self.value.xcoeff = xcoeff;
        self
    }

    #[inline]
    pub fn ycoeff(mut self, ycoeff: f32) -> Self {
        self.value.ycoeff = ycoeff;
        self
    }

    #[inline]
    pub fn build(self) -> ViewportWScalingNV {
        self.value
    }
}

impl ops::Deref for ViewportWScalingNVBuilder {
    type Target = ViewportWScalingNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for ViewportWScalingNVBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for ViewportWScalingNVBuilder {
    type Target = ViewportWScalingNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for WaylandSurfaceCreateInfoKHR {
    type Target = WaylandSurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for WaylandSurfaceCreateInfoKHR {
    type Builder = WaylandSurfaceCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`WaylandSurfaceCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct WaylandSurfaceCreateInfoKHRBuilder<'b> {
    value: WaylandSurfaceCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> WaylandSurfaceCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: WaylandSurfaceCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn display(mut self, display: *mut wl_display) -> Self {
        self.value.display = display;
        self
    }

    #[inline]
    pub fn surface(mut self, surface: *mut wl_surface) -> Self {
        self.value.surface = surface;
        self
    }

    #[inline]
    pub fn build(self) -> WaylandSurfaceCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for WaylandSurfaceCreateInfoKHRBuilder<'b> {
    type Target = WaylandSurfaceCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for WaylandSurfaceCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for WaylandSurfaceCreateInfoKHRBuilder<'b> {
    type Target = WaylandSurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Win32KeyedMutexAcquireReleaseInfoKHR {
    type Target = Win32KeyedMutexAcquireReleaseInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for Win32KeyedMutexAcquireReleaseInfoKHR {
    type Builder = Win32KeyedMutexAcquireReleaseInfoKHRBuilder<'b>;
}

/// A builder for a [`Win32KeyedMutexAcquireReleaseInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct Win32KeyedMutexAcquireReleaseInfoKHRBuilder<'b> {
    value: Win32KeyedMutexAcquireReleaseInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> Win32KeyedMutexAcquireReleaseInfoKHRBuilder<'b> {
    #[inline]
    pub fn acquire_syncs(mut self, acquire_syncs: &'b [DeviceMemory]) -> Self {
        self.value.acquire_count = acquire_syncs.len() as u32;
        self.value.acquire_syncs = acquire_syncs.as_ptr();
        self
    }

    #[inline]
    pub fn acquire_keys(mut self, acquire_keys: &'b [u64]) -> Self {
        self.value.acquire_count = acquire_keys.len() as u32;
        self.value.acquire_keys = acquire_keys.as_ptr();
        self
    }

    #[inline]
    pub fn acquire_timeouts(mut self, acquire_timeouts: &'b [u32]) -> Self {
        self.value.acquire_count = acquire_timeouts.len() as u32;
        self.value.acquire_timeouts = acquire_timeouts.as_ptr();
        self
    }

    #[inline]
    pub fn release_syncs(mut self, release_syncs: &'b [DeviceMemory]) -> Self {
        self.value.release_count = release_syncs.len() as u32;
        self.value.release_syncs = release_syncs.as_ptr();
        self
    }

    #[inline]
    pub fn release_keys(mut self, release_keys: &'b [u64]) -> Self {
        self.value.release_count = release_keys.len() as u32;
        self.value.release_keys = release_keys.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> Win32KeyedMutexAcquireReleaseInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for Win32KeyedMutexAcquireReleaseInfoKHRBuilder<'b> {
    type Target = Win32KeyedMutexAcquireReleaseInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for Win32KeyedMutexAcquireReleaseInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for Win32KeyedMutexAcquireReleaseInfoKHRBuilder<'b> {
    type Target = Win32KeyedMutexAcquireReleaseInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Win32KeyedMutexAcquireReleaseInfoNV {
    type Target = Win32KeyedMutexAcquireReleaseInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for Win32KeyedMutexAcquireReleaseInfoNV {
    type Builder = Win32KeyedMutexAcquireReleaseInfoNVBuilder<'b>;
}

/// A builder for a [`Win32KeyedMutexAcquireReleaseInfoNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct Win32KeyedMutexAcquireReleaseInfoNVBuilder<'b> {
    value: Win32KeyedMutexAcquireReleaseInfoNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> Win32KeyedMutexAcquireReleaseInfoNVBuilder<'b> {
    #[inline]
    pub fn acquire_syncs(mut self, acquire_syncs: &'b [DeviceMemory]) -> Self {
        self.value.acquire_count = acquire_syncs.len() as u32;
        self.value.acquire_syncs = acquire_syncs.as_ptr();
        self
    }

    #[inline]
    pub fn acquire_keys(mut self, acquire_keys: &'b [u64]) -> Self {
        self.value.acquire_count = acquire_keys.len() as u32;
        self.value.acquire_keys = acquire_keys.as_ptr();
        self
    }

    #[inline]
    pub fn acquire_timeout_milliseconds(mut self, acquire_timeout_milliseconds: &'b [u32]) -> Self {
        self.value.acquire_count = acquire_timeout_milliseconds.len() as u32;
        self.value.acquire_timeout_milliseconds = acquire_timeout_milliseconds.as_ptr();
        self
    }

    #[inline]
    pub fn release_syncs(mut self, release_syncs: &'b [DeviceMemory]) -> Self {
        self.value.release_count = release_syncs.len() as u32;
        self.value.release_syncs = release_syncs.as_ptr();
        self
    }

    #[inline]
    pub fn release_keys(mut self, release_keys: &'b [u64]) -> Self {
        self.value.release_count = release_keys.len() as u32;
        self.value.release_keys = release_keys.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> Win32KeyedMutexAcquireReleaseInfoNV {
        self.value
    }
}

impl<'b> ops::Deref for Win32KeyedMutexAcquireReleaseInfoNVBuilder<'b> {
    type Target = Win32KeyedMutexAcquireReleaseInfoNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for Win32KeyedMutexAcquireReleaseInfoNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for Win32KeyedMutexAcquireReleaseInfoNVBuilder<'b> {
    type Target = Win32KeyedMutexAcquireReleaseInfoNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for Win32SurfaceCreateInfoKHR {
    type Target = Win32SurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for Win32SurfaceCreateInfoKHR {
    type Builder = Win32SurfaceCreateInfoKHRBuilder;
}

/// A builder for a [`Win32SurfaceCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct Win32SurfaceCreateInfoKHRBuilder {
    value: Win32SurfaceCreateInfoKHR,
}

impl Win32SurfaceCreateInfoKHRBuilder {
    #[inline]
    pub fn flags(mut self, flags: Win32SurfaceCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn hinstance(mut self, hinstance: HINSTANCE) -> Self {
        self.value.hinstance = hinstance;
        self
    }

    #[inline]
    pub fn hwnd(mut self, hwnd: HWND) -> Self {
        self.value.hwnd = hwnd;
        self
    }

    #[inline]
    pub fn build(self) -> Win32SurfaceCreateInfoKHR {
        self.value
    }
}

impl ops::Deref for Win32SurfaceCreateInfoKHRBuilder {
    type Target = Win32SurfaceCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for Win32SurfaceCreateInfoKHRBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for Win32SurfaceCreateInfoKHRBuilder {
    type Target = Win32SurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

/// A Vulkan struct that can be used to extend a [`WriteDescriptorSet`].
pub unsafe trait ExtendsWriteDescriptorSet: fmt::Debug {}
unsafe impl ExtendsWriteDescriptorSet for WriteDescriptorSetAccelerationStructureKHR {}
unsafe impl ExtendsWriteDescriptorSet for WriteDescriptorSetAccelerationStructureNV {}
unsafe impl ExtendsWriteDescriptorSet for WriteDescriptorSetInlineUniformBlock {}

unsafe impl Cast for WriteDescriptorSet {
    type Target = WriteDescriptorSet;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for WriteDescriptorSet {
    type Builder = WriteDescriptorSetBuilder<'b>;
}

/// A builder for a [`WriteDescriptorSet`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct WriteDescriptorSetBuilder<'b> {
    value: WriteDescriptorSet,
    _marker: PhantomData<&'b ()>,
}

impl<'b> WriteDescriptorSetBuilder<'b> {
    #[inline]
    pub fn push_next<T>(mut self, next: &'b mut impl Cast<Target = T>) -> Self
    where
        T: ExtendsWriteDescriptorSet,
    {
        self.next = merge(self.next as *mut c_void, NonNull::from(next).cast());
        self
    }

    #[inline]
    pub fn dst_set(mut self, dst_set: DescriptorSet) -> Self {
        self.value.dst_set = dst_set;
        self
    }

    #[inline]
    pub fn dst_binding(mut self, dst_binding: u32) -> Self {
        self.value.dst_binding = dst_binding;
        self
    }

    #[inline]
    pub fn dst_array_element(mut self, dst_array_element: u32) -> Self {
        self.value.dst_array_element = dst_array_element;
        self
    }

    #[inline]
    pub fn descriptor_type(mut self, descriptor_type: DescriptorType) -> Self {
        self.value.descriptor_type = descriptor_type;
        self
    }

    #[inline]
    pub fn image_info(mut self, image_info: &'b [impl Cast<Target = DescriptorImageInfo>]) -> Self {
        self.value.descriptor_count = image_info.len() as u32;
        self.value.image_info = image_info.as_ptr().cast();
        self
    }

    #[inline]
    pub fn buffer_info(
        mut self,
        buffer_info: &'b [impl Cast<Target = DescriptorBufferInfo>],
    ) -> Self {
        self.value.descriptor_count = buffer_info.len() as u32;
        self.value.buffer_info = buffer_info.as_ptr().cast();
        self
    }

    #[inline]
    pub fn texel_buffer_view(mut self, texel_buffer_view: &'b [BufferView]) -> Self {
        self.value.descriptor_count = texel_buffer_view.len() as u32;
        self.value.texel_buffer_view = texel_buffer_view.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> WriteDescriptorSet {
        self.value
    }
}

impl<'b> ops::Deref for WriteDescriptorSetBuilder<'b> {
    type Target = WriteDescriptorSet;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for WriteDescriptorSetBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for WriteDescriptorSetBuilder<'b> {
    type Target = WriteDescriptorSet;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for WriteDescriptorSetAccelerationStructureKHR {
    type Target = WriteDescriptorSetAccelerationStructureKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for WriteDescriptorSetAccelerationStructureKHR {
    type Builder = WriteDescriptorSetAccelerationStructureKHRBuilder<'b>;
}

/// A builder for a [`WriteDescriptorSetAccelerationStructureKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct WriteDescriptorSetAccelerationStructureKHRBuilder<'b> {
    value: WriteDescriptorSetAccelerationStructureKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> WriteDescriptorSetAccelerationStructureKHRBuilder<'b> {
    #[inline]
    pub fn acceleration_structures(
        mut self,
        acceleration_structures: &'b [AccelerationStructureKHR],
    ) -> Self {
        self.value.acceleration_structure_count = acceleration_structures.len() as u32;
        self.value.acceleration_structures = acceleration_structures.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> WriteDescriptorSetAccelerationStructureKHR {
        self.value
    }
}

impl<'b> ops::Deref for WriteDescriptorSetAccelerationStructureKHRBuilder<'b> {
    type Target = WriteDescriptorSetAccelerationStructureKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for WriteDescriptorSetAccelerationStructureKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for WriteDescriptorSetAccelerationStructureKHRBuilder<'b> {
    type Target = WriteDescriptorSetAccelerationStructureKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for WriteDescriptorSetAccelerationStructureNV {
    type Target = WriteDescriptorSetAccelerationStructureNV;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for WriteDescriptorSetAccelerationStructureNV {
    type Builder = WriteDescriptorSetAccelerationStructureNVBuilder<'b>;
}

/// A builder for a [`WriteDescriptorSetAccelerationStructureNV`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct WriteDescriptorSetAccelerationStructureNVBuilder<'b> {
    value: WriteDescriptorSetAccelerationStructureNV,
    _marker: PhantomData<&'b ()>,
}

impl<'b> WriteDescriptorSetAccelerationStructureNVBuilder<'b> {
    #[inline]
    pub fn acceleration_structures(
        mut self,
        acceleration_structures: &'b [AccelerationStructureNV],
    ) -> Self {
        self.value.acceleration_structure_count = acceleration_structures.len() as u32;
        self.value.acceleration_structures = acceleration_structures.as_ptr();
        self
    }

    #[inline]
    pub fn build(self) -> WriteDescriptorSetAccelerationStructureNV {
        self.value
    }
}

impl<'b> ops::Deref for WriteDescriptorSetAccelerationStructureNVBuilder<'b> {
    type Target = WriteDescriptorSetAccelerationStructureNV;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for WriteDescriptorSetAccelerationStructureNVBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for WriteDescriptorSetAccelerationStructureNVBuilder<'b> {
    type Target = WriteDescriptorSetAccelerationStructureNV;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for WriteDescriptorSetInlineUniformBlock {
    type Target = WriteDescriptorSetInlineUniformBlock;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for WriteDescriptorSetInlineUniformBlock {
    type Builder = WriteDescriptorSetInlineUniformBlockBuilder<'b>;
}

/// A builder for a [`WriteDescriptorSetInlineUniformBlock`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct WriteDescriptorSetInlineUniformBlockBuilder<'b> {
    value: WriteDescriptorSetInlineUniformBlock,
    _marker: PhantomData<&'b ()>,
}

impl<'b> WriteDescriptorSetInlineUniformBlockBuilder<'b> {
    #[inline]
    pub fn data(mut self, data: &'b [u8]) -> Self {
        self.value.data_size = data.len() as u32;
        self.value.data = data.as_ptr().cast();
        self
    }

    #[inline]
    pub fn build(self) -> WriteDescriptorSetInlineUniformBlock {
        self.value
    }
}

impl<'b> ops::Deref for WriteDescriptorSetInlineUniformBlockBuilder<'b> {
    type Target = WriteDescriptorSetInlineUniformBlock;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for WriteDescriptorSetInlineUniformBlockBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for WriteDescriptorSetInlineUniformBlockBuilder<'b> {
    type Target = WriteDescriptorSetInlineUniformBlock;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for XYColorEXT {
    type Target = XYColorEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl HasBuilder<'static> for XYColorEXT {
    type Builder = XYColorEXTBuilder;
}

/// A builder for a [`XYColorEXT`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct XYColorEXTBuilder {
    value: XYColorEXT,
}

impl XYColorEXTBuilder {
    #[inline]
    pub fn x(mut self, x: f32) -> Self {
        self.value.x = x;
        self
    }

    #[inline]
    pub fn y(mut self, y: f32) -> Self {
        self.value.y = y;
        self
    }

    #[inline]
    pub fn build(self) -> XYColorEXT {
        self.value
    }
}

impl ops::Deref for XYColorEXTBuilder {
    type Target = XYColorEXT;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl ops::DerefMut for XYColorEXTBuilder {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl Cast for XYColorEXTBuilder {
    type Target = XYColorEXT;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for XcbSurfaceCreateInfoKHR {
    type Target = XcbSurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for XcbSurfaceCreateInfoKHR {
    type Builder = XcbSurfaceCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`XcbSurfaceCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct XcbSurfaceCreateInfoKHRBuilder<'b> {
    value: XcbSurfaceCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> XcbSurfaceCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: XcbSurfaceCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn connection(mut self, connection: *mut xcb_connection_t) -> Self {
        self.value.connection = connection;
        self
    }

    #[inline]
    pub fn window(mut self, window: xcb_window_t) -> Self {
        self.value.window = window;
        self
    }

    #[inline]
    pub fn build(self) -> XcbSurfaceCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for XcbSurfaceCreateInfoKHRBuilder<'b> {
    type Target = XcbSurfaceCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for XcbSurfaceCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for XcbSurfaceCreateInfoKHRBuilder<'b> {
    type Target = XcbSurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}

unsafe impl Cast for XlibSurfaceCreateInfoKHR {
    type Target = XlibSurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self
    }
}

impl<'b> HasBuilder<'b> for XlibSurfaceCreateInfoKHR {
    type Builder = XlibSurfaceCreateInfoKHRBuilder<'b>;
}

/// A builder for a [`XlibSurfaceCreateInfoKHR`].
#[repr(transparent)]
#[derive(Copy, Clone, Debug, Default)]
pub struct XlibSurfaceCreateInfoKHRBuilder<'b> {
    value: XlibSurfaceCreateInfoKHR,
    _marker: PhantomData<&'b ()>,
}

impl<'b> XlibSurfaceCreateInfoKHRBuilder<'b> {
    #[inline]
    pub fn flags(mut self, flags: XlibSurfaceCreateFlagsKHR) -> Self {
        self.value.flags = flags;
        self
    }

    #[inline]
    pub fn dpy(mut self, dpy: &'b mut Display) -> Self {
        self.value.dpy = dpy as *mut Display;
        self
    }

    #[inline]
    pub fn window(mut self, window: Window) -> Self {
        self.value.window = window;
        self
    }

    #[inline]
    pub fn build(self) -> XlibSurfaceCreateInfoKHR {
        self.value
    }
}

impl<'b> ops::Deref for XlibSurfaceCreateInfoKHRBuilder<'b> {
    type Target = XlibSurfaceCreateInfoKHR;

    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<'b> ops::DerefMut for XlibSurfaceCreateInfoKHRBuilder<'b> {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

unsafe impl<'b> Cast for XlibSurfaceCreateInfoKHRBuilder<'b> {
    type Target = XlibSurfaceCreateInfoKHR;

    #[inline]
    fn into(self) -> Self::Target {
        self.value
    }
}
